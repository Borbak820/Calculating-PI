
Calculating-PI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000084be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00802000  000084be  00008552  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000014a3  00802110  00802110  00008662  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00008662  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000086c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007f0  00000000  00000000  00008700  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b419  00000000  00000000  00008ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004693  00000000  00000000  00014309  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005cb5  00000000  00000000  0001899c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ef4  00000000  00000000  0001e654  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000056da  00000000  00000000  00020548  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000041aa  00000000  00000000  00025c22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000718  00000000  00000000  00029dcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a1 01 	jmp	0x342	; 0x342 <__ctors_end>
       4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
       8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
       c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      10:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      14:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      18:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      1c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      20:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      24:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      28:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      2c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      30:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      34:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      38:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__vector_14>
      3c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      40:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      44:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      48:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      4c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      50:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      54:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      58:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      5c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      60:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      64:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      68:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      6c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      70:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      74:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      78:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      7c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      80:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      84:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      88:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      8c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      90:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      94:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      98:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      9c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      a0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      a4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      a8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      ac:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      b0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      b4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      b8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      bc:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      c0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      c4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      c8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      cc:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      d0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      d4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      d8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      dc:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      e0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      e4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      e8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      ec:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      f0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      f4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      f8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      fc:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     100:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     104:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     108:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     10c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     110:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     114:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     118:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     11c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     120:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     124:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     128:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     12c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     130:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     134:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     138:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     13c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     140:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     144:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     148:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     14c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     150:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     154:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     158:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     15c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     160:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     164:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     168:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     16c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     170:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     174:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     178:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     17c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     180:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     184:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     188:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     18c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     190:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     194:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     198:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     19c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1a0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1a4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1a8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1ac:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1b0:	0c 94 f8 30 	jmp	0x61f0	; 0x61f0 <__vector_108>
     1b4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1b8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1bc:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1c0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1c4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1c8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1cc:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1d0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1d4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1d8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1dc:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1e0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1e4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1e8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1ec:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1f0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1f4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1f8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1fc:	ec 1e       	adc	r14, r28
     1fe:	ec 1e       	adc	r14, r28
     200:	ec 1e       	adc	r14, r28
     202:	73 1f       	adc	r23, r19
     204:	3f 1f       	adc	r19, r31
     206:	6d 1f       	adc	r22, r29
     208:	ec 1e       	adc	r14, r28
     20a:	ec 1e       	adc	r14, r28
     20c:	73 1f       	adc	r23, r19
     20e:	3f 1f       	adc	r19, r31

00000210 <__trampolines_start>:
     210:	0c 94 6d 1f 	jmp	0x3eda	; 0x3eda <prvProcessReceivedCommands+0x1d0>
     214:	0c 94 8b 33 	jmp	0x6716	; 0x6716 <vDisplayUpdateTask>
     218:	0c 94 f4 2d 	jmp	0x5be8	; 0x5be8 <vNilakantha>
     21c:	0c 94 27 1a 	jmp	0x344e	; 0x344e <prvIdleTask>
     220:	0c 94 ec 1e 	jmp	0x3dd8	; 0x3dd8 <prvProcessReceivedCommands+0xce>
     224:	0c 94 ce 1c 	jmp	0x399c	; 0x399c <prvTimerTask>
     228:	0c 94 89 2a 	jmp	0x5512	; 0x5512 <vButtonHandler>
     22c:	0c 94 73 1f 	jmp	0x3ee6	; 0x3ee6 <prvProcessReceivedCommands+0x1dc>
     230:	0c 94 85 21 	jmp	0x430a	; 0x430a <vUserInterface>
     234:	0c 94 14 2b 	jmp	0x5628	; 0x5628 <vLeibniz>
     238:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <vEventGroupSetBitsCallback>
     23c:	0c 94 3f 1f 	jmp	0x3e7e	; 0x3e7e <prvProcessReceivedCommands+0x174>

00000240 <__trampolines_end>:
     240:	6e 61       	ori	r22, 0x1E	; 30
     242:	6e 00       	.word	0x006e	; ????

00000244 <__c.2332>:
     244:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     254:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     264:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     274:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     284:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     294:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2a4:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2b4:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2c4:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2d4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2e4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2f4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     304:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     314:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     324:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     334:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000342 <__ctors_end>:
     342:	11 24       	eor	r1, r1
     344:	1f be       	out	0x3f, r1	; 63
     346:	cf ef       	ldi	r28, 0xFF	; 255
     348:	cd bf       	out	0x3d, r28	; 61
     34a:	df e3       	ldi	r29, 0x3F	; 63
     34c:	de bf       	out	0x3e, r29	; 62
     34e:	00 e0       	ldi	r16, 0x00	; 0
     350:	0c bf       	out	0x3c, r16	; 60

00000352 <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     352:	e3 eb       	ldi	r30, 0xB3	; 179
     354:	f5 e3       	ldi	r31, 0x35	; 53
     356:	8a ea       	ldi	r24, 0xAA	; 170
     358:	90 e4       	ldi	r25, 0x40	; 64
     35a:	81 93       	st	Z+, r24
     35c:	e0 30       	cpi	r30, 0x00	; 0
     35e:	f9 07       	cpc	r31, r25
     360:	e0 f3       	brcs	.-8      	; 0x35a <init_mem+0x8>
	...

00000364 <__do_copy_data>:
     364:	11 e2       	ldi	r17, 0x21	; 33
     366:	a0 e0       	ldi	r26, 0x00	; 0
     368:	b0 e2       	ldi	r27, 0x20	; 32
     36a:	ee eb       	ldi	r30, 0xBE	; 190
     36c:	f4 e8       	ldi	r31, 0x84	; 132
     36e:	00 e0       	ldi	r16, 0x00	; 0
     370:	0b bf       	out	0x3b, r16	; 59
     372:	02 c0       	rjmp	.+4      	; 0x378 <__do_copy_data+0x14>
     374:	07 90       	elpm	r0, Z+
     376:	0d 92       	st	X+, r0
     378:	a0 31       	cpi	r26, 0x10	; 16
     37a:	b1 07       	cpc	r27, r17
     37c:	d9 f7       	brne	.-10     	; 0x374 <__do_copy_data+0x10>

0000037e <__do_clear_bss>:
     37e:	25 e3       	ldi	r18, 0x35	; 53
     380:	a0 e1       	ldi	r26, 0x10	; 16
     382:	b1 e2       	ldi	r27, 0x21	; 33
     384:	01 c0       	rjmp	.+2      	; 0x388 <.do_clear_bss_start>

00000386 <.do_clear_bss_loop>:
     386:	1d 92       	st	X+, r1

00000388 <.do_clear_bss_start>:
     388:	a3 3b       	cpi	r26, 0xB3	; 179
     38a:	b2 07       	cpc	r27, r18
     38c:	e1 f7       	brne	.-8      	; 0x386 <.do_clear_bss_loop>
     38e:	0e 94 1e 21 	call	0x423c	; 0x423c <main>
     392:	0c 94 5d 42 	jmp	0x84ba	; 0x84ba <_exit>

00000396 <__bad_interrupt>:
     396:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000039a <initButtons>:
 #define BUTTON_PRESS_SHORT			100
 #define BUTTON_PRESS_LONG			500

 

 void initButtons(void) {
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
	PORTF.DIRCLR = PIN4_bm; //SW1
     3a2:	80 ea       	ldi	r24, 0xA0	; 160
     3a4:	96 e0       	ldi	r25, 0x06	; 6
     3a6:	20 e1       	ldi	r18, 0x10	; 16
     3a8:	fc 01       	movw	r30, r24
     3aa:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN5_bm; //SW2
     3ac:	80 ea       	ldi	r24, 0xA0	; 160
     3ae:	96 e0       	ldi	r25, 0x06	; 6
     3b0:	20 e2       	ldi	r18, 0x20	; 32
     3b2:	fc 01       	movw	r30, r24
     3b4:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN6_bm; //SW3
     3b6:	80 ea       	ldi	r24, 0xA0	; 160
     3b8:	96 e0       	ldi	r25, 0x06	; 6
     3ba:	20 e4       	ldi	r18, 0x40	; 64
     3bc:	fc 01       	movw	r30, r24
     3be:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN7_bm; //SW4
     3c0:	80 ea       	ldi	r24, 0xA0	; 160
     3c2:	96 e0       	ldi	r25, 0x06	; 6
     3c4:	20 e8       	ldi	r18, 0x80	; 128
     3c6:	fc 01       	movw	r30, r24
     3c8:	22 83       	std	Z+2, r18	; 0x02
 }
     3ca:	00 00       	nop
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	08 95       	ret

000003d2 <updateButtons>:
 button_press_t b1Status;
 button_press_t b2Status;
 button_press_t b3Status;
 button_press_t b4Status;

 void updateButtons(void) {
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
	static uint16_t b1Count = 0;
	static uint16_t b2Count = 0;
	static uint16_t b3Count = 0;
	static uint16_t b4Count = 0;
	if(Button1_Value == 0) {
     3da:	80 ea       	ldi	r24, 0xA0	; 160
     3dc:	96 e0       	ldi	r25, 0x06	; 6
     3de:	fc 01       	movw	r30, r24
     3e0:	80 85       	ldd	r24, Z+8	; 0x08
     3e2:	88 2f       	mov	r24, r24
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	80 71       	andi	r24, 0x10	; 16
     3e8:	99 27       	eor	r25, r25
     3ea:	95 95       	asr	r25
     3ec:	87 95       	ror	r24
     3ee:	95 95       	asr	r25
     3f0:	87 95       	ror	r24
     3f2:	95 95       	asr	r25
     3f4:	87 95       	ror	r24
     3f6:	95 95       	asr	r25
     3f8:	87 95       	ror	r24
     3fa:	89 2b       	or	r24, r25
     3fc:	89 f4       	brne	.+34     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		if(b1Count < 60000) {
     3fe:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <__data_end>
     402:	90 91 11 21 	lds	r25, 0x2111	; 0x802111 <__data_end+0x1>
     406:	80 36       	cpi	r24, 0x60	; 96
     408:	9a 4e       	sbci	r25, 0xEA	; 234
     40a:	20 f5       	brcc	.+72     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			b1Count++;
     40c:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <__data_end>
     410:	90 91 11 21 	lds	r25, 0x2111	; 0x802111 <__data_end+0x1>
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	80 93 10 21 	sts	0x2110, r24	; 0x802110 <__data_end>
     41a:	90 93 11 21 	sts	0x2111, r25	; 0x802111 <__data_end+0x1>
     41e:	1a c0       	rjmp	.+52     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		}
	} else {
		if(b1Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     420:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <__data_end>
     424:	90 91 11 21 	lds	r25, 0x2111	; 0x802111 <__data_end+0x1>
     428:	0b 97       	sbiw	r24, 0x0b	; 11
     42a:	68 f0       	brcs	.+26     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			if(b1Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     42c:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <__data_end>
     430:	90 91 11 21 	lds	r25, 0x2111	; 0x802111 <__data_end+0x1>
     434:	c3 97       	sbiw	r24, 0x33	; 51
     436:	18 f0       	brcs	.+6      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
				//Button was pressed Long
				b1Status = LONG_PRESSED;
     438:	10 92 5e 35 	sts	0x355E, r1	; 0x80355e <b1Status>
     43c:	07 c0       	rjmp	.+14     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			} else {
				//Button was pressed Short	
				b1Status = SHORT_PRESSED;
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	80 93 5e 35 	sts	0x355E, r24	; 0x80355e <b1Status>
     444:	03 c0       	rjmp	.+6      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			}
		} else {
			b1Status = NOT_PRESSED;
     446:	82 e0       	ldi	r24, 0x02	; 2
     448:	80 93 5e 35 	sts	0x355E, r24	; 0x80355e <b1Status>
		}
		b1Count = 0;
     44c:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <__data_end>
     450:	10 92 11 21 	sts	0x2111, r1	; 0x802111 <__data_end+0x1>
	}
	if(Button2_Value == 0) {
     454:	80 ea       	ldi	r24, 0xA0	; 160
     456:	96 e0       	ldi	r25, 0x06	; 6
     458:	fc 01       	movw	r30, r24
     45a:	80 85       	ldd	r24, Z+8	; 0x08
     45c:	88 2f       	mov	r24, r24
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	80 72       	andi	r24, 0x20	; 32
     462:	99 27       	eor	r25, r25
     464:	95 95       	asr	r25
     466:	87 95       	ror	r24
     468:	95 95       	asr	r25
     46a:	87 95       	ror	r24
     46c:	95 95       	asr	r25
     46e:	87 95       	ror	r24
     470:	95 95       	asr	r25
     472:	87 95       	ror	r24
     474:	95 95       	asr	r25
     476:	87 95       	ror	r24
     478:	89 2b       	or	r24, r25
     47a:	89 f4       	brne	.+34     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
		if(b2Count < 60000) {
     47c:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <b2Count.3830>
     480:	90 91 13 21 	lds	r25, 0x2113	; 0x802113 <b2Count.3830+0x1>
     484:	80 36       	cpi	r24, 0x60	; 96
     486:	9a 4e       	sbci	r25, 0xEA	; 234
     488:	20 f5       	brcc	.+72     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
			b2Count++;
     48a:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <b2Count.3830>
     48e:	90 91 13 21 	lds	r25, 0x2113	; 0x802113 <b2Count.3830+0x1>
     492:	01 96       	adiw	r24, 0x01	; 1
     494:	80 93 12 21 	sts	0x2112, r24	; 0x802112 <b2Count.3830>
     498:	90 93 13 21 	sts	0x2113, r25	; 0x802113 <b2Count.3830+0x1>
     49c:	1a c0       	rjmp	.+52     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
		}
	} else {
		if(b2Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     49e:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <b2Count.3830>
     4a2:	90 91 13 21 	lds	r25, 0x2113	; 0x802113 <b2Count.3830+0x1>
     4a6:	0b 97       	sbiw	r24, 0x0b	; 11
     4a8:	68 f0       	brcs	.+26     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
			if(b2Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     4aa:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <b2Count.3830>
     4ae:	90 91 13 21 	lds	r25, 0x2113	; 0x802113 <b2Count.3830+0x1>
     4b2:	c3 97       	sbiw	r24, 0x33	; 51
     4b4:	18 f0       	brcs	.+6      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
				//Button was pressed Long
				b2Status = LONG_PRESSED;
     4b6:	10 92 5f 35 	sts	0x355F, r1	; 0x80355f <b2Status>
     4ba:	07 c0       	rjmp	.+14     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
				} else {
				//Button was pressed Short
				b2Status = SHORT_PRESSED;
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	80 93 5f 35 	sts	0x355F, r24	; 0x80355f <b2Status>
     4c2:	03 c0       	rjmp	.+6      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
			}
		} else {
			b2Status = NOT_PRESSED;			
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	80 93 5f 35 	sts	0x355F, r24	; 0x80355f <b2Status>
		}
		b2Count = 0;
     4ca:	10 92 12 21 	sts	0x2112, r1	; 0x802112 <b2Count.3830>
     4ce:	10 92 13 21 	sts	0x2113, r1	; 0x802113 <b2Count.3830+0x1>
	}
	if(Button3_Value == 0) {
     4d2:	80 ea       	ldi	r24, 0xA0	; 160
     4d4:	96 e0       	ldi	r25, 0x06	; 6
     4d6:	fc 01       	movw	r30, r24
     4d8:	80 85       	ldd	r24, Z+8	; 0x08
     4da:	88 2f       	mov	r24, r24
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	80 74       	andi	r24, 0x40	; 64
     4e0:	99 27       	eor	r25, r25
     4e2:	08 2e       	mov	r0, r24
     4e4:	89 2f       	mov	r24, r25
     4e6:	00 0c       	add	r0, r0
     4e8:	88 1f       	adc	r24, r24
     4ea:	99 0b       	sbc	r25, r25
     4ec:	00 0c       	add	r0, r0
     4ee:	88 1f       	adc	r24, r24
     4f0:	99 1f       	adc	r25, r25
     4f2:	89 2b       	or	r24, r25
     4f4:	89 f4       	brne	.+34     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
		if(b3Count < 60000) {
     4f6:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <b3Count.3831>
     4fa:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <b3Count.3831+0x1>
     4fe:	80 36       	cpi	r24, 0x60	; 96
     500:	9a 4e       	sbci	r25, 0xEA	; 234
     502:	20 f5       	brcc	.+72     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
			b3Count++;
     504:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <b3Count.3831>
     508:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <b3Count.3831+0x1>
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	80 93 14 21 	sts	0x2114, r24	; 0x802114 <b3Count.3831>
     512:	90 93 15 21 	sts	0x2115, r25	; 0x802115 <b3Count.3831+0x1>
     516:	1a c0       	rjmp	.+52     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
		}
	} else {
		if(b3Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     518:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <b3Count.3831>
     51c:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <b3Count.3831+0x1>
     520:	0b 97       	sbiw	r24, 0x0b	; 11
     522:	68 f0       	brcs	.+26     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
			if(b3Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     524:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <b3Count.3831>
     528:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <b3Count.3831+0x1>
     52c:	c3 97       	sbiw	r24, 0x33	; 51
     52e:	18 f0       	brcs	.+6      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
				//Button was pressed Long
				b3Status = LONG_PRESSED;
     530:	10 92 60 35 	sts	0x3560, r1	; 0x803560 <b3Status>
     534:	07 c0       	rjmp	.+14     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
				} else {
				//Button was pressed Short
				b3Status = SHORT_PRESSED;
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	80 93 60 35 	sts	0x3560, r24	; 0x803560 <b3Status>
     53c:	03 c0       	rjmp	.+6      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
			}
		} else {
			b3Status = NOT_PRESSED;
     53e:	82 e0       	ldi	r24, 0x02	; 2
     540:	80 93 60 35 	sts	0x3560, r24	; 0x803560 <b3Status>
		}
		b3Count = 0;
     544:	10 92 14 21 	sts	0x2114, r1	; 0x802114 <b3Count.3831>
     548:	10 92 15 21 	sts	0x2115, r1	; 0x802115 <b3Count.3831+0x1>
	}
	if(Button4_Value == 0) {
     54c:	80 ea       	ldi	r24, 0xA0	; 160
     54e:	96 e0       	ldi	r25, 0x06	; 6
     550:	fc 01       	movw	r30, r24
     552:	80 85       	ldd	r24, Z+8	; 0x08
     554:	88 23       	and	r24, r24
     556:	8c f0       	brlt	.+34     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
		if(b4Count < 60000) {
     558:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <b4Count.3832>
     55c:	90 91 17 21 	lds	r25, 0x2117	; 0x802117 <b4Count.3832+0x1>
     560:	80 36       	cpi	r24, 0x60	; 96
     562:	9a 4e       	sbci	r25, 0xEA	; 234
     564:	20 f5       	brcc	.+72     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
			b4Count++;
     566:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <b4Count.3832>
     56a:	90 91 17 21 	lds	r25, 0x2117	; 0x802117 <b4Count.3832+0x1>
     56e:	01 96       	adiw	r24, 0x01	; 1
     570:	80 93 16 21 	sts	0x2116, r24	; 0x802116 <b4Count.3832>
     574:	90 93 17 21 	sts	0x2117, r25	; 0x802117 <b4Count.3832+0x1>
		} else {
			b4Status = NOT_PRESSED;
		}
		b4Count = 0;
	}
 }
     578:	1a c0       	rjmp	.+52     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
	if(Button4_Value == 0) {
		if(b4Count < 60000) {
			b4Count++;
		}
	} else {
		if(b4Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     57a:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <b4Count.3832>
     57e:	90 91 17 21 	lds	r25, 0x2117	; 0x802117 <b4Count.3832+0x1>
     582:	0b 97       	sbiw	r24, 0x0b	; 11
     584:	68 f0       	brcs	.+26     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
			if(b4Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     586:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <b4Count.3832>
     58a:	90 91 17 21 	lds	r25, 0x2117	; 0x802117 <b4Count.3832+0x1>
     58e:	c3 97       	sbiw	r24, 0x33	; 51
     590:	18 f0       	brcs	.+6      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
				//Button was pressed Long
				b4Status = LONG_PRESSED;
     592:	10 92 61 35 	sts	0x3561, r1	; 0x803561 <b4Status>
     596:	07 c0       	rjmp	.+14     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
				} else {
				//Button was pressed Short
				b4Status = SHORT_PRESSED;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	80 93 61 35 	sts	0x3561, r24	; 0x803561 <b4Status>
     59e:	03 c0       	rjmp	.+6      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
			}
		} else {
			b4Status = NOT_PRESSED;
     5a0:	82 e0       	ldi	r24, 0x02	; 2
     5a2:	80 93 61 35 	sts	0x3561, r24	; 0x803561 <b4Status>
		}
		b4Count = 0;
     5a6:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <b4Count.3832>
     5aa:	10 92 17 21 	sts	0x2117, r1	; 0x802117 <b4Count.3832+0x1>
	}
 }
     5ae:	00 00       	nop
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <getButtonPress>:

 button_press_t getButtonPress(button_t button) {
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	1f 92       	push	r1
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
     5c0:	89 83       	std	Y+1, r24	; 0x01
	switch(button) {
     5c2:	89 81       	ldd	r24, Y+1	; 0x01
     5c4:	88 2f       	mov	r24, r24
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	81 30       	cpi	r24, 0x01	; 1
     5ca:	91 05       	cpc	r25, r1
     5cc:	79 f0       	breq	.+30     	; 0x5ec <getButtonPress+0x36>
     5ce:	82 30       	cpi	r24, 0x02	; 2
     5d0:	91 05       	cpc	r25, r1
     5d2:	1c f4       	brge	.+6      	; 0x5da <getButtonPress+0x24>
     5d4:	89 2b       	or	r24, r25
     5d6:	39 f0       	breq	.+14     	; 0x5e6 <getButtonPress+0x30>
     5d8:	12 c0       	rjmp	.+36     	; 0x5fe <getButtonPress+0x48>
     5da:	82 30       	cpi	r24, 0x02	; 2
     5dc:	91 05       	cpc	r25, r1
     5de:	49 f0       	breq	.+18     	; 0x5f2 <getButtonPress+0x3c>
     5e0:	03 97       	sbiw	r24, 0x03	; 3
     5e2:	51 f0       	breq	.+20     	; 0x5f8 <getButtonPress+0x42>
     5e4:	0c c0       	rjmp	.+24     	; 0x5fe <getButtonPress+0x48>
		case BUTTON1:
			return b1Status;
     5e6:	80 91 5e 35 	lds	r24, 0x355E	; 0x80355e <b1Status>
     5ea:	0a c0       	rjmp	.+20     	; 0x600 <getButtonPress+0x4a>
		break;
		case BUTTON2:
			return b2Status;
     5ec:	80 91 5f 35 	lds	r24, 0x355F	; 0x80355f <b2Status>
     5f0:	07 c0       	rjmp	.+14     	; 0x600 <getButtonPress+0x4a>
		break;
		case BUTTON3:
			return b3Status;
     5f2:	80 91 60 35 	lds	r24, 0x3560	; 0x803560 <b3Status>
     5f6:	04 c0       	rjmp	.+8      	; 0x600 <getButtonPress+0x4a>
		break;
		case BUTTON4:
			return b4Status;
     5f8:	80 91 61 35 	lds	r24, 0x3561	; 0x803561 <b4Status>
     5fc:	01 c0       	rjmp	.+2      	; 0x600 <getButtonPress+0x4a>
		break;
	}
	return NOT_PRESSED;
     5fe:	82 e0       	ldi	r24, 0x02	; 2
     600:	0f 90       	pop	r0
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	08 95       	ret

00000608 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     608:	0f 93       	push	r16
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	00 d0       	rcall	.+0      	; 0x610 <CCPWrite+0x8>
     610:	00 d0       	rcall	.+0      	; 0x612 <CCPWrite+0xa>
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	8c 83       	std	Y+4, r24	; 0x04
     618:	9d 83       	std	Y+5, r25	; 0x05
     61a:	6e 83       	std	Y+6, r22	; 0x06

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     61c:	8f e3       	ldi	r24, 0x3F	; 63
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	fc 01       	movw	r30, r24
     622:	80 81       	ld	r24, Z
     624:	8b 83       	std	Y+3, r24	; 0x03
     626:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
     628:	8c 81       	ldd	r24, Y+4	; 0x04
     62a:	9d 81       	ldd	r25, Y+5	; 0x05
     62c:	89 83       	std	Y+1, r24	; 0x01
     62e:	9a 83       	std	Y+2, r25	; 0x02
#ifdef RAMPZ
	RAMPZ = 0;
     630:	8b e3       	ldi	r24, 0x3B	; 59
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	fc 01       	movw	r30, r24
     636:	10 82       	st	Z, r1
#endif
	asm volatile(
     638:	89 81       	ldd	r24, Y+1	; 0x01
     63a:	9a 81       	ldd	r25, Y+2	; 0x02
     63c:	2e 81       	ldd	r18, Y+6	; 0x06
     63e:	fc 01       	movw	r30, r24
     640:	08 ed       	ldi	r16, 0xD8	; 216
     642:	04 bf       	out	0x34, r16	; 52
     644:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     646:	8f e3       	ldi	r24, 0x3F	; 63
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	2b 81       	ldd	r18, Y+3	; 0x03
     64c:	fc 01       	movw	r30, r24
     64e:	20 83       	st	Z, r18
#endif
}
     650:	00 00       	nop
     652:	26 96       	adiw	r28, 0x06	; 6
     654:	cd bf       	out	0x3d, r28	; 61
     656:	de bf       	out	0x3e, r29	; 62
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	0f 91       	pop	r16
     65e:	08 95       	ret

00000660 <CLKSYS_XOSC_Config>:
 *                             external clock) and startup times.
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	00 d0       	rcall	.+0      	; 0x666 <CLKSYS_XOSC_Config+0x6>
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
     66a:	89 83       	std	Y+1, r24	; 0x01
     66c:	6a 83       	std	Y+2, r22	; 0x02
     66e:	4b 83       	std	Y+3, r20	; 0x03
	OSC.XOSCCTRL = (uint8_t) freqRange |
     670:	80 e5       	ldi	r24, 0x50	; 80
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	2a 81       	ldd	r18, Y+2	; 0x02
     676:	22 23       	and	r18, r18
     678:	11 f0       	breq	.+4      	; 0x67e <CLKSYS_XOSC_Config+0x1e>
     67a:	20 e2       	ldi	r18, 0x20	; 32
     67c:	01 c0       	rjmp	.+2      	; 0x680 <CLKSYS_XOSC_Config+0x20>
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	39 81       	ldd	r19, Y+1	; 0x01
     682:	32 2b       	or	r19, r18
     684:	2b 81       	ldd	r18, Y+3	; 0x03
     686:	23 2b       	or	r18, r19
     688:	fc 01       	movw	r30, r24
     68a:	22 83       	std	Z+2, r18	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
     68c:	00 00       	nop
     68e:	23 96       	adiw	r28, 0x03	; 3
     690:	cd bf       	out	0x3d, r28	; 61
     692:	de bf       	out	0x3e, r29	; 62
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	08 95       	ret

0000069a <CLKSYS_PLL_Config>:
 *                      must be above 0.4MHz.
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	1f 92       	push	r1
     6a0:	1f 92       	push	r1
     6a2:	cd b7       	in	r28, 0x3d	; 61
     6a4:	de b7       	in	r29, 0x3e	; 62
     6a6:	89 83       	std	Y+1, r24	; 0x01
     6a8:	6a 83       	std	Y+2, r22	; 0x02
	factor &= OSC_PLLFAC_gm;
     6aa:	8a 81       	ldd	r24, Y+2	; 0x02
     6ac:	8f 71       	andi	r24, 0x1F	; 31
     6ae:	8a 83       	std	Y+2, r24	; 0x02
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     6b0:	80 e5       	ldi	r24, 0x50	; 80
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	39 81       	ldd	r19, Y+1	; 0x01
     6b6:	2a 81       	ldd	r18, Y+2	; 0x02
     6b8:	23 2b       	or	r18, r19
     6ba:	fc 01       	movw	r30, r24
     6bc:	25 83       	std	Z+5, r18	; 0x05
}
     6be:	00 00       	nop
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <CLKSYS_Disable>:
 *                 OSC_XOSCEN_bm, OSC_PLLEN_bm.
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	1f 92       	push	r1
     6d0:	1f 92       	push	r1
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
     6d6:	8a 83       	std	Y+2, r24	; 0x02
	OSC.CTRL &= ~oscSel;
     6d8:	80 e5       	ldi	r24, 0x50	; 80
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	20 e5       	ldi	r18, 0x50	; 80
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	f9 01       	movw	r30, r18
     6e2:	20 81       	ld	r18, Z
     6e4:	32 2f       	mov	r19, r18
     6e6:	2a 81       	ldd	r18, Y+2	; 0x02
     6e8:	20 95       	com	r18
     6ea:	23 23       	and	r18, r19
     6ec:	fc 01       	movw	r30, r24
     6ee:	20 83       	st	Z, r18
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     6f0:	80 e5       	ldi	r24, 0x50	; 80
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	fc 01       	movw	r30, r24
     6f6:	90 81       	ld	r25, Z
     6f8:	8a 81       	ldd	r24, Y+2	; 0x02
     6fa:	89 23       	and	r24, r25
     6fc:	89 83       	std	Y+1, r24	; 0x01
	return clkEnabled;
     6fe:	89 81       	ldd	r24, Y+1	; 0x01
}
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	00 d0       	rcall	.+0      	; 0x710 <CLKSYS_Prescalers_Config+0x6>
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
     714:	8a 83       	std	Y+2, r24	; 0x02
     716:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     718:	9a 81       	ldd	r25, Y+2	; 0x02
     71a:	8b 81       	ldd	r24, Y+3	; 0x03
     71c:	89 2b       	or	r24, r25
     71e:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.PSCTRL, PSconfig );
     720:	69 81       	ldd	r22, Y+1	; 0x01
     722:	81 e4       	ldi	r24, 0x41	; 65
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 04 03 	call	0x608	; 0x608 <CCPWrite>
}
     72a:	00 00       	nop
     72c:	23 96       	adiw	r28, 0x03	; 3
     72e:	cd bf       	out	0x3d, r28	; 61
     730:	de bf       	out	0x3e, r29	; 62
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	08 95       	ret

00000738 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	1f 92       	push	r1
     73e:	1f 92       	push	r1
     740:	cd b7       	in	r28, 0x3d	; 61
     742:	de b7       	in	r29, 0x3e	; 62
     744:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     746:	80 e4       	ldi	r24, 0x40	; 64
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	fc 01       	movw	r30, r24
     74c:	80 81       	ld	r24, Z
     74e:	98 2f       	mov	r25, r24
     750:	98 7f       	andi	r25, 0xF8	; 248
     752:	8a 81       	ldd	r24, Y+2	; 0x02
     754:	89 2b       	or	r24, r25
     756:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.CTRL, clkCtrl );
     758:	69 81       	ldd	r22, Y+1	; 0x01
     75a:	80 e4       	ldi	r24, 0x40	; 64
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 04 03 	call	0x608	; 0x608 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     762:	80 e4       	ldi	r24, 0x40	; 64
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	fc 01       	movw	r30, r24
     768:	90 81       	ld	r25, Z
     76a:	8a 81       	ldd	r24, Y+2	; 0x02
     76c:	89 23       	and	r24, r25
     76e:	89 83       	std	Y+1, r24	; 0x01
	return clkCtrl;
     770:	89 81       	ldd	r24, Y+1	; 0x01
}
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	08 95       	ret

0000077c <TC0_ConfigClockSource>:
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
}
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	00 d0       	rcall	.+0      	; 0x782 <TC0_ConfigClockSource+0x6>
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	89 83       	std	Y+1, r24	; 0x01
     788:	9a 83       	std	Y+2, r25	; 0x02
     78a:	6b 83       	std	Y+3, r22	; 0x03
     78c:	89 81       	ldd	r24, Y+1	; 0x01
     78e:	9a 81       	ldd	r25, Y+2	; 0x02
     790:	fc 01       	movw	r30, r24
     792:	80 81       	ld	r24, Z
     794:	98 2f       	mov	r25, r24
     796:	90 7f       	andi	r25, 0xF0	; 240
     798:	8b 81       	ldd	r24, Y+3	; 0x03
     79a:	89 2b       	or	r24, r25
     79c:	28 2f       	mov	r18, r24
     79e:	89 81       	ldd	r24, Y+1	; 0x01
     7a0:	9a 81       	ldd	r25, Y+2	; 0x02
     7a2:	fc 01       	movw	r30, r24
     7a4:	20 83       	st	Z, r18
     7a6:	00 00       	nop
     7a8:	23 96       	adiw	r28, 0x03	; 3
     7aa:	cd bf       	out	0x3d, r28	; 61
     7ac:	de bf       	out	0x3e, r29	; 62
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	08 95       	ret

000007b4 <TC0_ConfigWGM>:
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	00 d0       	rcall	.+0      	; 0x7ba <TC0_ConfigWGM+0x6>
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	89 83       	std	Y+1, r24	; 0x01
     7c0:	9a 83       	std	Y+2, r25	; 0x02
     7c2:	6b 83       	std	Y+3, r22	; 0x03
     7c4:	89 81       	ldd	r24, Y+1	; 0x01
     7c6:	9a 81       	ldd	r25, Y+2	; 0x02
     7c8:	fc 01       	movw	r30, r24
     7ca:	81 81       	ldd	r24, Z+1	; 0x01
     7cc:	98 2f       	mov	r25, r24
     7ce:	98 7f       	andi	r25, 0xF8	; 248
     7d0:	8b 81       	ldd	r24, Y+3	; 0x03
     7d2:	89 2b       	or	r24, r25
     7d4:	28 2f       	mov	r18, r24
     7d6:	89 81       	ldd	r24, Y+1	; 0x01
     7d8:	9a 81       	ldd	r25, Y+2	; 0x02
     7da:	fc 01       	movw	r30, r24
     7dc:	21 83       	std	Z+1, r18	; 0x01
     7de:	00 00       	nop
     7e0:	23 96       	adiw	r28, 0x03	; 3
     7e2:	cd bf       	out	0x3d, r28	; 61
     7e4:	de bf       	out	0x3e, r29	; 62
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	08 95       	ret

000007ec <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	00 d0       	rcall	.+0      	; 0x7f2 <TC0_SetOverflowIntLevel+0x6>
     7f2:	cd b7       	in	r28, 0x3d	; 61
     7f4:	de b7       	in	r29, 0x3e	; 62
     7f6:	89 83       	std	Y+1, r24	; 0x01
     7f8:	9a 83       	std	Y+2, r25	; 0x02
     7fa:	6b 83       	std	Y+3, r22	; 0x03
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     7fc:	89 81       	ldd	r24, Y+1	; 0x01
     7fe:	9a 81       	ldd	r25, Y+2	; 0x02
     800:	fc 01       	movw	r30, r24
     802:	86 81       	ldd	r24, Z+6	; 0x06
     804:	98 2f       	mov	r25, r24
     806:	9c 7f       	andi	r25, 0xFC	; 252
     808:	8b 81       	ldd	r24, Y+3	; 0x03
     80a:	89 2b       	or	r24, r25
     80c:	28 2f       	mov	r18, r24
     80e:	89 81       	ldd	r24, Y+1	; 0x01
     810:	9a 81       	ldd	r25, Y+2	; 0x02
     812:	fc 01       	movw	r30, r24
     814:	26 83       	std	Z+6, r18	; 0x06
}
     816:	00 00       	nop
     818:	23 96       	adiw	r28, 0x03	; 3
     81a:	cd bf       	out	0x3d, r28	; 61
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	08 95       	ret

00000824 <vApplicationStackOverflowHook>:
 {
	 (void)errCode;

	 uint8_t a=42; (void)a;

 }
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	00 d0       	rcall	.+0      	; 0x82a <vApplicationStackOverflowHook+0x6>
     82a:	1f 92       	push	r1
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
     830:	89 83       	std	Y+1, r24	; 0x01
     832:	9a 83       	std	Y+2, r25	; 0x02
     834:	6b 83       	std	Y+3, r22	; 0x03
     836:	7c 83       	std	Y+4, r23	; 0x04
     838:	8b e2       	ldi	r24, 0x2B	; 43
     83a:	0e 94 26 04 	call	0x84c	; 0x84c <error>
     83e:	00 00       	nop
     840:	24 96       	adiw	r28, 0x04	; 4
     842:	cd bf       	out	0x3d, r28	; 61
     844:	de bf       	out	0x3e, r29	; 62
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	08 95       	ret

0000084c <error>:

 //----------------------------------------------
 //
 void error(uint8_t errCode)
 {
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	1f 92       	push	r1
     852:	1f 92       	push	r1
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
     858:	8a 83       	std	Y+2, r24	; 0x02
	 uint8_t a;

	 if(errCode==ERR_STACK_OVERFLOW)
     85a:	8a 81       	ldd	r24, Y+2	; 0x02
     85c:	8b 32       	cpi	r24, 0x2B	; 43
     85e:	19 f4       	brne	.+6      	; 0x866 <error+0x1a>
	 a = 1;
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	89 83       	std	Y+1, r24	; 0x01
     864:	0e c0       	rjmp	.+28     	; 0x882 <error+0x36>
	 else if(errCode==ERR_QUEUE_SEND_FAILED)
     866:	8a 81       	ldd	r24, Y+2	; 0x02
     868:	8c 32       	cpi	r24, 0x2C	; 44
     86a:	19 f4       	brne	.+6      	; 0x872 <error+0x26>
	 a = 2;
     86c:	82 e0       	ldi	r24, 0x02	; 2
     86e:	89 83       	std	Y+1, r24	; 0x01
     870:	08 c0       	rjmp	.+16     	; 0x882 <error+0x36>
	 else if(errCode==ERR_BYTES_SHOULD_BE_AVAILABLE)
     872:	8a 81       	ldd	r24, Y+2	; 0x02
     874:	8f 32       	cpi	r24, 0x2F	; 47
     876:	19 f4       	brne	.+6      	; 0x87e <error+0x32>
	 a = 3;
     878:	83 e0       	ldi	r24, 0x03	; 3
     87a:	89 83       	std	Y+1, r24	; 0x01
     87c:	02 c0       	rjmp	.+4      	; 0x882 <error+0x36>
	 else
	 a = 4;
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	89 83       	std	Y+1, r24	; 0x01
	 // TODO from here:
	 //
	 // - log the occurance of any error in flash mem (inc counter)
	 // - print a message

	 software_reset();
     882:	0e 94 49 04 	call	0x892	; 0x892 <software_reset>
 }
     886:	00 00       	nop
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	08 95       	ret

00000892 <software_reset>:

 //----------------------------------------------
 //
 void software_reset(void)
 {	 
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62
	 asm("nop");
     89a:	00 00       	nop
	 CPU_CCP  = CCP_IOREG_gc;
     89c:	84 e3       	ldi	r24, 0x34	; 52
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	28 ed       	ldi	r18, 0xD8	; 216
     8a2:	fc 01       	movw	r30, r24
     8a4:	20 83       	st	Z, r18
	 RST.CTRL = RST_SWRST_bm ;	 
     8a6:	88 e7       	ldi	r24, 0x78	; 120
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	21 e0       	ldi	r18, 0x01	; 1
     8ac:	fc 01       	movw	r30, r24
     8ae:	21 83       	std	Z+1, r18	; 0x01
     8b0:	00 00       	nop
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	08 95       	ret

000008b8 <xEventGroupCreate>:
/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	1f 92       	push	r1
     8be:	1f 92       	push	r1
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	80 e1       	ldi	r24, 0x10	; 16
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 99 07 	call	0xf32	; 0xf32 <pvPortMalloc>
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	9a 83       	std	Y+2, r25	; 0x02
     8d0:	89 81       	ldd	r24, Y+1	; 0x01
     8d2:	9a 81       	ldd	r25, Y+2	; 0x02
     8d4:	89 2b       	or	r24, r25
     8d6:	61 f0       	breq	.+24     	; 0x8f0 <xEventGroupCreate+0x38>
     8d8:	89 81       	ldd	r24, Y+1	; 0x01
     8da:	9a 81       	ldd	r25, Y+2	; 0x02
     8dc:	fc 01       	movw	r30, r24
     8de:	10 82       	st	Z, r1
     8e0:	11 82       	std	Z+1, r1	; 0x01
     8e2:	12 82       	std	Z+2, r1	; 0x02
     8e4:	13 82       	std	Z+3, r1	; 0x03
     8e6:	89 81       	ldd	r24, Y+1	; 0x01
     8e8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ea:	04 96       	adiw	r24, 0x04	; 4
     8ec:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vListInitialise>
     8f0:	89 81       	ldd	r24, Y+1	; 0x01
     8f2:	9a 81       	ldd	r25, Y+2	; 0x02
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	08 95       	ret

000008fe <xEventGroupWaitBits>:
     8fe:	cf 92       	push	r12
     900:	df 92       	push	r13
     902:	ef 92       	push	r14
     904:	ff 92       	push	r15
     906:	0f 93       	push	r16
     908:	1f 93       	push	r17
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	cd b7       	in	r28, 0x3d	; 61
     910:	de b7       	in	r29, 0x3e	; 62
     912:	6d 97       	sbiw	r28, 0x1d	; 29
     914:	cd bf       	out	0x3d, r28	; 61
     916:	de bf       	out	0x3e, r29	; 62
     918:	8a 8b       	std	Y+18, r24	; 0x12
     91a:	9b 8b       	std	Y+19, r25	; 0x13
     91c:	4c 8b       	std	Y+20, r20	; 0x14
     91e:	5d 8b       	std	Y+21, r21	; 0x15
     920:	6e 8b       	std	Y+22, r22	; 0x16
     922:	7f 8b       	std	Y+23, r23	; 0x17
     924:	28 8f       	std	Y+24, r18	; 0x18
     926:	09 8f       	std	Y+25, r16	; 0x19
     928:	ca 8e       	std	Y+26, r12	; 0x1a
     92a:	db 8e       	std	Y+27, r13	; 0x1b
     92c:	ec 8e       	std	Y+28, r14	; 0x1c
     92e:	fd 8e       	std	Y+29, r15	; 0x1d
     930:	8a 89       	ldd	r24, Y+18	; 0x12
     932:	9b 89       	ldd	r25, Y+19	; 0x13
     934:	89 87       	std	Y+9, r24	; 0x09
     936:	9a 87       	std	Y+10, r25	; 0x0a
     938:	1d 82       	std	Y+5, r1	; 0x05
     93a:	1e 82       	std	Y+6, r1	; 0x06
     93c:	1f 82       	std	Y+7, r1	; 0x07
     93e:	18 86       	std	Y+8, r1	; 0x08
     940:	1b 86       	std	Y+11, r1	; 0x0b
     942:	0e 94 40 15 	call	0x2a80	; 0x2a80 <vTaskSuspendAll>
     946:	89 85       	ldd	r24, Y+9	; 0x09
     948:	9a 85       	ldd	r25, Y+10	; 0x0a
     94a:	fc 01       	movw	r30, r24
     94c:	80 81       	ld	r24, Z
     94e:	91 81       	ldd	r25, Z+1	; 0x01
     950:	a2 81       	ldd	r26, Z+2	; 0x02
     952:	b3 81       	ldd	r27, Z+3	; 0x03
     954:	8c 87       	std	Y+12, r24	; 0x0c
     956:	9d 87       	std	Y+13, r25	; 0x0d
     958:	ae 87       	std	Y+14, r26	; 0x0e
     95a:	bf 87       	std	Y+15, r27	; 0x0f
     95c:	2c 89       	ldd	r18, Y+20	; 0x14
     95e:	3d 89       	ldd	r19, Y+21	; 0x15
     960:	4e 89       	ldd	r20, Y+22	; 0x16
     962:	5f 89       	ldd	r21, Y+23	; 0x17
     964:	8c 85       	ldd	r24, Y+12	; 0x0c
     966:	9d 85       	ldd	r25, Y+13	; 0x0d
     968:	ae 85       	ldd	r26, Y+14	; 0x0e
     96a:	bf 85       	ldd	r27, Y+15	; 0x0f
     96c:	09 8d       	ldd	r16, Y+25	; 0x19
     96e:	bc 01       	movw	r22, r24
     970:	cd 01       	movw	r24, r26
     972:	0e 94 28 07 	call	0xe50	; 0xe50 <prvTestWaitCondition>
     976:	88 8b       	std	Y+16, r24	; 0x10
     978:	88 89       	ldd	r24, Y+16	; 0x10
     97a:	88 23       	and	r24, r24
     97c:	59 f1       	breq	.+86     	; 0x9d4 <xEventGroupWaitBits+0xd6>
     97e:	8c 85       	ldd	r24, Y+12	; 0x0c
     980:	9d 85       	ldd	r25, Y+13	; 0x0d
     982:	ae 85       	ldd	r26, Y+14	; 0x0e
     984:	bf 85       	ldd	r27, Y+15	; 0x0f
     986:	89 83       	std	Y+1, r24	; 0x01
     988:	9a 83       	std	Y+2, r25	; 0x02
     98a:	ab 83       	std	Y+3, r26	; 0x03
     98c:	bc 83       	std	Y+4, r27	; 0x04
     98e:	1a 8e       	std	Y+26, r1	; 0x1a
     990:	1b 8e       	std	Y+27, r1	; 0x1b
     992:	1c 8e       	std	Y+28, r1	; 0x1c
     994:	1d 8e       	std	Y+29, r1	; 0x1d
     996:	88 8d       	ldd	r24, Y+24	; 0x18
     998:	88 23       	and	r24, r24
     99a:	09 f4       	brne	.+2      	; 0x99e <xEventGroupWaitBits+0xa0>
     99c:	65 c0       	rjmp	.+202    	; 0xa68 <xEventGroupWaitBits+0x16a>
     99e:	89 85       	ldd	r24, Y+9	; 0x09
     9a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     9a2:	fc 01       	movw	r30, r24
     9a4:	20 81       	ld	r18, Z
     9a6:	31 81       	ldd	r19, Z+1	; 0x01
     9a8:	42 81       	ldd	r20, Z+2	; 0x02
     9aa:	53 81       	ldd	r21, Z+3	; 0x03
     9ac:	8c 89       	ldd	r24, Y+20	; 0x14
     9ae:	9d 89       	ldd	r25, Y+21	; 0x15
     9b0:	ae 89       	ldd	r26, Y+22	; 0x16
     9b2:	bf 89       	ldd	r27, Y+23	; 0x17
     9b4:	80 95       	com	r24
     9b6:	90 95       	com	r25
     9b8:	a0 95       	com	r26
     9ba:	b0 95       	com	r27
     9bc:	82 23       	and	r24, r18
     9be:	93 23       	and	r25, r19
     9c0:	a4 23       	and	r26, r20
     9c2:	b5 23       	and	r27, r21
     9c4:	29 85       	ldd	r18, Y+9	; 0x09
     9c6:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c8:	f9 01       	movw	r30, r18
     9ca:	80 83       	st	Z, r24
     9cc:	91 83       	std	Z+1, r25	; 0x01
     9ce:	a2 83       	std	Z+2, r26	; 0x02
     9d0:	b3 83       	std	Z+3, r27	; 0x03
     9d2:	4a c0       	rjmp	.+148    	; 0xa68 <xEventGroupWaitBits+0x16a>
     9d4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9d6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9d8:	ac 8d       	ldd	r26, Y+28	; 0x1c
     9da:	bd 8d       	ldd	r27, Y+29	; 0x1d
     9dc:	89 2b       	or	r24, r25
     9de:	8a 2b       	or	r24, r26
     9e0:	8b 2b       	or	r24, r27
     9e2:	59 f4       	brne	.+22     	; 0x9fa <xEventGroupWaitBits+0xfc>
     9e4:	8c 85       	ldd	r24, Y+12	; 0x0c
     9e6:	9d 85       	ldd	r25, Y+13	; 0x0d
     9e8:	ae 85       	ldd	r26, Y+14	; 0x0e
     9ea:	bf 85       	ldd	r27, Y+15	; 0x0f
     9ec:	89 83       	std	Y+1, r24	; 0x01
     9ee:	9a 83       	std	Y+2, r25	; 0x02
     9f0:	ab 83       	std	Y+3, r26	; 0x03
     9f2:	bc 83       	std	Y+4, r27	; 0x04
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	8b 87       	std	Y+11, r24	; 0x0b
     9f8:	37 c0       	rjmp	.+110    	; 0xa68 <xEventGroupWaitBits+0x16a>
     9fa:	88 8d       	ldd	r24, Y+24	; 0x18
     9fc:	88 23       	and	r24, r24
     9fe:	49 f0       	breq	.+18     	; 0xa12 <xEventGroupWaitBits+0x114>
     a00:	8d 81       	ldd	r24, Y+5	; 0x05
     a02:	9e 81       	ldd	r25, Y+6	; 0x06
     a04:	af 81       	ldd	r26, Y+7	; 0x07
     a06:	b8 85       	ldd	r27, Y+8	; 0x08
     a08:	b1 60       	ori	r27, 0x01	; 1
     a0a:	8d 83       	std	Y+5, r24	; 0x05
     a0c:	9e 83       	std	Y+6, r25	; 0x06
     a0e:	af 83       	std	Y+7, r26	; 0x07
     a10:	b8 87       	std	Y+8, r27	; 0x08
     a12:	89 8d       	ldd	r24, Y+25	; 0x19
     a14:	88 23       	and	r24, r24
     a16:	49 f0       	breq	.+18     	; 0xa2a <xEventGroupWaitBits+0x12c>
     a18:	8d 81       	ldd	r24, Y+5	; 0x05
     a1a:	9e 81       	ldd	r25, Y+6	; 0x06
     a1c:	af 81       	ldd	r26, Y+7	; 0x07
     a1e:	b8 85       	ldd	r27, Y+8	; 0x08
     a20:	b4 60       	ori	r27, 0x04	; 4
     a22:	8d 83       	std	Y+5, r24	; 0x05
     a24:	9e 83       	std	Y+6, r25	; 0x06
     a26:	af 83       	std	Y+7, r26	; 0x07
     a28:	b8 87       	std	Y+8, r27	; 0x08
     a2a:	2c 89       	ldd	r18, Y+20	; 0x14
     a2c:	3d 89       	ldd	r19, Y+21	; 0x15
     a2e:	4e 89       	ldd	r20, Y+22	; 0x16
     a30:	5f 89       	ldd	r21, Y+23	; 0x17
     a32:	8d 81       	ldd	r24, Y+5	; 0x05
     a34:	9e 81       	ldd	r25, Y+6	; 0x06
     a36:	af 81       	ldd	r26, Y+7	; 0x07
     a38:	b8 85       	ldd	r27, Y+8	; 0x08
     a3a:	82 2b       	or	r24, r18
     a3c:	93 2b       	or	r25, r19
     a3e:	a4 2b       	or	r26, r20
     a40:	b5 2b       	or	r27, r21
     a42:	29 85       	ldd	r18, Y+9	; 0x09
     a44:	3a 85       	ldd	r19, Y+10	; 0x0a
     a46:	f9 01       	movw	r30, r18
     a48:	34 96       	adiw	r30, 0x04	; 4
     a4a:	2a 8d       	ldd	r18, Y+26	; 0x1a
     a4c:	3b 8d       	ldd	r19, Y+27	; 0x1b
     a4e:	4c 8d       	ldd	r20, Y+28	; 0x1c
     a50:	5d 8d       	ldd	r21, Y+29	; 0x1d
     a52:	89 01       	movw	r16, r18
     a54:	9a 01       	movw	r18, r20
     a56:	ac 01       	movw	r20, r24
     a58:	bd 01       	movw	r22, r26
     a5a:	cf 01       	movw	r24, r30
     a5c:	0e 94 13 18 	call	0x3026	; 0x3026 <vTaskPlaceOnUnorderedEventList>
     a60:	19 82       	std	Y+1, r1	; 0x01
     a62:	1a 82       	std	Y+2, r1	; 0x02
     a64:	1b 82       	std	Y+3, r1	; 0x03
     a66:	1c 82       	std	Y+4, r1	; 0x04
     a68:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
     a6c:	89 8b       	std	Y+17, r24	; 0x11
     a6e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a70:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a72:	ac 8d       	ldd	r26, Y+28	; 0x1c
     a74:	bd 8d       	ldd	r27, Y+29	; 0x1d
     a76:	89 2b       	or	r24, r25
     a78:	8a 2b       	or	r24, r26
     a7a:	8b 2b       	or	r24, r27
     a7c:	09 f4       	brne	.+2      	; 0xa80 <xEventGroupWaitBits+0x182>
     a7e:	65 c0       	rjmp	.+202    	; 0xb4a <xEventGroupWaitBits+0x24c>
     a80:	89 89       	ldd	r24, Y+17	; 0x11
     a82:	88 23       	and	r24, r24
     a84:	11 f4       	brne	.+4      	; 0xa8a <xEventGroupWaitBits+0x18c>
     a86:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
     a8a:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <uxTaskResetEventItemValue>
     a8e:	dc 01       	movw	r26, r24
     a90:	cb 01       	movw	r24, r22
     a92:	89 83       	std	Y+1, r24	; 0x01
     a94:	9a 83       	std	Y+2, r25	; 0x02
     a96:	ab 83       	std	Y+3, r26	; 0x03
     a98:	bc 83       	std	Y+4, r27	; 0x04
     a9a:	89 81       	ldd	r24, Y+1	; 0x01
     a9c:	9a 81       	ldd	r25, Y+2	; 0x02
     a9e:	ab 81       	ldd	r26, Y+3	; 0x03
     aa0:	bc 81       	ldd	r27, Y+4	; 0x04
     aa2:	88 27       	eor	r24, r24
     aa4:	99 27       	eor	r25, r25
     aa6:	aa 27       	eor	r26, r26
     aa8:	b2 70       	andi	r27, 0x02	; 2
     aaa:	89 2b       	or	r24, r25
     aac:	8a 2b       	or	r24, r26
     aae:	8b 2b       	or	r24, r27
     ab0:	09 f0       	breq	.+2      	; 0xab4 <xEventGroupWaitBits+0x1b6>
     ab2:	42 c0       	rjmp	.+132    	; 0xb38 <xEventGroupWaitBits+0x23a>
     ab4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ab8:	ff 93       	push	r31
     aba:	f8 7f       	andi	r31, 0xF8	; 248
     abc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ac0:	89 85       	ldd	r24, Y+9	; 0x09
     ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ac4:	fc 01       	movw	r30, r24
     ac6:	80 81       	ld	r24, Z
     ac8:	91 81       	ldd	r25, Z+1	; 0x01
     aca:	a2 81       	ldd	r26, Z+2	; 0x02
     acc:	b3 81       	ldd	r27, Z+3	; 0x03
     ace:	89 83       	std	Y+1, r24	; 0x01
     ad0:	9a 83       	std	Y+2, r25	; 0x02
     ad2:	ab 83       	std	Y+3, r26	; 0x03
     ad4:	bc 83       	std	Y+4, r27	; 0x04
     ad6:	2c 89       	ldd	r18, Y+20	; 0x14
     ad8:	3d 89       	ldd	r19, Y+21	; 0x15
     ada:	4e 89       	ldd	r20, Y+22	; 0x16
     adc:	5f 89       	ldd	r21, Y+23	; 0x17
     ade:	89 81       	ldd	r24, Y+1	; 0x01
     ae0:	9a 81       	ldd	r25, Y+2	; 0x02
     ae2:	ab 81       	ldd	r26, Y+3	; 0x03
     ae4:	bc 81       	ldd	r27, Y+4	; 0x04
     ae6:	09 8d       	ldd	r16, Y+25	; 0x19
     ae8:	bc 01       	movw	r22, r24
     aea:	cd 01       	movw	r24, r26
     aec:	0e 94 28 07 	call	0xe50	; 0xe50 <prvTestWaitCondition>
     af0:	88 23       	and	r24, r24
     af2:	e9 f0       	breq	.+58     	; 0xb2e <xEventGroupWaitBits+0x230>
     af4:	88 8d       	ldd	r24, Y+24	; 0x18
     af6:	88 23       	and	r24, r24
     af8:	d1 f0       	breq	.+52     	; 0xb2e <xEventGroupWaitBits+0x230>
     afa:	89 85       	ldd	r24, Y+9	; 0x09
     afc:	9a 85       	ldd	r25, Y+10	; 0x0a
     afe:	fc 01       	movw	r30, r24
     b00:	20 81       	ld	r18, Z
     b02:	31 81       	ldd	r19, Z+1	; 0x01
     b04:	42 81       	ldd	r20, Z+2	; 0x02
     b06:	53 81       	ldd	r21, Z+3	; 0x03
     b08:	8c 89       	ldd	r24, Y+20	; 0x14
     b0a:	9d 89       	ldd	r25, Y+21	; 0x15
     b0c:	ae 89       	ldd	r26, Y+22	; 0x16
     b0e:	bf 89       	ldd	r27, Y+23	; 0x17
     b10:	80 95       	com	r24
     b12:	90 95       	com	r25
     b14:	a0 95       	com	r26
     b16:	b0 95       	com	r27
     b18:	82 23       	and	r24, r18
     b1a:	93 23       	and	r25, r19
     b1c:	a4 23       	and	r26, r20
     b1e:	b5 23       	and	r27, r21
     b20:	29 85       	ldd	r18, Y+9	; 0x09
     b22:	3a 85       	ldd	r19, Y+10	; 0x0a
     b24:	f9 01       	movw	r30, r18
     b26:	80 83       	st	Z, r24
     b28:	91 83       	std	Z+1, r25	; 0x01
     b2a:	a2 83       	std	Z+2, r26	; 0x02
     b2c:	b3 83       	std	Z+3, r27	; 0x03
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	8b 87       	std	Y+11, r24	; 0x0b
     b32:	ff 91       	pop	r31
     b34:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b38:	89 81       	ldd	r24, Y+1	; 0x01
     b3a:	9a 81       	ldd	r25, Y+2	; 0x02
     b3c:	ab 81       	ldd	r26, Y+3	; 0x03
     b3e:	bc 81       	ldd	r27, Y+4	; 0x04
     b40:	bb 27       	eor	r27, r27
     b42:	89 83       	std	Y+1, r24	; 0x01
     b44:	9a 83       	std	Y+2, r25	; 0x02
     b46:	ab 83       	std	Y+3, r26	; 0x03
     b48:	bc 83       	std	Y+4, r27	; 0x04
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	9a 81       	ldd	r25, Y+2	; 0x02
     b4e:	ab 81       	ldd	r26, Y+3	; 0x03
     b50:	bc 81       	ldd	r27, Y+4	; 0x04
     b52:	bc 01       	movw	r22, r24
     b54:	cd 01       	movw	r24, r26
     b56:	6d 96       	adiw	r28, 0x1d	; 29
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	ff 90       	pop	r15
     b66:	ef 90       	pop	r14
     b68:	df 90       	pop	r13
     b6a:	cf 90       	pop	r12
     b6c:	08 95       	ret

00000b6e <xEventGroupClearBits>:
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	2c 97       	sbiw	r28, 0x0c	; 12
     b78:	cd bf       	out	0x3d, r28	; 61
     b7a:	de bf       	out	0x3e, r29	; 62
     b7c:	8f 83       	std	Y+7, r24	; 0x07
     b7e:	98 87       	std	Y+8, r25	; 0x08
     b80:	49 87       	std	Y+9, r20	; 0x09
     b82:	5a 87       	std	Y+10, r21	; 0x0a
     b84:	6b 87       	std	Y+11, r22	; 0x0b
     b86:	7c 87       	std	Y+12, r23	; 0x0c
     b88:	8f 81       	ldd	r24, Y+7	; 0x07
     b8a:	98 85       	ldd	r25, Y+8	; 0x08
     b8c:	89 83       	std	Y+1, r24	; 0x01
     b8e:	9a 83       	std	Y+2, r25	; 0x02
     b90:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b94:	ff 93       	push	r31
     b96:	f8 7f       	andi	r31, 0xF8	; 248
     b98:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ba0:	fc 01       	movw	r30, r24
     ba2:	80 81       	ld	r24, Z
     ba4:	91 81       	ldd	r25, Z+1	; 0x01
     ba6:	a2 81       	ldd	r26, Z+2	; 0x02
     ba8:	b3 81       	ldd	r27, Z+3	; 0x03
     baa:	8b 83       	std	Y+3, r24	; 0x03
     bac:	9c 83       	std	Y+4, r25	; 0x04
     bae:	ad 83       	std	Y+5, r26	; 0x05
     bb0:	be 83       	std	Y+6, r27	; 0x06
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	9a 81       	ldd	r25, Y+2	; 0x02
     bb6:	fc 01       	movw	r30, r24
     bb8:	20 81       	ld	r18, Z
     bba:	31 81       	ldd	r19, Z+1	; 0x01
     bbc:	42 81       	ldd	r20, Z+2	; 0x02
     bbe:	53 81       	ldd	r21, Z+3	; 0x03
     bc0:	89 85       	ldd	r24, Y+9	; 0x09
     bc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc4:	ab 85       	ldd	r26, Y+11	; 0x0b
     bc6:	bc 85       	ldd	r27, Y+12	; 0x0c
     bc8:	80 95       	com	r24
     bca:	90 95       	com	r25
     bcc:	a0 95       	com	r26
     bce:	b0 95       	com	r27
     bd0:	82 23       	and	r24, r18
     bd2:	93 23       	and	r25, r19
     bd4:	a4 23       	and	r26, r20
     bd6:	b5 23       	and	r27, r21
     bd8:	29 81       	ldd	r18, Y+1	; 0x01
     bda:	3a 81       	ldd	r19, Y+2	; 0x02
     bdc:	f9 01       	movw	r30, r18
     bde:	80 83       	st	Z, r24
     be0:	91 83       	std	Z+1, r25	; 0x01
     be2:	a2 83       	std	Z+2, r26	; 0x02
     be4:	b3 83       	std	Z+3, r27	; 0x03
     be6:	ff 91       	pop	r31
     be8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     bec:	8b 81       	ldd	r24, Y+3	; 0x03
     bee:	9c 81       	ldd	r25, Y+4	; 0x04
     bf0:	ad 81       	ldd	r26, Y+5	; 0x05
     bf2:	be 81       	ldd	r27, Y+6	; 0x06
     bf4:	bc 01       	movw	r22, r24
     bf6:	cd 01       	movw	r24, r26
     bf8:	2c 96       	adiw	r28, 0x0c	; 12
     bfa:	cd bf       	out	0x3d, r28	; 61
     bfc:	de bf       	out	0x3e, r29	; 62
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	08 95       	ret

00000c04 <xEventGroupSetBits>:
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	6d 97       	sbiw	r28, 0x1d	; 29
     c0e:	cd bf       	out	0x3d, r28	; 61
     c10:	de bf       	out	0x3e, r29	; 62
     c12:	88 8f       	std	Y+24, r24	; 0x18
     c14:	99 8f       	std	Y+25, r25	; 0x19
     c16:	4a 8f       	std	Y+26, r20	; 0x1a
     c18:	5b 8f       	std	Y+27, r21	; 0x1b
     c1a:	6c 8f       	std	Y+28, r22	; 0x1c
     c1c:	7d 8f       	std	Y+29, r23	; 0x1d
     c1e:	1b 82       	std	Y+3, r1	; 0x03
     c20:	1c 82       	std	Y+4, r1	; 0x04
     c22:	1d 82       	std	Y+5, r1	; 0x05
     c24:	1e 82       	std	Y+6, r1	; 0x06
     c26:	88 8d       	ldd	r24, Y+24	; 0x18
     c28:	99 8d       	ldd	r25, Y+25	; 0x19
     c2a:	88 87       	std	Y+8, r24	; 0x08
     c2c:	99 87       	std	Y+9, r25	; 0x09
     c2e:	1f 82       	std	Y+7, r1	; 0x07
     c30:	88 85       	ldd	r24, Y+8	; 0x08
     c32:	99 85       	ldd	r25, Y+9	; 0x09
     c34:	04 96       	adiw	r24, 0x04	; 4
     c36:	8a 87       	std	Y+10, r24	; 0x0a
     c38:	9b 87       	std	Y+11, r25	; 0x0b
     c3a:	8a 85       	ldd	r24, Y+10	; 0x0a
     c3c:	9b 85       	ldd	r25, Y+11	; 0x0b
     c3e:	03 96       	adiw	r24, 0x03	; 3
     c40:	8c 87       	std	Y+12, r24	; 0x0c
     c42:	9d 87       	std	Y+13, r25	; 0x0d
     c44:	0e 94 40 15 	call	0x2a80	; 0x2a80 <vTaskSuspendAll>
     c48:	8a 85       	ldd	r24, Y+10	; 0x0a
     c4a:	9b 85       	ldd	r25, Y+11	; 0x0b
     c4c:	fc 01       	movw	r30, r24
     c4e:	87 81       	ldd	r24, Z+7	; 0x07
     c50:	90 85       	ldd	r25, Z+8	; 0x08
     c52:	89 83       	std	Y+1, r24	; 0x01
     c54:	9a 83       	std	Y+2, r25	; 0x02
     c56:	88 85       	ldd	r24, Y+8	; 0x08
     c58:	99 85       	ldd	r25, Y+9	; 0x09
     c5a:	fc 01       	movw	r30, r24
     c5c:	20 81       	ld	r18, Z
     c5e:	31 81       	ldd	r19, Z+1	; 0x01
     c60:	42 81       	ldd	r20, Z+2	; 0x02
     c62:	53 81       	ldd	r21, Z+3	; 0x03
     c64:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c66:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c68:	ac 8d       	ldd	r26, Y+28	; 0x1c
     c6a:	bd 8d       	ldd	r27, Y+29	; 0x1d
     c6c:	82 2b       	or	r24, r18
     c6e:	93 2b       	or	r25, r19
     c70:	a4 2b       	or	r26, r20
     c72:	b5 2b       	or	r27, r21
     c74:	28 85       	ldd	r18, Y+8	; 0x08
     c76:	39 85       	ldd	r19, Y+9	; 0x09
     c78:	f9 01       	movw	r30, r18
     c7a:	80 83       	st	Z, r24
     c7c:	91 83       	std	Z+1, r25	; 0x01
     c7e:	a2 83       	std	Z+2, r26	; 0x02
     c80:	b3 83       	std	Z+3, r27	; 0x03
     c82:	95 c0       	rjmp	.+298    	; 0xdae <xEventGroupSetBits+0x1aa>
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	9a 81       	ldd	r25, Y+2	; 0x02
     c88:	fc 01       	movw	r30, r24
     c8a:	84 81       	ldd	r24, Z+4	; 0x04
     c8c:	95 81       	ldd	r25, Z+5	; 0x05
     c8e:	8e 87       	std	Y+14, r24	; 0x0e
     c90:	9f 87       	std	Y+15, r25	; 0x0f
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	9a 81       	ldd	r25, Y+2	; 0x02
     c96:	fc 01       	movw	r30, r24
     c98:	80 81       	ld	r24, Z
     c9a:	91 81       	ldd	r25, Z+1	; 0x01
     c9c:	a2 81       	ldd	r26, Z+2	; 0x02
     c9e:	b3 81       	ldd	r27, Z+3	; 0x03
     ca0:	88 8b       	std	Y+16, r24	; 0x10
     ca2:	99 8b       	std	Y+17, r25	; 0x11
     ca4:	aa 8b       	std	Y+18, r26	; 0x12
     ca6:	bb 8b       	std	Y+19, r27	; 0x13
     ca8:	1f 82       	std	Y+7, r1	; 0x07
     caa:	88 89       	ldd	r24, Y+16	; 0x10
     cac:	99 89       	ldd	r25, Y+17	; 0x11
     cae:	aa 89       	ldd	r26, Y+18	; 0x12
     cb0:	bb 89       	ldd	r27, Y+19	; 0x13
     cb2:	88 27       	eor	r24, r24
     cb4:	99 27       	eor	r25, r25
     cb6:	aa 27       	eor	r26, r26
     cb8:	8c 8b       	std	Y+20, r24	; 0x14
     cba:	9d 8b       	std	Y+21, r25	; 0x15
     cbc:	ae 8b       	std	Y+22, r26	; 0x16
     cbe:	bf 8b       	std	Y+23, r27	; 0x17
     cc0:	88 89       	ldd	r24, Y+16	; 0x10
     cc2:	99 89       	ldd	r25, Y+17	; 0x11
     cc4:	aa 89       	ldd	r26, Y+18	; 0x12
     cc6:	bb 89       	ldd	r27, Y+19	; 0x13
     cc8:	bb 27       	eor	r27, r27
     cca:	88 8b       	std	Y+16, r24	; 0x10
     ccc:	99 8b       	std	Y+17, r25	; 0x11
     cce:	aa 8b       	std	Y+18, r26	; 0x12
     cd0:	bb 8b       	std	Y+19, r27	; 0x13
     cd2:	8c 89       	ldd	r24, Y+20	; 0x14
     cd4:	9d 89       	ldd	r25, Y+21	; 0x15
     cd6:	ae 89       	ldd	r26, Y+22	; 0x16
     cd8:	bf 89       	ldd	r27, Y+23	; 0x17
     cda:	88 27       	eor	r24, r24
     cdc:	99 27       	eor	r25, r25
     cde:	aa 27       	eor	r26, r26
     ce0:	b4 70       	andi	r27, 0x04	; 4
     ce2:	89 2b       	or	r24, r25
     ce4:	8a 2b       	or	r24, r26
     ce6:	8b 2b       	or	r24, r27
     ce8:	b1 f4       	brne	.+44     	; 0xd16 <xEventGroupSetBits+0x112>
     cea:	88 85       	ldd	r24, Y+8	; 0x08
     cec:	99 85       	ldd	r25, Y+9	; 0x09
     cee:	fc 01       	movw	r30, r24
     cf0:	20 81       	ld	r18, Z
     cf2:	31 81       	ldd	r19, Z+1	; 0x01
     cf4:	42 81       	ldd	r20, Z+2	; 0x02
     cf6:	53 81       	ldd	r21, Z+3	; 0x03
     cf8:	88 89       	ldd	r24, Y+16	; 0x10
     cfa:	99 89       	ldd	r25, Y+17	; 0x11
     cfc:	aa 89       	ldd	r26, Y+18	; 0x12
     cfe:	bb 89       	ldd	r27, Y+19	; 0x13
     d00:	82 23       	and	r24, r18
     d02:	93 23       	and	r25, r19
     d04:	a4 23       	and	r26, r20
     d06:	b5 23       	and	r27, r21
     d08:	89 2b       	or	r24, r25
     d0a:	8a 2b       	or	r24, r26
     d0c:	8b 2b       	or	r24, r27
     d0e:	e9 f0       	breq	.+58     	; 0xd4a <xEventGroupSetBits+0x146>
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	8f 83       	std	Y+7, r24	; 0x07
     d14:	1a c0       	rjmp	.+52     	; 0xd4a <xEventGroupSetBits+0x146>
     d16:	88 85       	ldd	r24, Y+8	; 0x08
     d18:	99 85       	ldd	r25, Y+9	; 0x09
     d1a:	fc 01       	movw	r30, r24
     d1c:	20 81       	ld	r18, Z
     d1e:	31 81       	ldd	r19, Z+1	; 0x01
     d20:	42 81       	ldd	r20, Z+2	; 0x02
     d22:	53 81       	ldd	r21, Z+3	; 0x03
     d24:	88 89       	ldd	r24, Y+16	; 0x10
     d26:	99 89       	ldd	r25, Y+17	; 0x11
     d28:	aa 89       	ldd	r26, Y+18	; 0x12
     d2a:	bb 89       	ldd	r27, Y+19	; 0x13
     d2c:	28 23       	and	r18, r24
     d2e:	39 23       	and	r19, r25
     d30:	4a 23       	and	r20, r26
     d32:	5b 23       	and	r21, r27
     d34:	88 89       	ldd	r24, Y+16	; 0x10
     d36:	99 89       	ldd	r25, Y+17	; 0x11
     d38:	aa 89       	ldd	r26, Y+18	; 0x12
     d3a:	bb 89       	ldd	r27, Y+19	; 0x13
     d3c:	28 17       	cp	r18, r24
     d3e:	39 07       	cpc	r19, r25
     d40:	4a 07       	cpc	r20, r26
     d42:	5b 07       	cpc	r21, r27
     d44:	11 f4       	brne	.+4      	; 0xd4a <xEventGroupSetBits+0x146>
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	8f 83       	std	Y+7, r24	; 0x07
     d4a:	8f 81       	ldd	r24, Y+7	; 0x07
     d4c:	88 23       	and	r24, r24
     d4e:	59 f1       	breq	.+86     	; 0xda6 <xEventGroupSetBits+0x1a2>
     d50:	8c 89       	ldd	r24, Y+20	; 0x14
     d52:	9d 89       	ldd	r25, Y+21	; 0x15
     d54:	ae 89       	ldd	r26, Y+22	; 0x16
     d56:	bf 89       	ldd	r27, Y+23	; 0x17
     d58:	88 27       	eor	r24, r24
     d5a:	99 27       	eor	r25, r25
     d5c:	aa 27       	eor	r26, r26
     d5e:	b1 70       	andi	r27, 0x01	; 1
     d60:	89 2b       	or	r24, r25
     d62:	8a 2b       	or	r24, r26
     d64:	8b 2b       	or	r24, r27
     d66:	81 f0       	breq	.+32     	; 0xd88 <xEventGroupSetBits+0x184>
     d68:	2b 81       	ldd	r18, Y+3	; 0x03
     d6a:	3c 81       	ldd	r19, Y+4	; 0x04
     d6c:	4d 81       	ldd	r20, Y+5	; 0x05
     d6e:	5e 81       	ldd	r21, Y+6	; 0x06
     d70:	88 89       	ldd	r24, Y+16	; 0x10
     d72:	99 89       	ldd	r25, Y+17	; 0x11
     d74:	aa 89       	ldd	r26, Y+18	; 0x12
     d76:	bb 89       	ldd	r27, Y+19	; 0x13
     d78:	82 2b       	or	r24, r18
     d7a:	93 2b       	or	r25, r19
     d7c:	a4 2b       	or	r26, r20
     d7e:	b5 2b       	or	r27, r21
     d80:	8b 83       	std	Y+3, r24	; 0x03
     d82:	9c 83       	std	Y+4, r25	; 0x04
     d84:	ad 83       	std	Y+5, r26	; 0x05
     d86:	be 83       	std	Y+6, r27	; 0x06
     d88:	88 85       	ldd	r24, Y+8	; 0x08
     d8a:	99 85       	ldd	r25, Y+9	; 0x09
     d8c:	fc 01       	movw	r30, r24
     d8e:	80 81       	ld	r24, Z
     d90:	91 81       	ldd	r25, Z+1	; 0x01
     d92:	a2 81       	ldd	r26, Z+2	; 0x02
     d94:	b3 81       	ldd	r27, Z+3	; 0x03
     d96:	b2 60       	ori	r27, 0x02	; 2
     d98:	29 81       	ldd	r18, Y+1	; 0x01
     d9a:	3a 81       	ldd	r19, Y+2	; 0x02
     d9c:	ac 01       	movw	r20, r24
     d9e:	bd 01       	movw	r22, r26
     da0:	c9 01       	movw	r24, r18
     da2:	0e 94 ee 18 	call	0x31dc	; 0x31dc <vTaskRemoveFromUnorderedEventList>
     da6:	8e 85       	ldd	r24, Y+14	; 0x0e
     da8:	9f 85       	ldd	r25, Y+15	; 0x0f
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	9a 83       	std	Y+2, r25	; 0x02
     dae:	29 81       	ldd	r18, Y+1	; 0x01
     db0:	3a 81       	ldd	r19, Y+2	; 0x02
     db2:	8c 85       	ldd	r24, Y+12	; 0x0c
     db4:	9d 85       	ldd	r25, Y+13	; 0x0d
     db6:	28 17       	cp	r18, r24
     db8:	39 07       	cpc	r19, r25
     dba:	09 f0       	breq	.+2      	; 0xdbe <xEventGroupSetBits+0x1ba>
     dbc:	63 cf       	rjmp	.-314    	; 0xc84 <xEventGroupSetBits+0x80>
     dbe:	88 85       	ldd	r24, Y+8	; 0x08
     dc0:	99 85       	ldd	r25, Y+9	; 0x09
     dc2:	fc 01       	movw	r30, r24
     dc4:	20 81       	ld	r18, Z
     dc6:	31 81       	ldd	r19, Z+1	; 0x01
     dc8:	42 81       	ldd	r20, Z+2	; 0x02
     dca:	53 81       	ldd	r21, Z+3	; 0x03
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	9c 81       	ldd	r25, Y+4	; 0x04
     dd0:	ad 81       	ldd	r26, Y+5	; 0x05
     dd2:	be 81       	ldd	r27, Y+6	; 0x06
     dd4:	80 95       	com	r24
     dd6:	90 95       	com	r25
     dd8:	a0 95       	com	r26
     dda:	b0 95       	com	r27
     ddc:	82 23       	and	r24, r18
     dde:	93 23       	and	r25, r19
     de0:	a4 23       	and	r26, r20
     de2:	b5 23       	and	r27, r21
     de4:	28 85       	ldd	r18, Y+8	; 0x08
     de6:	39 85       	ldd	r19, Y+9	; 0x09
     de8:	f9 01       	movw	r30, r18
     dea:	80 83       	st	Z, r24
     dec:	91 83       	std	Z+1, r25	; 0x01
     dee:	a2 83       	std	Z+2, r26	; 0x02
     df0:	b3 83       	std	Z+3, r27	; 0x03
     df2:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
     df6:	88 85       	ldd	r24, Y+8	; 0x08
     df8:	99 85       	ldd	r25, Y+9	; 0x09
     dfa:	fc 01       	movw	r30, r24
     dfc:	80 81       	ld	r24, Z
     dfe:	91 81       	ldd	r25, Z+1	; 0x01
     e00:	a2 81       	ldd	r26, Z+2	; 0x02
     e02:	b3 81       	ldd	r27, Z+3	; 0x03
     e04:	bc 01       	movw	r22, r24
     e06:	cd 01       	movw	r24, r26
     e08:	6d 96       	adiw	r28, 0x1d	; 29
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	08 95       	ret

00000e14 <vEventGroupSetBitsCallback>:
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	00 d0       	rcall	.+0      	; 0xe1a <vEventGroupSetBitsCallback+0x6>
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <vEventGroupSetBitsCallback+0x8>
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	89 83       	std	Y+1, r24	; 0x01
     e22:	9a 83       	std	Y+2, r25	; 0x02
     e24:	4b 83       	std	Y+3, r20	; 0x03
     e26:	5c 83       	std	Y+4, r21	; 0x04
     e28:	6d 83       	std	Y+5, r22	; 0x05
     e2a:	7e 83       	std	Y+6, r23	; 0x06
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	9c 81       	ldd	r25, Y+4	; 0x04
     e30:	ad 81       	ldd	r26, Y+5	; 0x05
     e32:	be 81       	ldd	r27, Y+6	; 0x06
     e34:	29 81       	ldd	r18, Y+1	; 0x01
     e36:	3a 81       	ldd	r19, Y+2	; 0x02
     e38:	ac 01       	movw	r20, r24
     e3a:	bd 01       	movw	r22, r26
     e3c:	c9 01       	movw	r24, r18
     e3e:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
     e42:	00 00       	nop
     e44:	26 96       	adiw	r28, 0x06	; 6
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	08 95       	ret

00000e50 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
     e50:	0f 93       	push	r16
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	2a 97       	sbiw	r28, 0x0a	; 10
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	6a 83       	std	Y+2, r22	; 0x02
     e62:	7b 83       	std	Y+3, r23	; 0x03
     e64:	8c 83       	std	Y+4, r24	; 0x04
     e66:	9d 83       	std	Y+5, r25	; 0x05
     e68:	2e 83       	std	Y+6, r18	; 0x06
     e6a:	3f 83       	std	Y+7, r19	; 0x07
     e6c:	48 87       	std	Y+8, r20	; 0x08
     e6e:	59 87       	std	Y+9, r21	; 0x09
     e70:	0a 87       	std	Y+10, r16	; 0x0a
BaseType_t xWaitConditionMet = pdFALSE;
     e72:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
     e74:	8a 85       	ldd	r24, Y+10	; 0x0a
     e76:	88 23       	and	r24, r24
     e78:	99 f4       	brne	.+38     	; 0xea0 <prvTestWaitCondition+0x50>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     e7a:	2a 81       	ldd	r18, Y+2	; 0x02
     e7c:	3b 81       	ldd	r19, Y+3	; 0x03
     e7e:	4c 81       	ldd	r20, Y+4	; 0x04
     e80:	5d 81       	ldd	r21, Y+5	; 0x05
     e82:	8e 81       	ldd	r24, Y+6	; 0x06
     e84:	9f 81       	ldd	r25, Y+7	; 0x07
     e86:	a8 85       	ldd	r26, Y+8	; 0x08
     e88:	b9 85       	ldd	r27, Y+9	; 0x09
     e8a:	82 23       	and	r24, r18
     e8c:	93 23       	and	r25, r19
     e8e:	a4 23       	and	r26, r20
     e90:	b5 23       	and	r27, r21
     e92:	89 2b       	or	r24, r25
     e94:	8a 2b       	or	r24, r26
     e96:	8b 2b       	or	r24, r27
     e98:	d1 f0       	breq	.+52     	; 0xece <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	89 83       	std	Y+1, r24	; 0x01
     e9e:	17 c0       	rjmp	.+46     	; 0xece <prvTestWaitCondition+0x7e>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     ea0:	2a 81       	ldd	r18, Y+2	; 0x02
     ea2:	3b 81       	ldd	r19, Y+3	; 0x03
     ea4:	4c 81       	ldd	r20, Y+4	; 0x04
     ea6:	5d 81       	ldd	r21, Y+5	; 0x05
     ea8:	8e 81       	ldd	r24, Y+6	; 0x06
     eaa:	9f 81       	ldd	r25, Y+7	; 0x07
     eac:	a8 85       	ldd	r26, Y+8	; 0x08
     eae:	b9 85       	ldd	r27, Y+9	; 0x09
     eb0:	28 23       	and	r18, r24
     eb2:	39 23       	and	r19, r25
     eb4:	4a 23       	and	r20, r26
     eb6:	5b 23       	and	r21, r27
     eb8:	8e 81       	ldd	r24, Y+6	; 0x06
     eba:	9f 81       	ldd	r25, Y+7	; 0x07
     ebc:	a8 85       	ldd	r26, Y+8	; 0x08
     ebe:	b9 85       	ldd	r27, Y+9	; 0x09
     ec0:	28 17       	cp	r18, r24
     ec2:	39 07       	cpc	r19, r25
     ec4:	4a 07       	cpc	r20, r26
     ec6:	5b 07       	cpc	r21, r27
     ec8:	11 f4       	brne	.+4      	; 0xece <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
     ece:	89 81       	ldd	r24, Y+1	; 0x01
}
     ed0:	2a 96       	adiw	r28, 0x0a	; 10
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	0f 91       	pop	r16
     edc:	08 95       	ret

00000ede <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	29 97       	sbiw	r28, 0x09	; 9
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	8a 83       	std	Y+2, r24	; 0x02
     ef2:	9b 83       	std	Y+3, r25	; 0x03
     ef4:	4c 83       	std	Y+4, r20	; 0x04
     ef6:	5d 83       	std	Y+5, r21	; 0x05
     ef8:	6e 83       	std	Y+6, r22	; 0x06
     efa:	7f 83       	std	Y+7, r23	; 0x07
     efc:	28 87       	std	Y+8, r18	; 0x08
     efe:	39 87       	std	Y+9, r19	; 0x09
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     f00:	28 85       	ldd	r18, Y+8	; 0x08
     f02:	39 85       	ldd	r19, Y+9	; 0x09
     f04:	8c 81       	ldd	r24, Y+4	; 0x04
     f06:	9d 81       	ldd	r25, Y+5	; 0x05
     f08:	ae 81       	ldd	r26, Y+6	; 0x06
     f0a:	bf 81       	ldd	r27, Y+7	; 0x07
     f0c:	6a 81       	ldd	r22, Y+2	; 0x02
     f0e:	7b 81       	ldd	r23, Y+3	; 0x03
     f10:	89 01       	movw	r16, r18
     f12:	9c 01       	movw	r18, r24
     f14:	ad 01       	movw	r20, r26
     f16:	8a e0       	ldi	r24, 0x0A	; 10
     f18:	97 e0       	ldi	r25, 0x07	; 7
     f1a:	0e 94 7d 20 	call	0x40fa	; 0x40fa <xTimerPendFunctionCallFromISR>
     f1e:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
     f20:	89 81       	ldd	r24, Y+1	; 0x01
	}
     f22:	29 96       	adiw	r28, 0x09	; 9
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	1f 91       	pop	r17
     f2e:	0f 91       	pop	r16
     f30:	08 95       	ret

00000f32 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	00 d0       	rcall	.+0      	; 0xf38 <pvPortMalloc+0x6>
     f38:	1f 92       	push	r1
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	8b 83       	std	Y+3, r24	; 0x03
     f40:	9c 83       	std	Y+4, r25	; 0x04
void *pvReturn = NULL; 
     f42:	19 82       	std	Y+1, r1	; 0x01
     f44:	1a 82       	std	Y+2, r1	; 0x02
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     f46:	0e 94 40 15 	call	0x2a80	; 0x2a80 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     f4a:	20 91 a0 34 	lds	r18, 0x34A0	; 0x8034a0 <xNextFreeByte>
     f4e:	30 91 a1 34 	lds	r19, 0x34A1	; 0x8034a1 <xNextFreeByte+0x1>
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	9c 81       	ldd	r25, Y+4	; 0x04
     f56:	82 0f       	add	r24, r18
     f58:	93 1f       	adc	r25, r19
     f5a:	88 38       	cpi	r24, 0x88	; 136
     f5c:	93 41       	sbci	r25, 0x13	; 19
     f5e:	18 f5       	brcc	.+70     	; 0xfa6 <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     f60:	20 91 a0 34 	lds	r18, 0x34A0	; 0x8034a0 <xNextFreeByte>
     f64:	30 91 a1 34 	lds	r19, 0x34A1	; 0x8034a1 <xNextFreeByte+0x1>
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	9c 81       	ldd	r25, Y+4	; 0x04
     f6c:	28 0f       	add	r18, r24
     f6e:	39 1f       	adc	r19, r25
     f70:	80 91 a0 34 	lds	r24, 0x34A0	; 0x8034a0 <xNextFreeByte>
     f74:	90 91 a1 34 	lds	r25, 0x34A1	; 0x8034a1 <xNextFreeByte+0x1>
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     f78:	82 17       	cp	r24, r18
     f7a:	93 07       	cpc	r25, r19
     f7c:	a0 f4       	brcc	.+40     	; 0xfa6 <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     f7e:	80 91 a0 34 	lds	r24, 0x34A0	; 0x8034a0 <xNextFreeByte>
     f82:	90 91 a1 34 	lds	r25, 0x34A1	; 0x8034a1 <xNextFreeByte+0x1>
     f86:	88 5e       	subi	r24, 0xE8	; 232
     f88:	9e 4d       	sbci	r25, 0xDE	; 222
     f8a:	89 83       	std	Y+1, r24	; 0x01
     f8c:	9a 83       	std	Y+2, r25	; 0x02
			xNextFreeByte += xWantedSize;			
     f8e:	20 91 a0 34 	lds	r18, 0x34A0	; 0x8034a0 <xNextFreeByte>
     f92:	30 91 a1 34 	lds	r19, 0x34A1	; 0x8034a1 <xNextFreeByte+0x1>
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	9c 81       	ldd	r25, Y+4	; 0x04
     f9a:	82 0f       	add	r24, r18
     f9c:	93 1f       	adc	r25, r19
     f9e:	80 93 a0 34 	sts	0x34A0, r24	; 0x8034a0 <xNextFreeByte>
     fa2:	90 93 a1 34 	sts	0x34A1, r25	; 0x8034a1 <xNextFreeByte+0x1>
		}	
	}
	xTaskResumeAll();
     fa6:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
}
     fae:	24 96       	adiw	r28, 0x04	; 4
     fb0:	cd bf       	out	0x3d, r28	; 61
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	08 95       	ret

00000fba <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	1f 92       	push	r1
     fc0:	1f 92       	push	r1
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	89 83       	std	Y+1, r24	; 0x01
     fc8:	9a 83       	std	Y+2, r25	; 0x02
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
	
	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
     fca:	00 00       	nop
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	08 95       	ret

00000fd6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	1f 92       	push	r1
     fdc:	1f 92       	push	r1
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	9a 83       	std	Y+2, r25	; 0x02
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	9a 81       	ldd	r25, Y+2	; 0x02
     fea:	9c 01       	movw	r18, r24
     fec:	2d 5f       	subi	r18, 0xFD	; 253
     fee:	3f 4f       	sbci	r19, 0xFF	; 255
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	9a 81       	ldd	r25, Y+2	; 0x02
     ff4:	fc 01       	movw	r30, r24
     ff6:	21 83       	std	Z+1, r18	; 0x01
     ff8:	32 83       	std	Z+2, r19	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     ffa:	29 81       	ldd	r18, Y+1	; 0x01
     ffc:	3a 81       	ldd	r19, Y+2	; 0x02
     ffe:	8f ef       	ldi	r24, 0xFF	; 255
    1000:	9f ef       	ldi	r25, 0xFF	; 255
    1002:	dc 01       	movw	r26, r24
    1004:	f9 01       	movw	r30, r18
    1006:	83 83       	std	Z+3, r24	; 0x03
    1008:	94 83       	std	Z+4, r25	; 0x04
    100a:	a5 83       	std	Z+5, r26	; 0x05
    100c:	b6 83       	std	Z+6, r27	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	9a 81       	ldd	r25, Y+2	; 0x02
    1012:	9c 01       	movw	r18, r24
    1014:	2d 5f       	subi	r18, 0xFD	; 253
    1016:	3f 4f       	sbci	r19, 0xFF	; 255
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	9a 81       	ldd	r25, Y+2	; 0x02
    101c:	fc 01       	movw	r30, r24
    101e:	27 83       	std	Z+7, r18	; 0x07
    1020:	30 87       	std	Z+8, r19	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	9a 81       	ldd	r25, Y+2	; 0x02
    1026:	9c 01       	movw	r18, r24
    1028:	2d 5f       	subi	r18, 0xFD	; 253
    102a:	3f 4f       	sbci	r19, 0xFF	; 255
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	9a 81       	ldd	r25, Y+2	; 0x02
    1030:	fc 01       	movw	r30, r24
    1032:	21 87       	std	Z+9, r18	; 0x09
    1034:	32 87       	std	Z+10, r19	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	9a 81       	ldd	r25, Y+2	; 0x02
    103a:	fc 01       	movw	r30, r24
    103c:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    103e:	00 00       	nop
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	08 95       	ret

0000104a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	1f 92       	push	r1
    1050:	1f 92       	push	r1
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	89 83       	std	Y+1, r24	; 0x01
    1058:	9a 83       	std	Y+2, r25	; 0x02
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	9a 81       	ldd	r25, Y+2	; 0x02
    105e:	fc 01       	movw	r30, r24
    1060:	12 86       	std	Z+10, r1	; 0x0a
    1062:	13 86       	std	Z+11, r1	; 0x0b

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    1064:	00 00       	nop
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	08 95       	ret

00001070 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	00 d0       	rcall	.+0      	; 0x1076 <vListInsertEnd+0x6>
    1076:	00 d0       	rcall	.+0      	; 0x1078 <vListInsertEnd+0x8>
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    107c:	8b 83       	std	Y+3, r24	; 0x03
    107e:	9c 83       	std	Y+4, r25	; 0x04
    1080:	6d 83       	std	Y+5, r22	; 0x05
    1082:	7e 83       	std	Y+6, r23	; 0x06
ListItem_t * const pxIndex = pxList->pxIndex;
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	9c 81       	ldd	r25, Y+4	; 0x04
    1088:	fc 01       	movw	r30, r24
    108a:	81 81       	ldd	r24, Z+1	; 0x01
    108c:	92 81       	ldd	r25, Z+2	; 0x02
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	9a 83       	std	Y+2, r25	; 0x02
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1092:	8d 81       	ldd	r24, Y+5	; 0x05
    1094:	9e 81       	ldd	r25, Y+6	; 0x06
    1096:	29 81       	ldd	r18, Y+1	; 0x01
    1098:	3a 81       	ldd	r19, Y+2	; 0x02
    109a:	fc 01       	movw	r30, r24
    109c:	24 83       	std	Z+4, r18	; 0x04
    109e:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	9a 81       	ldd	r25, Y+2	; 0x02
    10a4:	fc 01       	movw	r30, r24
    10a6:	26 81       	ldd	r18, Z+6	; 0x06
    10a8:	37 81       	ldd	r19, Z+7	; 0x07
    10aa:	8d 81       	ldd	r24, Y+5	; 0x05
    10ac:	9e 81       	ldd	r25, Y+6	; 0x06
    10ae:	fc 01       	movw	r30, r24
    10b0:	26 83       	std	Z+6, r18	; 0x06
    10b2:	37 83       	std	Z+7, r19	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	9a 81       	ldd	r25, Y+2	; 0x02
    10b8:	fc 01       	movw	r30, r24
    10ba:	86 81       	ldd	r24, Z+6	; 0x06
    10bc:	97 81       	ldd	r25, Z+7	; 0x07
    10be:	2d 81       	ldd	r18, Y+5	; 0x05
    10c0:	3e 81       	ldd	r19, Y+6	; 0x06
    10c2:	fc 01       	movw	r30, r24
    10c4:	24 83       	std	Z+4, r18	; 0x04
    10c6:	35 83       	std	Z+5, r19	; 0x05
	pxIndex->pxPrevious = pxNewListItem;
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	9a 81       	ldd	r25, Y+2	; 0x02
    10cc:	2d 81       	ldd	r18, Y+5	; 0x05
    10ce:	3e 81       	ldd	r19, Y+6	; 0x06
    10d0:	fc 01       	movw	r30, r24
    10d2:	26 83       	std	Z+6, r18	; 0x06
    10d4:	37 83       	std	Z+7, r19	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    10d6:	8d 81       	ldd	r24, Y+5	; 0x05
    10d8:	9e 81       	ldd	r25, Y+6	; 0x06
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	fc 01       	movw	r30, r24
    10e0:	22 87       	std	Z+10, r18	; 0x0a
    10e2:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	fc 01       	movw	r30, r24
    10ea:	80 81       	ld	r24, Z
    10ec:	21 e0       	ldi	r18, 0x01	; 1
    10ee:	28 0f       	add	r18, r24
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	fc 01       	movw	r30, r24
    10f6:	20 83       	st	Z, r18
}
    10f8:	00 00       	nop
    10fa:	26 96       	adiw	r28, 0x06	; 6
    10fc:	cd bf       	out	0x3d, r28	; 61
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	08 95       	ret

00001106 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	2a 97       	sbiw	r28, 0x0a	; 10
    1110:	cd bf       	out	0x3d, r28	; 61
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	8f 83       	std	Y+7, r24	; 0x07
    1116:	98 87       	std	Y+8, r25	; 0x08
    1118:	69 87       	std	Y+9, r22	; 0x09
    111a:	7a 87       	std	Y+10, r23	; 0x0a
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    111c:	89 85       	ldd	r24, Y+9	; 0x09
    111e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1120:	fc 01       	movw	r30, r24
    1122:	80 81       	ld	r24, Z
    1124:	91 81       	ldd	r25, Z+1	; 0x01
    1126:	a2 81       	ldd	r26, Z+2	; 0x02
    1128:	b3 81       	ldd	r27, Z+3	; 0x03
    112a:	8b 83       	std	Y+3, r24	; 0x03
    112c:	9c 83       	std	Y+4, r25	; 0x04
    112e:	ad 83       	std	Y+5, r26	; 0x05
    1130:	be 83       	std	Y+6, r27	; 0x06
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	9c 81       	ldd	r25, Y+4	; 0x04
    1136:	ad 81       	ldd	r26, Y+5	; 0x05
    1138:	be 81       	ldd	r27, Y+6	; 0x06
    113a:	8f 3f       	cpi	r24, 0xFF	; 255
    113c:	9f 4f       	sbci	r25, 0xFF	; 255
    113e:	af 4f       	sbci	r26, 0xFF	; 255
    1140:	bf 4f       	sbci	r27, 0xFF	; 255
    1142:	41 f4       	brne	.+16     	; 0x1154 <vListInsert+0x4e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1144:	8f 81       	ldd	r24, Y+7	; 0x07
    1146:	98 85       	ldd	r25, Y+8	; 0x08
    1148:	fc 01       	movw	r30, r24
    114a:	81 85       	ldd	r24, Z+9	; 0x09
    114c:	92 85       	ldd	r25, Z+10	; 0x0a
    114e:	89 83       	std	Y+1, r24	; 0x01
    1150:	9a 83       	std	Y+2, r25	; 0x02
    1152:	20 c0       	rjmp	.+64     	; 0x1194 <vListInsert+0x8e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1154:	8f 81       	ldd	r24, Y+7	; 0x07
    1156:	98 85       	ldd	r25, Y+8	; 0x08
    1158:	03 96       	adiw	r24, 0x03	; 3
    115a:	89 83       	std	Y+1, r24	; 0x01
    115c:	9a 83       	std	Y+2, r25	; 0x02
    115e:	07 c0       	rjmp	.+14     	; 0x116e <vListInsert+0x68>
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	9a 81       	ldd	r25, Y+2	; 0x02
    1164:	fc 01       	movw	r30, r24
    1166:	84 81       	ldd	r24, Z+4	; 0x04
    1168:	95 81       	ldd	r25, Z+5	; 0x05
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	9a 83       	std	Y+2, r25	; 0x02
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	9a 81       	ldd	r25, Y+2	; 0x02
    1172:	fc 01       	movw	r30, r24
    1174:	84 81       	ldd	r24, Z+4	; 0x04
    1176:	95 81       	ldd	r25, Z+5	; 0x05
    1178:	fc 01       	movw	r30, r24
    117a:	20 81       	ld	r18, Z
    117c:	31 81       	ldd	r19, Z+1	; 0x01
    117e:	42 81       	ldd	r20, Z+2	; 0x02
    1180:	53 81       	ldd	r21, Z+3	; 0x03
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	9c 81       	ldd	r25, Y+4	; 0x04
    1186:	ad 81       	ldd	r26, Y+5	; 0x05
    1188:	be 81       	ldd	r27, Y+6	; 0x06
    118a:	82 17       	cp	r24, r18
    118c:	93 07       	cpc	r25, r19
    118e:	a4 07       	cpc	r26, r20
    1190:	b5 07       	cpc	r27, r21
    1192:	30 f7       	brcc	.-52     	; 0x1160 <vListInsert+0x5a>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	9a 81       	ldd	r25, Y+2	; 0x02
    1198:	fc 01       	movw	r30, r24
    119a:	24 81       	ldd	r18, Z+4	; 0x04
    119c:	35 81       	ldd	r19, Z+5	; 0x05
    119e:	89 85       	ldd	r24, Y+9	; 0x09
    11a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a2:	fc 01       	movw	r30, r24
    11a4:	24 83       	std	Z+4, r18	; 0x04
    11a6:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    11a8:	89 85       	ldd	r24, Y+9	; 0x09
    11aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ac:	fc 01       	movw	r30, r24
    11ae:	84 81       	ldd	r24, Z+4	; 0x04
    11b0:	95 81       	ldd	r25, Z+5	; 0x05
    11b2:	29 85       	ldd	r18, Y+9	; 0x09
    11b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    11b6:	fc 01       	movw	r30, r24
    11b8:	26 83       	std	Z+6, r18	; 0x06
    11ba:	37 83       	std	Z+7, r19	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
    11bc:	89 85       	ldd	r24, Y+9	; 0x09
    11be:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c0:	29 81       	ldd	r18, Y+1	; 0x01
    11c2:	3a 81       	ldd	r19, Y+2	; 0x02
    11c4:	fc 01       	movw	r30, r24
    11c6:	26 83       	std	Z+6, r18	; 0x06
    11c8:	37 83       	std	Z+7, r19	; 0x07
	pxIterator->pxNext = pxNewListItem;
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	9a 81       	ldd	r25, Y+2	; 0x02
    11ce:	29 85       	ldd	r18, Y+9	; 0x09
    11d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    11d2:	fc 01       	movw	r30, r24
    11d4:	24 83       	std	Z+4, r18	; 0x04
    11d6:	35 83       	std	Z+5, r19	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    11d8:	89 85       	ldd	r24, Y+9	; 0x09
    11da:	9a 85       	ldd	r25, Y+10	; 0x0a
    11dc:	2f 81       	ldd	r18, Y+7	; 0x07
    11de:	38 85       	ldd	r19, Y+8	; 0x08
    11e0:	fc 01       	movw	r30, r24
    11e2:	22 87       	std	Z+10, r18	; 0x0a
    11e4:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
    11e6:	8f 81       	ldd	r24, Y+7	; 0x07
    11e8:	98 85       	ldd	r25, Y+8	; 0x08
    11ea:	fc 01       	movw	r30, r24
    11ec:	80 81       	ld	r24, Z
    11ee:	21 e0       	ldi	r18, 0x01	; 1
    11f0:	28 0f       	add	r18, r24
    11f2:	8f 81       	ldd	r24, Y+7	; 0x07
    11f4:	98 85       	ldd	r25, Y+8	; 0x08
    11f6:	fc 01       	movw	r30, r24
    11f8:	20 83       	st	Z, r18
}
    11fa:	00 00       	nop
    11fc:	2a 96       	adiw	r28, 0x0a	; 10
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	08 95       	ret

00001208 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	00 d0       	rcall	.+0      	; 0x120e <uxListRemove+0x6>
    120e:	1f 92       	push	r1
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	8b 83       	std	Y+3, r24	; 0x03
    1216:	9c 83       	std	Y+4, r25	; 0x04
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	fc 01       	movw	r30, r24
    121e:	82 85       	ldd	r24, Z+10	; 0x0a
    1220:	93 85       	ldd	r25, Z+11	; 0x0b
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	9a 83       	std	Y+2, r25	; 0x02

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	9c 81       	ldd	r25, Y+4	; 0x04
    122a:	fc 01       	movw	r30, r24
    122c:	84 81       	ldd	r24, Z+4	; 0x04
    122e:	95 81       	ldd	r25, Z+5	; 0x05
    1230:	2b 81       	ldd	r18, Y+3	; 0x03
    1232:	3c 81       	ldd	r19, Y+4	; 0x04
    1234:	f9 01       	movw	r30, r18
    1236:	26 81       	ldd	r18, Z+6	; 0x06
    1238:	37 81       	ldd	r19, Z+7	; 0x07
    123a:	fc 01       	movw	r30, r24
    123c:	26 83       	std	Z+6, r18	; 0x06
    123e:	37 83       	std	Z+7, r19	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	9c 81       	ldd	r25, Y+4	; 0x04
    1244:	fc 01       	movw	r30, r24
    1246:	86 81       	ldd	r24, Z+6	; 0x06
    1248:	97 81       	ldd	r25, Z+7	; 0x07
    124a:	2b 81       	ldd	r18, Y+3	; 0x03
    124c:	3c 81       	ldd	r19, Y+4	; 0x04
    124e:	f9 01       	movw	r30, r18
    1250:	24 81       	ldd	r18, Z+4	; 0x04
    1252:	35 81       	ldd	r19, Z+5	; 0x05
    1254:	fc 01       	movw	r30, r24
    1256:	24 83       	std	Z+4, r18	; 0x04
    1258:	35 83       	std	Z+5, r19	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	9a 81       	ldd	r25, Y+2	; 0x02
    125e:	fc 01       	movw	r30, r24
    1260:	21 81       	ldd	r18, Z+1	; 0x01
    1262:	32 81       	ldd	r19, Z+2	; 0x02
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	9c 81       	ldd	r25, Y+4	; 0x04
    1268:	28 17       	cp	r18, r24
    126a:	39 07       	cpc	r19, r25
    126c:	51 f4       	brne	.+20     	; 0x1282 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	9c 81       	ldd	r25, Y+4	; 0x04
    1272:	fc 01       	movw	r30, r24
    1274:	26 81       	ldd	r18, Z+6	; 0x06
    1276:	37 81       	ldd	r19, Z+7	; 0x07
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	9a 81       	ldd	r25, Y+2	; 0x02
    127c:	fc 01       	movw	r30, r24
    127e:	21 83       	std	Z+1, r18	; 0x01
    1280:	32 83       	std	Z+2, r19	; 0x02
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	9c 81       	ldd	r25, Y+4	; 0x04
    1286:	fc 01       	movw	r30, r24
    1288:	12 86       	std	Z+10, r1	; 0x0a
    128a:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	9a 81       	ldd	r25, Y+2	; 0x02
    1290:	fc 01       	movw	r30, r24
    1292:	80 81       	ld	r24, Z
    1294:	2f ef       	ldi	r18, 0xFF	; 255
    1296:	28 0f       	add	r18, r24
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	9a 81       	ldd	r25, Y+2	; 0x02
    129c:	fc 01       	movw	r30, r24
    129e:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	9a 81       	ldd	r25, Y+2	; 0x02
    12a4:	fc 01       	movw	r30, r24
    12a6:	80 81       	ld	r24, Z
}
    12a8:	24 96       	adiw	r28, 0x04	; 4
    12aa:	cd bf       	out	0x3d, r28	; 61
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	08 95       	ret

000012b4 <_portSetInterruptMaskFromIsr>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    12b4:	1f 93       	push	r17
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	80 ea       	ldi	r24, 0xA0	; 160
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	fc 01       	movw	r30, r24
    12c4:	12 81       	ldd	r17, Z+2	; 0x02
    12c6:	80 ea       	ldi	r24, 0xA0	; 160
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	20 ea       	ldi	r18, 0xA0	; 160
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	f9 01       	movw	r30, r18
    12d0:	22 81       	ldd	r18, Z+2	; 0x02
    12d2:	28 7f       	andi	r18, 0xF8	; 248
    12d4:	fc 01       	movw	r30, r24
    12d6:	22 83       	std	Z+2, r18	; 0x02
    12d8:	81 2f       	mov	r24, r17
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	1f 91       	pop	r17
    12e0:	08 95       	ret

000012e2 <pxPortInitialiseStack>:
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	2a 97       	sbiw	r28, 0x0a	; 10
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	8d 83       	std	Y+5, r24	; 0x05
    12f2:	9e 83       	std	Y+6, r25	; 0x06
    12f4:	6f 83       	std	Y+7, r22	; 0x07
    12f6:	78 87       	std	Y+8, r23	; 0x08
    12f8:	49 87       	std	Y+9, r20	; 0x09
    12fa:	5a 87       	std	Y+10, r21	; 0x0a
    12fc:	8d 81       	ldd	r24, Y+5	; 0x05
    12fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1300:	21 e1       	ldi	r18, 0x11	; 17
    1302:	fc 01       	movw	r30, r24
    1304:	20 83       	st	Z, r18
    1306:	8d 81       	ldd	r24, Y+5	; 0x05
    1308:	9e 81       	ldd	r25, Y+6	; 0x06
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	8d 83       	std	Y+5, r24	; 0x05
    130e:	9e 83       	std	Y+6, r25	; 0x06
    1310:	8d 81       	ldd	r24, Y+5	; 0x05
    1312:	9e 81       	ldd	r25, Y+6	; 0x06
    1314:	22 e2       	ldi	r18, 0x22	; 34
    1316:	fc 01       	movw	r30, r24
    1318:	20 83       	st	Z, r18
    131a:	8d 81       	ldd	r24, Y+5	; 0x05
    131c:	9e 81       	ldd	r25, Y+6	; 0x06
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	8d 83       	std	Y+5, r24	; 0x05
    1322:	9e 83       	std	Y+6, r25	; 0x06
    1324:	8d 81       	ldd	r24, Y+5	; 0x05
    1326:	9e 81       	ldd	r25, Y+6	; 0x06
    1328:	23 e3       	ldi	r18, 0x33	; 51
    132a:	fc 01       	movw	r30, r24
    132c:	20 83       	st	Z, r18
    132e:	8d 81       	ldd	r24, Y+5	; 0x05
    1330:	9e 81       	ldd	r25, Y+6	; 0x06
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	8d 83       	std	Y+5, r24	; 0x05
    1336:	9e 83       	std	Y+6, r25	; 0x06
    1338:	8f 81       	ldd	r24, Y+7	; 0x07
    133a:	98 85       	ldd	r25, Y+8	; 0x08
    133c:	cc 01       	movw	r24, r24
    133e:	a0 e0       	ldi	r26, 0x00	; 0
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	9a 83       	std	Y+2, r25	; 0x02
    1346:	ab 83       	std	Y+3, r26	; 0x03
    1348:	bc 83       	std	Y+4, r27	; 0x04
    134a:	29 81       	ldd	r18, Y+1	; 0x01
    134c:	8d 81       	ldd	r24, Y+5	; 0x05
    134e:	9e 81       	ldd	r25, Y+6	; 0x06
    1350:	fc 01       	movw	r30, r24
    1352:	20 83       	st	Z, r18
    1354:	8d 81       	ldd	r24, Y+5	; 0x05
    1356:	9e 81       	ldd	r25, Y+6	; 0x06
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	8d 83       	std	Y+5, r24	; 0x05
    135c:	9e 83       	std	Y+6, r25	; 0x06
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	ab 81       	ldd	r26, Y+3	; 0x03
    1364:	bc 81       	ldd	r27, Y+4	; 0x04
    1366:	89 2f       	mov	r24, r25
    1368:	9a 2f       	mov	r25, r26
    136a:	ab 2f       	mov	r26, r27
    136c:	bb 27       	eor	r27, r27
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	9a 83       	std	Y+2, r25	; 0x02
    1372:	ab 83       	std	Y+3, r26	; 0x03
    1374:	bc 83       	std	Y+4, r27	; 0x04
    1376:	29 81       	ldd	r18, Y+1	; 0x01
    1378:	8d 81       	ldd	r24, Y+5	; 0x05
    137a:	9e 81       	ldd	r25, Y+6	; 0x06
    137c:	fc 01       	movw	r30, r24
    137e:	20 83       	st	Z, r18
    1380:	8d 81       	ldd	r24, Y+5	; 0x05
    1382:	9e 81       	ldd	r25, Y+6	; 0x06
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	8d 83       	std	Y+5, r24	; 0x05
    1388:	9e 83       	std	Y+6, r25	; 0x06
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	9a 81       	ldd	r25, Y+2	; 0x02
    138e:	ab 81       	ldd	r26, Y+3	; 0x03
    1390:	bc 81       	ldd	r27, Y+4	; 0x04
    1392:	89 2f       	mov	r24, r25
    1394:	9a 2f       	mov	r25, r26
    1396:	ab 2f       	mov	r26, r27
    1398:	bb 27       	eor	r27, r27
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	9a 83       	std	Y+2, r25	; 0x02
    139e:	ab 83       	std	Y+3, r26	; 0x03
    13a0:	bc 83       	std	Y+4, r27	; 0x04
    13a2:	29 81       	ldd	r18, Y+1	; 0x01
    13a4:	8d 81       	ldd	r24, Y+5	; 0x05
    13a6:	9e 81       	ldd	r25, Y+6	; 0x06
    13a8:	fc 01       	movw	r30, r24
    13aa:	20 83       	st	Z, r18
    13ac:	8d 81       	ldd	r24, Y+5	; 0x05
    13ae:	9e 81       	ldd	r25, Y+6	; 0x06
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	8d 83       	std	Y+5, r24	; 0x05
    13b4:	9e 83       	std	Y+6, r25	; 0x06
    13b6:	8d 81       	ldd	r24, Y+5	; 0x05
    13b8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ba:	21 e3       	ldi	r18, 0x31	; 49
    13bc:	fc 01       	movw	r30, r24
    13be:	20 83       	st	Z, r18
    13c0:	8d 81       	ldd	r24, Y+5	; 0x05
    13c2:	9e 81       	ldd	r25, Y+6	; 0x06
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	8d 83       	std	Y+5, r24	; 0x05
    13c8:	9e 83       	std	Y+6, r25	; 0x06
    13ca:	8d 81       	ldd	r24, Y+5	; 0x05
    13cc:	9e 81       	ldd	r25, Y+6	; 0x06
    13ce:	20 e8       	ldi	r18, 0x80	; 128
    13d0:	fc 01       	movw	r30, r24
    13d2:	20 83       	st	Z, r18
    13d4:	8d 81       	ldd	r24, Y+5	; 0x05
    13d6:	9e 81       	ldd	r25, Y+6	; 0x06
    13d8:	01 97       	sbiw	r24, 0x01	; 1
    13da:	8d 83       	std	Y+5, r24	; 0x05
    13dc:	9e 83       	std	Y+6, r25	; 0x06
    13de:	8d 81       	ldd	r24, Y+5	; 0x05
    13e0:	9e 81       	ldd	r25, Y+6	; 0x06
    13e2:	27 e8       	ldi	r18, 0x87	; 135
    13e4:	fc 01       	movw	r30, r24
    13e6:	20 83       	st	Z, r18
    13e8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ea:	9e 81       	ldd	r25, Y+6	; 0x06
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	8d 83       	std	Y+5, r24	; 0x05
    13f0:	9e 83       	std	Y+6, r25	; 0x06
    13f2:	8d 81       	ldd	r24, Y+5	; 0x05
    13f4:	9e 81       	ldd	r25, Y+6	; 0x06
    13f6:	fc 01       	movw	r30, r24
    13f8:	10 82       	st	Z, r1
    13fa:	8d 81       	ldd	r24, Y+5	; 0x05
    13fc:	9e 81       	ldd	r25, Y+6	; 0x06
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	8d 83       	std	Y+5, r24	; 0x05
    1402:	9e 83       	std	Y+6, r25	; 0x06
    1404:	8d 81       	ldd	r24, Y+5	; 0x05
    1406:	9e 81       	ldd	r25, Y+6	; 0x06
    1408:	fc 01       	movw	r30, r24
    140a:	10 82       	st	Z, r1
    140c:	8d 81       	ldd	r24, Y+5	; 0x05
    140e:	9e 81       	ldd	r25, Y+6	; 0x06
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	8d 83       	std	Y+5, r24	; 0x05
    1414:	9e 83       	std	Y+6, r25	; 0x06
    1416:	8d 81       	ldd	r24, Y+5	; 0x05
    1418:	9e 81       	ldd	r25, Y+6	; 0x06
    141a:	22 e0       	ldi	r18, 0x02	; 2
    141c:	fc 01       	movw	r30, r24
    141e:	20 83       	st	Z, r18
    1420:	8d 81       	ldd	r24, Y+5	; 0x05
    1422:	9e 81       	ldd	r25, Y+6	; 0x06
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	8d 83       	std	Y+5, r24	; 0x05
    1428:	9e 83       	std	Y+6, r25	; 0x06
    142a:	8d 81       	ldd	r24, Y+5	; 0x05
    142c:	9e 81       	ldd	r25, Y+6	; 0x06
    142e:	23 e0       	ldi	r18, 0x03	; 3
    1430:	fc 01       	movw	r30, r24
    1432:	20 83       	st	Z, r18
    1434:	8d 81       	ldd	r24, Y+5	; 0x05
    1436:	9e 81       	ldd	r25, Y+6	; 0x06
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	8d 83       	std	Y+5, r24	; 0x05
    143c:	9e 83       	std	Y+6, r25	; 0x06
    143e:	8d 81       	ldd	r24, Y+5	; 0x05
    1440:	9e 81       	ldd	r25, Y+6	; 0x06
    1442:	24 e0       	ldi	r18, 0x04	; 4
    1444:	fc 01       	movw	r30, r24
    1446:	20 83       	st	Z, r18
    1448:	8d 81       	ldd	r24, Y+5	; 0x05
    144a:	9e 81       	ldd	r25, Y+6	; 0x06
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	8d 83       	std	Y+5, r24	; 0x05
    1450:	9e 83       	std	Y+6, r25	; 0x06
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	9e 81       	ldd	r25, Y+6	; 0x06
    1456:	25 e0       	ldi	r18, 0x05	; 5
    1458:	fc 01       	movw	r30, r24
    145a:	20 83       	st	Z, r18
    145c:	8d 81       	ldd	r24, Y+5	; 0x05
    145e:	9e 81       	ldd	r25, Y+6	; 0x06
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	8d 83       	std	Y+5, r24	; 0x05
    1464:	9e 83       	std	Y+6, r25	; 0x06
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	9e 81       	ldd	r25, Y+6	; 0x06
    146a:	26 e0       	ldi	r18, 0x06	; 6
    146c:	fc 01       	movw	r30, r24
    146e:	20 83       	st	Z, r18
    1470:	8d 81       	ldd	r24, Y+5	; 0x05
    1472:	9e 81       	ldd	r25, Y+6	; 0x06
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	8d 83       	std	Y+5, r24	; 0x05
    1478:	9e 83       	std	Y+6, r25	; 0x06
    147a:	8d 81       	ldd	r24, Y+5	; 0x05
    147c:	9e 81       	ldd	r25, Y+6	; 0x06
    147e:	27 e0       	ldi	r18, 0x07	; 7
    1480:	fc 01       	movw	r30, r24
    1482:	20 83       	st	Z, r18
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	9e 81       	ldd	r25, Y+6	; 0x06
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	8d 83       	std	Y+5, r24	; 0x05
    148c:	9e 83       	std	Y+6, r25	; 0x06
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
    1492:	28 e0       	ldi	r18, 0x08	; 8
    1494:	fc 01       	movw	r30, r24
    1496:	20 83       	st	Z, r18
    1498:	8d 81       	ldd	r24, Y+5	; 0x05
    149a:	9e 81       	ldd	r25, Y+6	; 0x06
    149c:	01 97       	sbiw	r24, 0x01	; 1
    149e:	8d 83       	std	Y+5, r24	; 0x05
    14a0:	9e 83       	std	Y+6, r25	; 0x06
    14a2:	8d 81       	ldd	r24, Y+5	; 0x05
    14a4:	9e 81       	ldd	r25, Y+6	; 0x06
    14a6:	29 e0       	ldi	r18, 0x09	; 9
    14a8:	fc 01       	movw	r30, r24
    14aa:	20 83       	st	Z, r18
    14ac:	8d 81       	ldd	r24, Y+5	; 0x05
    14ae:	9e 81       	ldd	r25, Y+6	; 0x06
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	8d 83       	std	Y+5, r24	; 0x05
    14b4:	9e 83       	std	Y+6, r25	; 0x06
    14b6:	8d 81       	ldd	r24, Y+5	; 0x05
    14b8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ba:	20 e1       	ldi	r18, 0x10	; 16
    14bc:	fc 01       	movw	r30, r24
    14be:	20 83       	st	Z, r18
    14c0:	8d 81       	ldd	r24, Y+5	; 0x05
    14c2:	9e 81       	ldd	r25, Y+6	; 0x06
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	8d 83       	std	Y+5, r24	; 0x05
    14c8:	9e 83       	std	Y+6, r25	; 0x06
    14ca:	8d 81       	ldd	r24, Y+5	; 0x05
    14cc:	9e 81       	ldd	r25, Y+6	; 0x06
    14ce:	21 e1       	ldi	r18, 0x11	; 17
    14d0:	fc 01       	movw	r30, r24
    14d2:	20 83       	st	Z, r18
    14d4:	8d 81       	ldd	r24, Y+5	; 0x05
    14d6:	9e 81       	ldd	r25, Y+6	; 0x06
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	8d 83       	std	Y+5, r24	; 0x05
    14dc:	9e 83       	std	Y+6, r25	; 0x06
    14de:	8d 81       	ldd	r24, Y+5	; 0x05
    14e0:	9e 81       	ldd	r25, Y+6	; 0x06
    14e2:	22 e1       	ldi	r18, 0x12	; 18
    14e4:	fc 01       	movw	r30, r24
    14e6:	20 83       	st	Z, r18
    14e8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ea:	9e 81       	ldd	r25, Y+6	; 0x06
    14ec:	01 97       	sbiw	r24, 0x01	; 1
    14ee:	8d 83       	std	Y+5, r24	; 0x05
    14f0:	9e 83       	std	Y+6, r25	; 0x06
    14f2:	8d 81       	ldd	r24, Y+5	; 0x05
    14f4:	9e 81       	ldd	r25, Y+6	; 0x06
    14f6:	23 e1       	ldi	r18, 0x13	; 19
    14f8:	fc 01       	movw	r30, r24
    14fa:	20 83       	st	Z, r18
    14fc:	8d 81       	ldd	r24, Y+5	; 0x05
    14fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	8d 83       	std	Y+5, r24	; 0x05
    1504:	9e 83       	std	Y+6, r25	; 0x06
    1506:	8d 81       	ldd	r24, Y+5	; 0x05
    1508:	9e 81       	ldd	r25, Y+6	; 0x06
    150a:	24 e1       	ldi	r18, 0x14	; 20
    150c:	fc 01       	movw	r30, r24
    150e:	20 83       	st	Z, r18
    1510:	8d 81       	ldd	r24, Y+5	; 0x05
    1512:	9e 81       	ldd	r25, Y+6	; 0x06
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	8d 83       	std	Y+5, r24	; 0x05
    1518:	9e 83       	std	Y+6, r25	; 0x06
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	9e 81       	ldd	r25, Y+6	; 0x06
    151e:	25 e1       	ldi	r18, 0x15	; 21
    1520:	fc 01       	movw	r30, r24
    1522:	20 83       	st	Z, r18
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	8d 83       	std	Y+5, r24	; 0x05
    152c:	9e 83       	std	Y+6, r25	; 0x06
    152e:	8d 81       	ldd	r24, Y+5	; 0x05
    1530:	9e 81       	ldd	r25, Y+6	; 0x06
    1532:	26 e1       	ldi	r18, 0x16	; 22
    1534:	fc 01       	movw	r30, r24
    1536:	20 83       	st	Z, r18
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
    153a:	9e 81       	ldd	r25, Y+6	; 0x06
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	8d 83       	std	Y+5, r24	; 0x05
    1540:	9e 83       	std	Y+6, r25	; 0x06
    1542:	8d 81       	ldd	r24, Y+5	; 0x05
    1544:	9e 81       	ldd	r25, Y+6	; 0x06
    1546:	27 e1       	ldi	r18, 0x17	; 23
    1548:	fc 01       	movw	r30, r24
    154a:	20 83       	st	Z, r18
    154c:	8d 81       	ldd	r24, Y+5	; 0x05
    154e:	9e 81       	ldd	r25, Y+6	; 0x06
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	8d 83       	std	Y+5, r24	; 0x05
    1554:	9e 83       	std	Y+6, r25	; 0x06
    1556:	8d 81       	ldd	r24, Y+5	; 0x05
    1558:	9e 81       	ldd	r25, Y+6	; 0x06
    155a:	28 e1       	ldi	r18, 0x18	; 24
    155c:	fc 01       	movw	r30, r24
    155e:	20 83       	st	Z, r18
    1560:	8d 81       	ldd	r24, Y+5	; 0x05
    1562:	9e 81       	ldd	r25, Y+6	; 0x06
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	8d 83       	std	Y+5, r24	; 0x05
    1568:	9e 83       	std	Y+6, r25	; 0x06
    156a:	8d 81       	ldd	r24, Y+5	; 0x05
    156c:	9e 81       	ldd	r25, Y+6	; 0x06
    156e:	29 e1       	ldi	r18, 0x19	; 25
    1570:	fc 01       	movw	r30, r24
    1572:	20 83       	st	Z, r18
    1574:	8d 81       	ldd	r24, Y+5	; 0x05
    1576:	9e 81       	ldd	r25, Y+6	; 0x06
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	8d 83       	std	Y+5, r24	; 0x05
    157c:	9e 83       	std	Y+6, r25	; 0x06
    157e:	8d 81       	ldd	r24, Y+5	; 0x05
    1580:	9e 81       	ldd	r25, Y+6	; 0x06
    1582:	20 e2       	ldi	r18, 0x20	; 32
    1584:	fc 01       	movw	r30, r24
    1586:	20 83       	st	Z, r18
    1588:	8d 81       	ldd	r24, Y+5	; 0x05
    158a:	9e 81       	ldd	r25, Y+6	; 0x06
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	8d 83       	std	Y+5, r24	; 0x05
    1590:	9e 83       	std	Y+6, r25	; 0x06
    1592:	8d 81       	ldd	r24, Y+5	; 0x05
    1594:	9e 81       	ldd	r25, Y+6	; 0x06
    1596:	21 e2       	ldi	r18, 0x21	; 33
    1598:	fc 01       	movw	r30, r24
    159a:	20 83       	st	Z, r18
    159c:	8d 81       	ldd	r24, Y+5	; 0x05
    159e:	9e 81       	ldd	r25, Y+6	; 0x06
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	8d 83       	std	Y+5, r24	; 0x05
    15a4:	9e 83       	std	Y+6, r25	; 0x06
    15a6:	8d 81       	ldd	r24, Y+5	; 0x05
    15a8:	9e 81       	ldd	r25, Y+6	; 0x06
    15aa:	22 e2       	ldi	r18, 0x22	; 34
    15ac:	fc 01       	movw	r30, r24
    15ae:	20 83       	st	Z, r18
    15b0:	8d 81       	ldd	r24, Y+5	; 0x05
    15b2:	9e 81       	ldd	r25, Y+6	; 0x06
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	8d 83       	std	Y+5, r24	; 0x05
    15b8:	9e 83       	std	Y+6, r25	; 0x06
    15ba:	8d 81       	ldd	r24, Y+5	; 0x05
    15bc:	9e 81       	ldd	r25, Y+6	; 0x06
    15be:	23 e2       	ldi	r18, 0x23	; 35
    15c0:	fc 01       	movw	r30, r24
    15c2:	20 83       	st	Z, r18
    15c4:	8d 81       	ldd	r24, Y+5	; 0x05
    15c6:	9e 81       	ldd	r25, Y+6	; 0x06
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	8d 83       	std	Y+5, r24	; 0x05
    15cc:	9e 83       	std	Y+6, r25	; 0x06
    15ce:	89 85       	ldd	r24, Y+9	; 0x09
    15d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d2:	cc 01       	movw	r24, r24
    15d4:	a0 e0       	ldi	r26, 0x00	; 0
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	89 83       	std	Y+1, r24	; 0x01
    15da:	9a 83       	std	Y+2, r25	; 0x02
    15dc:	ab 83       	std	Y+3, r26	; 0x03
    15de:	bc 83       	std	Y+4, r27	; 0x04
    15e0:	29 81       	ldd	r18, Y+1	; 0x01
    15e2:	8d 81       	ldd	r24, Y+5	; 0x05
    15e4:	9e 81       	ldd	r25, Y+6	; 0x06
    15e6:	fc 01       	movw	r30, r24
    15e8:	20 83       	st	Z, r18
    15ea:	8d 81       	ldd	r24, Y+5	; 0x05
    15ec:	9e 81       	ldd	r25, Y+6	; 0x06
    15ee:	01 97       	sbiw	r24, 0x01	; 1
    15f0:	8d 83       	std	Y+5, r24	; 0x05
    15f2:	9e 83       	std	Y+6, r25	; 0x06
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	9a 81       	ldd	r25, Y+2	; 0x02
    15f8:	ab 81       	ldd	r26, Y+3	; 0x03
    15fa:	bc 81       	ldd	r27, Y+4	; 0x04
    15fc:	89 2f       	mov	r24, r25
    15fe:	9a 2f       	mov	r25, r26
    1600:	ab 2f       	mov	r26, r27
    1602:	bb 27       	eor	r27, r27
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	9a 83       	std	Y+2, r25	; 0x02
    1608:	ab 83       	std	Y+3, r26	; 0x03
    160a:	bc 83       	std	Y+4, r27	; 0x04
    160c:	29 81       	ldd	r18, Y+1	; 0x01
    160e:	8d 81       	ldd	r24, Y+5	; 0x05
    1610:	9e 81       	ldd	r25, Y+6	; 0x06
    1612:	fc 01       	movw	r30, r24
    1614:	20 83       	st	Z, r18
    1616:	8d 81       	ldd	r24, Y+5	; 0x05
    1618:	9e 81       	ldd	r25, Y+6	; 0x06
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	8d 83       	std	Y+5, r24	; 0x05
    161e:	9e 83       	std	Y+6, r25	; 0x06
    1620:	8d 81       	ldd	r24, Y+5	; 0x05
    1622:	9e 81       	ldd	r25, Y+6	; 0x06
    1624:	26 e2       	ldi	r18, 0x26	; 38
    1626:	fc 01       	movw	r30, r24
    1628:	20 83       	st	Z, r18
    162a:	8d 81       	ldd	r24, Y+5	; 0x05
    162c:	9e 81       	ldd	r25, Y+6	; 0x06
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	8d 83       	std	Y+5, r24	; 0x05
    1632:	9e 83       	std	Y+6, r25	; 0x06
    1634:	8d 81       	ldd	r24, Y+5	; 0x05
    1636:	9e 81       	ldd	r25, Y+6	; 0x06
    1638:	27 e2       	ldi	r18, 0x27	; 39
    163a:	fc 01       	movw	r30, r24
    163c:	20 83       	st	Z, r18
    163e:	8d 81       	ldd	r24, Y+5	; 0x05
    1640:	9e 81       	ldd	r25, Y+6	; 0x06
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	8d 83       	std	Y+5, r24	; 0x05
    1646:	9e 83       	std	Y+6, r25	; 0x06
    1648:	8d 81       	ldd	r24, Y+5	; 0x05
    164a:	9e 81       	ldd	r25, Y+6	; 0x06
    164c:	28 e2       	ldi	r18, 0x28	; 40
    164e:	fc 01       	movw	r30, r24
    1650:	20 83       	st	Z, r18
    1652:	8d 81       	ldd	r24, Y+5	; 0x05
    1654:	9e 81       	ldd	r25, Y+6	; 0x06
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	8d 83       	std	Y+5, r24	; 0x05
    165a:	9e 83       	std	Y+6, r25	; 0x06
    165c:	8d 81       	ldd	r24, Y+5	; 0x05
    165e:	9e 81       	ldd	r25, Y+6	; 0x06
    1660:	29 e2       	ldi	r18, 0x29	; 41
    1662:	fc 01       	movw	r30, r24
    1664:	20 83       	st	Z, r18
    1666:	8d 81       	ldd	r24, Y+5	; 0x05
    1668:	9e 81       	ldd	r25, Y+6	; 0x06
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	8d 83       	std	Y+5, r24	; 0x05
    166e:	9e 83       	std	Y+6, r25	; 0x06
    1670:	8d 81       	ldd	r24, Y+5	; 0x05
    1672:	9e 81       	ldd	r25, Y+6	; 0x06
    1674:	20 e3       	ldi	r18, 0x30	; 48
    1676:	fc 01       	movw	r30, r24
    1678:	20 83       	st	Z, r18
    167a:	8d 81       	ldd	r24, Y+5	; 0x05
    167c:	9e 81       	ldd	r25, Y+6	; 0x06
    167e:	01 97       	sbiw	r24, 0x01	; 1
    1680:	8d 83       	std	Y+5, r24	; 0x05
    1682:	9e 83       	std	Y+6, r25	; 0x06
    1684:	8d 81       	ldd	r24, Y+5	; 0x05
    1686:	9e 81       	ldd	r25, Y+6	; 0x06
    1688:	2a 96       	adiw	r28, 0x0a	; 10
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	08 95       	ret

00001694 <xPortStartScheduler>:
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
    169c:	0e 94 91 0c 	call	0x1922	; 0x1922 <prvSetupTimerInterrupt>
    16a0:	a0 91 a2 34 	lds	r26, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    16a4:	b0 91 a3 34 	lds	r27, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    16a8:	0d 90       	ld	r0, X+
    16aa:	0d be       	out	0x3d, r0	; 61
    16ac:	0d 90       	ld	r0, X+
    16ae:	0e be       	out	0x3e, r0	; 62
    16b0:	ef 91       	pop	r30
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	bf 91       	pop	r27
    16b8:	af 91       	pop	r26
    16ba:	9f 91       	pop	r25
    16bc:	8f 91       	pop	r24
    16be:	7f 91       	pop	r23
    16c0:	6f 91       	pop	r22
    16c2:	5f 91       	pop	r21
    16c4:	4f 91       	pop	r20
    16c6:	3f 91       	pop	r19
    16c8:	2f 91       	pop	r18
    16ca:	1f 91       	pop	r17
    16cc:	0f 91       	pop	r16
    16ce:	ff 90       	pop	r15
    16d0:	ef 90       	pop	r14
    16d2:	df 90       	pop	r13
    16d4:	cf 90       	pop	r12
    16d6:	bf 90       	pop	r11
    16d8:	af 90       	pop	r10
    16da:	9f 90       	pop	r9
    16dc:	8f 90       	pop	r8
    16de:	7f 90       	pop	r7
    16e0:	6f 90       	pop	r6
    16e2:	5f 90       	pop	r5
    16e4:	4f 90       	pop	r4
    16e6:	3f 90       	pop	r3
    16e8:	2f 90       	pop	r2
    16ea:	1f 90       	pop	r1
    16ec:	0f 90       	pop	r0
    16ee:	ff 91       	pop	r31
    16f0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    16f4:	ff 91       	pop	r31
    16f6:	ff bf       	out	0x3f, r31	; 63
    16f8:	ff 91       	pop	r31
    16fa:	08 95       	ret
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	08 95       	ret

00001704 <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1704:	ff 93       	push	r31
    1706:	ff b7       	in	r31, 0x3f	; 63
    1708:	ff 93       	push	r31
    170a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    170e:	ff 93       	push	r31
    1710:	f8 7f       	andi	r31, 0xF8	; 248
    1712:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1716:	0f 92       	push	r0
    1718:	1f 92       	push	r1
    171a:	11 24       	eor	r1, r1
    171c:	2f 92       	push	r2
    171e:	3f 92       	push	r3
    1720:	4f 92       	push	r4
    1722:	5f 92       	push	r5
    1724:	6f 92       	push	r6
    1726:	7f 92       	push	r7
    1728:	8f 92       	push	r8
    172a:	9f 92       	push	r9
    172c:	af 92       	push	r10
    172e:	bf 92       	push	r11
    1730:	cf 92       	push	r12
    1732:	df 92       	push	r13
    1734:	ef 92       	push	r14
    1736:	ff 92       	push	r15
    1738:	0f 93       	push	r16
    173a:	1f 93       	push	r17
    173c:	2f 93       	push	r18
    173e:	3f 93       	push	r19
    1740:	4f 93       	push	r20
    1742:	5f 93       	push	r21
    1744:	6f 93       	push	r22
    1746:	7f 93       	push	r23
    1748:	8f 93       	push	r24
    174a:	9f 93       	push	r25
    174c:	af 93       	push	r26
    174e:	bf 93       	push	r27
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	ef 93       	push	r30
    1756:	a0 91 a2 34 	lds	r26, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    175a:	b0 91 a3 34 	lds	r27, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    175e:	0d b6       	in	r0, 0x3d	; 61
    1760:	0d 92       	st	X+, r0
    1762:	0e b6       	in	r0, 0x3e	; 62
    1764:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1766:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    176a:	a0 91 a2 34 	lds	r26, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    176e:	b0 91 a3 34 	lds	r27, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    1772:	0d 90       	ld	r0, X+
    1774:	0d be       	out	0x3d, r0	; 61
    1776:	0d 90       	ld	r0, X+
    1778:	0e be       	out	0x3e, r0	; 62
    177a:	ef 91       	pop	r30
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	bf 91       	pop	r27
    1782:	af 91       	pop	r26
    1784:	9f 91       	pop	r25
    1786:	8f 91       	pop	r24
    1788:	7f 91       	pop	r23
    178a:	6f 91       	pop	r22
    178c:	5f 91       	pop	r21
    178e:	4f 91       	pop	r20
    1790:	3f 91       	pop	r19
    1792:	2f 91       	pop	r18
    1794:	1f 91       	pop	r17
    1796:	0f 91       	pop	r16
    1798:	ff 90       	pop	r15
    179a:	ef 90       	pop	r14
    179c:	df 90       	pop	r13
    179e:	cf 90       	pop	r12
    17a0:	bf 90       	pop	r11
    17a2:	af 90       	pop	r10
    17a4:	9f 90       	pop	r9
    17a6:	8f 90       	pop	r8
    17a8:	7f 90       	pop	r7
    17aa:	6f 90       	pop	r6
    17ac:	5f 90       	pop	r5
    17ae:	4f 90       	pop	r4
    17b0:	3f 90       	pop	r3
    17b2:	2f 90       	pop	r2
    17b4:	1f 90       	pop	r1
    17b6:	0f 90       	pop	r0
    17b8:	ff 91       	pop	r31
    17ba:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    17be:	ff 91       	pop	r31
    17c0:	ff bf       	out	0x3f, r31	; 63
    17c2:	ff 91       	pop	r31
	asm volatile ( "ret" );
    17c4:	08 95       	ret
	...

000017c8 <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
    17c8:	1f 93       	push	r17
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	1f 92       	push	r1
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	89 83       	std	Y+1, r24	; 0x01
		intTaskSwitchPending |= xSwitchRequired;					
    17d6:	80 91 62 35 	lds	r24, 0x3562	; 0x803562 <intTaskSwitchPending>
    17da:	98 2f       	mov	r25, r24
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	89 2b       	or	r24, r25
    17e0:	80 93 62 35 	sts	0x3562, r24	; 0x803562 <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
    17e4:	80 ea       	ldi	r24, 0xA0	; 160
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	fc 01       	movw	r30, r24
    17ea:	80 81       	ld	r24, Z
    17ec:	81 30       	cpi	r24, 0x01	; 1
    17ee:	61 f0       	breq	.+24     	; 0x1808 <portTaskSwitchContext+0x40>
    17f0:	80 ea       	ldi	r24, 0xA0	; 160
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	fc 01       	movw	r30, r24
    17f6:	80 81       	ld	r24, Z
    17f8:	82 30       	cpi	r24, 0x02	; 2
    17fa:	31 f0       	breq	.+12     	; 0x1808 <portTaskSwitchContext+0x40>
    17fc:	80 ea       	ldi	r24, 0xA0	; 160
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	fc 01       	movw	r30, r24
    1802:	80 81       	ld	r24, Z
    1804:	84 30       	cpi	r24, 0x04	; 4
    1806:	79 f4       	brne	.+30     	; 0x1826 <portTaskSwitchContext+0x5e>
    1808:	80 91 62 35 	lds	r24, 0x3562	; 0x803562 <intTaskSwitchPending>
    180c:	88 23       	and	r24, r24
    180e:	59 f0       	breq	.+22     	; 0x1826 <portTaskSwitchContext+0x5e>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
    1810:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_portSetInterruptMaskFromIsr>
    1814:	18 2f       	mov	r17, r24
			intTaskSwitchPending = 0;								
    1816:	10 92 62 35 	sts	0x3562, r1	; 0x803562 <intTaskSwitchPending>
			vTaskSwitchContext();                   				
    181a:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
    181e:	80 ea       	ldi	r24, 0xA0	; 160
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	fc 01       	movw	r30, r24
    1824:	12 83       	std	Z+2, r17	; 0x02
		}                                          					
	}
    1826:	00 00       	nop
    1828:	0f 90       	pop	r0
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	1f 91       	pop	r17
    1830:	08 95       	ret

00001832 <portTaskIncrementTick>:
	// This routine is only an indirect call to vTaskIncrementTick because
	// a local variable is necessary. Local variables cannot be used directly
	// in a naked isr because of the lack of the frame pointer.
	//
	static void portTaskIncrementTick( void )
	{
    1832:	1f 93       	push	r17
    1834:	cf 93       	push	r28
    1836:	df 93       	push	r29
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
		register unsigned portBASE_TYPE uxSavedPmicCtrlReg;

 		uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR();
    183c:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_portSetInterruptMaskFromIsr>
    1840:	18 2f       	mov	r17, r24
		xTaskIncrementTick();
    1842:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <xTaskIncrementTick>
 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedPmicCtrlReg );
    1846:	80 ea       	ldi	r24, 0xA0	; 160
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	fc 01       	movw	r30, r24
    184c:	12 83       	std	Z+2, r17	; 0x02
	}
    184e:	00 00       	nop
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	1f 91       	pop	r17
    1856:	08 95       	ret

00001858 <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
    1858:	ff 93       	push	r31
    185a:	ff b7       	in	r31, 0x3f	; 63
    185c:	ff 93       	push	r31
    185e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1862:	ff 93       	push	r31
    1864:	f8 7f       	andi	r31, 0xF8	; 248
    1866:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    186a:	0f 92       	push	r0
    186c:	1f 92       	push	r1
    186e:	11 24       	eor	r1, r1
    1870:	2f 92       	push	r2
    1872:	3f 92       	push	r3
    1874:	4f 92       	push	r4
    1876:	5f 92       	push	r5
    1878:	6f 92       	push	r6
    187a:	7f 92       	push	r7
    187c:	8f 92       	push	r8
    187e:	9f 92       	push	r9
    1880:	af 92       	push	r10
    1882:	bf 92       	push	r11
    1884:	cf 92       	push	r12
    1886:	df 92       	push	r13
    1888:	ef 92       	push	r14
    188a:	ff 92       	push	r15
    188c:	0f 93       	push	r16
    188e:	1f 93       	push	r17
    1890:	2f 93       	push	r18
    1892:	3f 93       	push	r19
    1894:	4f 93       	push	r20
    1896:	5f 93       	push	r21
    1898:	6f 93       	push	r22
    189a:	7f 93       	push	r23
    189c:	8f 93       	push	r24
    189e:	9f 93       	push	r25
    18a0:	af 93       	push	r26
    18a2:	bf 93       	push	r27
    18a4:	cf 93       	push	r28
    18a6:	df 93       	push	r29
    18a8:	ef 93       	push	r30
    18aa:	a0 91 a2 34 	lds	r26, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    18ae:	b0 91 a3 34 	lds	r27, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    18b2:	0d b6       	in	r0, 0x3d	; 61
    18b4:	0d 92       	st	X+, r0
    18b6:	0e b6       	in	r0, 0x3e	; 62
    18b8:	0d 92       	st	X+, r0
		portTaskIncrementTick();
    18ba:	0e 94 19 0c 	call	0x1832	; 0x1832 <portTaskIncrementTick>
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <portTaskSwitchContext>
    18c4:	a0 91 a2 34 	lds	r26, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    18c8:	b0 91 a3 34 	lds	r27, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    18cc:	0d 90       	ld	r0, X+
    18ce:	0d be       	out	0x3d, r0	; 61
    18d0:	0d 90       	ld	r0, X+
    18d2:	0e be       	out	0x3e, r0	; 62
    18d4:	ef 91       	pop	r30
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	bf 91       	pop	r27
    18dc:	af 91       	pop	r26
    18de:	9f 91       	pop	r25
    18e0:	8f 91       	pop	r24
    18e2:	7f 91       	pop	r23
    18e4:	6f 91       	pop	r22
    18e6:	5f 91       	pop	r21
    18e8:	4f 91       	pop	r20
    18ea:	3f 91       	pop	r19
    18ec:	2f 91       	pop	r18
    18ee:	1f 91       	pop	r17
    18f0:	0f 91       	pop	r16
    18f2:	ff 90       	pop	r15
    18f4:	ef 90       	pop	r14
    18f6:	df 90       	pop	r13
    18f8:	cf 90       	pop	r12
    18fa:	bf 90       	pop	r11
    18fc:	af 90       	pop	r10
    18fe:	9f 90       	pop	r9
    1900:	8f 90       	pop	r8
    1902:	7f 90       	pop	r7
    1904:	6f 90       	pop	r6
    1906:	5f 90       	pop	r5
    1908:	4f 90       	pop	r4
    190a:	3f 90       	pop	r3
    190c:	2f 90       	pop	r2
    190e:	1f 90       	pop	r1
    1910:	0f 90       	pop	r0
    1912:	ff 91       	pop	r31
    1914:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1918:	ff 91       	pop	r31
    191a:	ff bf       	out	0x3f, r31	; 63
    191c:	ff 91       	pop	r31
    191e:	18 95       	reti
	...

00001922 <prvSetupTimerInterrupt>:
//-----------------------------------------------------------
//
// Setup of 16bit timer C0 to generate a tick interrupt in case of overflow.
//
static void prvSetupTimerInterrupt( void )
{
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
    1926:	00 d0       	rcall	.+0      	; 0x1928 <prvSetupTimerInterrupt+0x6>
    1928:	1f 92       	push	r1
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62

	unsigned portLONG ulOvfMatch;

	ulOvfMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	9d e7       	ldi	r25, 0x7D	; 125
    1932:	a0 e0       	ldi	r26, 0x00	; 0
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	89 83       	std	Y+1, r24	; 0x01
    1938:	9a 83       	std	Y+2, r25	; 0x02
    193a:	ab 83       	std	Y+3, r26	; 0x03
    193c:	bc 83       	std	Y+4, r27	; 0x04

	// We only have 16bits so have to scale to get our required tick rate.
	ulOvfMatch /= portCLOCK_PRESCALER_TIMER0;
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	9a 81       	ldd	r25, Y+2	; 0x02
    1942:	ab 81       	ldd	r26, Y+3	; 0x03
    1944:	bc 81       	ldd	r27, Y+4	; 0x04
    1946:	68 94       	set
    1948:	15 f8       	bld	r1, 5
    194a:	b6 95       	lsr	r27
    194c:	a7 95       	ror	r26
    194e:	97 95       	ror	r25
    1950:	87 95       	ror	r24
    1952:	16 94       	lsr	r1
    1954:	d1 f7       	brne	.-12     	; 0x194a <prvSetupTimerInterrupt+0x28>
    1956:	89 83       	std	Y+1, r24	; 0x01
    1958:	9a 83       	std	Y+2, r25	; 0x02
    195a:	ab 83       	std	Y+3, r26	; 0x03
    195c:	bc 83       	std	Y+4, r27	; 0x04

	// Adjust for correct value. (because overflow clear if CNT > PER)
	ulOvfMatch -= ( unsigned portLONG ) 1;
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	9a 81       	ldd	r25, Y+2	; 0x02
    1962:	ab 81       	ldd	r26, Y+3	; 0x03
    1964:	bc 81       	ldd	r27, Y+4	; 0x04
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	a1 09       	sbc	r26, r1
    196a:	b1 09       	sbc	r27, r1
    196c:	89 83       	std	Y+1, r24	; 0x01
    196e:	9a 83       	std	Y+2, r25	; 0x02
    1970:	ab 83       	std	Y+3, r26	; 0x03
    1972:	bc 83       	std	Y+4, r27	; 0x04

	// Setup overflow value
	TC_SetPeriod( &TCC0, ulOvfMatch);
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	98 e0       	ldi	r25, 0x08	; 8
    1978:	29 81       	ldd	r18, Y+1	; 0x01
    197a:	3a 81       	ldd	r19, Y+2	; 0x02
    197c:	fc 01       	movw	r30, r24
    197e:	26 a3       	std	Z+38, r18	; 0x26
    1980:	37 a3       	std	Z+39, r19	; 0x27
		
	// Setup clock source and compare match behaviour.
	TC0_ConfigClockSource( &TCC0, TC_CLKSEL_DIV64_gc);
    1982:	65 e0       	ldi	r22, 0x05	; 5
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	98 e0       	ldi	r25, 0x08	; 8
    1988:	0e 94 be 03 	call	0x77c	; 0x77c <TC0_ConfigClockSource>

	// Enable the interrupt - this is okay as interrupts are currently globally disabled.
	// The tick interrupt may run in one of the three levels.
#if   configKERNEL_INTERRUPT_PRIORITY == 0
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_LO_gc);	//low interrupt priority
    198c:	61 e0       	ldi	r22, 0x01	; 1
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	98 e0       	ldi	r25, 0x08	; 8
    1992:	0e 94 f6 03 	call	0x7ec	; 0x7ec <TC0_SetOverflowIntLevel>
#elif configKERNEL_INTERRUPT_PRIORITY == 1
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_MED_gc);	//medium interrupt priority
#elif configKERNEL_INTERRUPT_PRIORITY == 2
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_HI_gc);	//high interrupt priority
#endif
}
    1996:	00 00       	nop
    1998:	24 96       	adiw	r28, 0x04	; 4
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	df 91       	pop	r29
    19a0:	cf 91       	pop	r28
    19a2:	08 95       	ret

000019a4 <xQueueGenericReset>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	25 97       	sbiw	r28, 0x05	; 5
    19ae:	cd bf       	out	0x3d, r28	; 61
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	8b 83       	std	Y+3, r24	; 0x03
    19b4:	9c 83       	std	Y+4, r25	; 0x04
    19b6:	6d 83       	std	Y+5, r22	; 0x05
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	9c 81       	ldd	r25, Y+4	; 0x04
    19bc:	89 83       	std	Y+1, r24	; 0x01
    19be:	9a 83       	std	Y+2, r25	; 0x02
    19c0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    19c4:	ff 93       	push	r31
    19c6:	f8 7f       	andi	r31, 0xF8	; 248
    19c8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	9a 81       	ldd	r25, Y+2	; 0x02
    19d0:	fc 01       	movw	r30, r24
    19d2:	80 81       	ld	r24, Z
    19d4:	91 81       	ldd	r25, Z+1	; 0x01
    19d6:	29 81       	ldd	r18, Y+1	; 0x01
    19d8:	3a 81       	ldd	r19, Y+2	; 0x02
    19da:	f9 01       	movw	r30, r18
    19dc:	27 8d       	ldd	r18, Z+31	; 0x1f
    19de:	42 2f       	mov	r20, r18
    19e0:	50 e0       	ldi	r21, 0x00	; 0
    19e2:	29 81       	ldd	r18, Y+1	; 0x01
    19e4:	3a 81       	ldd	r19, Y+2	; 0x02
    19e6:	f9 01       	movw	r30, r18
    19e8:	20 a1       	ldd	r18, Z+32	; 0x20
    19ea:	22 2f       	mov	r18, r18
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	42 9f       	mul	r20, r18
    19f0:	b0 01       	movw	r22, r0
    19f2:	43 9f       	mul	r20, r19
    19f4:	70 0d       	add	r23, r0
    19f6:	52 9f       	mul	r21, r18
    19f8:	70 0d       	add	r23, r0
    19fa:	11 24       	eor	r1, r1
    19fc:	9b 01       	movw	r18, r22
    19fe:	28 0f       	add	r18, r24
    1a00:	39 1f       	adc	r19, r25
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	9a 81       	ldd	r25, Y+2	; 0x02
    1a06:	fc 01       	movw	r30, r24
    1a08:	22 83       	std	Z+2, r18	; 0x02
    1a0a:	33 83       	std	Z+3, r19	; 0x03
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a10:	fc 01       	movw	r30, r24
    1a12:	16 8e       	std	Z+30, r1	; 0x1e
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	9a 81       	ldd	r25, Y+2	; 0x02
    1a18:	fc 01       	movw	r30, r24
    1a1a:	20 81       	ld	r18, Z
    1a1c:	31 81       	ldd	r19, Z+1	; 0x01
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	9a 81       	ldd	r25, Y+2	; 0x02
    1a22:	fc 01       	movw	r30, r24
    1a24:	24 83       	std	Z+4, r18	; 0x04
    1a26:	35 83       	std	Z+5, r19	; 0x05
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	80 81       	ld	r24, Z
    1a30:	91 81       	ldd	r25, Z+1	; 0x01
    1a32:	29 81       	ldd	r18, Y+1	; 0x01
    1a34:	3a 81       	ldd	r19, Y+2	; 0x02
    1a36:	f9 01       	movw	r30, r18
    1a38:	27 8d       	ldd	r18, Z+31	; 0x1f
    1a3a:	22 2f       	mov	r18, r18
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	a9 01       	movw	r20, r18
    1a40:	41 50       	subi	r20, 0x01	; 1
    1a42:	51 09       	sbc	r21, r1
    1a44:	29 81       	ldd	r18, Y+1	; 0x01
    1a46:	3a 81       	ldd	r19, Y+2	; 0x02
    1a48:	f9 01       	movw	r30, r18
    1a4a:	20 a1       	ldd	r18, Z+32	; 0x20
    1a4c:	22 2f       	mov	r18, r18
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	42 9f       	mul	r20, r18
    1a52:	b0 01       	movw	r22, r0
    1a54:	43 9f       	mul	r20, r19
    1a56:	70 0d       	add	r23, r0
    1a58:	52 9f       	mul	r21, r18
    1a5a:	70 0d       	add	r23, r0
    1a5c:	11 24       	eor	r1, r1
    1a5e:	9b 01       	movw	r18, r22
    1a60:	28 0f       	add	r18, r24
    1a62:	39 1f       	adc	r19, r25
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	9a 81       	ldd	r25, Y+2	; 0x02
    1a68:	fc 01       	movw	r30, r24
    1a6a:	26 83       	std	Z+6, r18	; 0x06
    1a6c:	37 83       	std	Z+7, r19	; 0x07
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	9a 81       	ldd	r25, Y+2	; 0x02
    1a72:	2f ef       	ldi	r18, 0xFF	; 255
    1a74:	fc 01       	movw	r30, r24
    1a76:	21 a3       	std	Z+33, r18	; 0x21
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
    1a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7c:	2f ef       	ldi	r18, 0xFF	; 255
    1a7e:	fc 01       	movw	r30, r24
    1a80:	22 a3       	std	Z+34, r18	; 0x22
    1a82:	8d 81       	ldd	r24, Y+5	; 0x05
    1a84:	88 23       	and	r24, r24
    1a86:	81 f4       	brne	.+32     	; 0x1aa8 <xQueueGenericReset+0x104>
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	80 85       	ldd	r24, Z+8	; 0x08
    1a90:	88 23       	and	r24, r24
    1a92:	a1 f0       	breq	.+40     	; 0x1abc <xQueueGenericReset+0x118>
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	9a 81       	ldd	r25, Y+2	; 0x02
    1a98:	08 96       	adiw	r24, 0x08	; 8
    1a9a:	0e 94 86 18 	call	0x310c	; 0x310c <xTaskRemoveFromEventList>
    1a9e:	88 23       	and	r24, r24
    1aa0:	69 f0       	breq	.+26     	; 0x1abc <xQueueGenericReset+0x118>
    1aa2:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    1aa6:	0a c0       	rjmp	.+20     	; 0x1abc <xQueueGenericReset+0x118>
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1aac:	08 96       	adiw	r24, 0x08	; 8
    1aae:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vListInitialise>
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab6:	43 96       	adiw	r24, 0x13	; 19
    1ab8:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vListInitialise>
    1abc:	ff 91       	pop	r31
    1abe:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	25 96       	adiw	r28, 0x05	; 5
    1ac6:	cd bf       	out	0x3d, r28	; 61
    1ac8:	de bf       	out	0x3e, r29	; 62
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	08 95       	ret

00001ad0 <xQueueGenericCreate>:
    1ad0:	0f 93       	push	r16
    1ad2:	1f 93       	push	r17
    1ad4:	cf 93       	push	r28
    1ad6:	df 93       	push	r29
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	29 97       	sbiw	r28, 0x09	; 9
    1ade:	cd bf       	out	0x3d, r28	; 61
    1ae0:	de bf       	out	0x3e, r29	; 62
    1ae2:	8f 83       	std	Y+7, r24	; 0x07
    1ae4:	68 87       	std	Y+8, r22	; 0x08
    1ae6:	49 87       	std	Y+9, r20	; 0x09
    1ae8:	88 85       	ldd	r24, Y+8	; 0x08
    1aea:	88 23       	and	r24, r24
    1aec:	19 f4       	brne	.+6      	; 0x1af4 <xQueueGenericCreate+0x24>
    1aee:	19 82       	std	Y+1, r1	; 0x01
    1af0:	1a 82       	std	Y+2, r1	; 0x02
    1af2:	0f c0       	rjmp	.+30     	; 0x1b12 <xQueueGenericCreate+0x42>
    1af4:	8f 81       	ldd	r24, Y+7	; 0x07
    1af6:	48 2f       	mov	r20, r24
    1af8:	50 e0       	ldi	r21, 0x00	; 0
    1afa:	88 85       	ldd	r24, Y+8	; 0x08
    1afc:	28 2f       	mov	r18, r24
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	42 9f       	mul	r20, r18
    1b02:	c0 01       	movw	r24, r0
    1b04:	43 9f       	mul	r20, r19
    1b06:	90 0d       	add	r25, r0
    1b08:	52 9f       	mul	r21, r18
    1b0a:	90 0d       	add	r25, r0
    1b0c:	11 24       	eor	r1, r1
    1b0e:	89 83       	std	Y+1, r24	; 0x01
    1b10:	9a 83       	std	Y+2, r25	; 0x02
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	9a 81       	ldd	r25, Y+2	; 0x02
    1b16:	85 96       	adiw	r24, 0x25	; 37
    1b18:	0e 94 99 07 	call	0xf32	; 0xf32 <pvPortMalloc>
    1b1c:	8b 83       	std	Y+3, r24	; 0x03
    1b1e:	9c 83       	std	Y+4, r25	; 0x04
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	9c 81       	ldd	r25, Y+4	; 0x04
    1b24:	89 2b       	or	r24, r25
    1b26:	81 f0       	breq	.+32     	; 0x1b48 <xQueueGenericCreate+0x78>
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2c:	85 96       	adiw	r24, 0x25	; 37
    1b2e:	8d 83       	std	Y+5, r24	; 0x05
    1b30:	9e 83       	std	Y+6, r25	; 0x06
    1b32:	2b 81       	ldd	r18, Y+3	; 0x03
    1b34:	3c 81       	ldd	r19, Y+4	; 0x04
    1b36:	8d 81       	ldd	r24, Y+5	; 0x05
    1b38:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3a:	89 01       	movw	r16, r18
    1b3c:	29 85       	ldd	r18, Y+9	; 0x09
    1b3e:	ac 01       	movw	r20, r24
    1b40:	68 85       	ldd	r22, Y+8	; 0x08
    1b42:	8f 81       	ldd	r24, Y+7	; 0x07
    1b44:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <prvInitialiseNewQueue>
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4c:	29 96       	adiw	r28, 0x09	; 9
    1b4e:	cd bf       	out	0x3d, r28	; 61
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	1f 91       	pop	r17
    1b58:	0f 91       	pop	r16
    1b5a:	08 95       	ret

00001b5c <prvInitialiseNewQueue>:
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	27 97       	sbiw	r28, 0x07	; 7
    1b6a:	cd bf       	out	0x3d, r28	; 61
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	6a 83       	std	Y+2, r22	; 0x02
    1b72:	4b 83       	std	Y+3, r20	; 0x03
    1b74:	5c 83       	std	Y+4, r21	; 0x04
    1b76:	2d 83       	std	Y+5, r18	; 0x05
    1b78:	0e 83       	std	Y+6, r16	; 0x06
    1b7a:	1f 83       	std	Y+7, r17	; 0x07
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	88 23       	and	r24, r24
    1b80:	41 f4       	brne	.+16     	; 0x1b92 <prvInitialiseNewQueue+0x36>
    1b82:	8e 81       	ldd	r24, Y+6	; 0x06
    1b84:	9f 81       	ldd	r25, Y+7	; 0x07
    1b86:	2e 81       	ldd	r18, Y+6	; 0x06
    1b88:	3f 81       	ldd	r19, Y+7	; 0x07
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	20 83       	st	Z, r18
    1b8e:	31 83       	std	Z+1, r19	; 0x01
    1b90:	07 c0       	rjmp	.+14     	; 0x1ba0 <prvInitialiseNewQueue+0x44>
    1b92:	8e 81       	ldd	r24, Y+6	; 0x06
    1b94:	9f 81       	ldd	r25, Y+7	; 0x07
    1b96:	2b 81       	ldd	r18, Y+3	; 0x03
    1b98:	3c 81       	ldd	r19, Y+4	; 0x04
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	20 83       	st	Z, r18
    1b9e:	31 83       	std	Z+1, r19	; 0x01
    1ba0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba4:	29 81       	ldd	r18, Y+1	; 0x01
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	27 8f       	std	Z+31, r18	; 0x1f
    1baa:	8e 81       	ldd	r24, Y+6	; 0x06
    1bac:	9f 81       	ldd	r25, Y+7	; 0x07
    1bae:	2a 81       	ldd	r18, Y+2	; 0x02
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	20 a3       	std	Z+32, r18	; 0x20
    1bb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb6:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb8:	61 e0       	ldi	r22, 0x01	; 1
    1bba:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <xQueueGenericReset>
    1bbe:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc0:	9f 81       	ldd	r25, Y+7	; 0x07
    1bc2:	2d 81       	ldd	r18, Y+5	; 0x05
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	24 a3       	std	Z+36, r18	; 0x24
    1bc8:	00 00       	nop
    1bca:	27 96       	adiw	r28, 0x07	; 7
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	1f 91       	pop	r17
    1bd6:	0f 91       	pop	r16
    1bd8:	08 95       	ret

00001bda <xQueueGenericSend>:
    1bda:	0f 93       	push	r16
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	62 97       	sbiw	r28, 0x12	; 18
    1be6:	cd bf       	out	0x3d, r28	; 61
    1be8:	de bf       	out	0x3e, r29	; 62
    1bea:	8a 87       	std	Y+10, r24	; 0x0a
    1bec:	9b 87       	std	Y+11, r25	; 0x0b
    1bee:	6c 87       	std	Y+12, r22	; 0x0c
    1bf0:	7d 87       	std	Y+13, r23	; 0x0d
    1bf2:	2e 87       	std	Y+14, r18	; 0x0e
    1bf4:	3f 87       	std	Y+15, r19	; 0x0f
    1bf6:	48 8b       	std	Y+16, r20	; 0x10
    1bf8:	59 8b       	std	Y+17, r21	; 0x11
    1bfa:	0a 8b       	std	Y+18, r16	; 0x12
    1bfc:	19 82       	std	Y+1, r1	; 0x01
    1bfe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c00:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c02:	8a 83       	std	Y+2, r24	; 0x02
    1c04:	9b 83       	std	Y+3, r25	; 0x03
    1c06:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1c0a:	ff 93       	push	r31
    1c0c:	f8 7f       	andi	r31, 0xF8	; 248
    1c0e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	9b 81       	ldd	r25, Y+3	; 0x03
    1c16:	fc 01       	movw	r30, r24
    1c18:	26 8d       	ldd	r18, Z+30	; 0x1e
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1e:	fc 01       	movw	r30, r24
    1c20:	87 8d       	ldd	r24, Z+31	; 0x1f
    1c22:	28 17       	cp	r18, r24
    1c24:	18 f0       	brcs	.+6      	; 0x1c2c <xQueueGenericSend+0x52>
    1c26:	8a 89       	ldd	r24, Y+18	; 0x12
    1c28:	82 30       	cpi	r24, 0x02	; 2
    1c2a:	19 f5       	brne	.+70     	; 0x1c72 <xQueueGenericSend+0x98>
    1c2c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c2e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	9b 81       	ldd	r25, Y+3	; 0x03
    1c34:	4a 89       	ldd	r20, Y+18	; 0x12
    1c36:	b9 01       	movw	r22, r18
    1c38:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <prvCopyDataToQueue>
    1c3c:	8c 83       	std	Y+4, r24	; 0x04
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	9b 81       	ldd	r25, Y+3	; 0x03
    1c42:	fc 01       	movw	r30, r24
    1c44:	83 89       	ldd	r24, Z+19	; 0x13
    1c46:	88 23       	and	r24, r24
    1c48:	51 f0       	breq	.+20     	; 0x1c5e <xQueueGenericSend+0x84>
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4e:	43 96       	adiw	r24, 0x13	; 19
    1c50:	0e 94 86 18 	call	0x310c	; 0x310c <xTaskRemoveFromEventList>
    1c54:	88 23       	and	r24, r24
    1c56:	41 f0       	breq	.+16     	; 0x1c68 <xQueueGenericSend+0x8e>
    1c58:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    1c5c:	05 c0       	rjmp	.+10     	; 0x1c68 <xQueueGenericSend+0x8e>
    1c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c60:	88 23       	and	r24, r24
    1c62:	11 f0       	breq	.+4      	; 0x1c68 <xQueueGenericSend+0x8e>
    1c64:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    1c68:	ff 91       	pop	r31
    1c6a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	6f c0       	rjmp	.+222    	; 0x1d50 <xQueueGenericSend+0x176>
    1c72:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c74:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c76:	a8 89       	ldd	r26, Y+16	; 0x10
    1c78:	b9 89       	ldd	r27, Y+17	; 0x11
    1c7a:	89 2b       	or	r24, r25
    1c7c:	8a 2b       	or	r24, r26
    1c7e:	8b 2b       	or	r24, r27
    1c80:	29 f4       	brne	.+10     	; 0x1c8c <xQueueGenericSend+0xb2>
    1c82:	ff 91       	pop	r31
    1c84:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	62 c0       	rjmp	.+196    	; 0x1d50 <xQueueGenericSend+0x176>
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	88 23       	and	r24, r24
    1c90:	31 f4       	brne	.+12     	; 0x1c9e <xQueueGenericSend+0xc4>
    1c92:	ce 01       	movw	r24, r28
    1c94:	05 96       	adiw	r24, 0x05	; 5
    1c96:	0e 94 51 19 	call	0x32a2	; 0x32a2 <vTaskInternalSetTimeOutState>
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	ff 91       	pop	r31
    1ca0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ca4:	0e 94 40 15 	call	0x2a80	; 0x2a80 <vTaskSuspendAll>
    1ca8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1cac:	ff 93       	push	r31
    1cae:	f8 7f       	andi	r31, 0xF8	; 248
    1cb0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb8:	fc 01       	movw	r30, r24
    1cba:	81 a1       	ldd	r24, Z+33	; 0x21
    1cbc:	8f 3f       	cpi	r24, 0xFF	; 255
    1cbe:	21 f4       	brne	.+8      	; 0x1cc8 <xQueueGenericSend+0xee>
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	11 a2       	std	Z+33, r1	; 0x21
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	9b 81       	ldd	r25, Y+3	; 0x03
    1ccc:	fc 01       	movw	r30, r24
    1cce:	82 a1       	ldd	r24, Z+34	; 0x22
    1cd0:	8f 3f       	cpi	r24, 0xFF	; 255
    1cd2:	21 f4       	brne	.+8      	; 0x1cdc <xQueueGenericSend+0x102>
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd8:	fc 01       	movw	r30, r24
    1cda:	12 a2       	std	Z+34, r1	; 0x22
    1cdc:	ff 91       	pop	r31
    1cde:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ce2:	9e 01       	movw	r18, r28
    1ce4:	22 5f       	subi	r18, 0xF2	; 242
    1ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce8:	ce 01       	movw	r24, r28
    1cea:	05 96       	adiw	r24, 0x05	; 5
    1cec:	b9 01       	movw	r22, r18
    1cee:	0e 94 74 19 	call	0x32e8	; 0x32e8 <xTaskCheckForTimeOut>
    1cf2:	88 23       	and	r24, r24
    1cf4:	31 f5       	brne	.+76     	; 0x1d42 <xQueueGenericSend+0x168>
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cfa:	0e 94 76 11 	call	0x22ec	; 0x22ec <prvIsQueueFull>
    1cfe:	88 23       	and	r24, r24
    1d00:	c9 f0       	breq	.+50     	; 0x1d34 <xQueueGenericSend+0x15a>
    1d02:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d04:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d06:	a8 89       	ldd	r26, Y+16	; 0x10
    1d08:	b9 89       	ldd	r27, Y+17	; 0x11
    1d0a:	2a 81       	ldd	r18, Y+2	; 0x02
    1d0c:	3b 81       	ldd	r19, Y+3	; 0x03
    1d0e:	28 5f       	subi	r18, 0xF8	; 248
    1d10:	3f 4f       	sbci	r19, 0xFF	; 255
    1d12:	ac 01       	movw	r20, r24
    1d14:	bd 01       	movw	r22, r26
    1d16:	c9 01       	movw	r24, r18
    1d18:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <vTaskPlaceOnEventList>
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d20:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <prvUnlockQueue>
    1d24:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
    1d28:	88 23       	and	r24, r24
    1d2a:	09 f0       	breq	.+2      	; 0x1d2e <xQueueGenericSend+0x154>
    1d2c:	6c cf       	rjmp	.-296    	; 0x1c06 <xQueueGenericSend+0x2c>
    1d2e:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    1d32:	69 cf       	rjmp	.-302    	; 0x1c06 <xQueueGenericSend+0x2c>
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	9b 81       	ldd	r25, Y+3	; 0x03
    1d38:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <prvUnlockQueue>
    1d3c:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
    1d40:	62 cf       	rjmp	.-316    	; 0x1c06 <xQueueGenericSend+0x2c>
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	9b 81       	ldd	r25, Y+3	; 0x03
    1d46:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <prvUnlockQueue>
    1d4a:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	62 96       	adiw	r28, 0x12	; 18
    1d52:	cd bf       	out	0x3d, r28	; 61
    1d54:	de bf       	out	0x3e, r29	; 62
    1d56:	df 91       	pop	r29
    1d58:	cf 91       	pop	r28
    1d5a:	0f 91       	pop	r16
    1d5c:	08 95       	ret

00001d5e <xQueueGenericSendFromISR>:
    1d5e:	cf 93       	push	r28
    1d60:	df 93       	push	r29
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    1d66:	2c 97       	sbiw	r28, 0x0c	; 12
    1d68:	cd bf       	out	0x3d, r28	; 61
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	8e 83       	std	Y+6, r24	; 0x06
    1d6e:	9f 83       	std	Y+7, r25	; 0x07
    1d70:	68 87       	std	Y+8, r22	; 0x08
    1d72:	79 87       	std	Y+9, r23	; 0x09
    1d74:	4a 87       	std	Y+10, r20	; 0x0a
    1d76:	5b 87       	std	Y+11, r21	; 0x0b
    1d78:	2c 87       	std	Y+12, r18	; 0x0c
    1d7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d7c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d7e:	8a 83       	std	Y+2, r24	; 0x02
    1d80:	9b 83       	std	Y+3, r25	; 0x03
    1d82:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_portSetInterruptMaskFromIsr>
    1d86:	8c 83       	std	Y+4, r24	; 0x04
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	26 8d       	ldd	r18, Z+30	; 0x1e
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	9b 81       	ldd	r25, Y+3	; 0x03
    1d94:	fc 01       	movw	r30, r24
    1d96:	87 8d       	ldd	r24, Z+31	; 0x1f
    1d98:	28 17       	cp	r18, r24
    1d9a:	18 f0       	brcs	.+6      	; 0x1da2 <xQueueGenericSendFromISR+0x44>
    1d9c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d9e:	82 30       	cpi	r24, 0x02	; 2
    1da0:	89 f5       	brne	.+98     	; 0x1e04 <xQueueGenericSendFromISR+0xa6>
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	9b 81       	ldd	r25, Y+3	; 0x03
    1da6:	fc 01       	movw	r30, r24
    1da8:	82 a1       	ldd	r24, Z+34	; 0x22
    1daa:	8d 83       	std	Y+5, r24	; 0x05
    1dac:	28 85       	ldd	r18, Y+8	; 0x08
    1dae:	39 85       	ldd	r19, Y+9	; 0x09
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	9b 81       	ldd	r25, Y+3	; 0x03
    1db4:	4c 85       	ldd	r20, Y+12	; 0x0c
    1db6:	b9 01       	movw	r22, r18
    1db8:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <prvCopyDataToQueue>
    1dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbe:	8f 3f       	cpi	r24, 0xFF	; 255
    1dc0:	b9 f4       	brne	.+46     	; 0x1df0 <xQueueGenericSendFromISR+0x92>
    1dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	83 89       	ldd	r24, Z+19	; 0x13
    1dca:	88 23       	and	r24, r24
    1dcc:	c1 f0       	breq	.+48     	; 0x1dfe <xQueueGenericSendFromISR+0xa0>
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd2:	43 96       	adiw	r24, 0x13	; 19
    1dd4:	0e 94 86 18 	call	0x310c	; 0x310c <xTaskRemoveFromEventList>
    1dd8:	88 23       	and	r24, r24
    1dda:	89 f0       	breq	.+34     	; 0x1dfe <xQueueGenericSendFromISR+0xa0>
    1ddc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dde:	9b 85       	ldd	r25, Y+11	; 0x0b
    1de0:	89 2b       	or	r24, r25
    1de2:	69 f0       	breq	.+26     	; 0x1dfe <xQueueGenericSendFromISR+0xa0>
    1de4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1de6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1de8:	21 e0       	ldi	r18, 0x01	; 1
    1dea:	fc 01       	movw	r30, r24
    1dec:	20 83       	st	Z, r18
    1dee:	07 c0       	rjmp	.+14     	; 0x1dfe <xQueueGenericSendFromISR+0xa0>
    1df0:	8d 81       	ldd	r24, Y+5	; 0x05
    1df2:	8f 5f       	subi	r24, 0xFF	; 255
    1df4:	28 2f       	mov	r18, r24
    1df6:	8a 81       	ldd	r24, Y+2	; 0x02
    1df8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	22 a3       	std	Z+34, r18	; 0x22
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	89 83       	std	Y+1, r24	; 0x01
    1e02:	01 c0       	rjmp	.+2      	; 0x1e06 <xQueueGenericSendFromISR+0xa8>
    1e04:	19 82       	std	Y+1, r1	; 0x01
    1e06:	80 ea       	ldi	r24, 0xA0	; 160
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	22 83       	std	Z+2, r18	; 0x02
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	2c 96       	adiw	r28, 0x0c	; 12
    1e14:	cd bf       	out	0x3d, r28	; 61
    1e16:	de bf       	out	0x3e, r29	; 62
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	08 95       	ret

00001e1e <xQueueReceive>:
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	61 97       	sbiw	r28, 0x11	; 17
    1e28:	cd bf       	out	0x3d, r28	; 61
    1e2a:	de bf       	out	0x3e, r29	; 62
    1e2c:	8a 87       	std	Y+10, r24	; 0x0a
    1e2e:	9b 87       	std	Y+11, r25	; 0x0b
    1e30:	6c 87       	std	Y+12, r22	; 0x0c
    1e32:	7d 87       	std	Y+13, r23	; 0x0d
    1e34:	2e 87       	std	Y+14, r18	; 0x0e
    1e36:	3f 87       	std	Y+15, r19	; 0x0f
    1e38:	48 8b       	std	Y+16, r20	; 0x10
    1e3a:	59 8b       	std	Y+17, r21	; 0x11
    1e3c:	19 82       	std	Y+1, r1	; 0x01
    1e3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e40:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e42:	8a 83       	std	Y+2, r24	; 0x02
    1e44:	9b 83       	std	Y+3, r25	; 0x03
    1e46:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1e4a:	ff 93       	push	r31
    1e4c:	f8 7f       	andi	r31, 0xF8	; 248
    1e4e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1e52:	8a 81       	ldd	r24, Y+2	; 0x02
    1e54:	9b 81       	ldd	r25, Y+3	; 0x03
    1e56:	fc 01       	movw	r30, r24
    1e58:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e5a:	8c 83       	std	Y+4, r24	; 0x04
    1e5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5e:	88 23       	and	r24, r24
    1e60:	11 f1       	breq	.+68     	; 0x1ea6 <xQueueReceive+0x88>
    1e62:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e64:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6a:	b9 01       	movw	r22, r18
    1e6c:	0e 94 a0 10 	call	0x2140	; 0x2140 <prvCopyDataFromQueue>
    1e70:	8c 81       	ldd	r24, Y+4	; 0x04
    1e72:	2f ef       	ldi	r18, 0xFF	; 255
    1e74:	28 0f       	add	r18, r24
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	26 8f       	std	Z+30, r18	; 0x1e
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	9b 81       	ldd	r25, Y+3	; 0x03
    1e82:	fc 01       	movw	r30, r24
    1e84:	80 85       	ldd	r24, Z+8	; 0x08
    1e86:	88 23       	and	r24, r24
    1e88:	49 f0       	breq	.+18     	; 0x1e9c <xQueueReceive+0x7e>
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8e:	08 96       	adiw	r24, 0x08	; 8
    1e90:	0e 94 86 18 	call	0x310c	; 0x310c <xTaskRemoveFromEventList>
    1e94:	88 23       	and	r24, r24
    1e96:	11 f0       	breq	.+4      	; 0x1e9c <xQueueReceive+0x7e>
    1e98:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    1e9c:	ff 91       	pop	r31
    1e9e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	76 c0       	rjmp	.+236    	; 0x1f92 <xQueueReceive+0x174>
    1ea6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ea8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1eaa:	a8 89       	ldd	r26, Y+16	; 0x10
    1eac:	b9 89       	ldd	r27, Y+17	; 0x11
    1eae:	89 2b       	or	r24, r25
    1eb0:	8a 2b       	or	r24, r26
    1eb2:	8b 2b       	or	r24, r27
    1eb4:	29 f4       	brne	.+10     	; 0x1ec0 <xQueueReceive+0xa2>
    1eb6:	ff 91       	pop	r31
    1eb8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	69 c0       	rjmp	.+210    	; 0x1f92 <xQueueReceive+0x174>
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	88 23       	and	r24, r24
    1ec4:	31 f4       	brne	.+12     	; 0x1ed2 <xQueueReceive+0xb4>
    1ec6:	ce 01       	movw	r24, r28
    1ec8:	05 96       	adiw	r24, 0x05	; 5
    1eca:	0e 94 51 19 	call	0x32a2	; 0x32a2 <vTaskInternalSetTimeOutState>
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	89 83       	std	Y+1, r24	; 0x01
    1ed2:	ff 91       	pop	r31
    1ed4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ed8:	0e 94 40 15 	call	0x2a80	; 0x2a80 <vTaskSuspendAll>
    1edc:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ee0:	ff 93       	push	r31
    1ee2:	f8 7f       	andi	r31, 0xF8	; 248
    1ee4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	9b 81       	ldd	r25, Y+3	; 0x03
    1eec:	fc 01       	movw	r30, r24
    1eee:	81 a1       	ldd	r24, Z+33	; 0x21
    1ef0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ef2:	21 f4       	brne	.+8      	; 0x1efc <xQueueReceive+0xde>
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef8:	fc 01       	movw	r30, r24
    1efa:	11 a2       	std	Z+33, r1	; 0x21
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	9b 81       	ldd	r25, Y+3	; 0x03
    1f00:	fc 01       	movw	r30, r24
    1f02:	82 a1       	ldd	r24, Z+34	; 0x22
    1f04:	8f 3f       	cpi	r24, 0xFF	; 255
    1f06:	21 f4       	brne	.+8      	; 0x1f10 <xQueueReceive+0xf2>
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	12 a2       	std	Z+34, r1	; 0x22
    1f10:	ff 91       	pop	r31
    1f12:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1f16:	9e 01       	movw	r18, r28
    1f18:	22 5f       	subi	r18, 0xF2	; 242
    1f1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	05 96       	adiw	r24, 0x05	; 5
    1f20:	b9 01       	movw	r22, r18
    1f22:	0e 94 74 19 	call	0x32e8	; 0x32e8 <xTaskCheckForTimeOut>
    1f26:	88 23       	and	r24, r24
    1f28:	31 f5       	brne	.+76     	; 0x1f76 <xQueueReceive+0x158>
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2e:	0e 94 55 11 	call	0x22aa	; 0x22aa <prvIsQueueEmpty>
    1f32:	88 23       	and	r24, r24
    1f34:	c9 f0       	breq	.+50     	; 0x1f68 <xQueueReceive+0x14a>
    1f36:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f38:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f3a:	a8 89       	ldd	r26, Y+16	; 0x10
    1f3c:	b9 89       	ldd	r27, Y+17	; 0x11
    1f3e:	2a 81       	ldd	r18, Y+2	; 0x02
    1f40:	3b 81       	ldd	r19, Y+3	; 0x03
    1f42:	2d 5e       	subi	r18, 0xED	; 237
    1f44:	3f 4f       	sbci	r19, 0xFF	; 255
    1f46:	ac 01       	movw	r20, r24
    1f48:	bd 01       	movw	r22, r26
    1f4a:	c9 01       	movw	r24, r18
    1f4c:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <vTaskPlaceOnEventList>
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	9b 81       	ldd	r25, Y+3	; 0x03
    1f54:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <prvUnlockQueue>
    1f58:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
    1f5c:	88 23       	and	r24, r24
    1f5e:	09 f0       	breq	.+2      	; 0x1f62 <xQueueReceive+0x144>
    1f60:	72 cf       	rjmp	.-284    	; 0x1e46 <xQueueReceive+0x28>
    1f62:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    1f66:	6f cf       	rjmp	.-290    	; 0x1e46 <xQueueReceive+0x28>
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6c:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <prvUnlockQueue>
    1f70:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
    1f74:	68 cf       	rjmp	.-304    	; 0x1e46 <xQueueReceive+0x28>
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	9b 81       	ldd	r25, Y+3	; 0x03
    1f7a:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <prvUnlockQueue>
    1f7e:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	9b 81       	ldd	r25, Y+3	; 0x03
    1f86:	0e 94 55 11 	call	0x22aa	; 0x22aa <prvIsQueueEmpty>
    1f8a:	88 23       	and	r24, r24
    1f8c:	09 f4       	brne	.+2      	; 0x1f90 <xQueueReceive+0x172>
    1f8e:	5b cf       	rjmp	.-330    	; 0x1e46 <xQueueReceive+0x28>
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	61 96       	adiw	r28, 0x11	; 17
    1f94:	cd bf       	out	0x3d, r28	; 61
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	df 91       	pop	r29
    1f9a:	cf 91       	pop	r28
    1f9c:	08 95       	ret

00001f9e <uxQueueMessagesWaiting>:
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	00 d0       	rcall	.+0      	; 0x1fa4 <uxQueueMessagesWaiting+0x6>
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	8a 83       	std	Y+2, r24	; 0x02
    1faa:	9b 83       	std	Y+3, r25	; 0x03
    1fac:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1fb0:	ff 93       	push	r31
    1fb2:	f8 7f       	andi	r31, 0xF8	; 248
    1fb4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	9b 81       	ldd	r25, Y+3	; 0x03
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	86 8d       	ldd	r24, Z+30	; 0x1e
    1fc0:	89 83       	std	Y+1, r24	; 0x01
    1fc2:	ff 91       	pop	r31
    1fc4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	23 96       	adiw	r28, 0x03	; 3
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	de bf       	out	0x3e, r29	; 62
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	08 95       	ret

00001fd6 <prvCopyDataToQueue>:
    1fd6:	cf 93       	push	r28
    1fd8:	df 93       	push	r29
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	27 97       	sbiw	r28, 0x07	; 7
    1fe0:	cd bf       	out	0x3d, r28	; 61
    1fe2:	de bf       	out	0x3e, r29	; 62
    1fe4:	8b 83       	std	Y+3, r24	; 0x03
    1fe6:	9c 83       	std	Y+4, r25	; 0x04
    1fe8:	6d 83       	std	Y+5, r22	; 0x05
    1fea:	7e 83       	std	Y+6, r23	; 0x06
    1fec:	4f 83       	std	Y+7, r20	; 0x07
    1fee:	1a 82       	std	Y+2, r1	; 0x02
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ff8:	89 83       	std	Y+1, r24	; 0x01
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffe:	fc 01       	movw	r30, r24
    2000:	80 a1       	ldd	r24, Z+32	; 0x20
    2002:	88 23       	and	r24, r24
    2004:	09 f4       	brne	.+2      	; 0x2008 <__DATA_REGION_LENGTH__+0x8>
    2006:	8e c0       	rjmp	.+284    	; 0x2124 <__DATA_REGION_LENGTH__+0x124>
    2008:	8f 81       	ldd	r24, Y+7	; 0x07
    200a:	88 23       	and	r24, r24
    200c:	d9 f5       	brne	.+118    	; 0x2084 <__DATA_REGION_LENGTH__+0x84>
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	9c 81       	ldd	r25, Y+4	; 0x04
    2012:	fc 01       	movw	r30, r24
    2014:	80 a1       	ldd	r24, Z+32	; 0x20
    2016:	48 2f       	mov	r20, r24
    2018:	50 e0       	ldi	r21, 0x00	; 0
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	9c 81       	ldd	r25, Y+4	; 0x04
    201e:	fc 01       	movw	r30, r24
    2020:	84 81       	ldd	r24, Z+4	; 0x04
    2022:	95 81       	ldd	r25, Z+5	; 0x05
    2024:	2d 81       	ldd	r18, Y+5	; 0x05
    2026:	3e 81       	ldd	r19, Y+6	; 0x06
    2028:	b9 01       	movw	r22, r18
    202a:	0e 94 36 41 	call	0x826c	; 0x826c <memcpy>
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	9c 81       	ldd	r25, Y+4	; 0x04
    2032:	fc 01       	movw	r30, r24
    2034:	24 81       	ldd	r18, Z+4	; 0x04
    2036:	35 81       	ldd	r19, Z+5	; 0x05
    2038:	8b 81       	ldd	r24, Y+3	; 0x03
    203a:	9c 81       	ldd	r25, Y+4	; 0x04
    203c:	fc 01       	movw	r30, r24
    203e:	80 a1       	ldd	r24, Z+32	; 0x20
    2040:	88 2f       	mov	r24, r24
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	28 0f       	add	r18, r24
    2046:	39 1f       	adc	r19, r25
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	9c 81       	ldd	r25, Y+4	; 0x04
    204c:	fc 01       	movw	r30, r24
    204e:	24 83       	std	Z+4, r18	; 0x04
    2050:	35 83       	std	Z+5, r19	; 0x05
    2052:	8b 81       	ldd	r24, Y+3	; 0x03
    2054:	9c 81       	ldd	r25, Y+4	; 0x04
    2056:	fc 01       	movw	r30, r24
    2058:	24 81       	ldd	r18, Z+4	; 0x04
    205a:	35 81       	ldd	r19, Z+5	; 0x05
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	9c 81       	ldd	r25, Y+4	; 0x04
    2060:	fc 01       	movw	r30, r24
    2062:	82 81       	ldd	r24, Z+2	; 0x02
    2064:	93 81       	ldd	r25, Z+3	; 0x03
    2066:	28 17       	cp	r18, r24
    2068:	39 07       	cpc	r19, r25
    206a:	08 f4       	brcc	.+2      	; 0x206e <__DATA_REGION_LENGTH__+0x6e>
    206c:	5b c0       	rjmp	.+182    	; 0x2124 <__DATA_REGION_LENGTH__+0x124>
    206e:	8b 81       	ldd	r24, Y+3	; 0x03
    2070:	9c 81       	ldd	r25, Y+4	; 0x04
    2072:	fc 01       	movw	r30, r24
    2074:	20 81       	ld	r18, Z
    2076:	31 81       	ldd	r19, Z+1	; 0x01
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	9c 81       	ldd	r25, Y+4	; 0x04
    207c:	fc 01       	movw	r30, r24
    207e:	24 83       	std	Z+4, r18	; 0x04
    2080:	35 83       	std	Z+5, r19	; 0x05
    2082:	50 c0       	rjmp	.+160    	; 0x2124 <__DATA_REGION_LENGTH__+0x124>
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	9c 81       	ldd	r25, Y+4	; 0x04
    2088:	fc 01       	movw	r30, r24
    208a:	80 a1       	ldd	r24, Z+32	; 0x20
    208c:	48 2f       	mov	r20, r24
    208e:	50 e0       	ldi	r21, 0x00	; 0
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	9c 81       	ldd	r25, Y+4	; 0x04
    2094:	fc 01       	movw	r30, r24
    2096:	86 81       	ldd	r24, Z+6	; 0x06
    2098:	97 81       	ldd	r25, Z+7	; 0x07
    209a:	2d 81       	ldd	r18, Y+5	; 0x05
    209c:	3e 81       	ldd	r19, Y+6	; 0x06
    209e:	b9 01       	movw	r22, r18
    20a0:	0e 94 36 41 	call	0x826c	; 0x826c <memcpy>
    20a4:	8b 81       	ldd	r24, Y+3	; 0x03
    20a6:	9c 81       	ldd	r25, Y+4	; 0x04
    20a8:	fc 01       	movw	r30, r24
    20aa:	26 81       	ldd	r18, Z+6	; 0x06
    20ac:	37 81       	ldd	r19, Z+7	; 0x07
    20ae:	8b 81       	ldd	r24, Y+3	; 0x03
    20b0:	9c 81       	ldd	r25, Y+4	; 0x04
    20b2:	fc 01       	movw	r30, r24
    20b4:	80 a1       	ldd	r24, Z+32	; 0x20
    20b6:	88 2f       	mov	r24, r24
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	91 95       	neg	r25
    20bc:	81 95       	neg	r24
    20be:	91 09       	sbc	r25, r1
    20c0:	28 0f       	add	r18, r24
    20c2:	39 1f       	adc	r19, r25
    20c4:	8b 81       	ldd	r24, Y+3	; 0x03
    20c6:	9c 81       	ldd	r25, Y+4	; 0x04
    20c8:	fc 01       	movw	r30, r24
    20ca:	26 83       	std	Z+6, r18	; 0x06
    20cc:	37 83       	std	Z+7, r19	; 0x07
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	9c 81       	ldd	r25, Y+4	; 0x04
    20d2:	fc 01       	movw	r30, r24
    20d4:	26 81       	ldd	r18, Z+6	; 0x06
    20d6:	37 81       	ldd	r19, Z+7	; 0x07
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	9c 81       	ldd	r25, Y+4	; 0x04
    20dc:	fc 01       	movw	r30, r24
    20de:	80 81       	ld	r24, Z
    20e0:	91 81       	ldd	r25, Z+1	; 0x01
    20e2:	28 17       	cp	r18, r24
    20e4:	39 07       	cpc	r19, r25
    20e6:	a8 f4       	brcc	.+42     	; 0x2112 <__DATA_REGION_LENGTH__+0x112>
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	9c 81       	ldd	r25, Y+4	; 0x04
    20ec:	fc 01       	movw	r30, r24
    20ee:	22 81       	ldd	r18, Z+2	; 0x02
    20f0:	33 81       	ldd	r19, Z+3	; 0x03
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	fc 01       	movw	r30, r24
    20f8:	80 a1       	ldd	r24, Z+32	; 0x20
    20fa:	88 2f       	mov	r24, r24
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	91 95       	neg	r25
    2100:	81 95       	neg	r24
    2102:	91 09       	sbc	r25, r1
    2104:	28 0f       	add	r18, r24
    2106:	39 1f       	adc	r19, r25
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	9c 81       	ldd	r25, Y+4	; 0x04
    210c:	fc 01       	movw	r30, r24
    210e:	26 83       	std	Z+6, r18	; 0x06
    2110:	37 83       	std	Z+7, r19	; 0x07
    2112:	8f 81       	ldd	r24, Y+7	; 0x07
    2114:	82 30       	cpi	r24, 0x02	; 2
    2116:	31 f4       	brne	.+12     	; 0x2124 <__DATA_REGION_LENGTH__+0x124>
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	88 23       	and	r24, r24
    211c:	19 f0       	breq	.+6      	; 0x2124 <__DATA_REGION_LENGTH__+0x124>
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	81 50       	subi	r24, 0x01	; 1
    2122:	89 83       	std	Y+1, r24	; 0x01
    2124:	89 81       	ldd	r24, Y+1	; 0x01
    2126:	21 e0       	ldi	r18, 0x01	; 1
    2128:	28 0f       	add	r18, r24
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	9c 81       	ldd	r25, Y+4	; 0x04
    212e:	fc 01       	movw	r30, r24
    2130:	26 8f       	std	Z+30, r18	; 0x1e
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	27 96       	adiw	r28, 0x07	; 7
    2136:	cd bf       	out	0x3d, r28	; 61
    2138:	de bf       	out	0x3e, r29	; 62
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	08 95       	ret

00002140 <prvCopyDataFromQueue>:
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
    2144:	00 d0       	rcall	.+0      	; 0x2146 <prvCopyDataFromQueue+0x6>
    2146:	1f 92       	push	r1
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	89 83       	std	Y+1, r24	; 0x01
    214e:	9a 83       	std	Y+2, r25	; 0x02
    2150:	6b 83       	std	Y+3, r22	; 0x03
    2152:	7c 83       	std	Y+4, r23	; 0x04
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	9a 81       	ldd	r25, Y+2	; 0x02
    2158:	fc 01       	movw	r30, r24
    215a:	80 a1       	ldd	r24, Z+32	; 0x20
    215c:	88 23       	and	r24, r24
    215e:	c9 f1       	breq	.+114    	; 0x21d2 <prvCopyDataFromQueue+0x92>
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	9a 81       	ldd	r25, Y+2	; 0x02
    2164:	fc 01       	movw	r30, r24
    2166:	26 81       	ldd	r18, Z+6	; 0x06
    2168:	37 81       	ldd	r19, Z+7	; 0x07
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	9a 81       	ldd	r25, Y+2	; 0x02
    216e:	fc 01       	movw	r30, r24
    2170:	80 a1       	ldd	r24, Z+32	; 0x20
    2172:	88 2f       	mov	r24, r24
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	28 0f       	add	r18, r24
    2178:	39 1f       	adc	r19, r25
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	9a 81       	ldd	r25, Y+2	; 0x02
    217e:	fc 01       	movw	r30, r24
    2180:	26 83       	std	Z+6, r18	; 0x06
    2182:	37 83       	std	Z+7, r19	; 0x07
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	9a 81       	ldd	r25, Y+2	; 0x02
    2188:	fc 01       	movw	r30, r24
    218a:	26 81       	ldd	r18, Z+6	; 0x06
    218c:	37 81       	ldd	r19, Z+7	; 0x07
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	9a 81       	ldd	r25, Y+2	; 0x02
    2192:	fc 01       	movw	r30, r24
    2194:	82 81       	ldd	r24, Z+2	; 0x02
    2196:	93 81       	ldd	r25, Z+3	; 0x03
    2198:	28 17       	cp	r18, r24
    219a:	39 07       	cpc	r19, r25
    219c:	50 f0       	brcs	.+20     	; 0x21b2 <prvCopyDataFromQueue+0x72>
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	9a 81       	ldd	r25, Y+2	; 0x02
    21a2:	fc 01       	movw	r30, r24
    21a4:	20 81       	ld	r18, Z
    21a6:	31 81       	ldd	r19, Z+1	; 0x01
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	9a 81       	ldd	r25, Y+2	; 0x02
    21ac:	fc 01       	movw	r30, r24
    21ae:	26 83       	std	Z+6, r18	; 0x06
    21b0:	37 83       	std	Z+7, r19	; 0x07
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	9a 81       	ldd	r25, Y+2	; 0x02
    21b6:	fc 01       	movw	r30, r24
    21b8:	80 a1       	ldd	r24, Z+32	; 0x20
    21ba:	48 2f       	mov	r20, r24
    21bc:	50 e0       	ldi	r21, 0x00	; 0
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	9a 81       	ldd	r25, Y+2	; 0x02
    21c2:	fc 01       	movw	r30, r24
    21c4:	26 81       	ldd	r18, Z+6	; 0x06
    21c6:	37 81       	ldd	r19, Z+7	; 0x07
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	9c 81       	ldd	r25, Y+4	; 0x04
    21cc:	b9 01       	movw	r22, r18
    21ce:	0e 94 36 41 	call	0x826c	; 0x826c <memcpy>
    21d2:	00 00       	nop
    21d4:	24 96       	adiw	r28, 0x04	; 4
    21d6:	cd bf       	out	0x3d, r28	; 61
    21d8:	de bf       	out	0x3e, r29	; 62
    21da:	df 91       	pop	r29
    21dc:	cf 91       	pop	r28
    21de:	08 95       	ret

000021e0 <prvUnlockQueue>:
    21e0:	cf 93       	push	r28
    21e2:	df 93       	push	r29
    21e4:	00 d0       	rcall	.+0      	; 0x21e6 <prvUnlockQueue+0x6>
    21e6:	1f 92       	push	r1
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
    21ec:	8b 83       	std	Y+3, r24	; 0x03
    21ee:	9c 83       	std	Y+4, r25	; 0x04
    21f0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    21f4:	ff 93       	push	r31
    21f6:	f8 7f       	andi	r31, 0xF8	; 248
    21f8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    21fc:	8b 81       	ldd	r24, Y+3	; 0x03
    21fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2200:	fc 01       	movw	r30, r24
    2202:	82 a1       	ldd	r24, Z+34	; 0x22
    2204:	89 83       	std	Y+1, r24	; 0x01
    2206:	12 c0       	rjmp	.+36     	; 0x222c <prvUnlockQueue+0x4c>
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	9c 81       	ldd	r25, Y+4	; 0x04
    220c:	fc 01       	movw	r30, r24
    220e:	83 89       	ldd	r24, Z+19	; 0x13
    2210:	88 23       	and	r24, r24
    2212:	81 f0       	breq	.+32     	; 0x2234 <prvUnlockQueue+0x54>
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	9c 81       	ldd	r25, Y+4	; 0x04
    2218:	43 96       	adiw	r24, 0x13	; 19
    221a:	0e 94 86 18 	call	0x310c	; 0x310c <xTaskRemoveFromEventList>
    221e:	88 23       	and	r24, r24
    2220:	11 f0       	breq	.+4      	; 0x2226 <prvUnlockQueue+0x46>
    2222:	0e 94 1c 1a 	call	0x3438	; 0x3438 <vTaskMissedYield>
    2226:	89 81       	ldd	r24, Y+1	; 0x01
    2228:	81 50       	subi	r24, 0x01	; 1
    222a:	89 83       	std	Y+1, r24	; 0x01
    222c:	89 81       	ldd	r24, Y+1	; 0x01
    222e:	18 16       	cp	r1, r24
    2230:	5c f3       	brlt	.-42     	; 0x2208 <prvUnlockQueue+0x28>
    2232:	01 c0       	rjmp	.+2      	; 0x2236 <prvUnlockQueue+0x56>
    2234:	00 00       	nop
    2236:	8b 81       	ldd	r24, Y+3	; 0x03
    2238:	9c 81       	ldd	r25, Y+4	; 0x04
    223a:	2f ef       	ldi	r18, 0xFF	; 255
    223c:	fc 01       	movw	r30, r24
    223e:	22 a3       	std	Z+34, r18	; 0x22
    2240:	ff 91       	pop	r31
    2242:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2246:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    224a:	ff 93       	push	r31
    224c:	f8 7f       	andi	r31, 0xF8	; 248
    224e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2252:	8b 81       	ldd	r24, Y+3	; 0x03
    2254:	9c 81       	ldd	r25, Y+4	; 0x04
    2256:	fc 01       	movw	r30, r24
    2258:	81 a1       	ldd	r24, Z+33	; 0x21
    225a:	8a 83       	std	Y+2, r24	; 0x02
    225c:	12 c0       	rjmp	.+36     	; 0x2282 <prvUnlockQueue+0xa2>
    225e:	8b 81       	ldd	r24, Y+3	; 0x03
    2260:	9c 81       	ldd	r25, Y+4	; 0x04
    2262:	fc 01       	movw	r30, r24
    2264:	80 85       	ldd	r24, Z+8	; 0x08
    2266:	88 23       	and	r24, r24
    2268:	81 f0       	breq	.+32     	; 0x228a <prvUnlockQueue+0xaa>
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	9c 81       	ldd	r25, Y+4	; 0x04
    226e:	08 96       	adiw	r24, 0x08	; 8
    2270:	0e 94 86 18 	call	0x310c	; 0x310c <xTaskRemoveFromEventList>
    2274:	88 23       	and	r24, r24
    2276:	11 f0       	breq	.+4      	; 0x227c <prvUnlockQueue+0x9c>
    2278:	0e 94 1c 1a 	call	0x3438	; 0x3438 <vTaskMissedYield>
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	81 50       	subi	r24, 0x01	; 1
    2280:	8a 83       	std	Y+2, r24	; 0x02
    2282:	8a 81       	ldd	r24, Y+2	; 0x02
    2284:	18 16       	cp	r1, r24
    2286:	5c f3       	brlt	.-42     	; 0x225e <prvUnlockQueue+0x7e>
    2288:	01 c0       	rjmp	.+2      	; 0x228c <prvUnlockQueue+0xac>
    228a:	00 00       	nop
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	9c 81       	ldd	r25, Y+4	; 0x04
    2290:	2f ef       	ldi	r18, 0xFF	; 255
    2292:	fc 01       	movw	r30, r24
    2294:	21 a3       	std	Z+33, r18	; 0x21
    2296:	ff 91       	pop	r31
    2298:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    229c:	00 00       	nop
    229e:	24 96       	adiw	r28, 0x04	; 4
    22a0:	cd bf       	out	0x3d, r28	; 61
    22a2:	de bf       	out	0x3e, r29	; 62
    22a4:	df 91       	pop	r29
    22a6:	cf 91       	pop	r28
    22a8:	08 95       	ret

000022aa <prvIsQueueEmpty>:
    22aa:	cf 93       	push	r28
    22ac:	df 93       	push	r29
    22ae:	00 d0       	rcall	.+0      	; 0x22b0 <prvIsQueueEmpty+0x6>
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
    22b4:	8a 83       	std	Y+2, r24	; 0x02
    22b6:	9b 83       	std	Y+3, r25	; 0x03
    22b8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    22bc:	ff 93       	push	r31
    22be:	f8 7f       	andi	r31, 0xF8	; 248
    22c0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    22c4:	8a 81       	ldd	r24, Y+2	; 0x02
    22c6:	9b 81       	ldd	r25, Y+3	; 0x03
    22c8:	fc 01       	movw	r30, r24
    22ca:	86 8d       	ldd	r24, Z+30	; 0x1e
    22cc:	88 23       	and	r24, r24
    22ce:	19 f4       	brne	.+6      	; 0x22d6 <prvIsQueueEmpty+0x2c>
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	89 83       	std	Y+1, r24	; 0x01
    22d4:	01 c0       	rjmp	.+2      	; 0x22d8 <prvIsQueueEmpty+0x2e>
    22d6:	19 82       	std	Y+1, r1	; 0x01
    22d8:	ff 91       	pop	r31
    22da:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	23 96       	adiw	r28, 0x03	; 3
    22e2:	cd bf       	out	0x3d, r28	; 61
    22e4:	de bf       	out	0x3e, r29	; 62
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	08 95       	ret

000022ec <prvIsQueueFull>:
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
    22f0:	00 d0       	rcall	.+0      	; 0x22f2 <prvIsQueueFull+0x6>
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    22f6:	8a 83       	std	Y+2, r24	; 0x02
    22f8:	9b 83       	std	Y+3, r25	; 0x03
    22fa:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    22fe:	ff 93       	push	r31
    2300:	f8 7f       	andi	r31, 0xF8	; 248
    2302:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2306:	8a 81       	ldd	r24, Y+2	; 0x02
    2308:	9b 81       	ldd	r25, Y+3	; 0x03
    230a:	fc 01       	movw	r30, r24
    230c:	26 8d       	ldd	r18, Z+30	; 0x1e
    230e:	8a 81       	ldd	r24, Y+2	; 0x02
    2310:	9b 81       	ldd	r25, Y+3	; 0x03
    2312:	fc 01       	movw	r30, r24
    2314:	87 8d       	ldd	r24, Z+31	; 0x1f
    2316:	28 17       	cp	r18, r24
    2318:	19 f4       	brne	.+6      	; 0x2320 <prvIsQueueFull+0x34>
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	89 83       	std	Y+1, r24	; 0x01
    231e:	01 c0       	rjmp	.+2      	; 0x2322 <prvIsQueueFull+0x36>
    2320:	19 82       	std	Y+1, r1	; 0x01
    2322:	ff 91       	pop	r31
    2324:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	23 96       	adiw	r28, 0x03	; 3
    232c:	cd bf       	out	0x3d, r28	; 61
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	df 91       	pop	r29
    2332:	cf 91       	pop	r28
    2334:	08 95       	ret

00002336 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    2336:	cf 93       	push	r28
    2338:	df 93       	push	r29
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
    233e:	29 97       	sbiw	r28, 0x09	; 9
    2340:	cd bf       	out	0x3d, r28	; 61
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	8b 83       	std	Y+3, r24	; 0x03
    2346:	9c 83       	std	Y+4, r25	; 0x04
    2348:	4d 83       	std	Y+5, r20	; 0x05
    234a:	5e 83       	std	Y+6, r21	; 0x06
    234c:	6f 83       	std	Y+7, r22	; 0x07
    234e:	78 87       	std	Y+8, r23	; 0x08
    2350:	29 87       	std	Y+9, r18	; 0x09
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	9c 81       	ldd	r25, Y+4	; 0x04
    2356:	89 83       	std	Y+1, r24	; 0x01
    2358:	9a 83       	std	Y+2, r25	; 0x02
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    235a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    235e:	ff 93       	push	r31
    2360:	f8 7f       	andi	r31, 0xF8	; 248
    2362:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	9a 81       	ldd	r25, Y+2	; 0x02
    236a:	fc 01       	movw	r30, r24
    236c:	81 a1       	ldd	r24, Z+33	; 0x21
    236e:	8f 3f       	cpi	r24, 0xFF	; 255
    2370:	21 f4       	brne	.+8      	; 0x237a <vQueueWaitForMessageRestricted+0x44>
    2372:	89 81       	ldd	r24, Y+1	; 0x01
    2374:	9a 81       	ldd	r25, Y+2	; 0x02
    2376:	fc 01       	movw	r30, r24
    2378:	11 a2       	std	Z+33, r1	; 0x21
    237a:	89 81       	ldd	r24, Y+1	; 0x01
    237c:	9a 81       	ldd	r25, Y+2	; 0x02
    237e:	fc 01       	movw	r30, r24
    2380:	82 a1       	ldd	r24, Z+34	; 0x22
    2382:	8f 3f       	cpi	r24, 0xFF	; 255
    2384:	21 f4       	brne	.+8      	; 0x238e <vQueueWaitForMessageRestricted+0x58>
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	9a 81       	ldd	r25, Y+2	; 0x02
    238a:	fc 01       	movw	r30, r24
    238c:	12 a2       	std	Z+34, r1	; 0x22
    238e:	ff 91       	pop	r31
    2390:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	9a 81       	ldd	r25, Y+2	; 0x02
    2398:	fc 01       	movw	r30, r24
    239a:	86 8d       	ldd	r24, Z+30	; 0x1e
    239c:	88 23       	and	r24, r24
    239e:	71 f4       	brne	.+28     	; 0x23bc <vQueueWaitForMessageRestricted+0x86>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    23a0:	89 81       	ldd	r24, Y+1	; 0x01
    23a2:	9a 81       	ldd	r25, Y+2	; 0x02
    23a4:	fc 01       	movw	r30, r24
    23a6:	73 96       	adiw	r30, 0x13	; 19
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	af 81       	ldd	r26, Y+7	; 0x07
    23ae:	b8 85       	ldd	r27, Y+8	; 0x08
    23b0:	29 85       	ldd	r18, Y+9	; 0x09
    23b2:	ac 01       	movw	r20, r24
    23b4:	bd 01       	movw	r22, r26
    23b6:	cf 01       	movw	r24, r30
    23b8:	0e 94 52 18 	call	0x30a4	; 0x30a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	9a 81       	ldd	r25, Y+2	; 0x02
    23c0:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <prvUnlockQueue>
	}
    23c4:	00 00       	nop
    23c6:	29 96       	adiw	r28, 0x09	; 9
    23c8:	cd bf       	out	0x3d, r28	; 61
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	df 91       	pop	r29
    23ce:	cf 91       	pop	r28
    23d0:	08 95       	ret

000023d2 <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    23d2:	8f 92       	push	r8
    23d4:	9f 92       	push	r9
    23d6:	af 92       	push	r10
    23d8:	bf 92       	push	r11
    23da:	cf 92       	push	r12
    23dc:	df 92       	push	r13
    23de:	ef 92       	push	r14
    23e0:	ff 92       	push	r15
    23e2:	0f 93       	push	r16
    23e4:	1f 93       	push	r17
    23e6:	cf 93       	push	r28
    23e8:	df 93       	push	r29
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
    23ee:	60 97       	sbiw	r28, 0x10	; 16
    23f0:	cd bf       	out	0x3d, r28	; 61
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	8e 83       	std	Y+6, r24	; 0x06
    23f6:	9f 83       	std	Y+7, r25	; 0x07
    23f8:	68 87       	std	Y+8, r22	; 0x08
    23fa:	79 87       	std	Y+9, r23	; 0x09
    23fc:	4a 87       	std	Y+10, r20	; 0x0a
    23fe:	5b 87       	std	Y+11, r21	; 0x0b
    2400:	2c 87       	std	Y+12, r18	; 0x0c
    2402:	3d 87       	std	Y+13, r19	; 0x0d
    2404:	0e 87       	std	Y+14, r16	; 0x0e
    2406:	ef 86       	std	Y+15, r14	; 0x0f
    2408:	f8 8a       	std	Y+16, r15	; 0x10
    240a:	8a 85       	ldd	r24, Y+10	; 0x0a
    240c:	9b 85       	ldd	r25, Y+11	; 0x0b
    240e:	0e 94 99 07 	call	0xf32	; 0xf32 <pvPortMalloc>
    2412:	8c 83       	std	Y+4, r24	; 0x04
    2414:	9d 83       	std	Y+5, r25	; 0x05
    2416:	8c 81       	ldd	r24, Y+4	; 0x04
    2418:	9d 81       	ldd	r25, Y+5	; 0x05
    241a:	89 2b       	or	r24, r25
    241c:	b9 f0       	breq	.+46     	; 0x244c <xTaskCreate+0x7a>
    241e:	8c e2       	ldi	r24, 0x2C	; 44
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	0e 94 99 07 	call	0xf32	; 0xf32 <pvPortMalloc>
    2426:	89 83       	std	Y+1, r24	; 0x01
    2428:	9a 83       	std	Y+2, r25	; 0x02
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	9a 81       	ldd	r25, Y+2	; 0x02
    242e:	89 2b       	or	r24, r25
    2430:	41 f0       	breq	.+16     	; 0x2442 <xTaskCreate+0x70>
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	9a 81       	ldd	r25, Y+2	; 0x02
    2436:	2c 81       	ldd	r18, Y+4	; 0x04
    2438:	3d 81       	ldd	r19, Y+5	; 0x05
    243a:	fc 01       	movw	r30, r24
    243c:	23 8f       	std	Z+27, r18	; 0x1b
    243e:	34 8f       	std	Z+28, r19	; 0x1c
    2440:	07 c0       	rjmp	.+14     	; 0x2450 <xTaskCreate+0x7e>
    2442:	8c 81       	ldd	r24, Y+4	; 0x04
    2444:	9d 81       	ldd	r25, Y+5	; 0x05
    2446:	0e 94 dd 07 	call	0xfba	; 0xfba <vPortFree>
    244a:	02 c0       	rjmp	.+4      	; 0x2450 <xTaskCreate+0x7e>
    244c:	19 82       	std	Y+1, r1	; 0x01
    244e:	1a 82       	std	Y+2, r1	; 0x02
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	9a 81       	ldd	r25, Y+2	; 0x02
    2454:	89 2b       	or	r24, r25
    2456:	09 f1       	breq	.+66     	; 0x249a <xTaskCreate+0xc8>
    2458:	8a 85       	ldd	r24, Y+10	; 0x0a
    245a:	9b 85       	ldd	r25, Y+11	; 0x0b
    245c:	cc 01       	movw	r24, r24
    245e:	a0 e0       	ldi	r26, 0x00	; 0
    2460:	b0 e0       	ldi	r27, 0x00	; 0
    2462:	09 81       	ldd	r16, Y+1	; 0x01
    2464:	1a 81       	ldd	r17, Y+2	; 0x02
    2466:	4f 85       	ldd	r20, Y+15	; 0x0f
    2468:	58 89       	ldd	r21, Y+16	; 0x10
    246a:	2c 85       	ldd	r18, Y+12	; 0x0c
    246c:	3d 85       	ldd	r19, Y+13	; 0x0d
    246e:	68 85       	ldd	r22, Y+8	; 0x08
    2470:	79 85       	ldd	r23, Y+9	; 0x09
    2472:	ee 81       	ldd	r30, Y+6	; 0x06
    2474:	ff 81       	ldd	r31, Y+7	; 0x07
    2476:	81 2c       	mov	r8, r1
    2478:	91 2c       	mov	r9, r1
    247a:	58 01       	movw	r10, r16
    247c:	6a 01       	movw	r12, r20
    247e:	ee 84       	ldd	r14, Y+14	; 0x0e
    2480:	89 01       	movw	r16, r18
    2482:	9c 01       	movw	r18, r24
    2484:	ad 01       	movw	r20, r26
    2486:	cf 01       	movw	r24, r30
    2488:	0e 94 60 12 	call	0x24c0	; 0x24c0 <prvInitialiseNewTask>
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	9a 81       	ldd	r25, Y+2	; 0x02
    2490:	0e 94 36 13 	call	0x266c	; 0x266c <prvAddNewTaskToReadyList>
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	8b 83       	std	Y+3, r24	; 0x03
    2498:	02 c0       	rjmp	.+4      	; 0x249e <xTaskCreate+0xcc>
    249a:	8f ef       	ldi	r24, 0xFF	; 255
    249c:	8b 83       	std	Y+3, r24	; 0x03
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	60 96       	adiw	r28, 0x10	; 16
    24a2:	cd bf       	out	0x3d, r28	; 61
    24a4:	de bf       	out	0x3e, r29	; 62
    24a6:	df 91       	pop	r29
    24a8:	cf 91       	pop	r28
    24aa:	1f 91       	pop	r17
    24ac:	0f 91       	pop	r16
    24ae:	ff 90       	pop	r15
    24b0:	ef 90       	pop	r14
    24b2:	df 90       	pop	r13
    24b4:	cf 90       	pop	r12
    24b6:	bf 90       	pop	r11
    24b8:	af 90       	pop	r10
    24ba:	9f 90       	pop	r9
    24bc:	8f 90       	pop	r8
    24be:	08 95       	ret

000024c0 <prvInitialiseNewTask>:
    24c0:	8f 92       	push	r8
    24c2:	9f 92       	push	r9
    24c4:	af 92       	push	r10
    24c6:	bf 92       	push	r11
    24c8:	cf 92       	push	r12
    24ca:	df 92       	push	r13
    24cc:	ef 92       	push	r14
    24ce:	ff 92       	push	r15
    24d0:	0f 93       	push	r16
    24d2:	1f 93       	push	r17
    24d4:	cf 93       	push	r28
    24d6:	df 93       	push	r29
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	64 97       	sbiw	r28, 0x14	; 20
    24de:	cd bf       	out	0x3d, r28	; 61
    24e0:	de bf       	out	0x3e, r29	; 62
    24e2:	8c 83       	std	Y+4, r24	; 0x04
    24e4:	9d 83       	std	Y+5, r25	; 0x05
    24e6:	6e 83       	std	Y+6, r22	; 0x06
    24e8:	7f 83       	std	Y+7, r23	; 0x07
    24ea:	28 87       	std	Y+8, r18	; 0x08
    24ec:	39 87       	std	Y+9, r19	; 0x09
    24ee:	4a 87       	std	Y+10, r20	; 0x0a
    24f0:	5b 87       	std	Y+11, r21	; 0x0b
    24f2:	0c 87       	std	Y+12, r16	; 0x0c
    24f4:	1d 87       	std	Y+13, r17	; 0x0d
    24f6:	ee 86       	std	Y+14, r14	; 0x0e
    24f8:	cf 86       	std	Y+15, r12	; 0x0f
    24fa:	d8 8a       	std	Y+16, r13	; 0x10
    24fc:	a9 8a       	std	Y+17, r10	; 0x11
    24fe:	ba 8a       	std	Y+18, r11	; 0x12
    2500:	8b 8a       	std	Y+19, r8	; 0x13
    2502:	9c 8a       	std	Y+20, r9	; 0x14
    2504:	28 85       	ldd	r18, Y+8	; 0x08
    2506:	39 85       	ldd	r19, Y+9	; 0x09
    2508:	89 89       	ldd	r24, Y+17	; 0x11
    250a:	9a 89       	ldd	r25, Y+18	; 0x12
    250c:	fc 01       	movw	r30, r24
    250e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2510:	94 8d       	ldd	r25, Z+28	; 0x1c
    2512:	a9 01       	movw	r20, r18
    2514:	65 ea       	ldi	r22, 0xA5	; 165
    2516:	70 e0       	ldi	r23, 0x00	; 0
    2518:	0e 94 3f 41 	call	0x827e	; 0x827e <memset>
    251c:	89 89       	ldd	r24, Y+17	; 0x11
    251e:	9a 89       	ldd	r25, Y+18	; 0x12
    2520:	fc 01       	movw	r30, r24
    2522:	23 8d       	ldd	r18, Z+27	; 0x1b
    2524:	34 8d       	ldd	r19, Z+28	; 0x1c
    2526:	88 85       	ldd	r24, Y+8	; 0x08
    2528:	99 85       	ldd	r25, Y+9	; 0x09
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	82 0f       	add	r24, r18
    252e:	93 1f       	adc	r25, r19
    2530:	8a 83       	std	Y+2, r24	; 0x02
    2532:	9b 83       	std	Y+3, r25	; 0x03
    2534:	19 82       	std	Y+1, r1	; 0x01
    2536:	21 c0       	rjmp	.+66     	; 0x257a <prvInitialiseNewTask+0xba>
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	88 2f       	mov	r24, r24
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	29 81       	ldd	r18, Y+1	; 0x01
    2540:	22 2f       	mov	r18, r18
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	4e 81       	ldd	r20, Y+6	; 0x06
    2546:	5f 81       	ldd	r21, Y+7	; 0x07
    2548:	24 0f       	add	r18, r20
    254a:	35 1f       	adc	r19, r21
    254c:	f9 01       	movw	r30, r18
    254e:	40 81       	ld	r20, Z
    2550:	29 89       	ldd	r18, Y+17	; 0x11
    2552:	3a 89       	ldd	r19, Y+18	; 0x12
    2554:	82 0f       	add	r24, r18
    2556:	93 1f       	adc	r25, r19
    2558:	4d 96       	adiw	r24, 0x1d	; 29
    255a:	fc 01       	movw	r30, r24
    255c:	40 83       	st	Z, r20
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	88 2f       	mov	r24, r24
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	2e 81       	ldd	r18, Y+6	; 0x06
    2566:	3f 81       	ldd	r19, Y+7	; 0x07
    2568:	82 0f       	add	r24, r18
    256a:	93 1f       	adc	r25, r19
    256c:	fc 01       	movw	r30, r24
    256e:	80 81       	ld	r24, Z
    2570:	88 23       	and	r24, r24
    2572:	39 f0       	breq	.+14     	; 0x2582 <prvInitialiseNewTask+0xc2>
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	8f 5f       	subi	r24, 0xFF	; 255
    2578:	89 83       	std	Y+1, r24	; 0x01
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	88 30       	cpi	r24, 0x08	; 8
    257e:	e0 f2       	brcs	.-72     	; 0x2538 <prvInitialiseNewTask+0x78>
    2580:	01 c0       	rjmp	.+2      	; 0x2584 <prvInitialiseNewTask+0xc4>
    2582:	00 00       	nop
    2584:	89 89       	ldd	r24, Y+17	; 0x11
    2586:	9a 89       	ldd	r25, Y+18	; 0x12
    2588:	fc 01       	movw	r30, r24
    258a:	14 a2       	std	Z+36, r1	; 0x24
    258c:	8e 85       	ldd	r24, Y+14	; 0x0e
    258e:	84 30       	cpi	r24, 0x04	; 4
    2590:	10 f0       	brcs	.+4      	; 0x2596 <prvInitialiseNewTask+0xd6>
    2592:	83 e0       	ldi	r24, 0x03	; 3
    2594:	8e 87       	std	Y+14, r24	; 0x0e
    2596:	89 89       	ldd	r24, Y+17	; 0x11
    2598:	9a 89       	ldd	r25, Y+18	; 0x12
    259a:	2e 85       	ldd	r18, Y+14	; 0x0e
    259c:	fc 01       	movw	r30, r24
    259e:	22 8f       	std	Z+26, r18	; 0x1a
    25a0:	89 89       	ldd	r24, Y+17	; 0x11
    25a2:	9a 89       	ldd	r25, Y+18	; 0x12
    25a4:	02 96       	adiw	r24, 0x02	; 2
    25a6:	0e 94 25 08 	call	0x104a	; 0x104a <vListInitialiseItem>
    25aa:	89 89       	ldd	r24, Y+17	; 0x11
    25ac:	9a 89       	ldd	r25, Y+18	; 0x12
    25ae:	0e 96       	adiw	r24, 0x0e	; 14
    25b0:	0e 94 25 08 	call	0x104a	; 0x104a <vListInitialiseItem>
    25b4:	89 89       	ldd	r24, Y+17	; 0x11
    25b6:	9a 89       	ldd	r25, Y+18	; 0x12
    25b8:	29 89       	ldd	r18, Y+17	; 0x11
    25ba:	3a 89       	ldd	r19, Y+18	; 0x12
    25bc:	fc 01       	movw	r30, r24
    25be:	22 87       	std	Z+10, r18	; 0x0a
    25c0:	33 87       	std	Z+11, r19	; 0x0b
    25c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    25c4:	88 2f       	mov	r24, r24
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	a0 e0       	ldi	r26, 0x00	; 0
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	24 e0       	ldi	r18, 0x04	; 4
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	40 e0       	ldi	r20, 0x00	; 0
    25d2:	50 e0       	ldi	r21, 0x00	; 0
    25d4:	79 01       	movw	r14, r18
    25d6:	8a 01       	movw	r16, r20
    25d8:	e8 1a       	sub	r14, r24
    25da:	f9 0a       	sbc	r15, r25
    25dc:	0a 0b       	sbc	r16, r26
    25de:	1b 0b       	sbc	r17, r27
    25e0:	d8 01       	movw	r26, r16
    25e2:	c7 01       	movw	r24, r14
    25e4:	29 89       	ldd	r18, Y+17	; 0x11
    25e6:	3a 89       	ldd	r19, Y+18	; 0x12
    25e8:	f9 01       	movw	r30, r18
    25ea:	86 87       	std	Z+14, r24	; 0x0e
    25ec:	97 87       	std	Z+15, r25	; 0x0f
    25ee:	a0 8b       	std	Z+16, r26	; 0x10
    25f0:	b1 8b       	std	Z+17, r27	; 0x11
    25f2:	89 89       	ldd	r24, Y+17	; 0x11
    25f4:	9a 89       	ldd	r25, Y+18	; 0x12
    25f6:	29 89       	ldd	r18, Y+17	; 0x11
    25f8:	3a 89       	ldd	r19, Y+18	; 0x12
    25fa:	fc 01       	movw	r30, r24
    25fc:	26 8b       	std	Z+22, r18	; 0x16
    25fe:	37 8b       	std	Z+23, r19	; 0x17
    2600:	89 89       	ldd	r24, Y+17	; 0x11
    2602:	9a 89       	ldd	r25, Y+18	; 0x12
    2604:	fc 01       	movw	r30, r24
    2606:	17 a2       	std	Z+39, r1	; 0x27
    2608:	10 a6       	std	Z+40, r1	; 0x28
    260a:	11 a6       	std	Z+41, r1	; 0x29
    260c:	12 a6       	std	Z+42, r1	; 0x2a
    260e:	89 89       	ldd	r24, Y+17	; 0x11
    2610:	9a 89       	ldd	r25, Y+18	; 0x12
    2612:	fc 01       	movw	r30, r24
    2614:	13 a6       	std	Z+43, r1	; 0x2b
    2616:	4c 85       	ldd	r20, Y+12	; 0x0c
    2618:	5d 85       	ldd	r21, Y+13	; 0x0d
    261a:	2c 81       	ldd	r18, Y+4	; 0x04
    261c:	3d 81       	ldd	r19, Y+5	; 0x05
    261e:	8a 81       	ldd	r24, Y+2	; 0x02
    2620:	9b 81       	ldd	r25, Y+3	; 0x03
    2622:	b9 01       	movw	r22, r18
    2624:	0e 94 71 09 	call	0x12e2	; 0x12e2 <pxPortInitialiseStack>
    2628:	9c 01       	movw	r18, r24
    262a:	89 89       	ldd	r24, Y+17	; 0x11
    262c:	9a 89       	ldd	r25, Y+18	; 0x12
    262e:	fc 01       	movw	r30, r24
    2630:	20 83       	st	Z, r18
    2632:	31 83       	std	Z+1, r19	; 0x01
    2634:	8f 85       	ldd	r24, Y+15	; 0x0f
    2636:	98 89       	ldd	r25, Y+16	; 0x10
    2638:	89 2b       	or	r24, r25
    263a:	39 f0       	breq	.+14     	; 0x264a <prvInitialiseNewTask+0x18a>
    263c:	8f 85       	ldd	r24, Y+15	; 0x0f
    263e:	98 89       	ldd	r25, Y+16	; 0x10
    2640:	29 89       	ldd	r18, Y+17	; 0x11
    2642:	3a 89       	ldd	r19, Y+18	; 0x12
    2644:	fc 01       	movw	r30, r24
    2646:	20 83       	st	Z, r18
    2648:	31 83       	std	Z+1, r19	; 0x01
    264a:	00 00       	nop
    264c:	64 96       	adiw	r28, 0x14	; 20
    264e:	cd bf       	out	0x3d, r28	; 61
    2650:	de bf       	out	0x3e, r29	; 62
    2652:	df 91       	pop	r29
    2654:	cf 91       	pop	r28
    2656:	1f 91       	pop	r17
    2658:	0f 91       	pop	r16
    265a:	ff 90       	pop	r15
    265c:	ef 90       	pop	r14
    265e:	df 90       	pop	r13
    2660:	cf 90       	pop	r12
    2662:	bf 90       	pop	r11
    2664:	af 90       	pop	r10
    2666:	9f 90       	pop	r9
    2668:	8f 90       	pop	r8
    266a:	08 95       	ret

0000266c <prvAddNewTaskToReadyList>:
    266c:	cf 93       	push	r28
    266e:	df 93       	push	r29
    2670:	1f 92       	push	r1
    2672:	1f 92       	push	r1
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
    2678:	89 83       	std	Y+1, r24	; 0x01
    267a:	9a 83       	std	Y+2, r25	; 0x02
    267c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2680:	ff 93       	push	r31
    2682:	f8 7f       	andi	r31, 0xF8	; 248
    2684:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2688:	80 91 00 35 	lds	r24, 0x3500	; 0x803500 <uxCurrentNumberOfTasks>
    268c:	8f 5f       	subi	r24, 0xFF	; 255
    268e:	80 93 00 35 	sts	0x3500, r24	; 0x803500 <uxCurrentNumberOfTasks>
    2692:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    2696:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    269a:	89 2b       	or	r24, r25
    269c:	69 f4       	brne	.+26     	; 0x26b8 <prvAddNewTaskToReadyList+0x4c>
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	9a 81       	ldd	r25, Y+2	; 0x02
    26a2:	80 93 a2 34 	sts	0x34A2, r24	; 0x8034a2 <pxCurrentTCB>
    26a6:	90 93 a3 34 	sts	0x34A3, r25	; 0x8034a3 <pxCurrentTCB+0x1>
    26aa:	80 91 00 35 	lds	r24, 0x3500	; 0x803500 <uxCurrentNumberOfTasks>
    26ae:	81 30       	cpi	r24, 0x01	; 1
    26b0:	c9 f4       	brne	.+50     	; 0x26e4 <prvAddNewTaskToReadyList+0x78>
    26b2:	0e 94 3a 1a 	call	0x3474	; 0x3474 <prvInitialiseTaskLists>
    26b6:	16 c0       	rjmp	.+44     	; 0x26e4 <prvAddNewTaskToReadyList+0x78>
    26b8:	80 91 06 35 	lds	r24, 0x3506	; 0x803506 <xSchedulerRunning>
    26bc:	88 23       	and	r24, r24
    26be:	91 f4       	brne	.+36     	; 0x26e4 <prvAddNewTaskToReadyList+0x78>
    26c0:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    26c4:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    26c8:	fc 01       	movw	r30, r24
    26ca:	22 8d       	ldd	r18, Z+26	; 0x1a
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	9a 81       	ldd	r25, Y+2	; 0x02
    26d0:	fc 01       	movw	r30, r24
    26d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    26d4:	82 17       	cp	r24, r18
    26d6:	30 f0       	brcs	.+12     	; 0x26e4 <prvAddNewTaskToReadyList+0x78>
    26d8:	89 81       	ldd	r24, Y+1	; 0x01
    26da:	9a 81       	ldd	r25, Y+2	; 0x02
    26dc:	80 93 a2 34 	sts	0x34A2, r24	; 0x8034a2 <pxCurrentTCB>
    26e0:	90 93 a3 34 	sts	0x34A3, r25	; 0x8034a3 <pxCurrentTCB+0x1>
    26e4:	80 91 0a 35 	lds	r24, 0x350A	; 0x80350a <uxTaskNumber>
    26e8:	8f 5f       	subi	r24, 0xFF	; 255
    26ea:	80 93 0a 35 	sts	0x350A, r24	; 0x80350a <uxTaskNumber>
    26ee:	20 91 0a 35 	lds	r18, 0x350A	; 0x80350a <uxTaskNumber>
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	9a 81       	ldd	r25, Y+2	; 0x02
    26f6:	fc 01       	movw	r30, r24
    26f8:	25 a3       	std	Z+37, r18	; 0x25
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	9a 81       	ldd	r25, Y+2	; 0x02
    26fe:	fc 01       	movw	r30, r24
    2700:	92 8d       	ldd	r25, Z+26	; 0x1a
    2702:	80 91 05 35 	lds	r24, 0x3505	; 0x803505 <uxTopReadyPriority>
    2706:	89 17       	cp	r24, r25
    2708:	30 f4       	brcc	.+12     	; 0x2716 <prvAddNewTaskToReadyList+0xaa>
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	9a 81       	ldd	r25, Y+2	; 0x02
    270e:	fc 01       	movw	r30, r24
    2710:	82 8d       	ldd	r24, Z+26	; 0x1a
    2712:	80 93 05 35 	sts	0x3505, r24	; 0x803505 <uxTopReadyPriority>
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	9a 81       	ldd	r25, Y+2	; 0x02
    271a:	ac 01       	movw	r20, r24
    271c:	4e 5f       	subi	r20, 0xFE	; 254
    271e:	5f 4f       	sbci	r21, 0xFF	; 255
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	9a 81       	ldd	r25, Y+2	; 0x02
    2724:	fc 01       	movw	r30, r24
    2726:	82 8d       	ldd	r24, Z+26	; 0x1a
    2728:	28 2f       	mov	r18, r24
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	6b e0       	ldi	r22, 0x0B	; 11
    272e:	62 9f       	mul	r22, r18
    2730:	c0 01       	movw	r24, r0
    2732:	63 9f       	mul	r22, r19
    2734:	90 0d       	add	r25, r0
    2736:	11 24       	eor	r1, r1
    2738:	8c 55       	subi	r24, 0x5C	; 92
    273a:	9b 4c       	sbci	r25, 0xCB	; 203
    273c:	ba 01       	movw	r22, r20
    273e:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsertEnd>
    2742:	ff 91       	pop	r31
    2744:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2748:	80 91 06 35 	lds	r24, 0x3506	; 0x803506 <xSchedulerRunning>
    274c:	88 23       	and	r24, r24
    274e:	71 f0       	breq	.+28     	; 0x276c <prvAddNewTaskToReadyList+0x100>
    2750:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    2754:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    2758:	fc 01       	movw	r30, r24
    275a:	22 8d       	ldd	r18, Z+26	; 0x1a
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	9a 81       	ldd	r25, Y+2	; 0x02
    2760:	fc 01       	movw	r30, r24
    2762:	82 8d       	ldd	r24, Z+26	; 0x1a
    2764:	28 17       	cp	r18, r24
    2766:	10 f4       	brcc	.+4      	; 0x276c <prvAddNewTaskToReadyList+0x100>
    2768:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    276c:	00 00       	nop
    276e:	0f 90       	pop	r0
    2770:	0f 90       	pop	r0
    2772:	df 91       	pop	r29
    2774:	cf 91       	pop	r28
    2776:	08 95       	ret

00002778 <vTaskDelay>:
    2778:	cf 93       	push	r28
    277a:	df 93       	push	r29
    277c:	cd b7       	in	r28, 0x3d	; 61
    277e:	de b7       	in	r29, 0x3e	; 62
    2780:	25 97       	sbiw	r28, 0x05	; 5
    2782:	cd bf       	out	0x3d, r28	; 61
    2784:	de bf       	out	0x3e, r29	; 62
    2786:	6a 83       	std	Y+2, r22	; 0x02
    2788:	7b 83       	std	Y+3, r23	; 0x03
    278a:	8c 83       	std	Y+4, r24	; 0x04
    278c:	9d 83       	std	Y+5, r25	; 0x05
    278e:	19 82       	std	Y+1, r1	; 0x01
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
    2792:	9b 81       	ldd	r25, Y+3	; 0x03
    2794:	ac 81       	ldd	r26, Y+4	; 0x04
    2796:	bd 81       	ldd	r27, Y+5	; 0x05
    2798:	89 2b       	or	r24, r25
    279a:	8a 2b       	or	r24, r26
    279c:	8b 2b       	or	r24, r27
    279e:	71 f0       	breq	.+28     	; 0x27bc <vTaskDelay+0x44>
    27a0:	0e 94 40 15 	call	0x2a80	; 0x2a80 <vTaskSuspendAll>
    27a4:	8a 81       	ldd	r24, Y+2	; 0x02
    27a6:	9b 81       	ldd	r25, Y+3	; 0x03
    27a8:	ac 81       	ldd	r26, Y+4	; 0x04
    27aa:	bd 81       	ldd	r27, Y+5	; 0x05
    27ac:	40 e0       	ldi	r20, 0x00	; 0
    27ae:	bc 01       	movw	r22, r24
    27b0:	cd 01       	movw	r24, r26
    27b2:	0e 94 17 1b 	call	0x362e	; 0x362e <prvAddCurrentTaskToDelayedList>
    27b6:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
    27ba:	89 83       	std	Y+1, r24	; 0x01
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	88 23       	and	r24, r24
    27c0:	11 f4       	brne	.+4      	; 0x27c6 <vTaskDelay+0x4e>
    27c2:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    27c6:	00 00       	nop
    27c8:	25 96       	adiw	r28, 0x05	; 5
    27ca:	cd bf       	out	0x3d, r28	; 61
    27cc:	de bf       	out	0x3e, r29	; 62
    27ce:	df 91       	pop	r29
    27d0:	cf 91       	pop	r28
    27d2:	08 95       	ret

000027d4 <vTaskSuspend>:
    27d4:	cf 93       	push	r28
    27d6:	df 93       	push	r29
    27d8:	00 d0       	rcall	.+0      	; 0x27da <vTaskSuspend+0x6>
    27da:	1f 92       	push	r1
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
    27e0:	8b 83       	std	Y+3, r24	; 0x03
    27e2:	9c 83       	std	Y+4, r25	; 0x04
    27e4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    27e8:	ff 93       	push	r31
    27ea:	f8 7f       	andi	r31, 0xF8	; 248
    27ec:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    27f0:	8b 81       	ldd	r24, Y+3	; 0x03
    27f2:	9c 81       	ldd	r25, Y+4	; 0x04
    27f4:	89 2b       	or	r24, r25
    27f6:	29 f4       	brne	.+10     	; 0x2802 <vTaskSuspend+0x2e>
    27f8:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    27fc:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    2800:	02 c0       	rjmp	.+4      	; 0x2806 <vTaskSuspend+0x32>
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	9c 81       	ldd	r25, Y+4	; 0x04
    2806:	89 83       	std	Y+1, r24	; 0x01
    2808:	9a 83       	std	Y+2, r25	; 0x02
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	9a 81       	ldd	r25, Y+2	; 0x02
    280e:	02 96       	adiw	r24, 0x02	; 2
    2810:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	9a 81       	ldd	r25, Y+2	; 0x02
    2818:	fc 01       	movw	r30, r24
    281a:	80 8d       	ldd	r24, Z+24	; 0x18
    281c:	91 8d       	ldd	r25, Z+25	; 0x19
    281e:	89 2b       	or	r24, r25
    2820:	29 f0       	breq	.+10     	; 0x282c <vTaskSuspend+0x58>
    2822:	89 81       	ldd	r24, Y+1	; 0x01
    2824:	9a 81       	ldd	r25, Y+2	; 0x02
    2826:	0e 96       	adiw	r24, 0x0e	; 14
    2828:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    282c:	89 81       	ldd	r24, Y+1	; 0x01
    282e:	9a 81       	ldd	r25, Y+2	; 0x02
    2830:	02 96       	adiw	r24, 0x02	; 2
    2832:	bc 01       	movw	r22, r24
    2834:	85 ef       	ldi	r24, 0xF5	; 245
    2836:	94 e3       	ldi	r25, 0x34	; 52
    2838:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsertEnd>
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	9a 81       	ldd	r25, Y+2	; 0x02
    2840:	fc 01       	movw	r30, r24
    2842:	83 a5       	ldd	r24, Z+43	; 0x2b
    2844:	81 30       	cpi	r24, 0x01	; 1
    2846:	21 f4       	brne	.+8      	; 0x2850 <vTaskSuspend+0x7c>
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	9a 81       	ldd	r25, Y+2	; 0x02
    284c:	fc 01       	movw	r30, r24
    284e:	13 a6       	std	Z+43, r1	; 0x2b
    2850:	ff 91       	pop	r31
    2852:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2856:	80 91 06 35 	lds	r24, 0x3506	; 0x803506 <xSchedulerRunning>
    285a:	88 23       	and	r24, r24
    285c:	59 f0       	breq	.+22     	; 0x2874 <vTaskSuspend+0xa0>
    285e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2862:	ff 93       	push	r31
    2864:	f8 7f       	andi	r31, 0xF8	; 248
    2866:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    286a:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <prvResetNextTaskUnblockTime>
    286e:	ff 91       	pop	r31
    2870:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2874:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    2878:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    287c:	29 81       	ldd	r18, Y+1	; 0x01
    287e:	3a 81       	ldd	r19, Y+2	; 0x02
    2880:	28 17       	cp	r18, r24
    2882:	39 07       	cpc	r19, r25
    2884:	a1 f4       	brne	.+40     	; 0x28ae <vTaskSuspend+0xda>
    2886:	80 91 06 35 	lds	r24, 0x3506	; 0x803506 <xSchedulerRunning>
    288a:	88 23       	and	r24, r24
    288c:	19 f0       	breq	.+6      	; 0x2894 <vTaskSuspend+0xc0>
    288e:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    2892:	0d c0       	rjmp	.+26     	; 0x28ae <vTaskSuspend+0xda>
    2894:	90 91 f5 34 	lds	r25, 0x34F5	; 0x8034f5 <xSuspendedTaskList>
    2898:	80 91 00 35 	lds	r24, 0x3500	; 0x803500 <uxCurrentNumberOfTasks>
    289c:	98 17       	cp	r25, r24
    289e:	29 f4       	brne	.+10     	; 0x28aa <vTaskSuspend+0xd6>
    28a0:	10 92 a2 34 	sts	0x34A2, r1	; 0x8034a2 <pxCurrentTCB>
    28a4:	10 92 a3 34 	sts	0x34A3, r1	; 0x8034a3 <pxCurrentTCB+0x1>
    28a8:	02 c0       	rjmp	.+4      	; 0x28ae <vTaskSuspend+0xda>
    28aa:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <vTaskSwitchContext>
    28ae:	00 00       	nop
    28b0:	24 96       	adiw	r28, 0x04	; 4
    28b2:	cd bf       	out	0x3d, r28	; 61
    28b4:	de bf       	out	0x3e, r29	; 62
    28b6:	df 91       	pop	r29
    28b8:	cf 91       	pop	r28
    28ba:	08 95       	ret

000028bc <prvTaskIsTaskSuspended>:
    28bc:	cf 93       	push	r28
    28be:	df 93       	push	r29
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
    28c4:	25 97       	sbiw	r28, 0x05	; 5
    28c6:	cd bf       	out	0x3d, r28	; 61
    28c8:	de bf       	out	0x3e, r29	; 62
    28ca:	8c 83       	std	Y+4, r24	; 0x04
    28cc:	9d 83       	std	Y+5, r25	; 0x05
    28ce:	19 82       	std	Y+1, r1	; 0x01
    28d0:	8c 81       	ldd	r24, Y+4	; 0x04
    28d2:	9d 81       	ldd	r25, Y+5	; 0x05
    28d4:	8a 83       	std	Y+2, r24	; 0x02
    28d6:	9b 83       	std	Y+3, r25	; 0x03
    28d8:	8a 81       	ldd	r24, Y+2	; 0x02
    28da:	9b 81       	ldd	r25, Y+3	; 0x03
    28dc:	fc 01       	movw	r30, r24
    28de:	84 85       	ldd	r24, Z+12	; 0x0c
    28e0:	95 85       	ldd	r25, Z+13	; 0x0d
    28e2:	85 5f       	subi	r24, 0xF5	; 245
    28e4:	94 43       	sbci	r25, 0x34	; 52
    28e6:	89 f4       	brne	.+34     	; 0x290a <prvTaskIsTaskSuspended+0x4e>
    28e8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ea:	9b 81       	ldd	r25, Y+3	; 0x03
    28ec:	fc 01       	movw	r30, r24
    28ee:	80 8d       	ldd	r24, Z+24	; 0x18
    28f0:	91 8d       	ldd	r25, Z+25	; 0x19
    28f2:	8a 5e       	subi	r24, 0xEA	; 234
    28f4:	94 43       	sbci	r25, 0x34	; 52
    28f6:	49 f0       	breq	.+18     	; 0x290a <prvTaskIsTaskSuspended+0x4e>
    28f8:	8a 81       	ldd	r24, Y+2	; 0x02
    28fa:	9b 81       	ldd	r25, Y+3	; 0x03
    28fc:	fc 01       	movw	r30, r24
    28fe:	80 8d       	ldd	r24, Z+24	; 0x18
    2900:	91 8d       	ldd	r25, Z+25	; 0x19
    2902:	89 2b       	or	r24, r25
    2904:	11 f4       	brne	.+4      	; 0x290a <prvTaskIsTaskSuspended+0x4e>
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	89 83       	std	Y+1, r24	; 0x01
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	25 96       	adiw	r28, 0x05	; 5
    290e:	cd bf       	out	0x3d, r28	; 61
    2910:	de bf       	out	0x3e, r29	; 62
    2912:	df 91       	pop	r29
    2914:	cf 91       	pop	r28
    2916:	08 95       	ret

00002918 <vTaskResume>:
    2918:	cf 93       	push	r28
    291a:	df 93       	push	r29
    291c:	00 d0       	rcall	.+0      	; 0x291e <vTaskResume+0x6>
    291e:	1f 92       	push	r1
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	8b 83       	std	Y+3, r24	; 0x03
    2926:	9c 83       	std	Y+4, r25	; 0x04
    2928:	8b 81       	ldd	r24, Y+3	; 0x03
    292a:	9c 81       	ldd	r25, Y+4	; 0x04
    292c:	89 83       	std	Y+1, r24	; 0x01
    292e:	9a 83       	std	Y+2, r25	; 0x02
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	9a 81       	ldd	r25, Y+2	; 0x02
    2934:	89 2b       	or	r24, r25
    2936:	09 f4       	brne	.+2      	; 0x293a <vTaskResume+0x22>
    2938:	50 c0       	rjmp	.+160    	; 0x29da <vTaskResume+0xc2>
    293a:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    293e:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    2942:	29 81       	ldd	r18, Y+1	; 0x01
    2944:	3a 81       	ldd	r19, Y+2	; 0x02
    2946:	28 17       	cp	r18, r24
    2948:	39 07       	cpc	r19, r25
    294a:	09 f4       	brne	.+2      	; 0x294e <vTaskResume+0x36>
    294c:	46 c0       	rjmp	.+140    	; 0x29da <vTaskResume+0xc2>
    294e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2952:	ff 93       	push	r31
    2954:	f8 7f       	andi	r31, 0xF8	; 248
    2956:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	9a 81       	ldd	r25, Y+2	; 0x02
    295e:	0e 94 5e 14 	call	0x28bc	; 0x28bc <prvTaskIsTaskSuspended>
    2962:	88 23       	and	r24, r24
    2964:	b9 f1       	breq	.+110    	; 0x29d4 <vTaskResume+0xbc>
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	9a 81       	ldd	r25, Y+2	; 0x02
    296a:	02 96       	adiw	r24, 0x02	; 2
    296c:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	9a 81       	ldd	r25, Y+2	; 0x02
    2974:	fc 01       	movw	r30, r24
    2976:	92 8d       	ldd	r25, Z+26	; 0x1a
    2978:	80 91 05 35 	lds	r24, 0x3505	; 0x803505 <uxTopReadyPriority>
    297c:	89 17       	cp	r24, r25
    297e:	30 f4       	brcc	.+12     	; 0x298c <vTaskResume+0x74>
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	9a 81       	ldd	r25, Y+2	; 0x02
    2984:	fc 01       	movw	r30, r24
    2986:	82 8d       	ldd	r24, Z+26	; 0x1a
    2988:	80 93 05 35 	sts	0x3505, r24	; 0x803505 <uxTopReadyPriority>
    298c:	89 81       	ldd	r24, Y+1	; 0x01
    298e:	9a 81       	ldd	r25, Y+2	; 0x02
    2990:	ac 01       	movw	r20, r24
    2992:	4e 5f       	subi	r20, 0xFE	; 254
    2994:	5f 4f       	sbci	r21, 0xFF	; 255
    2996:	89 81       	ldd	r24, Y+1	; 0x01
    2998:	9a 81       	ldd	r25, Y+2	; 0x02
    299a:	fc 01       	movw	r30, r24
    299c:	82 8d       	ldd	r24, Z+26	; 0x1a
    299e:	28 2f       	mov	r18, r24
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	6b e0       	ldi	r22, 0x0B	; 11
    29a4:	62 9f       	mul	r22, r18
    29a6:	c0 01       	movw	r24, r0
    29a8:	63 9f       	mul	r22, r19
    29aa:	90 0d       	add	r25, r0
    29ac:	11 24       	eor	r1, r1
    29ae:	8c 55       	subi	r24, 0x5C	; 92
    29b0:	9b 4c       	sbci	r25, 0xCB	; 203
    29b2:	ba 01       	movw	r22, r20
    29b4:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsertEnd>
    29b8:	89 81       	ldd	r24, Y+1	; 0x01
    29ba:	9a 81       	ldd	r25, Y+2	; 0x02
    29bc:	fc 01       	movw	r30, r24
    29be:	22 8d       	ldd	r18, Z+26	; 0x1a
    29c0:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    29c4:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    29c8:	fc 01       	movw	r30, r24
    29ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    29cc:	28 17       	cp	r18, r24
    29ce:	10 f0       	brcs	.+4      	; 0x29d4 <vTaskResume+0xbc>
    29d0:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    29d4:	ff 91       	pop	r31
    29d6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    29da:	00 00       	nop
    29dc:	24 96       	adiw	r28, 0x04	; 4
    29de:	cd bf       	out	0x3d, r28	; 61
    29e0:	de bf       	out	0x3e, r29	; 62
    29e2:	df 91       	pop	r29
    29e4:	cf 91       	pop	r28
    29e6:	08 95       	ret

000029e8 <vTaskStartScheduler>:
    29e8:	ef 92       	push	r14
    29ea:	ff 92       	push	r15
    29ec:	0f 93       	push	r16
    29ee:	cf 93       	push	r28
    29f0:	df 93       	push	r29
    29f2:	1f 92       	push	r1
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    29f8:	0f 2e       	mov	r0, r31
    29fa:	ff e0       	ldi	r31, 0x0F	; 15
    29fc:	ef 2e       	mov	r14, r31
    29fe:	f5 e3       	ldi	r31, 0x35	; 53
    2a00:	ff 2e       	mov	r15, r31
    2a02:	f0 2d       	mov	r31, r0
    2a04:	00 e0       	ldi	r16, 0x00	; 0
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	48 ec       	ldi	r20, 0xC8	; 200
    2a0c:	50 e0       	ldi	r21, 0x00	; 0
    2a0e:	60 e0       	ldi	r22, 0x00	; 0
    2a10:	70 e2       	ldi	r23, 0x20	; 32
    2a12:	87 e2       	ldi	r24, 0x27	; 39
    2a14:	9a e1       	ldi	r25, 0x1A	; 26
    2a16:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <xTaskCreate>
    2a1a:	89 83       	std	Y+1, r24	; 0x01
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	81 30       	cpi	r24, 0x01	; 1
    2a20:	19 f4       	brne	.+6      	; 0x2a28 <vTaskStartScheduler+0x40>
    2a22:	0e 94 b8 1b 	call	0x3770	; 0x3770 <xTimerCreateTimerTask>
    2a26:	89 83       	std	Y+1, r24	; 0x01
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	81 30       	cpi	r24, 0x01	; 1
    2a2c:	09 f5       	brne	.+66     	; 0x2a70 <vTaskStartScheduler+0x88>
    2a2e:	80 ea       	ldi	r24, 0xA0	; 160
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	20 ea       	ldi	r18, 0xA0	; 160
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	f9 01       	movw	r30, r18
    2a38:	22 81       	ldd	r18, Z+2	; 0x02
    2a3a:	28 7f       	andi	r18, 0xF8	; 248
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	22 83       	std	Z+2, r18	; 0x02
    2a40:	8f ef       	ldi	r24, 0xFF	; 255
    2a42:	9f ef       	ldi	r25, 0xFF	; 255
    2a44:	dc 01       	movw	r26, r24
    2a46:	80 93 0b 35 	sts	0x350B, r24	; 0x80350b <xNextTaskUnblockTime>
    2a4a:	90 93 0c 35 	sts	0x350C, r25	; 0x80350c <xNextTaskUnblockTime+0x1>
    2a4e:	a0 93 0d 35 	sts	0x350D, r26	; 0x80350d <xNextTaskUnblockTime+0x2>
    2a52:	b0 93 0e 35 	sts	0x350E, r27	; 0x80350e <xNextTaskUnblockTime+0x3>
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	80 93 06 35 	sts	0x3506, r24	; 0x803506 <xSchedulerRunning>
    2a5c:	10 92 01 35 	sts	0x3501, r1	; 0x803501 <xTickCount>
    2a60:	10 92 02 35 	sts	0x3502, r1	; 0x803502 <xTickCount+0x1>
    2a64:	10 92 03 35 	sts	0x3503, r1	; 0x803503 <xTickCount+0x2>
    2a68:	10 92 04 35 	sts	0x3504, r1	; 0x803504 <xTickCount+0x3>
    2a6c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <xPortStartScheduler>
    2a70:	00 00       	nop
    2a72:	0f 90       	pop	r0
    2a74:	df 91       	pop	r29
    2a76:	cf 91       	pop	r28
    2a78:	0f 91       	pop	r16
    2a7a:	ff 90       	pop	r15
    2a7c:	ef 90       	pop	r14
    2a7e:	08 95       	ret

00002a80 <vTaskSuspendAll>:
    2a80:	cf 93       	push	r28
    2a82:	df 93       	push	r29
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
    2a88:	80 91 11 35 	lds	r24, 0x3511	; 0x803511 <uxSchedulerSuspended>
    2a8c:	8f 5f       	subi	r24, 0xFF	; 255
    2a8e:	80 93 11 35 	sts	0x3511, r24	; 0x803511 <uxSchedulerSuspended>
    2a92:	00 00       	nop
    2a94:	df 91       	pop	r29
    2a96:	cf 91       	pop	r28
    2a98:	08 95       	ret

00002a9a <xTaskResumeAll>:
    2a9a:	cf 93       	push	r28
    2a9c:	df 93       	push	r29
    2a9e:	00 d0       	rcall	.+0      	; 0x2aa0 <xTaskResumeAll+0x6>
    2aa0:	1f 92       	push	r1
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
    2aa6:	19 82       	std	Y+1, r1	; 0x01
    2aa8:	1a 82       	std	Y+2, r1	; 0x02
    2aaa:	1b 82       	std	Y+3, r1	; 0x03
    2aac:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2ab0:	ff 93       	push	r31
    2ab2:	f8 7f       	andi	r31, 0xF8	; 248
    2ab4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2ab8:	80 91 11 35 	lds	r24, 0x3511	; 0x803511 <uxSchedulerSuspended>
    2abc:	81 50       	subi	r24, 0x01	; 1
    2abe:	80 93 11 35 	sts	0x3511, r24	; 0x803511 <uxSchedulerSuspended>
    2ac2:	80 91 11 35 	lds	r24, 0x3511	; 0x803511 <uxSchedulerSuspended>
    2ac6:	88 23       	and	r24, r24
    2ac8:	09 f0       	breq	.+2      	; 0x2acc <xTaskResumeAll+0x32>
    2aca:	74 c0       	rjmp	.+232    	; 0x2bb4 <xTaskResumeAll+0x11a>
    2acc:	80 91 00 35 	lds	r24, 0x3500	; 0x803500 <uxCurrentNumberOfTasks>
    2ad0:	88 23       	and	r24, r24
    2ad2:	09 f4       	brne	.+2      	; 0x2ad6 <xTaskResumeAll+0x3c>
    2ad4:	6f c0       	rjmp	.+222    	; 0x2bb4 <xTaskResumeAll+0x11a>
    2ad6:	46 c0       	rjmp	.+140    	; 0x2b64 <xTaskResumeAll+0xca>
    2ad8:	80 91 f1 34 	lds	r24, 0x34F1	; 0x8034f1 <xPendingReadyList+0x7>
    2adc:	90 91 f2 34 	lds	r25, 0x34F2	; 0x8034f2 <xPendingReadyList+0x8>
    2ae0:	fc 01       	movw	r30, r24
    2ae2:	80 85       	ldd	r24, Z+8	; 0x08
    2ae4:	91 85       	ldd	r25, Z+9	; 0x09
    2ae6:	89 83       	std	Y+1, r24	; 0x01
    2ae8:	9a 83       	std	Y+2, r25	; 0x02
    2aea:	89 81       	ldd	r24, Y+1	; 0x01
    2aec:	9a 81       	ldd	r25, Y+2	; 0x02
    2aee:	0e 96       	adiw	r24, 0x0e	; 14
    2af0:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
    2af6:	9a 81       	ldd	r25, Y+2	; 0x02
    2af8:	02 96       	adiw	r24, 0x02	; 2
    2afa:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    2afe:	89 81       	ldd	r24, Y+1	; 0x01
    2b00:	9a 81       	ldd	r25, Y+2	; 0x02
    2b02:	fc 01       	movw	r30, r24
    2b04:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b06:	80 91 05 35 	lds	r24, 0x3505	; 0x803505 <uxTopReadyPriority>
    2b0a:	89 17       	cp	r24, r25
    2b0c:	30 f4       	brcc	.+12     	; 0x2b1a <xTaskResumeAll+0x80>
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	9a 81       	ldd	r25, Y+2	; 0x02
    2b12:	fc 01       	movw	r30, r24
    2b14:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b16:	80 93 05 35 	sts	0x3505, r24	; 0x803505 <uxTopReadyPriority>
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b1e:	ac 01       	movw	r20, r24
    2b20:	4e 5f       	subi	r20, 0xFE	; 254
    2b22:	5f 4f       	sbci	r21, 0xFF	; 255
    2b24:	89 81       	ldd	r24, Y+1	; 0x01
    2b26:	9a 81       	ldd	r25, Y+2	; 0x02
    2b28:	fc 01       	movw	r30, r24
    2b2a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b2c:	28 2f       	mov	r18, r24
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	6b e0       	ldi	r22, 0x0B	; 11
    2b32:	62 9f       	mul	r22, r18
    2b34:	c0 01       	movw	r24, r0
    2b36:	63 9f       	mul	r22, r19
    2b38:	90 0d       	add	r25, r0
    2b3a:	11 24       	eor	r1, r1
    2b3c:	8c 55       	subi	r24, 0x5C	; 92
    2b3e:	9b 4c       	sbci	r25, 0xCB	; 203
    2b40:	ba 01       	movw	r22, r20
    2b42:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsertEnd>
    2b46:	89 81       	ldd	r24, Y+1	; 0x01
    2b48:	9a 81       	ldd	r25, Y+2	; 0x02
    2b4a:	fc 01       	movw	r30, r24
    2b4c:	22 8d       	ldd	r18, Z+26	; 0x1a
    2b4e:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    2b52:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    2b56:	fc 01       	movw	r30, r24
    2b58:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b5a:	28 17       	cp	r18, r24
    2b5c:	18 f0       	brcs	.+6      	; 0x2b64 <xTaskResumeAll+0xca>
    2b5e:	81 e0       	ldi	r24, 0x01	; 1
    2b60:	80 93 08 35 	sts	0x3508, r24	; 0x803508 <xYieldPending>
    2b64:	80 91 ea 34 	lds	r24, 0x34EA	; 0x8034ea <xPendingReadyList>
    2b68:	88 23       	and	r24, r24
    2b6a:	09 f0       	breq	.+2      	; 0x2b6e <xTaskResumeAll+0xd4>
    2b6c:	b5 cf       	rjmp	.-150    	; 0x2ad8 <xTaskResumeAll+0x3e>
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	9a 81       	ldd	r25, Y+2	; 0x02
    2b72:	89 2b       	or	r24, r25
    2b74:	11 f0       	breq	.+4      	; 0x2b7a <xTaskResumeAll+0xe0>
    2b76:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <prvResetNextTaskUnblockTime>
    2b7a:	80 91 07 35 	lds	r24, 0x3507	; 0x803507 <uxPendedTicks>
    2b7e:	8c 83       	std	Y+4, r24	; 0x04
    2b80:	8c 81       	ldd	r24, Y+4	; 0x04
    2b82:	88 23       	and	r24, r24
    2b84:	79 f0       	breq	.+30     	; 0x2ba4 <xTaskResumeAll+0x10a>
    2b86:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <xTaskIncrementTick>
    2b8a:	88 23       	and	r24, r24
    2b8c:	19 f0       	breq	.+6      	; 0x2b94 <xTaskResumeAll+0xfa>
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	80 93 08 35 	sts	0x3508, r24	; 0x803508 <xYieldPending>
    2b94:	8c 81       	ldd	r24, Y+4	; 0x04
    2b96:	81 50       	subi	r24, 0x01	; 1
    2b98:	8c 83       	std	Y+4, r24	; 0x04
    2b9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b9c:	88 23       	and	r24, r24
    2b9e:	99 f7       	brne	.-26     	; 0x2b86 <xTaskResumeAll+0xec>
    2ba0:	10 92 07 35 	sts	0x3507, r1	; 0x803507 <uxPendedTicks>
    2ba4:	80 91 08 35 	lds	r24, 0x3508	; 0x803508 <xYieldPending>
    2ba8:	88 23       	and	r24, r24
    2baa:	21 f0       	breq	.+8      	; 0x2bb4 <xTaskResumeAll+0x11a>
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	8b 83       	std	Y+3, r24	; 0x03
    2bb0:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    2bb4:	ff 91       	pop	r31
    2bb6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2bba:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbc:	24 96       	adiw	r28, 0x04	; 4
    2bbe:	cd bf       	out	0x3d, r28	; 61
    2bc0:	de bf       	out	0x3e, r29	; 62
    2bc2:	df 91       	pop	r29
    2bc4:	cf 91       	pop	r28
    2bc6:	08 95       	ret

00002bc8 <xTaskGetTickCount>:
    2bc8:	cf 93       	push	r28
    2bca:	df 93       	push	r29
    2bcc:	00 d0       	rcall	.+0      	; 0x2bce <xTaskGetTickCount+0x6>
    2bce:	1f 92       	push	r1
    2bd0:	cd b7       	in	r28, 0x3d	; 61
    2bd2:	de b7       	in	r29, 0x3e	; 62
    2bd4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2bd8:	ff 93       	push	r31
    2bda:	f8 7f       	andi	r31, 0xF8	; 248
    2bdc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2be0:	80 91 01 35 	lds	r24, 0x3501	; 0x803501 <xTickCount>
    2be4:	90 91 02 35 	lds	r25, 0x3502	; 0x803502 <xTickCount+0x1>
    2be8:	a0 91 03 35 	lds	r26, 0x3503	; 0x803503 <xTickCount+0x2>
    2bec:	b0 91 04 35 	lds	r27, 0x3504	; 0x803504 <xTickCount+0x3>
    2bf0:	89 83       	std	Y+1, r24	; 0x01
    2bf2:	9a 83       	std	Y+2, r25	; 0x02
    2bf4:	ab 83       	std	Y+3, r26	; 0x03
    2bf6:	bc 83       	std	Y+4, r27	; 0x04
    2bf8:	ff 91       	pop	r31
    2bfa:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
    2c00:	9a 81       	ldd	r25, Y+2	; 0x02
    2c02:	ab 81       	ldd	r26, Y+3	; 0x03
    2c04:	bc 81       	ldd	r27, Y+4	; 0x04
    2c06:	bc 01       	movw	r22, r24
    2c08:	cd 01       	movw	r24, r26
    2c0a:	24 96       	adiw	r28, 0x04	; 4
    2c0c:	cd bf       	out	0x3d, r28	; 61
    2c0e:	de bf       	out	0x3e, r29	; 62
    2c10:	df 91       	pop	r29
    2c12:	cf 91       	pop	r28
    2c14:	08 95       	ret

00002c16 <xTaskIncrementTick>:
    2c16:	cf 93       	push	r28
    2c18:	df 93       	push	r29
    2c1a:	cd b7       	in	r28, 0x3d	; 61
    2c1c:	de b7       	in	r29, 0x3e	; 62
    2c1e:	2d 97       	sbiw	r28, 0x0d	; 13
    2c20:	cd bf       	out	0x3d, r28	; 61
    2c22:	de bf       	out	0x3e, r29	; 62
    2c24:	19 82       	std	Y+1, r1	; 0x01
    2c26:	80 91 11 35 	lds	r24, 0x3511	; 0x803511 <uxSchedulerSuspended>
    2c2a:	88 23       	and	r24, r24
    2c2c:	09 f0       	breq	.+2      	; 0x2c30 <xTaskIncrementTick+0x1a>
    2c2e:	f1 c0       	rjmp	.+482    	; 0x2e12 <xTaskIncrementTick+0x1fc>
    2c30:	80 91 01 35 	lds	r24, 0x3501	; 0x803501 <xTickCount>
    2c34:	90 91 02 35 	lds	r25, 0x3502	; 0x803502 <xTickCount+0x1>
    2c38:	a0 91 03 35 	lds	r26, 0x3503	; 0x803503 <xTickCount+0x2>
    2c3c:	b0 91 04 35 	lds	r27, 0x3504	; 0x803504 <xTickCount+0x3>
    2c40:	01 96       	adiw	r24, 0x01	; 1
    2c42:	a1 1d       	adc	r26, r1
    2c44:	b1 1d       	adc	r27, r1
    2c46:	8a 83       	std	Y+2, r24	; 0x02
    2c48:	9b 83       	std	Y+3, r25	; 0x03
    2c4a:	ac 83       	std	Y+4, r26	; 0x04
    2c4c:	bd 83       	std	Y+5, r27	; 0x05
    2c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c50:	9b 81       	ldd	r25, Y+3	; 0x03
    2c52:	ac 81       	ldd	r26, Y+4	; 0x04
    2c54:	bd 81       	ldd	r27, Y+5	; 0x05
    2c56:	80 93 01 35 	sts	0x3501, r24	; 0x803501 <xTickCount>
    2c5a:	90 93 02 35 	sts	0x3502, r25	; 0x803502 <xTickCount+0x1>
    2c5e:	a0 93 03 35 	sts	0x3503, r26	; 0x803503 <xTickCount+0x2>
    2c62:	b0 93 04 35 	sts	0x3504, r27	; 0x803504 <xTickCount+0x3>
    2c66:	8a 81       	ldd	r24, Y+2	; 0x02
    2c68:	9b 81       	ldd	r25, Y+3	; 0x03
    2c6a:	ac 81       	ldd	r26, Y+4	; 0x04
    2c6c:	bd 81       	ldd	r27, Y+5	; 0x05
    2c6e:	89 2b       	or	r24, r25
    2c70:	8a 2b       	or	r24, r26
    2c72:	8b 2b       	or	r24, r27
    2c74:	d9 f4       	brne	.+54     	; 0x2cac <xTaskIncrementTick+0x96>
    2c76:	80 91 e6 34 	lds	r24, 0x34E6	; 0x8034e6 <pxDelayedTaskList>
    2c7a:	90 91 e7 34 	lds	r25, 0x34E7	; 0x8034e7 <pxDelayedTaskList+0x1>
    2c7e:	8e 83       	std	Y+6, r24	; 0x06
    2c80:	9f 83       	std	Y+7, r25	; 0x07
    2c82:	80 91 e8 34 	lds	r24, 0x34E8	; 0x8034e8 <pxOverflowDelayedTaskList>
    2c86:	90 91 e9 34 	lds	r25, 0x34E9	; 0x8034e9 <pxOverflowDelayedTaskList+0x1>
    2c8a:	80 93 e6 34 	sts	0x34E6, r24	; 0x8034e6 <pxDelayedTaskList>
    2c8e:	90 93 e7 34 	sts	0x34E7, r25	; 0x8034e7 <pxDelayedTaskList+0x1>
    2c92:	8e 81       	ldd	r24, Y+6	; 0x06
    2c94:	9f 81       	ldd	r25, Y+7	; 0x07
    2c96:	80 93 e8 34 	sts	0x34E8, r24	; 0x8034e8 <pxOverflowDelayedTaskList>
    2c9a:	90 93 e9 34 	sts	0x34E9, r25	; 0x8034e9 <pxOverflowDelayedTaskList+0x1>
    2c9e:	80 91 09 35 	lds	r24, 0x3509	; 0x803509 <xNumOfOverflows>
    2ca2:	8f 5f       	subi	r24, 0xFF	; 255
    2ca4:	80 93 09 35 	sts	0x3509, r24	; 0x803509 <xNumOfOverflows>
    2ca8:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <prvResetNextTaskUnblockTime>
    2cac:	80 91 0b 35 	lds	r24, 0x350B	; 0x80350b <xNextTaskUnblockTime>
    2cb0:	90 91 0c 35 	lds	r25, 0x350C	; 0x80350c <xNextTaskUnblockTime+0x1>
    2cb4:	a0 91 0d 35 	lds	r26, 0x350D	; 0x80350d <xNextTaskUnblockTime+0x2>
    2cb8:	b0 91 0e 35 	lds	r27, 0x350E	; 0x80350e <xNextTaskUnblockTime+0x3>
    2cbc:	2a 81       	ldd	r18, Y+2	; 0x02
    2cbe:	3b 81       	ldd	r19, Y+3	; 0x03
    2cc0:	4c 81       	ldd	r20, Y+4	; 0x04
    2cc2:	5d 81       	ldd	r21, Y+5	; 0x05
    2cc4:	28 17       	cp	r18, r24
    2cc6:	39 07       	cpc	r19, r25
    2cc8:	4a 07       	cpc	r20, r26
    2cca:	5b 07       	cpc	r21, r27
    2ccc:	08 f4       	brcc	.+2      	; 0x2cd0 <xTaskIncrementTick+0xba>
    2cce:	8a c0       	rjmp	.+276    	; 0x2de4 <xTaskIncrementTick+0x1ce>
    2cd0:	80 91 e6 34 	lds	r24, 0x34E6	; 0x8034e6 <pxDelayedTaskList>
    2cd4:	90 91 e7 34 	lds	r25, 0x34E7	; 0x8034e7 <pxDelayedTaskList+0x1>
    2cd8:	fc 01       	movw	r30, r24
    2cda:	80 81       	ld	r24, Z
    2cdc:	88 23       	and	r24, r24
    2cde:	61 f4       	brne	.+24     	; 0x2cf8 <xTaskIncrementTick+0xe2>
    2ce0:	8f ef       	ldi	r24, 0xFF	; 255
    2ce2:	9f ef       	ldi	r25, 0xFF	; 255
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	80 93 0b 35 	sts	0x350B, r24	; 0x80350b <xNextTaskUnblockTime>
    2cea:	90 93 0c 35 	sts	0x350C, r25	; 0x80350c <xNextTaskUnblockTime+0x1>
    2cee:	a0 93 0d 35 	sts	0x350D, r26	; 0x80350d <xNextTaskUnblockTime+0x2>
    2cf2:	b0 93 0e 35 	sts	0x350E, r27	; 0x80350e <xNextTaskUnblockTime+0x3>
    2cf6:	76 c0       	rjmp	.+236    	; 0x2de4 <xTaskIncrementTick+0x1ce>
    2cf8:	80 91 e6 34 	lds	r24, 0x34E6	; 0x8034e6 <pxDelayedTaskList>
    2cfc:	90 91 e7 34 	lds	r25, 0x34E7	; 0x8034e7 <pxDelayedTaskList+0x1>
    2d00:	fc 01       	movw	r30, r24
    2d02:	87 81       	ldd	r24, Z+7	; 0x07
    2d04:	90 85       	ldd	r25, Z+8	; 0x08
    2d06:	fc 01       	movw	r30, r24
    2d08:	80 85       	ldd	r24, Z+8	; 0x08
    2d0a:	91 85       	ldd	r25, Z+9	; 0x09
    2d0c:	88 87       	std	Y+8, r24	; 0x08
    2d0e:	99 87       	std	Y+9, r25	; 0x09
    2d10:	88 85       	ldd	r24, Y+8	; 0x08
    2d12:	99 85       	ldd	r25, Y+9	; 0x09
    2d14:	fc 01       	movw	r30, r24
    2d16:	82 81       	ldd	r24, Z+2	; 0x02
    2d18:	93 81       	ldd	r25, Z+3	; 0x03
    2d1a:	a4 81       	ldd	r26, Z+4	; 0x04
    2d1c:	b5 81       	ldd	r27, Z+5	; 0x05
    2d1e:	8a 87       	std	Y+10, r24	; 0x0a
    2d20:	9b 87       	std	Y+11, r25	; 0x0b
    2d22:	ac 87       	std	Y+12, r26	; 0x0c
    2d24:	bd 87       	std	Y+13, r27	; 0x0d
    2d26:	2a 81       	ldd	r18, Y+2	; 0x02
    2d28:	3b 81       	ldd	r19, Y+3	; 0x03
    2d2a:	4c 81       	ldd	r20, Y+4	; 0x04
    2d2c:	5d 81       	ldd	r21, Y+5	; 0x05
    2d2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d30:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d32:	ac 85       	ldd	r26, Y+12	; 0x0c
    2d34:	bd 85       	ldd	r27, Y+13	; 0x0d
    2d36:	28 17       	cp	r18, r24
    2d38:	39 07       	cpc	r19, r25
    2d3a:	4a 07       	cpc	r20, r26
    2d3c:	5b 07       	cpc	r21, r27
    2d3e:	68 f4       	brcc	.+26     	; 0x2d5a <xTaskIncrementTick+0x144>
    2d40:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d42:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d44:	ac 85       	ldd	r26, Y+12	; 0x0c
    2d46:	bd 85       	ldd	r27, Y+13	; 0x0d
    2d48:	80 93 0b 35 	sts	0x350B, r24	; 0x80350b <xNextTaskUnblockTime>
    2d4c:	90 93 0c 35 	sts	0x350C, r25	; 0x80350c <xNextTaskUnblockTime+0x1>
    2d50:	a0 93 0d 35 	sts	0x350D, r26	; 0x80350d <xNextTaskUnblockTime+0x2>
    2d54:	b0 93 0e 35 	sts	0x350E, r27	; 0x80350e <xNextTaskUnblockTime+0x3>
    2d58:	45 c0       	rjmp	.+138    	; 0x2de4 <xTaskIncrementTick+0x1ce>
    2d5a:	88 85       	ldd	r24, Y+8	; 0x08
    2d5c:	99 85       	ldd	r25, Y+9	; 0x09
    2d5e:	02 96       	adiw	r24, 0x02	; 2
    2d60:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    2d64:	88 85       	ldd	r24, Y+8	; 0x08
    2d66:	99 85       	ldd	r25, Y+9	; 0x09
    2d68:	fc 01       	movw	r30, r24
    2d6a:	80 8d       	ldd	r24, Z+24	; 0x18
    2d6c:	91 8d       	ldd	r25, Z+25	; 0x19
    2d6e:	89 2b       	or	r24, r25
    2d70:	29 f0       	breq	.+10     	; 0x2d7c <xTaskIncrementTick+0x166>
    2d72:	88 85       	ldd	r24, Y+8	; 0x08
    2d74:	99 85       	ldd	r25, Y+9	; 0x09
    2d76:	0e 96       	adiw	r24, 0x0e	; 14
    2d78:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    2d7c:	88 85       	ldd	r24, Y+8	; 0x08
    2d7e:	99 85       	ldd	r25, Y+9	; 0x09
    2d80:	fc 01       	movw	r30, r24
    2d82:	92 8d       	ldd	r25, Z+26	; 0x1a
    2d84:	80 91 05 35 	lds	r24, 0x3505	; 0x803505 <uxTopReadyPriority>
    2d88:	89 17       	cp	r24, r25
    2d8a:	30 f4       	brcc	.+12     	; 0x2d98 <xTaskIncrementTick+0x182>
    2d8c:	88 85       	ldd	r24, Y+8	; 0x08
    2d8e:	99 85       	ldd	r25, Y+9	; 0x09
    2d90:	fc 01       	movw	r30, r24
    2d92:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d94:	80 93 05 35 	sts	0x3505, r24	; 0x803505 <uxTopReadyPriority>
    2d98:	88 85       	ldd	r24, Y+8	; 0x08
    2d9a:	99 85       	ldd	r25, Y+9	; 0x09
    2d9c:	ac 01       	movw	r20, r24
    2d9e:	4e 5f       	subi	r20, 0xFE	; 254
    2da0:	5f 4f       	sbci	r21, 0xFF	; 255
    2da2:	88 85       	ldd	r24, Y+8	; 0x08
    2da4:	99 85       	ldd	r25, Y+9	; 0x09
    2da6:	fc 01       	movw	r30, r24
    2da8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2daa:	28 2f       	mov	r18, r24
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	6b e0       	ldi	r22, 0x0B	; 11
    2db0:	62 9f       	mul	r22, r18
    2db2:	c0 01       	movw	r24, r0
    2db4:	63 9f       	mul	r22, r19
    2db6:	90 0d       	add	r25, r0
    2db8:	11 24       	eor	r1, r1
    2dba:	8c 55       	subi	r24, 0x5C	; 92
    2dbc:	9b 4c       	sbci	r25, 0xCB	; 203
    2dbe:	ba 01       	movw	r22, r20
    2dc0:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsertEnd>
    2dc4:	88 85       	ldd	r24, Y+8	; 0x08
    2dc6:	99 85       	ldd	r25, Y+9	; 0x09
    2dc8:	fc 01       	movw	r30, r24
    2dca:	22 8d       	ldd	r18, Z+26	; 0x1a
    2dcc:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    2dd0:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    2dd4:	fc 01       	movw	r30, r24
    2dd6:	82 8d       	ldd	r24, Z+26	; 0x1a
    2dd8:	28 17       	cp	r18, r24
    2dda:	08 f4       	brcc	.+2      	; 0x2dde <xTaskIncrementTick+0x1c8>
    2ddc:	79 cf       	rjmp	.-270    	; 0x2cd0 <xTaskIncrementTick+0xba>
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	89 83       	std	Y+1, r24	; 0x01
    2de2:	76 cf       	rjmp	.-276    	; 0x2cd0 <xTaskIncrementTick+0xba>
    2de4:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    2de8:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    2dec:	fc 01       	movw	r30, r24
    2dee:	82 8d       	ldd	r24, Z+26	; 0x1a
    2df0:	28 2f       	mov	r18, r24
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	4b e0       	ldi	r20, 0x0B	; 11
    2df6:	42 9f       	mul	r20, r18
    2df8:	c0 01       	movw	r24, r0
    2dfa:	43 9f       	mul	r20, r19
    2dfc:	90 0d       	add	r25, r0
    2dfe:	11 24       	eor	r1, r1
    2e00:	8c 55       	subi	r24, 0x5C	; 92
    2e02:	9b 4c       	sbci	r25, 0xCB	; 203
    2e04:	fc 01       	movw	r30, r24
    2e06:	80 81       	ld	r24, Z
    2e08:	82 30       	cpi	r24, 0x02	; 2
    2e0a:	40 f0       	brcs	.+16     	; 0x2e1c <xTaskIncrementTick+0x206>
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	89 83       	std	Y+1, r24	; 0x01
    2e10:	05 c0       	rjmp	.+10     	; 0x2e1c <xTaskIncrementTick+0x206>
    2e12:	80 91 07 35 	lds	r24, 0x3507	; 0x803507 <uxPendedTicks>
    2e16:	8f 5f       	subi	r24, 0xFF	; 255
    2e18:	80 93 07 35 	sts	0x3507, r24	; 0x803507 <uxPendedTicks>
    2e1c:	80 91 08 35 	lds	r24, 0x3508	; 0x803508 <xYieldPending>
    2e20:	88 23       	and	r24, r24
    2e22:	11 f0       	breq	.+4      	; 0x2e28 <xTaskIncrementTick+0x212>
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	89 83       	std	Y+1, r24	; 0x01
    2e28:	89 81       	ldd	r24, Y+1	; 0x01
    2e2a:	2d 96       	adiw	r28, 0x0d	; 13
    2e2c:	cd bf       	out	0x3d, r28	; 61
    2e2e:	de bf       	out	0x3e, r29	; 62
    2e30:	df 91       	pop	r29
    2e32:	cf 91       	pop	r28
    2e34:	08 95       	ret

00002e36 <vTaskSwitchContext>:
    2e36:	cf 93       	push	r28
    2e38:	df 93       	push	r29
    2e3a:	cd b7       	in	r28, 0x3d	; 61
    2e3c:	de b7       	in	r29, 0x3e	; 62
    2e3e:	29 97       	sbiw	r28, 0x09	; 9
    2e40:	cd bf       	out	0x3d, r28	; 61
    2e42:	de bf       	out	0x3e, r29	; 62
    2e44:	80 91 11 35 	lds	r24, 0x3511	; 0x803511 <uxSchedulerSuspended>
    2e48:	88 23       	and	r24, r24
    2e4a:	21 f0       	breq	.+8      	; 0x2e54 <vTaskSwitchContext+0x1e>
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	80 93 08 35 	sts	0x3508, r24	; 0x803508 <xYieldPending>
    2e52:	ba c0       	rjmp	.+372    	; 0x2fc8 <vTaskSwitchContext+0x192>
    2e54:	10 92 08 35 	sts	0x3508, r1	; 0x803508 <xYieldPending>
    2e58:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    2e5c:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    2e60:	fc 01       	movw	r30, r24
    2e62:	83 8d       	ldd	r24, Z+27	; 0x1b
    2e64:	94 8d       	ldd	r25, Z+28	; 0x1c
    2e66:	8a 83       	std	Y+2, r24	; 0x02
    2e68:	9b 83       	std	Y+3, r25	; 0x03
    2e6a:	85 ea       	ldi	r24, 0xA5	; 165
    2e6c:	95 ea       	ldi	r25, 0xA5	; 165
    2e6e:	dc 01       	movw	r26, r24
    2e70:	8c 83       	std	Y+4, r24	; 0x04
    2e72:	9d 83       	std	Y+5, r25	; 0x05
    2e74:	ae 83       	std	Y+6, r26	; 0x06
    2e76:	bf 83       	std	Y+7, r27	; 0x07
    2e78:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e7c:	fc 01       	movw	r30, r24
    2e7e:	20 81       	ld	r18, Z
    2e80:	31 81       	ldd	r19, Z+1	; 0x01
    2e82:	42 81       	ldd	r20, Z+2	; 0x02
    2e84:	53 81       	ldd	r21, Z+3	; 0x03
    2e86:	8c 81       	ldd	r24, Y+4	; 0x04
    2e88:	9d 81       	ldd	r25, Y+5	; 0x05
    2e8a:	ae 81       	ldd	r26, Y+6	; 0x06
    2e8c:	bf 81       	ldd	r27, Y+7	; 0x07
    2e8e:	28 17       	cp	r18, r24
    2e90:	39 07       	cpc	r19, r25
    2e92:	4a 07       	cpc	r20, r26
    2e94:	5b 07       	cpc	r21, r27
    2e96:	99 f5       	brne	.+102    	; 0x2efe <vTaskSwitchContext+0xc8>
    2e98:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e9c:	04 96       	adiw	r24, 0x04	; 4
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	20 81       	ld	r18, Z
    2ea2:	31 81       	ldd	r19, Z+1	; 0x01
    2ea4:	42 81       	ldd	r20, Z+2	; 0x02
    2ea6:	53 81       	ldd	r21, Z+3	; 0x03
    2ea8:	8c 81       	ldd	r24, Y+4	; 0x04
    2eaa:	9d 81       	ldd	r25, Y+5	; 0x05
    2eac:	ae 81       	ldd	r26, Y+6	; 0x06
    2eae:	bf 81       	ldd	r27, Y+7	; 0x07
    2eb0:	28 17       	cp	r18, r24
    2eb2:	39 07       	cpc	r19, r25
    2eb4:	4a 07       	cpc	r20, r26
    2eb6:	5b 07       	cpc	r21, r27
    2eb8:	11 f5       	brne	.+68     	; 0x2efe <vTaskSwitchContext+0xc8>
    2eba:	8a 81       	ldd	r24, Y+2	; 0x02
    2ebc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ebe:	08 96       	adiw	r24, 0x08	; 8
    2ec0:	fc 01       	movw	r30, r24
    2ec2:	20 81       	ld	r18, Z
    2ec4:	31 81       	ldd	r19, Z+1	; 0x01
    2ec6:	42 81       	ldd	r20, Z+2	; 0x02
    2ec8:	53 81       	ldd	r21, Z+3	; 0x03
    2eca:	8c 81       	ldd	r24, Y+4	; 0x04
    2ecc:	9d 81       	ldd	r25, Y+5	; 0x05
    2ece:	ae 81       	ldd	r26, Y+6	; 0x06
    2ed0:	bf 81       	ldd	r27, Y+7	; 0x07
    2ed2:	28 17       	cp	r18, r24
    2ed4:	39 07       	cpc	r19, r25
    2ed6:	4a 07       	cpc	r20, r26
    2ed8:	5b 07       	cpc	r21, r27
    2eda:	89 f4       	brne	.+34     	; 0x2efe <vTaskSwitchContext+0xc8>
    2edc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ede:	9b 81       	ldd	r25, Y+3	; 0x03
    2ee0:	0c 96       	adiw	r24, 0x0c	; 12
    2ee2:	fc 01       	movw	r30, r24
    2ee4:	20 81       	ld	r18, Z
    2ee6:	31 81       	ldd	r19, Z+1	; 0x01
    2ee8:	42 81       	ldd	r20, Z+2	; 0x02
    2eea:	53 81       	ldd	r21, Z+3	; 0x03
    2eec:	8c 81       	ldd	r24, Y+4	; 0x04
    2eee:	9d 81       	ldd	r25, Y+5	; 0x05
    2ef0:	ae 81       	ldd	r26, Y+6	; 0x06
    2ef2:	bf 81       	ldd	r27, Y+7	; 0x07
    2ef4:	28 17       	cp	r18, r24
    2ef6:	39 07       	cpc	r19, r25
    2ef8:	4a 07       	cpc	r20, r26
    2efa:	5b 07       	cpc	r21, r27
    2efc:	71 f0       	breq	.+28     	; 0x2f1a <vTaskSwitchContext+0xe4>
    2efe:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    2f02:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    2f06:	9c 01       	movw	r18, r24
    2f08:	23 5e       	subi	r18, 0xE3	; 227
    2f0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f0c:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    2f10:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    2f14:	b9 01       	movw	r22, r18
    2f16:	0e 94 12 04 	call	0x824	; 0x824 <vApplicationStackOverflowHook>
    2f1a:	80 91 05 35 	lds	r24, 0x3505	; 0x803505 <uxTopReadyPriority>
    2f1e:	89 83       	std	Y+1, r24	; 0x01
    2f20:	03 c0       	rjmp	.+6      	; 0x2f28 <vTaskSwitchContext+0xf2>
    2f22:	89 81       	ldd	r24, Y+1	; 0x01
    2f24:	81 50       	subi	r24, 0x01	; 1
    2f26:	89 83       	std	Y+1, r24	; 0x01
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
    2f2a:	28 2f       	mov	r18, r24
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	4b e0       	ldi	r20, 0x0B	; 11
    2f30:	42 9f       	mul	r20, r18
    2f32:	c0 01       	movw	r24, r0
    2f34:	43 9f       	mul	r20, r19
    2f36:	90 0d       	add	r25, r0
    2f38:	11 24       	eor	r1, r1
    2f3a:	8c 55       	subi	r24, 0x5C	; 92
    2f3c:	9b 4c       	sbci	r25, 0xCB	; 203
    2f3e:	fc 01       	movw	r30, r24
    2f40:	80 81       	ld	r24, Z
    2f42:	88 23       	and	r24, r24
    2f44:	71 f3       	breq	.-36     	; 0x2f22 <vTaskSwitchContext+0xec>
    2f46:	89 81       	ldd	r24, Y+1	; 0x01
    2f48:	28 2f       	mov	r18, r24
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	4b e0       	ldi	r20, 0x0B	; 11
    2f4e:	42 9f       	mul	r20, r18
    2f50:	c0 01       	movw	r24, r0
    2f52:	43 9f       	mul	r20, r19
    2f54:	90 0d       	add	r25, r0
    2f56:	11 24       	eor	r1, r1
    2f58:	8c 55       	subi	r24, 0x5C	; 92
    2f5a:	9b 4c       	sbci	r25, 0xCB	; 203
    2f5c:	88 87       	std	Y+8, r24	; 0x08
    2f5e:	99 87       	std	Y+9, r25	; 0x09
    2f60:	88 85       	ldd	r24, Y+8	; 0x08
    2f62:	99 85       	ldd	r25, Y+9	; 0x09
    2f64:	fc 01       	movw	r30, r24
    2f66:	81 81       	ldd	r24, Z+1	; 0x01
    2f68:	92 81       	ldd	r25, Z+2	; 0x02
    2f6a:	fc 01       	movw	r30, r24
    2f6c:	24 81       	ldd	r18, Z+4	; 0x04
    2f6e:	35 81       	ldd	r19, Z+5	; 0x05
    2f70:	88 85       	ldd	r24, Y+8	; 0x08
    2f72:	99 85       	ldd	r25, Y+9	; 0x09
    2f74:	fc 01       	movw	r30, r24
    2f76:	21 83       	std	Z+1, r18	; 0x01
    2f78:	32 83       	std	Z+2, r19	; 0x02
    2f7a:	88 85       	ldd	r24, Y+8	; 0x08
    2f7c:	99 85       	ldd	r25, Y+9	; 0x09
    2f7e:	fc 01       	movw	r30, r24
    2f80:	21 81       	ldd	r18, Z+1	; 0x01
    2f82:	32 81       	ldd	r19, Z+2	; 0x02
    2f84:	88 85       	ldd	r24, Y+8	; 0x08
    2f86:	99 85       	ldd	r25, Y+9	; 0x09
    2f88:	03 96       	adiw	r24, 0x03	; 3
    2f8a:	28 17       	cp	r18, r24
    2f8c:	39 07       	cpc	r19, r25
    2f8e:	69 f4       	brne	.+26     	; 0x2faa <vTaskSwitchContext+0x174>
    2f90:	88 85       	ldd	r24, Y+8	; 0x08
    2f92:	99 85       	ldd	r25, Y+9	; 0x09
    2f94:	fc 01       	movw	r30, r24
    2f96:	81 81       	ldd	r24, Z+1	; 0x01
    2f98:	92 81       	ldd	r25, Z+2	; 0x02
    2f9a:	fc 01       	movw	r30, r24
    2f9c:	24 81       	ldd	r18, Z+4	; 0x04
    2f9e:	35 81       	ldd	r19, Z+5	; 0x05
    2fa0:	88 85       	ldd	r24, Y+8	; 0x08
    2fa2:	99 85       	ldd	r25, Y+9	; 0x09
    2fa4:	fc 01       	movw	r30, r24
    2fa6:	21 83       	std	Z+1, r18	; 0x01
    2fa8:	32 83       	std	Z+2, r19	; 0x02
    2faa:	88 85       	ldd	r24, Y+8	; 0x08
    2fac:	99 85       	ldd	r25, Y+9	; 0x09
    2fae:	fc 01       	movw	r30, r24
    2fb0:	81 81       	ldd	r24, Z+1	; 0x01
    2fb2:	92 81       	ldd	r25, Z+2	; 0x02
    2fb4:	fc 01       	movw	r30, r24
    2fb6:	80 85       	ldd	r24, Z+8	; 0x08
    2fb8:	91 85       	ldd	r25, Z+9	; 0x09
    2fba:	80 93 a2 34 	sts	0x34A2, r24	; 0x8034a2 <pxCurrentTCB>
    2fbe:	90 93 a3 34 	sts	0x34A3, r25	; 0x8034a3 <pxCurrentTCB+0x1>
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
    2fc4:	80 93 05 35 	sts	0x3505, r24	; 0x803505 <uxTopReadyPriority>
    2fc8:	00 00       	nop
    2fca:	29 96       	adiw	r28, 0x09	; 9
    2fcc:	cd bf       	out	0x3d, r28	; 61
    2fce:	de bf       	out	0x3e, r29	; 62
    2fd0:	df 91       	pop	r29
    2fd2:	cf 91       	pop	r28
    2fd4:	08 95       	ret

00002fd6 <vTaskPlaceOnEventList>:
    2fd6:	cf 93       	push	r28
    2fd8:	df 93       	push	r29
    2fda:	00 d0       	rcall	.+0      	; 0x2fdc <vTaskPlaceOnEventList+0x6>
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <vTaskPlaceOnEventList+0x8>
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    2fe2:	89 83       	std	Y+1, r24	; 0x01
    2fe4:	9a 83       	std	Y+2, r25	; 0x02
    2fe6:	4b 83       	std	Y+3, r20	; 0x03
    2fe8:	5c 83       	std	Y+4, r21	; 0x04
    2fea:	6d 83       	std	Y+5, r22	; 0x05
    2fec:	7e 83       	std	Y+6, r23	; 0x06
    2fee:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    2ff2:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    2ff6:	9c 01       	movw	r18, r24
    2ff8:	22 5f       	subi	r18, 0xF2	; 242
    2ffa:	3f 4f       	sbci	r19, 0xFF	; 255
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    3000:	b9 01       	movw	r22, r18
    3002:	0e 94 83 08 	call	0x1106	; 0x1106 <vListInsert>
    3006:	8b 81       	ldd	r24, Y+3	; 0x03
    3008:	9c 81       	ldd	r25, Y+4	; 0x04
    300a:	ad 81       	ldd	r26, Y+5	; 0x05
    300c:	be 81       	ldd	r27, Y+6	; 0x06
    300e:	41 e0       	ldi	r20, 0x01	; 1
    3010:	bc 01       	movw	r22, r24
    3012:	cd 01       	movw	r24, r26
    3014:	0e 94 17 1b 	call	0x362e	; 0x362e <prvAddCurrentTaskToDelayedList>
    3018:	00 00       	nop
    301a:	26 96       	adiw	r28, 0x06	; 6
    301c:	cd bf       	out	0x3d, r28	; 61
    301e:	de bf       	out	0x3e, r29	; 62
    3020:	df 91       	pop	r29
    3022:	cf 91       	pop	r28
    3024:	08 95       	ret

00003026 <vTaskPlaceOnUnorderedEventList>:
    3026:	0f 93       	push	r16
    3028:	1f 93       	push	r17
    302a:	cf 93       	push	r28
    302c:	df 93       	push	r29
    302e:	cd b7       	in	r28, 0x3d	; 61
    3030:	de b7       	in	r29, 0x3e	; 62
    3032:	2a 97       	sbiw	r28, 0x0a	; 10
    3034:	cd bf       	out	0x3d, r28	; 61
    3036:	de bf       	out	0x3e, r29	; 62
    3038:	89 83       	std	Y+1, r24	; 0x01
    303a:	9a 83       	std	Y+2, r25	; 0x02
    303c:	4b 83       	std	Y+3, r20	; 0x03
    303e:	5c 83       	std	Y+4, r21	; 0x04
    3040:	6d 83       	std	Y+5, r22	; 0x05
    3042:	7e 83       	std	Y+6, r23	; 0x06
    3044:	0f 83       	std	Y+7, r16	; 0x07
    3046:	18 87       	std	Y+8, r17	; 0x08
    3048:	29 87       	std	Y+9, r18	; 0x09
    304a:	3a 87       	std	Y+10, r19	; 0x0a
    304c:	20 91 a2 34 	lds	r18, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    3050:	30 91 a3 34 	lds	r19, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    3054:	8b 81       	ldd	r24, Y+3	; 0x03
    3056:	9c 81       	ldd	r25, Y+4	; 0x04
    3058:	ad 81       	ldd	r26, Y+5	; 0x05
    305a:	be 81       	ldd	r27, Y+6	; 0x06
    305c:	b0 68       	ori	r27, 0x80	; 128
    305e:	f9 01       	movw	r30, r18
    3060:	86 87       	std	Z+14, r24	; 0x0e
    3062:	97 87       	std	Z+15, r25	; 0x0f
    3064:	a0 8b       	std	Z+16, r26	; 0x10
    3066:	b1 8b       	std	Z+17, r27	; 0x11
    3068:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    306c:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    3070:	9c 01       	movw	r18, r24
    3072:	22 5f       	subi	r18, 0xF2	; 242
    3074:	3f 4f       	sbci	r19, 0xFF	; 255
    3076:	89 81       	ldd	r24, Y+1	; 0x01
    3078:	9a 81       	ldd	r25, Y+2	; 0x02
    307a:	b9 01       	movw	r22, r18
    307c:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsertEnd>
    3080:	8f 81       	ldd	r24, Y+7	; 0x07
    3082:	98 85       	ldd	r25, Y+8	; 0x08
    3084:	a9 85       	ldd	r26, Y+9	; 0x09
    3086:	ba 85       	ldd	r27, Y+10	; 0x0a
    3088:	41 e0       	ldi	r20, 0x01	; 1
    308a:	bc 01       	movw	r22, r24
    308c:	cd 01       	movw	r24, r26
    308e:	0e 94 17 1b 	call	0x362e	; 0x362e <prvAddCurrentTaskToDelayedList>
    3092:	00 00       	nop
    3094:	2a 96       	adiw	r28, 0x0a	; 10
    3096:	cd bf       	out	0x3d, r28	; 61
    3098:	de bf       	out	0x3e, r29	; 62
    309a:	df 91       	pop	r29
    309c:	cf 91       	pop	r28
    309e:	1f 91       	pop	r17
    30a0:	0f 91       	pop	r16
    30a2:	08 95       	ret

000030a4 <vTaskPlaceOnEventListRestricted>:
    30a4:	cf 93       	push	r28
    30a6:	df 93       	push	r29
    30a8:	cd b7       	in	r28, 0x3d	; 61
    30aa:	de b7       	in	r29, 0x3e	; 62
    30ac:	27 97       	sbiw	r28, 0x07	; 7
    30ae:	cd bf       	out	0x3d, r28	; 61
    30b0:	de bf       	out	0x3e, r29	; 62
    30b2:	89 83       	std	Y+1, r24	; 0x01
    30b4:	9a 83       	std	Y+2, r25	; 0x02
    30b6:	4b 83       	std	Y+3, r20	; 0x03
    30b8:	5c 83       	std	Y+4, r21	; 0x04
    30ba:	6d 83       	std	Y+5, r22	; 0x05
    30bc:	7e 83       	std	Y+6, r23	; 0x06
    30be:	2f 83       	std	Y+7, r18	; 0x07
    30c0:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    30c4:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    30c8:	9c 01       	movw	r18, r24
    30ca:	22 5f       	subi	r18, 0xF2	; 242
    30cc:	3f 4f       	sbci	r19, 0xFF	; 255
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
    30d0:	9a 81       	ldd	r25, Y+2	; 0x02
    30d2:	b9 01       	movw	r22, r18
    30d4:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsertEnd>
    30d8:	8f 81       	ldd	r24, Y+7	; 0x07
    30da:	88 23       	and	r24, r24
    30dc:	39 f0       	breq	.+14     	; 0x30ec <vTaskPlaceOnEventListRestricted+0x48>
    30de:	8f ef       	ldi	r24, 0xFF	; 255
    30e0:	9f ef       	ldi	r25, 0xFF	; 255
    30e2:	dc 01       	movw	r26, r24
    30e4:	8b 83       	std	Y+3, r24	; 0x03
    30e6:	9c 83       	std	Y+4, r25	; 0x04
    30e8:	ad 83       	std	Y+5, r26	; 0x05
    30ea:	be 83       	std	Y+6, r27	; 0x06
    30ec:	8b 81       	ldd	r24, Y+3	; 0x03
    30ee:	9c 81       	ldd	r25, Y+4	; 0x04
    30f0:	ad 81       	ldd	r26, Y+5	; 0x05
    30f2:	be 81       	ldd	r27, Y+6	; 0x06
    30f4:	4f 81       	ldd	r20, Y+7	; 0x07
    30f6:	bc 01       	movw	r22, r24
    30f8:	cd 01       	movw	r24, r26
    30fa:	0e 94 17 1b 	call	0x362e	; 0x362e <prvAddCurrentTaskToDelayedList>
    30fe:	00 00       	nop
    3100:	27 96       	adiw	r28, 0x07	; 7
    3102:	cd bf       	out	0x3d, r28	; 61
    3104:	de bf       	out	0x3e, r29	; 62
    3106:	df 91       	pop	r29
    3108:	cf 91       	pop	r28
    310a:	08 95       	ret

0000310c <xTaskRemoveFromEventList>:
    310c:	cf 93       	push	r28
    310e:	df 93       	push	r29
    3110:	cd b7       	in	r28, 0x3d	; 61
    3112:	de b7       	in	r29, 0x3e	; 62
    3114:	25 97       	sbiw	r28, 0x05	; 5
    3116:	cd bf       	out	0x3d, r28	; 61
    3118:	de bf       	out	0x3e, r29	; 62
    311a:	8c 83       	std	Y+4, r24	; 0x04
    311c:	9d 83       	std	Y+5, r25	; 0x05
    311e:	8c 81       	ldd	r24, Y+4	; 0x04
    3120:	9d 81       	ldd	r25, Y+5	; 0x05
    3122:	fc 01       	movw	r30, r24
    3124:	87 81       	ldd	r24, Z+7	; 0x07
    3126:	90 85       	ldd	r25, Z+8	; 0x08
    3128:	fc 01       	movw	r30, r24
    312a:	80 85       	ldd	r24, Z+8	; 0x08
    312c:	91 85       	ldd	r25, Z+9	; 0x09
    312e:	8a 83       	std	Y+2, r24	; 0x02
    3130:	9b 83       	std	Y+3, r25	; 0x03
    3132:	8a 81       	ldd	r24, Y+2	; 0x02
    3134:	9b 81       	ldd	r25, Y+3	; 0x03
    3136:	0e 96       	adiw	r24, 0x0e	; 14
    3138:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    313c:	80 91 11 35 	lds	r24, 0x3511	; 0x803511 <uxSchedulerSuspended>
    3140:	88 23       	and	r24, r24
    3142:	51 f5       	brne	.+84     	; 0x3198 <xTaskRemoveFromEventList+0x8c>
    3144:	8a 81       	ldd	r24, Y+2	; 0x02
    3146:	9b 81       	ldd	r25, Y+3	; 0x03
    3148:	02 96       	adiw	r24, 0x02	; 2
    314a:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    314e:	8a 81       	ldd	r24, Y+2	; 0x02
    3150:	9b 81       	ldd	r25, Y+3	; 0x03
    3152:	fc 01       	movw	r30, r24
    3154:	92 8d       	ldd	r25, Z+26	; 0x1a
    3156:	80 91 05 35 	lds	r24, 0x3505	; 0x803505 <uxTopReadyPriority>
    315a:	89 17       	cp	r24, r25
    315c:	30 f4       	brcc	.+12     	; 0x316a <xTaskRemoveFromEventList+0x5e>
    315e:	8a 81       	ldd	r24, Y+2	; 0x02
    3160:	9b 81       	ldd	r25, Y+3	; 0x03
    3162:	fc 01       	movw	r30, r24
    3164:	82 8d       	ldd	r24, Z+26	; 0x1a
    3166:	80 93 05 35 	sts	0x3505, r24	; 0x803505 <uxTopReadyPriority>
    316a:	8a 81       	ldd	r24, Y+2	; 0x02
    316c:	9b 81       	ldd	r25, Y+3	; 0x03
    316e:	ac 01       	movw	r20, r24
    3170:	4e 5f       	subi	r20, 0xFE	; 254
    3172:	5f 4f       	sbci	r21, 0xFF	; 255
    3174:	8a 81       	ldd	r24, Y+2	; 0x02
    3176:	9b 81       	ldd	r25, Y+3	; 0x03
    3178:	fc 01       	movw	r30, r24
    317a:	82 8d       	ldd	r24, Z+26	; 0x1a
    317c:	28 2f       	mov	r18, r24
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	6b e0       	ldi	r22, 0x0B	; 11
    3182:	62 9f       	mul	r22, r18
    3184:	c0 01       	movw	r24, r0
    3186:	63 9f       	mul	r22, r19
    3188:	90 0d       	add	r25, r0
    318a:	11 24       	eor	r1, r1
    318c:	8c 55       	subi	r24, 0x5C	; 92
    318e:	9b 4c       	sbci	r25, 0xCB	; 203
    3190:	ba 01       	movw	r22, r20
    3192:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsertEnd>
    3196:	08 c0       	rjmp	.+16     	; 0x31a8 <xTaskRemoveFromEventList+0x9c>
    3198:	8a 81       	ldd	r24, Y+2	; 0x02
    319a:	9b 81       	ldd	r25, Y+3	; 0x03
    319c:	0e 96       	adiw	r24, 0x0e	; 14
    319e:	bc 01       	movw	r22, r24
    31a0:	8a ee       	ldi	r24, 0xEA	; 234
    31a2:	94 e3       	ldi	r25, 0x34	; 52
    31a4:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsertEnd>
    31a8:	8a 81       	ldd	r24, Y+2	; 0x02
    31aa:	9b 81       	ldd	r25, Y+3	; 0x03
    31ac:	fc 01       	movw	r30, r24
    31ae:	22 8d       	ldd	r18, Z+26	; 0x1a
    31b0:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    31b4:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    31b8:	fc 01       	movw	r30, r24
    31ba:	82 8d       	ldd	r24, Z+26	; 0x1a
    31bc:	82 17       	cp	r24, r18
    31be:	30 f4       	brcc	.+12     	; 0x31cc <xTaskRemoveFromEventList+0xc0>
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	89 83       	std	Y+1, r24	; 0x01
    31c4:	81 e0       	ldi	r24, 0x01	; 1
    31c6:	80 93 08 35 	sts	0x3508, r24	; 0x803508 <xYieldPending>
    31ca:	01 c0       	rjmp	.+2      	; 0x31ce <xTaskRemoveFromEventList+0xc2>
    31cc:	19 82       	std	Y+1, r1	; 0x01
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
    31d0:	25 96       	adiw	r28, 0x05	; 5
    31d2:	cd bf       	out	0x3d, r28	; 61
    31d4:	de bf       	out	0x3e, r29	; 62
    31d6:	df 91       	pop	r29
    31d8:	cf 91       	pop	r28
    31da:	08 95       	ret

000031dc <vTaskRemoveFromUnorderedEventList>:
    31dc:	cf 93       	push	r28
    31de:	df 93       	push	r29
    31e0:	cd b7       	in	r28, 0x3d	; 61
    31e2:	de b7       	in	r29, 0x3e	; 62
    31e4:	28 97       	sbiw	r28, 0x08	; 8
    31e6:	cd bf       	out	0x3d, r28	; 61
    31e8:	de bf       	out	0x3e, r29	; 62
    31ea:	8b 83       	std	Y+3, r24	; 0x03
    31ec:	9c 83       	std	Y+4, r25	; 0x04
    31ee:	4d 83       	std	Y+5, r20	; 0x05
    31f0:	5e 83       	std	Y+6, r21	; 0x06
    31f2:	6f 83       	std	Y+7, r22	; 0x07
    31f4:	78 87       	std	Y+8, r23	; 0x08
    31f6:	8d 81       	ldd	r24, Y+5	; 0x05
    31f8:	9e 81       	ldd	r25, Y+6	; 0x06
    31fa:	af 81       	ldd	r26, Y+7	; 0x07
    31fc:	b8 85       	ldd	r27, Y+8	; 0x08
    31fe:	b0 68       	ori	r27, 0x80	; 128
    3200:	2b 81       	ldd	r18, Y+3	; 0x03
    3202:	3c 81       	ldd	r19, Y+4	; 0x04
    3204:	f9 01       	movw	r30, r18
    3206:	80 83       	st	Z, r24
    3208:	91 83       	std	Z+1, r25	; 0x01
    320a:	a2 83       	std	Z+2, r26	; 0x02
    320c:	b3 83       	std	Z+3, r27	; 0x03
    320e:	8b 81       	ldd	r24, Y+3	; 0x03
    3210:	9c 81       	ldd	r25, Y+4	; 0x04
    3212:	fc 01       	movw	r30, r24
    3214:	80 85       	ldd	r24, Z+8	; 0x08
    3216:	91 85       	ldd	r25, Z+9	; 0x09
    3218:	89 83       	std	Y+1, r24	; 0x01
    321a:	9a 83       	std	Y+2, r25	; 0x02
    321c:	8b 81       	ldd	r24, Y+3	; 0x03
    321e:	9c 81       	ldd	r25, Y+4	; 0x04
    3220:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    3224:	89 81       	ldd	r24, Y+1	; 0x01
    3226:	9a 81       	ldd	r25, Y+2	; 0x02
    3228:	02 96       	adiw	r24, 0x02	; 2
    322a:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    322e:	89 81       	ldd	r24, Y+1	; 0x01
    3230:	9a 81       	ldd	r25, Y+2	; 0x02
    3232:	fc 01       	movw	r30, r24
    3234:	92 8d       	ldd	r25, Z+26	; 0x1a
    3236:	80 91 05 35 	lds	r24, 0x3505	; 0x803505 <uxTopReadyPriority>
    323a:	89 17       	cp	r24, r25
    323c:	30 f4       	brcc	.+12     	; 0x324a <vTaskRemoveFromUnorderedEventList+0x6e>
    323e:	89 81       	ldd	r24, Y+1	; 0x01
    3240:	9a 81       	ldd	r25, Y+2	; 0x02
    3242:	fc 01       	movw	r30, r24
    3244:	82 8d       	ldd	r24, Z+26	; 0x1a
    3246:	80 93 05 35 	sts	0x3505, r24	; 0x803505 <uxTopReadyPriority>
    324a:	89 81       	ldd	r24, Y+1	; 0x01
    324c:	9a 81       	ldd	r25, Y+2	; 0x02
    324e:	ac 01       	movw	r20, r24
    3250:	4e 5f       	subi	r20, 0xFE	; 254
    3252:	5f 4f       	sbci	r21, 0xFF	; 255
    3254:	89 81       	ldd	r24, Y+1	; 0x01
    3256:	9a 81       	ldd	r25, Y+2	; 0x02
    3258:	fc 01       	movw	r30, r24
    325a:	82 8d       	ldd	r24, Z+26	; 0x1a
    325c:	28 2f       	mov	r18, r24
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	6b e0       	ldi	r22, 0x0B	; 11
    3262:	62 9f       	mul	r22, r18
    3264:	c0 01       	movw	r24, r0
    3266:	63 9f       	mul	r22, r19
    3268:	90 0d       	add	r25, r0
    326a:	11 24       	eor	r1, r1
    326c:	8c 55       	subi	r24, 0x5C	; 92
    326e:	9b 4c       	sbci	r25, 0xCB	; 203
    3270:	ba 01       	movw	r22, r20
    3272:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsertEnd>
    3276:	89 81       	ldd	r24, Y+1	; 0x01
    3278:	9a 81       	ldd	r25, Y+2	; 0x02
    327a:	fc 01       	movw	r30, r24
    327c:	22 8d       	ldd	r18, Z+26	; 0x1a
    327e:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    3282:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    3286:	fc 01       	movw	r30, r24
    3288:	82 8d       	ldd	r24, Z+26	; 0x1a
    328a:	82 17       	cp	r24, r18
    328c:	18 f4       	brcc	.+6      	; 0x3294 <vTaskRemoveFromUnorderedEventList+0xb8>
    328e:	81 e0       	ldi	r24, 0x01	; 1
    3290:	80 93 08 35 	sts	0x3508, r24	; 0x803508 <xYieldPending>
    3294:	00 00       	nop
    3296:	28 96       	adiw	r28, 0x08	; 8
    3298:	cd bf       	out	0x3d, r28	; 61
    329a:	de bf       	out	0x3e, r29	; 62
    329c:	df 91       	pop	r29
    329e:	cf 91       	pop	r28
    32a0:	08 95       	ret

000032a2 <vTaskInternalSetTimeOutState>:
    32a2:	cf 93       	push	r28
    32a4:	df 93       	push	r29
    32a6:	1f 92       	push	r1
    32a8:	1f 92       	push	r1
    32aa:	cd b7       	in	r28, 0x3d	; 61
    32ac:	de b7       	in	r29, 0x3e	; 62
    32ae:	89 83       	std	Y+1, r24	; 0x01
    32b0:	9a 83       	std	Y+2, r25	; 0x02
    32b2:	20 91 09 35 	lds	r18, 0x3509	; 0x803509 <xNumOfOverflows>
    32b6:	89 81       	ldd	r24, Y+1	; 0x01
    32b8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ba:	fc 01       	movw	r30, r24
    32bc:	20 83       	st	Z, r18
    32be:	80 91 01 35 	lds	r24, 0x3501	; 0x803501 <xTickCount>
    32c2:	90 91 02 35 	lds	r25, 0x3502	; 0x803502 <xTickCount+0x1>
    32c6:	a0 91 03 35 	lds	r26, 0x3503	; 0x803503 <xTickCount+0x2>
    32ca:	b0 91 04 35 	lds	r27, 0x3504	; 0x803504 <xTickCount+0x3>
    32ce:	29 81       	ldd	r18, Y+1	; 0x01
    32d0:	3a 81       	ldd	r19, Y+2	; 0x02
    32d2:	f9 01       	movw	r30, r18
    32d4:	81 83       	std	Z+1, r24	; 0x01
    32d6:	92 83       	std	Z+2, r25	; 0x02
    32d8:	a3 83       	std	Z+3, r26	; 0x03
    32da:	b4 83       	std	Z+4, r27	; 0x04
    32dc:	00 00       	nop
    32de:	0f 90       	pop	r0
    32e0:	0f 90       	pop	r0
    32e2:	df 91       	pop	r29
    32e4:	cf 91       	pop	r28
    32e6:	08 95       	ret

000032e8 <xTaskCheckForTimeOut>:
    32e8:	ef 92       	push	r14
    32ea:	ff 92       	push	r15
    32ec:	0f 93       	push	r16
    32ee:	1f 93       	push	r17
    32f0:	cf 93       	push	r28
    32f2:	df 93       	push	r29
    32f4:	cd b7       	in	r28, 0x3d	; 61
    32f6:	de b7       	in	r29, 0x3e	; 62
    32f8:	2d 97       	sbiw	r28, 0x0d	; 13
    32fa:	cd bf       	out	0x3d, r28	; 61
    32fc:	de bf       	out	0x3e, r29	; 62
    32fe:	8a 87       	std	Y+10, r24	; 0x0a
    3300:	9b 87       	std	Y+11, r25	; 0x0b
    3302:	6c 87       	std	Y+12, r22	; 0x0c
    3304:	7d 87       	std	Y+13, r23	; 0x0d
    3306:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    330a:	ff 93       	push	r31
    330c:	f8 7f       	andi	r31, 0xF8	; 248
    330e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    3312:	80 91 01 35 	lds	r24, 0x3501	; 0x803501 <xTickCount>
    3316:	90 91 02 35 	lds	r25, 0x3502	; 0x803502 <xTickCount+0x1>
    331a:	a0 91 03 35 	lds	r26, 0x3503	; 0x803503 <xTickCount+0x2>
    331e:	b0 91 04 35 	lds	r27, 0x3504	; 0x803504 <xTickCount+0x3>
    3322:	8a 83       	std	Y+2, r24	; 0x02
    3324:	9b 83       	std	Y+3, r25	; 0x03
    3326:	ac 83       	std	Y+4, r26	; 0x04
    3328:	bd 83       	std	Y+5, r27	; 0x05
    332a:	8a 85       	ldd	r24, Y+10	; 0x0a
    332c:	9b 85       	ldd	r25, Y+11	; 0x0b
    332e:	fc 01       	movw	r30, r24
    3330:	81 81       	ldd	r24, Z+1	; 0x01
    3332:	92 81       	ldd	r25, Z+2	; 0x02
    3334:	a3 81       	ldd	r26, Z+3	; 0x03
    3336:	b4 81       	ldd	r27, Z+4	; 0x04
    3338:	2a 81       	ldd	r18, Y+2	; 0x02
    333a:	3b 81       	ldd	r19, Y+3	; 0x03
    333c:	4c 81       	ldd	r20, Y+4	; 0x04
    333e:	5d 81       	ldd	r21, Y+5	; 0x05
    3340:	79 01       	movw	r14, r18
    3342:	8a 01       	movw	r16, r20
    3344:	e8 1a       	sub	r14, r24
    3346:	f9 0a       	sbc	r15, r25
    3348:	0a 0b       	sbc	r16, r26
    334a:	1b 0b       	sbc	r17, r27
    334c:	d8 01       	movw	r26, r16
    334e:	c7 01       	movw	r24, r14
    3350:	8e 83       	std	Y+6, r24	; 0x06
    3352:	9f 83       	std	Y+7, r25	; 0x07
    3354:	a8 87       	std	Y+8, r26	; 0x08
    3356:	b9 87       	std	Y+9, r27	; 0x09
    3358:	8c 85       	ldd	r24, Y+12	; 0x0c
    335a:	9d 85       	ldd	r25, Y+13	; 0x0d
    335c:	fc 01       	movw	r30, r24
    335e:	80 81       	ld	r24, Z
    3360:	91 81       	ldd	r25, Z+1	; 0x01
    3362:	a2 81       	ldd	r26, Z+2	; 0x02
    3364:	b3 81       	ldd	r27, Z+3	; 0x03
    3366:	8f 3f       	cpi	r24, 0xFF	; 255
    3368:	9f 4f       	sbci	r25, 0xFF	; 255
    336a:	af 4f       	sbci	r26, 0xFF	; 255
    336c:	bf 4f       	sbci	r27, 0xFF	; 255
    336e:	11 f4       	brne	.+4      	; 0x3374 <xTaskCheckForTimeOut+0x8c>
    3370:	19 82       	std	Y+1, r1	; 0x01
    3372:	54 c0       	rjmp	.+168    	; 0x341c <xTaskCheckForTimeOut+0x134>
    3374:	8a 85       	ldd	r24, Y+10	; 0x0a
    3376:	9b 85       	ldd	r25, Y+11	; 0x0b
    3378:	fc 01       	movw	r30, r24
    337a:	90 81       	ld	r25, Z
    337c:	80 91 09 35 	lds	r24, 0x3509	; 0x803509 <xNumOfOverflows>
    3380:	98 17       	cp	r25, r24
    3382:	99 f0       	breq	.+38     	; 0x33aa <xTaskCheckForTimeOut+0xc2>
    3384:	8a 85       	ldd	r24, Y+10	; 0x0a
    3386:	9b 85       	ldd	r25, Y+11	; 0x0b
    3388:	fc 01       	movw	r30, r24
    338a:	21 81       	ldd	r18, Z+1	; 0x01
    338c:	32 81       	ldd	r19, Z+2	; 0x02
    338e:	43 81       	ldd	r20, Z+3	; 0x03
    3390:	54 81       	ldd	r21, Z+4	; 0x04
    3392:	8a 81       	ldd	r24, Y+2	; 0x02
    3394:	9b 81       	ldd	r25, Y+3	; 0x03
    3396:	ac 81       	ldd	r26, Y+4	; 0x04
    3398:	bd 81       	ldd	r27, Y+5	; 0x05
    339a:	82 17       	cp	r24, r18
    339c:	93 07       	cpc	r25, r19
    339e:	a4 07       	cpc	r26, r20
    33a0:	b5 07       	cpc	r27, r21
    33a2:	18 f0       	brcs	.+6      	; 0x33aa <xTaskCheckForTimeOut+0xc2>
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	89 83       	std	Y+1, r24	; 0x01
    33a8:	39 c0       	rjmp	.+114    	; 0x341c <xTaskCheckForTimeOut+0x134>
    33aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    33ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    33ae:	fc 01       	movw	r30, r24
    33b0:	20 81       	ld	r18, Z
    33b2:	31 81       	ldd	r19, Z+1	; 0x01
    33b4:	42 81       	ldd	r20, Z+2	; 0x02
    33b6:	53 81       	ldd	r21, Z+3	; 0x03
    33b8:	8e 81       	ldd	r24, Y+6	; 0x06
    33ba:	9f 81       	ldd	r25, Y+7	; 0x07
    33bc:	a8 85       	ldd	r26, Y+8	; 0x08
    33be:	b9 85       	ldd	r27, Y+9	; 0x09
    33c0:	82 17       	cp	r24, r18
    33c2:	93 07       	cpc	r25, r19
    33c4:	a4 07       	cpc	r26, r20
    33c6:	b5 07       	cpc	r27, r21
    33c8:	00 f5       	brcc	.+64     	; 0x340a <xTaskCheckForTimeOut+0x122>
    33ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    33cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    33ce:	fc 01       	movw	r30, r24
    33d0:	20 81       	ld	r18, Z
    33d2:	31 81       	ldd	r19, Z+1	; 0x01
    33d4:	42 81       	ldd	r20, Z+2	; 0x02
    33d6:	53 81       	ldd	r21, Z+3	; 0x03
    33d8:	8e 81       	ldd	r24, Y+6	; 0x06
    33da:	9f 81       	ldd	r25, Y+7	; 0x07
    33dc:	a8 85       	ldd	r26, Y+8	; 0x08
    33de:	b9 85       	ldd	r27, Y+9	; 0x09
    33e0:	79 01       	movw	r14, r18
    33e2:	8a 01       	movw	r16, r20
    33e4:	e8 1a       	sub	r14, r24
    33e6:	f9 0a       	sbc	r15, r25
    33e8:	0a 0b       	sbc	r16, r26
    33ea:	1b 0b       	sbc	r17, r27
    33ec:	d8 01       	movw	r26, r16
    33ee:	c7 01       	movw	r24, r14
    33f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    33f2:	3d 85       	ldd	r19, Y+13	; 0x0d
    33f4:	f9 01       	movw	r30, r18
    33f6:	80 83       	st	Z, r24
    33f8:	91 83       	std	Z+1, r25	; 0x01
    33fa:	a2 83       	std	Z+2, r26	; 0x02
    33fc:	b3 83       	std	Z+3, r27	; 0x03
    33fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    3400:	9b 85       	ldd	r25, Y+11	; 0x0b
    3402:	0e 94 51 19 	call	0x32a2	; 0x32a2 <vTaskInternalSetTimeOutState>
    3406:	19 82       	std	Y+1, r1	; 0x01
    3408:	09 c0       	rjmp	.+18     	; 0x341c <xTaskCheckForTimeOut+0x134>
    340a:	8c 85       	ldd	r24, Y+12	; 0x0c
    340c:	9d 85       	ldd	r25, Y+13	; 0x0d
    340e:	fc 01       	movw	r30, r24
    3410:	10 82       	st	Z, r1
    3412:	11 82       	std	Z+1, r1	; 0x01
    3414:	12 82       	std	Z+2, r1	; 0x02
    3416:	13 82       	std	Z+3, r1	; 0x03
    3418:	81 e0       	ldi	r24, 0x01	; 1
    341a:	89 83       	std	Y+1, r24	; 0x01
    341c:	ff 91       	pop	r31
    341e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    3422:	89 81       	ldd	r24, Y+1	; 0x01
    3424:	2d 96       	adiw	r28, 0x0d	; 13
    3426:	cd bf       	out	0x3d, r28	; 61
    3428:	de bf       	out	0x3e, r29	; 62
    342a:	df 91       	pop	r29
    342c:	cf 91       	pop	r28
    342e:	1f 91       	pop	r17
    3430:	0f 91       	pop	r16
    3432:	ff 90       	pop	r15
    3434:	ef 90       	pop	r14
    3436:	08 95       	ret

00003438 <vTaskMissedYield>:
    3438:	cf 93       	push	r28
    343a:	df 93       	push	r29
    343c:	cd b7       	in	r28, 0x3d	; 61
    343e:	de b7       	in	r29, 0x3e	; 62
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	80 93 08 35 	sts	0x3508, r24	; 0x803508 <xYieldPending>
    3446:	00 00       	nop
    3448:	df 91       	pop	r29
    344a:	cf 91       	pop	r28
    344c:	08 95       	ret

0000344e <prvIdleTask>:
    344e:	cf 93       	push	r28
    3450:	df 93       	push	r29
    3452:	1f 92       	push	r1
    3454:	1f 92       	push	r1
    3456:	cd b7       	in	r28, 0x3d	; 61
    3458:	de b7       	in	r29, 0x3e	; 62
    345a:	89 83       	std	Y+1, r24	; 0x01
    345c:	9a 83       	std	Y+2, r25	; 0x02
    345e:	0e 94 75 1a 	call	0x34ea	; 0x34ea <prvCheckTasksWaitingTermination>
    3462:	80 91 a4 34 	lds	r24, 0x34A4	; 0x8034a4 <pxReadyTasksLists>
    3466:	82 30       	cpi	r24, 0x02	; 2
    3468:	10 f0       	brcs	.+4      	; 0x346e <prvIdleTask+0x20>
    346a:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    346e:	0e 94 16 21 	call	0x422c	; 0x422c <vApplicationIdleHook>
    3472:	f5 cf       	rjmp	.-22     	; 0x345e <prvIdleTask+0x10>

00003474 <prvInitialiseTaskLists>:
    3474:	cf 93       	push	r28
    3476:	df 93       	push	r29
    3478:	1f 92       	push	r1
    347a:	cd b7       	in	r28, 0x3d	; 61
    347c:	de b7       	in	r29, 0x3e	; 62
    347e:	19 82       	std	Y+1, r1	; 0x01
    3480:	10 c0       	rjmp	.+32     	; 0x34a2 <prvInitialiseTaskLists+0x2e>
    3482:	89 81       	ldd	r24, Y+1	; 0x01
    3484:	28 2f       	mov	r18, r24
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	4b e0       	ldi	r20, 0x0B	; 11
    348a:	42 9f       	mul	r20, r18
    348c:	c0 01       	movw	r24, r0
    348e:	43 9f       	mul	r20, r19
    3490:	90 0d       	add	r25, r0
    3492:	11 24       	eor	r1, r1
    3494:	8c 55       	subi	r24, 0x5C	; 92
    3496:	9b 4c       	sbci	r25, 0xCB	; 203
    3498:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vListInitialise>
    349c:	89 81       	ldd	r24, Y+1	; 0x01
    349e:	8f 5f       	subi	r24, 0xFF	; 255
    34a0:	89 83       	std	Y+1, r24	; 0x01
    34a2:	89 81       	ldd	r24, Y+1	; 0x01
    34a4:	84 30       	cpi	r24, 0x04	; 4
    34a6:	68 f3       	brcs	.-38     	; 0x3482 <prvInitialiseTaskLists+0xe>
    34a8:	80 ed       	ldi	r24, 0xD0	; 208
    34aa:	94 e3       	ldi	r25, 0x34	; 52
    34ac:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vListInitialise>
    34b0:	8b ed       	ldi	r24, 0xDB	; 219
    34b2:	94 e3       	ldi	r25, 0x34	; 52
    34b4:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vListInitialise>
    34b8:	8a ee       	ldi	r24, 0xEA	; 234
    34ba:	94 e3       	ldi	r25, 0x34	; 52
    34bc:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vListInitialise>
    34c0:	85 ef       	ldi	r24, 0xF5	; 245
    34c2:	94 e3       	ldi	r25, 0x34	; 52
    34c4:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vListInitialise>
    34c8:	80 ed       	ldi	r24, 0xD0	; 208
    34ca:	94 e3       	ldi	r25, 0x34	; 52
    34cc:	80 93 e6 34 	sts	0x34E6, r24	; 0x8034e6 <pxDelayedTaskList>
    34d0:	90 93 e7 34 	sts	0x34E7, r25	; 0x8034e7 <pxDelayedTaskList+0x1>
    34d4:	8b ed       	ldi	r24, 0xDB	; 219
    34d6:	94 e3       	ldi	r25, 0x34	; 52
    34d8:	80 93 e8 34 	sts	0x34E8, r24	; 0x8034e8 <pxOverflowDelayedTaskList>
    34dc:	90 93 e9 34 	sts	0x34E9, r25	; 0x8034e9 <pxOverflowDelayedTaskList+0x1>
    34e0:	00 00       	nop
    34e2:	0f 90       	pop	r0
    34e4:	df 91       	pop	r29
    34e6:	cf 91       	pop	r28
    34e8:	08 95       	ret

000034ea <prvCheckTasksWaitingTermination>:
    34ea:	cf 93       	push	r28
    34ec:	df 93       	push	r29
    34ee:	cd b7       	in	r28, 0x3d	; 61
    34f0:	de b7       	in	r29, 0x3e	; 62
    34f2:	00 00       	nop
    34f4:	df 91       	pop	r29
    34f6:	cf 91       	pop	r28
    34f8:	08 95       	ret

000034fa <prvResetNextTaskUnblockTime>:
    34fa:	cf 93       	push	r28
    34fc:	df 93       	push	r29
    34fe:	1f 92       	push	r1
    3500:	1f 92       	push	r1
    3502:	cd b7       	in	r28, 0x3d	; 61
    3504:	de b7       	in	r29, 0x3e	; 62
    3506:	80 91 e6 34 	lds	r24, 0x34E6	; 0x8034e6 <pxDelayedTaskList>
    350a:	90 91 e7 34 	lds	r25, 0x34E7	; 0x8034e7 <pxDelayedTaskList+0x1>
    350e:	fc 01       	movw	r30, r24
    3510:	80 81       	ld	r24, Z
    3512:	88 23       	and	r24, r24
    3514:	61 f4       	brne	.+24     	; 0x352e <prvResetNextTaskUnblockTime+0x34>
    3516:	8f ef       	ldi	r24, 0xFF	; 255
    3518:	9f ef       	ldi	r25, 0xFF	; 255
    351a:	dc 01       	movw	r26, r24
    351c:	80 93 0b 35 	sts	0x350B, r24	; 0x80350b <xNextTaskUnblockTime>
    3520:	90 93 0c 35 	sts	0x350C, r25	; 0x80350c <xNextTaskUnblockTime+0x1>
    3524:	a0 93 0d 35 	sts	0x350D, r26	; 0x80350d <xNextTaskUnblockTime+0x2>
    3528:	b0 93 0e 35 	sts	0x350E, r27	; 0x80350e <xNextTaskUnblockTime+0x3>
    352c:	1b c0       	rjmp	.+54     	; 0x3564 <prvResetNextTaskUnblockTime+0x6a>
    352e:	80 91 e6 34 	lds	r24, 0x34E6	; 0x8034e6 <pxDelayedTaskList>
    3532:	90 91 e7 34 	lds	r25, 0x34E7	; 0x8034e7 <pxDelayedTaskList+0x1>
    3536:	fc 01       	movw	r30, r24
    3538:	87 81       	ldd	r24, Z+7	; 0x07
    353a:	90 85       	ldd	r25, Z+8	; 0x08
    353c:	fc 01       	movw	r30, r24
    353e:	80 85       	ldd	r24, Z+8	; 0x08
    3540:	91 85       	ldd	r25, Z+9	; 0x09
    3542:	89 83       	std	Y+1, r24	; 0x01
    3544:	9a 83       	std	Y+2, r25	; 0x02
    3546:	89 81       	ldd	r24, Y+1	; 0x01
    3548:	9a 81       	ldd	r25, Y+2	; 0x02
    354a:	fc 01       	movw	r30, r24
    354c:	82 81       	ldd	r24, Z+2	; 0x02
    354e:	93 81       	ldd	r25, Z+3	; 0x03
    3550:	a4 81       	ldd	r26, Z+4	; 0x04
    3552:	b5 81       	ldd	r27, Z+5	; 0x05
    3554:	80 93 0b 35 	sts	0x350B, r24	; 0x80350b <xNextTaskUnblockTime>
    3558:	90 93 0c 35 	sts	0x350C, r25	; 0x80350c <xNextTaskUnblockTime+0x1>
    355c:	a0 93 0d 35 	sts	0x350D, r26	; 0x80350d <xNextTaskUnblockTime+0x2>
    3560:	b0 93 0e 35 	sts	0x350E, r27	; 0x80350e <xNextTaskUnblockTime+0x3>
    3564:	00 00       	nop
    3566:	0f 90       	pop	r0
    3568:	0f 90       	pop	r0
    356a:	df 91       	pop	r29
    356c:	cf 91       	pop	r28
    356e:	08 95       	ret

00003570 <xTaskGetSchedulerState>:
    3570:	cf 93       	push	r28
    3572:	df 93       	push	r29
    3574:	1f 92       	push	r1
    3576:	cd b7       	in	r28, 0x3d	; 61
    3578:	de b7       	in	r29, 0x3e	; 62
    357a:	80 91 06 35 	lds	r24, 0x3506	; 0x803506 <xSchedulerRunning>
    357e:	88 23       	and	r24, r24
    3580:	19 f4       	brne	.+6      	; 0x3588 <xTaskGetSchedulerState+0x18>
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	89 83       	std	Y+1, r24	; 0x01
    3586:	08 c0       	rjmp	.+16     	; 0x3598 <xTaskGetSchedulerState+0x28>
    3588:	80 91 11 35 	lds	r24, 0x3511	; 0x803511 <uxSchedulerSuspended>
    358c:	88 23       	and	r24, r24
    358e:	19 f4       	brne	.+6      	; 0x3596 <xTaskGetSchedulerState+0x26>
    3590:	82 e0       	ldi	r24, 0x02	; 2
    3592:	89 83       	std	Y+1, r24	; 0x01
    3594:	01 c0       	rjmp	.+2      	; 0x3598 <xTaskGetSchedulerState+0x28>
    3596:	19 82       	std	Y+1, r1	; 0x01
    3598:	89 81       	ldd	r24, Y+1	; 0x01
    359a:	0f 90       	pop	r0
    359c:	df 91       	pop	r29
    359e:	cf 91       	pop	r28
    35a0:	08 95       	ret

000035a2 <uxTaskResetEventItemValue>:
    35a2:	ef 92       	push	r14
    35a4:	ff 92       	push	r15
    35a6:	0f 93       	push	r16
    35a8:	1f 93       	push	r17
    35aa:	cf 93       	push	r28
    35ac:	df 93       	push	r29
    35ae:	00 d0       	rcall	.+0      	; 0x35b0 <uxTaskResetEventItemValue+0xe>
    35b0:	1f 92       	push	r1
    35b2:	cd b7       	in	r28, 0x3d	; 61
    35b4:	de b7       	in	r29, 0x3e	; 62
    35b6:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    35ba:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    35be:	fc 01       	movw	r30, r24
    35c0:	86 85       	ldd	r24, Z+14	; 0x0e
    35c2:	97 85       	ldd	r25, Z+15	; 0x0f
    35c4:	a0 89       	ldd	r26, Z+16	; 0x10
    35c6:	b1 89       	ldd	r27, Z+17	; 0x11
    35c8:	89 83       	std	Y+1, r24	; 0x01
    35ca:	9a 83       	std	Y+2, r25	; 0x02
    35cc:	ab 83       	std	Y+3, r26	; 0x03
    35ce:	bc 83       	std	Y+4, r27	; 0x04
    35d0:	60 91 a2 34 	lds	r22, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    35d4:	70 91 a3 34 	lds	r23, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    35d8:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    35dc:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    35e0:	fc 01       	movw	r30, r24
    35e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    35e4:	88 2f       	mov	r24, r24
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	a0 e0       	ldi	r26, 0x00	; 0
    35ea:	b0 e0       	ldi	r27, 0x00	; 0
    35ec:	24 e0       	ldi	r18, 0x04	; 4
    35ee:	30 e0       	ldi	r19, 0x00	; 0
    35f0:	40 e0       	ldi	r20, 0x00	; 0
    35f2:	50 e0       	ldi	r21, 0x00	; 0
    35f4:	79 01       	movw	r14, r18
    35f6:	8a 01       	movw	r16, r20
    35f8:	e8 1a       	sub	r14, r24
    35fa:	f9 0a       	sbc	r15, r25
    35fc:	0a 0b       	sbc	r16, r26
    35fe:	1b 0b       	sbc	r17, r27
    3600:	d8 01       	movw	r26, r16
    3602:	c7 01       	movw	r24, r14
    3604:	fb 01       	movw	r30, r22
    3606:	86 87       	std	Z+14, r24	; 0x0e
    3608:	97 87       	std	Z+15, r25	; 0x0f
    360a:	a0 8b       	std	Z+16, r26	; 0x10
    360c:	b1 8b       	std	Z+17, r27	; 0x11
    360e:	89 81       	ldd	r24, Y+1	; 0x01
    3610:	9a 81       	ldd	r25, Y+2	; 0x02
    3612:	ab 81       	ldd	r26, Y+3	; 0x03
    3614:	bc 81       	ldd	r27, Y+4	; 0x04
    3616:	bc 01       	movw	r22, r24
    3618:	cd 01       	movw	r24, r26
    361a:	24 96       	adiw	r28, 0x04	; 4
    361c:	cd bf       	out	0x3d, r28	; 61
    361e:	de bf       	out	0x3e, r29	; 62
    3620:	df 91       	pop	r29
    3622:	cf 91       	pop	r28
    3624:	1f 91       	pop	r17
    3626:	0f 91       	pop	r16
    3628:	ff 90       	pop	r15
    362a:	ef 90       	pop	r14
    362c:	08 95       	ret

0000362e <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    362e:	cf 93       	push	r28
    3630:	df 93       	push	r29
    3632:	cd b7       	in	r28, 0x3d	; 61
    3634:	de b7       	in	r29, 0x3e	; 62
    3636:	2d 97       	sbiw	r28, 0x0d	; 13
    3638:	cd bf       	out	0x3d, r28	; 61
    363a:	de bf       	out	0x3e, r29	; 62
    363c:	69 87       	std	Y+9, r22	; 0x09
    363e:	7a 87       	std	Y+10, r23	; 0x0a
    3640:	8b 87       	std	Y+11, r24	; 0x0b
    3642:	9c 87       	std	Y+12, r25	; 0x0c
    3644:	4d 87       	std	Y+13, r20	; 0x0d
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    3646:	80 91 01 35 	lds	r24, 0x3501	; 0x803501 <xTickCount>
    364a:	90 91 02 35 	lds	r25, 0x3502	; 0x803502 <xTickCount+0x1>
    364e:	a0 91 03 35 	lds	r26, 0x3503	; 0x803503 <xTickCount+0x2>
    3652:	b0 91 04 35 	lds	r27, 0x3504	; 0x803504 <xTickCount+0x3>
    3656:	89 83       	std	Y+1, r24	; 0x01
    3658:	9a 83       	std	Y+2, r25	; 0x02
    365a:	ab 83       	std	Y+3, r26	; 0x03
    365c:	bc 83       	std	Y+4, r27	; 0x04
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    365e:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    3662:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    3666:	02 96       	adiw	r24, 0x02	; 2
    3668:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    366c:	89 85       	ldd	r24, Y+9	; 0x09
    366e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3670:	ab 85       	ldd	r26, Y+11	; 0x0b
    3672:	bc 85       	ldd	r27, Y+12	; 0x0c
    3674:	8f 3f       	cpi	r24, 0xFF	; 255
    3676:	9f 4f       	sbci	r25, 0xFF	; 255
    3678:	af 4f       	sbci	r26, 0xFF	; 255
    367a:	bf 4f       	sbci	r27, 0xFF	; 255
    367c:	71 f4       	brne	.+28     	; 0x369a <prvAddCurrentTaskToDelayedList+0x6c>
    367e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3680:	88 23       	and	r24, r24
    3682:	59 f0       	breq	.+22     	; 0x369a <prvAddCurrentTaskToDelayedList+0x6c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3684:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    3688:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    368c:	02 96       	adiw	r24, 0x02	; 2
    368e:	bc 01       	movw	r22, r24
    3690:	85 ef       	ldi	r24, 0xF5	; 245
    3692:	94 e3       	ldi	r25, 0x34	; 52
    3694:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3698:	64 c0       	rjmp	.+200    	; 0x3762 <prvAddCurrentTaskToDelayedList+0x134>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    369a:	29 81       	ldd	r18, Y+1	; 0x01
    369c:	3a 81       	ldd	r19, Y+2	; 0x02
    369e:	4b 81       	ldd	r20, Y+3	; 0x03
    36a0:	5c 81       	ldd	r21, Y+4	; 0x04
    36a2:	89 85       	ldd	r24, Y+9	; 0x09
    36a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    36a6:	ab 85       	ldd	r26, Y+11	; 0x0b
    36a8:	bc 85       	ldd	r27, Y+12	; 0x0c
    36aa:	82 0f       	add	r24, r18
    36ac:	93 1f       	adc	r25, r19
    36ae:	a4 1f       	adc	r26, r20
    36b0:	b5 1f       	adc	r27, r21
    36b2:	8d 83       	std	Y+5, r24	; 0x05
    36b4:	9e 83       	std	Y+6, r25	; 0x06
    36b6:	af 83       	std	Y+7, r26	; 0x07
    36b8:	b8 87       	std	Y+8, r27	; 0x08

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    36ba:	20 91 a2 34 	lds	r18, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    36be:	30 91 a3 34 	lds	r19, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    36c2:	8d 81       	ldd	r24, Y+5	; 0x05
    36c4:	9e 81       	ldd	r25, Y+6	; 0x06
    36c6:	af 81       	ldd	r26, Y+7	; 0x07
    36c8:	b8 85       	ldd	r27, Y+8	; 0x08
    36ca:	f9 01       	movw	r30, r18
    36cc:	82 83       	std	Z+2, r24	; 0x02
    36ce:	93 83       	std	Z+3, r25	; 0x03
    36d0:	a4 83       	std	Z+4, r26	; 0x04
    36d2:	b5 83       	std	Z+5, r27	; 0x05

			if( xTimeToWake < xConstTickCount )
    36d4:	2d 81       	ldd	r18, Y+5	; 0x05
    36d6:	3e 81       	ldd	r19, Y+6	; 0x06
    36d8:	4f 81       	ldd	r20, Y+7	; 0x07
    36da:	58 85       	ldd	r21, Y+8	; 0x08
    36dc:	89 81       	ldd	r24, Y+1	; 0x01
    36de:	9a 81       	ldd	r25, Y+2	; 0x02
    36e0:	ab 81       	ldd	r26, Y+3	; 0x03
    36e2:	bc 81       	ldd	r27, Y+4	; 0x04
    36e4:	28 17       	cp	r18, r24
    36e6:	39 07       	cpc	r19, r25
    36e8:	4a 07       	cpc	r20, r26
    36ea:	5b 07       	cpc	r21, r27
    36ec:	78 f4       	brcc	.+30     	; 0x370c <prvAddCurrentTaskToDelayedList+0xde>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    36ee:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    36f2:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    36f6:	9c 01       	movw	r18, r24
    36f8:	2e 5f       	subi	r18, 0xFE	; 254
    36fa:	3f 4f       	sbci	r19, 0xFF	; 255
    36fc:	80 91 e8 34 	lds	r24, 0x34E8	; 0x8034e8 <pxOverflowDelayedTaskList>
    3700:	90 91 e9 34 	lds	r25, 0x34E9	; 0x8034e9 <pxOverflowDelayedTaskList+0x1>
    3704:	b9 01       	movw	r22, r18
    3706:	0e 94 83 08 	call	0x1106	; 0x1106 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    370a:	2b c0       	rjmp	.+86     	; 0x3762 <prvAddCurrentTaskToDelayedList+0x134>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    370c:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    3710:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    3714:	9c 01       	movw	r18, r24
    3716:	2e 5f       	subi	r18, 0xFE	; 254
    3718:	3f 4f       	sbci	r19, 0xFF	; 255
    371a:	80 91 e6 34 	lds	r24, 0x34E6	; 0x8034e6 <pxDelayedTaskList>
    371e:	90 91 e7 34 	lds	r25, 0x34E7	; 0x8034e7 <pxDelayedTaskList+0x1>
    3722:	b9 01       	movw	r22, r18
    3724:	0e 94 83 08 	call	0x1106	; 0x1106 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    3728:	80 91 0b 35 	lds	r24, 0x350B	; 0x80350b <xNextTaskUnblockTime>
    372c:	90 91 0c 35 	lds	r25, 0x350C	; 0x80350c <xNextTaskUnblockTime+0x1>
    3730:	a0 91 0d 35 	lds	r26, 0x350D	; 0x80350d <xNextTaskUnblockTime+0x2>
    3734:	b0 91 0e 35 	lds	r27, 0x350E	; 0x80350e <xNextTaskUnblockTime+0x3>
    3738:	2d 81       	ldd	r18, Y+5	; 0x05
    373a:	3e 81       	ldd	r19, Y+6	; 0x06
    373c:	4f 81       	ldd	r20, Y+7	; 0x07
    373e:	58 85       	ldd	r21, Y+8	; 0x08
    3740:	28 17       	cp	r18, r24
    3742:	39 07       	cpc	r19, r25
    3744:	4a 07       	cpc	r20, r26
    3746:	5b 07       	cpc	r21, r27
    3748:	60 f4       	brcc	.+24     	; 0x3762 <prvAddCurrentTaskToDelayedList+0x134>
				{
					xNextTaskUnblockTime = xTimeToWake;
    374a:	8d 81       	ldd	r24, Y+5	; 0x05
    374c:	9e 81       	ldd	r25, Y+6	; 0x06
    374e:	af 81       	ldd	r26, Y+7	; 0x07
    3750:	b8 85       	ldd	r27, Y+8	; 0x08
    3752:	80 93 0b 35 	sts	0x350B, r24	; 0x80350b <xNextTaskUnblockTime>
    3756:	90 93 0c 35 	sts	0x350C, r25	; 0x80350c <xNextTaskUnblockTime+0x1>
    375a:	a0 93 0d 35 	sts	0x350D, r26	; 0x80350d <xNextTaskUnblockTime+0x2>
    375e:	b0 93 0e 35 	sts	0x350E, r27	; 0x80350e <xNextTaskUnblockTime+0x3>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3762:	00 00       	nop
    3764:	2d 96       	adiw	r28, 0x0d	; 13
    3766:	cd bf       	out	0x3d, r28	; 61
    3768:	de bf       	out	0x3e, r29	; 62
    376a:	df 91       	pop	r29
    376c:	cf 91       	pop	r28
    376e:	08 95       	ret

00003770 <xTimerCreateTimerTask>:
	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
}
    3770:	ef 92       	push	r14
    3772:	ff 92       	push	r15
    3774:	0f 93       	push	r16
    3776:	cf 93       	push	r28
    3778:	df 93       	push	r29
    377a:	1f 92       	push	r1
    377c:	cd b7       	in	r28, 0x3d	; 61
    377e:	de b7       	in	r29, 0x3e	; 62
    3780:	19 82       	std	Y+1, r1	; 0x01
    3782:	0e 94 49 20 	call	0x4092	; 0x4092 <prvCheckForValidListAndQueue>
    3786:	80 91 2c 35 	lds	r24, 0x352C	; 0x80352c <xTimerQueue>
    378a:	90 91 2d 35 	lds	r25, 0x352D	; 0x80352d <xTimerQueue+0x1>
    378e:	89 2b       	or	r24, r25
    3790:	91 f0       	breq	.+36     	; 0x37b6 <xTimerCreateTimerTask+0x46>
    3792:	0f 2e       	mov	r0, r31
    3794:	fe e2       	ldi	r31, 0x2E	; 46
    3796:	ef 2e       	mov	r14, r31
    3798:	f5 e3       	ldi	r31, 0x35	; 53
    379a:	ff 2e       	mov	r15, r31
    379c:	f0 2d       	mov	r31, r0
    379e:	03 e0       	ldi	r16, 0x03	; 3
    37a0:	20 e0       	ldi	r18, 0x00	; 0
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	48 ec       	ldi	r20, 0xC8	; 200
    37a6:	50 e0       	ldi	r21, 0x00	; 0
    37a8:	65 e0       	ldi	r22, 0x05	; 5
    37aa:	70 e2       	ldi	r23, 0x20	; 32
    37ac:	8e ec       	ldi	r24, 0xCE	; 206
    37ae:	9c e1       	ldi	r25, 0x1C	; 28
    37b0:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <xTaskCreate>
    37b4:	89 83       	std	Y+1, r24	; 0x01
    37b6:	89 81       	ldd	r24, Y+1	; 0x01
    37b8:	0f 90       	pop	r0
    37ba:	df 91       	pop	r29
    37bc:	cf 91       	pop	r28
    37be:	0f 91       	pop	r16
    37c0:	ff 90       	pop	r15
    37c2:	ef 90       	pop	r14
    37c4:	08 95       	ret

000037c6 <xTimerGenericCommand>:
    37c6:	cf 92       	push	r12
    37c8:	df 92       	push	r13
    37ca:	ef 92       	push	r14
    37cc:	ff 92       	push	r15
    37ce:	0f 93       	push	r16
    37d0:	1f 93       	push	r17
    37d2:	cf 93       	push	r28
    37d4:	df 93       	push	r29
    37d6:	cd b7       	in	r28, 0x3d	; 61
    37d8:	de b7       	in	r29, 0x3e	; 62
    37da:	67 97       	sbiw	r28, 0x17	; 23
    37dc:	cd bf       	out	0x3d, r28	; 61
    37de:	de bf       	out	0x3e, r29	; 62
    37e0:	8b 87       	std	Y+11, r24	; 0x0b
    37e2:	9c 87       	std	Y+12, r25	; 0x0c
    37e4:	6d 87       	std	Y+13, r22	; 0x0d
    37e6:	2e 87       	std	Y+14, r18	; 0x0e
    37e8:	3f 87       	std	Y+15, r19	; 0x0f
    37ea:	48 8b       	std	Y+16, r20	; 0x10
    37ec:	59 8b       	std	Y+17, r21	; 0x11
    37ee:	0a 8b       	std	Y+18, r16	; 0x12
    37f0:	1b 8b       	std	Y+19, r17	; 0x13
    37f2:	cc 8a       	std	Y+20, r12	; 0x14
    37f4:	dd 8a       	std	Y+21, r13	; 0x15
    37f6:	ee 8a       	std	Y+22, r14	; 0x16
    37f8:	ff 8a       	std	Y+23, r15	; 0x17
    37fa:	19 82       	std	Y+1, r1	; 0x01
    37fc:	80 91 2c 35 	lds	r24, 0x352C	; 0x80352c <xTimerQueue>
    3800:	90 91 2d 35 	lds	r25, 0x352D	; 0x80352d <xTimerQueue+0x1>
    3804:	89 2b       	or	r24, r25
    3806:	09 f4       	brne	.+2      	; 0x380a <xTimerGenericCommand+0x44>
    3808:	44 c0       	rjmp	.+136    	; 0x3892 <xTimerGenericCommand+0xcc>
    380a:	8d 85       	ldd	r24, Y+13	; 0x0d
    380c:	8a 83       	std	Y+2, r24	; 0x02
    380e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3810:	9f 85       	ldd	r25, Y+15	; 0x0f
    3812:	a8 89       	ldd	r26, Y+16	; 0x10
    3814:	b9 89       	ldd	r27, Y+17	; 0x11
    3816:	8b 83       	std	Y+3, r24	; 0x03
    3818:	9c 83       	std	Y+4, r25	; 0x04
    381a:	ad 83       	std	Y+5, r26	; 0x05
    381c:	be 83       	std	Y+6, r27	; 0x06
    381e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3820:	9c 85       	ldd	r25, Y+12	; 0x0c
    3822:	8f 83       	std	Y+7, r24	; 0x07
    3824:	98 87       	std	Y+8, r25	; 0x08
    3826:	8d 85       	ldd	r24, Y+13	; 0x0d
    3828:	86 30       	cpi	r24, 0x06	; 6
    382a:	34 f5       	brge	.+76     	; 0x3878 <xTimerGenericCommand+0xb2>
    382c:	0e 94 b8 1a 	call	0x3570	; 0x3570 <xTaskGetSchedulerState>
    3830:	82 30       	cpi	r24, 0x02	; 2
    3832:	99 f4       	brne	.+38     	; 0x385a <xTimerGenericCommand+0x94>
    3834:	e0 91 2c 35 	lds	r30, 0x352C	; 0x80352c <xTimerQueue>
    3838:	f0 91 2d 35 	lds	r31, 0x352D	; 0x80352d <xTimerQueue+0x1>
    383c:	8c 89       	ldd	r24, Y+20	; 0x14
    383e:	9d 89       	ldd	r25, Y+21	; 0x15
    3840:	ae 89       	ldd	r26, Y+22	; 0x16
    3842:	bf 89       	ldd	r27, Y+23	; 0x17
    3844:	be 01       	movw	r22, r28
    3846:	6e 5f       	subi	r22, 0xFE	; 254
    3848:	7f 4f       	sbci	r23, 0xFF	; 255
    384a:	00 e0       	ldi	r16, 0x00	; 0
    384c:	9c 01       	movw	r18, r24
    384e:	ad 01       	movw	r20, r26
    3850:	cf 01       	movw	r24, r30
    3852:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <xQueueGenericSend>
    3856:	89 83       	std	Y+1, r24	; 0x01
    3858:	1c c0       	rjmp	.+56     	; 0x3892 <xTimerGenericCommand+0xcc>
    385a:	80 91 2c 35 	lds	r24, 0x352C	; 0x80352c <xTimerQueue>
    385e:	90 91 2d 35 	lds	r25, 0x352D	; 0x80352d <xTimerQueue+0x1>
    3862:	be 01       	movw	r22, r28
    3864:	6e 5f       	subi	r22, 0xFE	; 254
    3866:	7f 4f       	sbci	r23, 0xFF	; 255
    3868:	00 e0       	ldi	r16, 0x00	; 0
    386a:	20 e0       	ldi	r18, 0x00	; 0
    386c:	30 e0       	ldi	r19, 0x00	; 0
    386e:	a9 01       	movw	r20, r18
    3870:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <xQueueGenericSend>
    3874:	89 83       	std	Y+1, r24	; 0x01
    3876:	0d c0       	rjmp	.+26     	; 0x3892 <xTimerGenericCommand+0xcc>
    3878:	80 91 2c 35 	lds	r24, 0x352C	; 0x80352c <xTimerQueue>
    387c:	90 91 2d 35 	lds	r25, 0x352D	; 0x80352d <xTimerQueue+0x1>
    3880:	4a 89       	ldd	r20, Y+18	; 0x12
    3882:	5b 89       	ldd	r21, Y+19	; 0x13
    3884:	be 01       	movw	r22, r28
    3886:	6e 5f       	subi	r22, 0xFE	; 254
    3888:	7f 4f       	sbci	r23, 0xFF	; 255
    388a:	20 e0       	ldi	r18, 0x00	; 0
    388c:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <xQueueGenericSendFromISR>
    3890:	89 83       	std	Y+1, r24	; 0x01
    3892:	89 81       	ldd	r24, Y+1	; 0x01
    3894:	67 96       	adiw	r28, 0x17	; 23
    3896:	cd bf       	out	0x3d, r28	; 61
    3898:	de bf       	out	0x3e, r29	; 62
    389a:	df 91       	pop	r29
    389c:	cf 91       	pop	r28
    389e:	1f 91       	pop	r17
    38a0:	0f 91       	pop	r16
    38a2:	ff 90       	pop	r15
    38a4:	ef 90       	pop	r14
    38a6:	df 90       	pop	r13
    38a8:	cf 90       	pop	r12
    38aa:	08 95       	ret

000038ac <prvProcessExpiredTimer>:
    38ac:	cf 92       	push	r12
    38ae:	df 92       	push	r13
    38b0:	ef 92       	push	r14
    38b2:	ff 92       	push	r15
    38b4:	0f 93       	push	r16
    38b6:	1f 93       	push	r17
    38b8:	cf 93       	push	r28
    38ba:	df 93       	push	r29
    38bc:	cd b7       	in	r28, 0x3d	; 61
    38be:	de b7       	in	r29, 0x3e	; 62
    38c0:	2b 97       	sbiw	r28, 0x0b	; 11
    38c2:	cd bf       	out	0x3d, r28	; 61
    38c4:	de bf       	out	0x3e, r29	; 62
    38c6:	6c 83       	std	Y+4, r22	; 0x04
    38c8:	7d 83       	std	Y+5, r23	; 0x05
    38ca:	8e 83       	std	Y+6, r24	; 0x06
    38cc:	9f 83       	std	Y+7, r25	; 0x07
    38ce:	28 87       	std	Y+8, r18	; 0x08
    38d0:	39 87       	std	Y+9, r19	; 0x09
    38d2:	4a 87       	std	Y+10, r20	; 0x0a
    38d4:	5b 87       	std	Y+11, r21	; 0x0b
    38d6:	80 91 28 35 	lds	r24, 0x3528	; 0x803528 <pxCurrentTimerList>
    38da:	90 91 29 35 	lds	r25, 0x3529	; 0x803529 <pxCurrentTimerList+0x1>
    38de:	fc 01       	movw	r30, r24
    38e0:	87 81       	ldd	r24, Z+7	; 0x07
    38e2:	90 85       	ldd	r25, Z+8	; 0x08
    38e4:	fc 01       	movw	r30, r24
    38e6:	80 85       	ldd	r24, Z+8	; 0x08
    38e8:	91 85       	ldd	r25, Z+9	; 0x09
    38ea:	89 83       	std	Y+1, r24	; 0x01
    38ec:	9a 83       	std	Y+2, r25	; 0x02
    38ee:	89 81       	ldd	r24, Y+1	; 0x01
    38f0:	9a 81       	ldd	r25, Y+2	; 0x02
    38f2:	02 96       	adiw	r24, 0x02	; 2
    38f4:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    38f8:	89 81       	ldd	r24, Y+1	; 0x01
    38fa:	9a 81       	ldd	r25, Y+2	; 0x02
    38fc:	fc 01       	movw	r30, r24
    38fe:	82 89       	ldd	r24, Z+18	; 0x12
    3900:	81 30       	cpi	r24, 0x01	; 1
    3902:	b1 f5       	brne	.+108    	; 0x3970 <prvProcessExpiredTimer+0xc4>
    3904:	89 81       	ldd	r24, Y+1	; 0x01
    3906:	9a 81       	ldd	r25, Y+2	; 0x02
    3908:	fc 01       	movw	r30, r24
    390a:	26 85       	ldd	r18, Z+14	; 0x0e
    390c:	37 85       	ldd	r19, Z+15	; 0x0f
    390e:	40 89       	ldd	r20, Z+16	; 0x10
    3910:	51 89       	ldd	r21, Z+17	; 0x11
    3912:	8c 81       	ldd	r24, Y+4	; 0x04
    3914:	9d 81       	ldd	r25, Y+5	; 0x05
    3916:	ae 81       	ldd	r26, Y+6	; 0x06
    3918:	bf 81       	ldd	r27, Y+7	; 0x07
    391a:	82 0f       	add	r24, r18
    391c:	93 1f       	adc	r25, r19
    391e:	a4 1f       	adc	r26, r20
    3920:	b5 1f       	adc	r27, r21
    3922:	ec 80       	ldd	r14, Y+4	; 0x04
    3924:	fd 80       	ldd	r15, Y+5	; 0x05
    3926:	0e 81       	ldd	r16, Y+6	; 0x06
    3928:	1f 81       	ldd	r17, Y+7	; 0x07
    392a:	28 85       	ldd	r18, Y+8	; 0x08
    392c:	39 85       	ldd	r19, Y+9	; 0x09
    392e:	4a 85       	ldd	r20, Y+10	; 0x0a
    3930:	5b 85       	ldd	r21, Y+11	; 0x0b
    3932:	e9 81       	ldd	r30, Y+1	; 0x01
    3934:	fa 81       	ldd	r31, Y+2	; 0x02
    3936:	67 01       	movw	r12, r14
    3938:	78 01       	movw	r14, r16
    393a:	89 01       	movw	r16, r18
    393c:	9a 01       	movw	r18, r20
    393e:	ac 01       	movw	r20, r24
    3940:	bd 01       	movw	r22, r26
    3942:	cf 01       	movw	r24, r30
    3944:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <prvInsertTimerInActiveList>
    3948:	88 23       	and	r24, r24
    394a:	91 f0       	breq	.+36     	; 0x3970 <prvProcessExpiredTimer+0xc4>
    394c:	8c 81       	ldd	r24, Y+4	; 0x04
    394e:	9d 81       	ldd	r25, Y+5	; 0x05
    3950:	ae 81       	ldd	r26, Y+6	; 0x06
    3952:	bf 81       	ldd	r27, Y+7	; 0x07
    3954:	e9 81       	ldd	r30, Y+1	; 0x01
    3956:	fa 81       	ldd	r31, Y+2	; 0x02
    3958:	c1 2c       	mov	r12, r1
    395a:	d1 2c       	mov	r13, r1
    395c:	76 01       	movw	r14, r12
    395e:	00 e0       	ldi	r16, 0x00	; 0
    3960:	10 e0       	ldi	r17, 0x00	; 0
    3962:	9c 01       	movw	r18, r24
    3964:	ad 01       	movw	r20, r26
    3966:	60 e0       	ldi	r22, 0x00	; 0
    3968:	cf 01       	movw	r24, r30
    396a:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <xTimerGenericCommand>
    396e:	8b 83       	std	Y+3, r24	; 0x03
    3970:	89 81       	ldd	r24, Y+1	; 0x01
    3972:	9a 81       	ldd	r25, Y+2	; 0x02
    3974:	fc 01       	movw	r30, r24
    3976:	25 89       	ldd	r18, Z+21	; 0x15
    3978:	36 89       	ldd	r19, Z+22	; 0x16
    397a:	89 81       	ldd	r24, Y+1	; 0x01
    397c:	9a 81       	ldd	r25, Y+2	; 0x02
    397e:	f9 01       	movw	r30, r18
    3980:	19 95       	eicall
    3982:	00 00       	nop
    3984:	2b 96       	adiw	r28, 0x0b	; 11
    3986:	cd bf       	out	0x3d, r28	; 61
    3988:	de bf       	out	0x3e, r29	; 62
    398a:	df 91       	pop	r29
    398c:	cf 91       	pop	r28
    398e:	1f 91       	pop	r17
    3990:	0f 91       	pop	r16
    3992:	ff 90       	pop	r15
    3994:	ef 90       	pop	r14
    3996:	df 90       	pop	r13
    3998:	cf 90       	pop	r12
    399a:	08 95       	ret

0000399c <prvTimerTask>:
    399c:	cf 93       	push	r28
    399e:	df 93       	push	r29
    39a0:	cd b7       	in	r28, 0x3d	; 61
    39a2:	de b7       	in	r29, 0x3e	; 62
    39a4:	27 97       	sbiw	r28, 0x07	; 7
    39a6:	cd bf       	out	0x3d, r28	; 61
    39a8:	de bf       	out	0x3e, r29	; 62
    39aa:	8e 83       	std	Y+6, r24	; 0x06
    39ac:	9f 83       	std	Y+7, r25	; 0x07
    39ae:	ce 01       	movw	r24, r28
    39b0:	05 96       	adiw	r24, 0x05	; 5
    39b2:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <prvGetNextExpireTime>
    39b6:	dc 01       	movw	r26, r24
    39b8:	cb 01       	movw	r24, r22
    39ba:	89 83       	std	Y+1, r24	; 0x01
    39bc:	9a 83       	std	Y+2, r25	; 0x02
    39be:	ab 83       	std	Y+3, r26	; 0x03
    39c0:	bc 83       	std	Y+4, r27	; 0x04
    39c2:	2d 81       	ldd	r18, Y+5	; 0x05
    39c4:	89 81       	ldd	r24, Y+1	; 0x01
    39c6:	9a 81       	ldd	r25, Y+2	; 0x02
    39c8:	ab 81       	ldd	r26, Y+3	; 0x03
    39ca:	bc 81       	ldd	r27, Y+4	; 0x04
    39cc:	42 2f       	mov	r20, r18
    39ce:	bc 01       	movw	r22, r24
    39d0:	cd 01       	movw	r24, r26
    39d2:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <prvProcessTimerOrBlockTask>
    39d6:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <prvProcessReceivedCommands>
    39da:	e9 cf       	rjmp	.-46     	; 0x39ae <prvTimerTask+0x12>

000039dc <prvProcessTimerOrBlockTask>:
    39dc:	ef 92       	push	r14
    39de:	ff 92       	push	r15
    39e0:	0f 93       	push	r16
    39e2:	1f 93       	push	r17
    39e4:	cf 93       	push	r28
    39e6:	df 93       	push	r29
    39e8:	cd b7       	in	r28, 0x3d	; 61
    39ea:	de b7       	in	r29, 0x3e	; 62
    39ec:	2a 97       	sbiw	r28, 0x0a	; 10
    39ee:	cd bf       	out	0x3d, r28	; 61
    39f0:	de bf       	out	0x3e, r29	; 62
    39f2:	6e 83       	std	Y+6, r22	; 0x06
    39f4:	7f 83       	std	Y+7, r23	; 0x07
    39f6:	88 87       	std	Y+8, r24	; 0x08
    39f8:	99 87       	std	Y+9, r25	; 0x09
    39fa:	4a 87       	std	Y+10, r20	; 0x0a
    39fc:	0e 94 40 15 	call	0x2a80	; 0x2a80 <vTaskSuspendAll>
    3a00:	ce 01       	movw	r24, r28
    3a02:	05 96       	adiw	r24, 0x05	; 5
    3a04:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <prvSampleTimeNow>
    3a08:	dc 01       	movw	r26, r24
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	89 83       	std	Y+1, r24	; 0x01
    3a0e:	9a 83       	std	Y+2, r25	; 0x02
    3a10:	ab 83       	std	Y+3, r26	; 0x03
    3a12:	bc 83       	std	Y+4, r27	; 0x04
    3a14:	8d 81       	ldd	r24, Y+5	; 0x05
    3a16:	88 23       	and	r24, r24
    3a18:	09 f0       	breq	.+2      	; 0x3a1c <prvProcessTimerOrBlockTask+0x40>
    3a1a:	4e c0       	rjmp	.+156    	; 0x3ab8 <prvProcessTimerOrBlockTask+0xdc>
    3a1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a1e:	88 23       	and	r24, r24
    3a20:	e1 f4       	brne	.+56     	; 0x3a5a <prvProcessTimerOrBlockTask+0x7e>
    3a22:	2e 81       	ldd	r18, Y+6	; 0x06
    3a24:	3f 81       	ldd	r19, Y+7	; 0x07
    3a26:	48 85       	ldd	r20, Y+8	; 0x08
    3a28:	59 85       	ldd	r21, Y+9	; 0x09
    3a2a:	89 81       	ldd	r24, Y+1	; 0x01
    3a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a2e:	ab 81       	ldd	r26, Y+3	; 0x03
    3a30:	bc 81       	ldd	r27, Y+4	; 0x04
    3a32:	82 17       	cp	r24, r18
    3a34:	93 07       	cpc	r25, r19
    3a36:	a4 07       	cpc	r26, r20
    3a38:	b5 07       	cpc	r27, r21
    3a3a:	78 f0       	brcs	.+30     	; 0x3a5a <prvProcessTimerOrBlockTask+0x7e>
    3a3c:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
    3a40:	29 81       	ldd	r18, Y+1	; 0x01
    3a42:	3a 81       	ldd	r19, Y+2	; 0x02
    3a44:	4b 81       	ldd	r20, Y+3	; 0x03
    3a46:	5c 81       	ldd	r21, Y+4	; 0x04
    3a48:	8e 81       	ldd	r24, Y+6	; 0x06
    3a4a:	9f 81       	ldd	r25, Y+7	; 0x07
    3a4c:	a8 85       	ldd	r26, Y+8	; 0x08
    3a4e:	b9 85       	ldd	r27, Y+9	; 0x09
    3a50:	bc 01       	movw	r22, r24
    3a52:	cd 01       	movw	r24, r26
    3a54:	0e 94 56 1c 	call	0x38ac	; 0x38ac <prvProcessExpiredTimer>
    3a58:	31 c0       	rjmp	.+98     	; 0x3abc <prvProcessTimerOrBlockTask+0xe0>
    3a5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a5c:	88 23       	and	r24, r24
    3a5e:	59 f0       	breq	.+22     	; 0x3a76 <prvProcessTimerOrBlockTask+0x9a>
    3a60:	80 91 2a 35 	lds	r24, 0x352A	; 0x80352a <pxOverflowTimerList>
    3a64:	90 91 2b 35 	lds	r25, 0x352B	; 0x80352b <pxOverflowTimerList+0x1>
    3a68:	fc 01       	movw	r30, r24
    3a6a:	90 81       	ld	r25, Z
    3a6c:	81 e0       	ldi	r24, 0x01	; 1
    3a6e:	99 23       	and	r25, r25
    3a70:	09 f0       	breq	.+2      	; 0x3a74 <prvProcessTimerOrBlockTask+0x98>
    3a72:	80 e0       	ldi	r24, 0x00	; 0
    3a74:	8a 87       	std	Y+10, r24	; 0x0a
    3a76:	2e 81       	ldd	r18, Y+6	; 0x06
    3a78:	3f 81       	ldd	r19, Y+7	; 0x07
    3a7a:	48 85       	ldd	r20, Y+8	; 0x08
    3a7c:	59 85       	ldd	r21, Y+9	; 0x09
    3a7e:	89 81       	ldd	r24, Y+1	; 0x01
    3a80:	9a 81       	ldd	r25, Y+2	; 0x02
    3a82:	ab 81       	ldd	r26, Y+3	; 0x03
    3a84:	bc 81       	ldd	r27, Y+4	; 0x04
    3a86:	79 01       	movw	r14, r18
    3a88:	8a 01       	movw	r16, r20
    3a8a:	e8 1a       	sub	r14, r24
    3a8c:	f9 0a       	sbc	r15, r25
    3a8e:	0a 0b       	sbc	r16, r26
    3a90:	1b 0b       	sbc	r17, r27
    3a92:	d8 01       	movw	r26, r16
    3a94:	c7 01       	movw	r24, r14
    3a96:	e0 91 2c 35 	lds	r30, 0x352C	; 0x80352c <xTimerQueue>
    3a9a:	f0 91 2d 35 	lds	r31, 0x352D	; 0x80352d <xTimerQueue+0x1>
    3a9e:	2a 85       	ldd	r18, Y+10	; 0x0a
    3aa0:	ac 01       	movw	r20, r24
    3aa2:	bd 01       	movw	r22, r26
    3aa4:	cf 01       	movw	r24, r30
    3aa6:	0e 94 9b 11 	call	0x2336	; 0x2336 <vQueueWaitForMessageRestricted>
    3aaa:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
    3aae:	88 23       	and	r24, r24
    3ab0:	29 f4       	brne	.+10     	; 0x3abc <prvProcessTimerOrBlockTask+0xe0>
    3ab2:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    3ab6:	02 c0       	rjmp	.+4      	; 0x3abc <prvProcessTimerOrBlockTask+0xe0>
    3ab8:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
    3abc:	00 00       	nop
    3abe:	2a 96       	adiw	r28, 0x0a	; 10
    3ac0:	cd bf       	out	0x3d, r28	; 61
    3ac2:	de bf       	out	0x3e, r29	; 62
    3ac4:	df 91       	pop	r29
    3ac6:	cf 91       	pop	r28
    3ac8:	1f 91       	pop	r17
    3aca:	0f 91       	pop	r16
    3acc:	ff 90       	pop	r15
    3ace:	ef 90       	pop	r14
    3ad0:	08 95       	ret

00003ad2 <prvGetNextExpireTime>:
    3ad2:	cf 93       	push	r28
    3ad4:	df 93       	push	r29
    3ad6:	00 d0       	rcall	.+0      	; 0x3ad8 <prvGetNextExpireTime+0x6>
    3ad8:	00 d0       	rcall	.+0      	; 0x3ada <prvGetNextExpireTime+0x8>
    3ada:	cd b7       	in	r28, 0x3d	; 61
    3adc:	de b7       	in	r29, 0x3e	; 62
    3ade:	8d 83       	std	Y+5, r24	; 0x05
    3ae0:	9e 83       	std	Y+6, r25	; 0x06
    3ae2:	80 91 28 35 	lds	r24, 0x3528	; 0x803528 <pxCurrentTimerList>
    3ae6:	90 91 29 35 	lds	r25, 0x3529	; 0x803529 <pxCurrentTimerList+0x1>
    3aea:	fc 01       	movw	r30, r24
    3aec:	90 81       	ld	r25, Z
    3aee:	81 e0       	ldi	r24, 0x01	; 1
    3af0:	99 23       	and	r25, r25
    3af2:	09 f0       	breq	.+2      	; 0x3af6 <prvGetNextExpireTime+0x24>
    3af4:	80 e0       	ldi	r24, 0x00	; 0
    3af6:	28 2f       	mov	r18, r24
    3af8:	8d 81       	ldd	r24, Y+5	; 0x05
    3afa:	9e 81       	ldd	r25, Y+6	; 0x06
    3afc:	fc 01       	movw	r30, r24
    3afe:	20 83       	st	Z, r18
    3b00:	8d 81       	ldd	r24, Y+5	; 0x05
    3b02:	9e 81       	ldd	r25, Y+6	; 0x06
    3b04:	fc 01       	movw	r30, r24
    3b06:	80 81       	ld	r24, Z
    3b08:	88 23       	and	r24, r24
    3b0a:	89 f4       	brne	.+34     	; 0x3b2e <prvGetNextExpireTime+0x5c>
    3b0c:	80 91 28 35 	lds	r24, 0x3528	; 0x803528 <pxCurrentTimerList>
    3b10:	90 91 29 35 	lds	r25, 0x3529	; 0x803529 <pxCurrentTimerList+0x1>
    3b14:	fc 01       	movw	r30, r24
    3b16:	87 81       	ldd	r24, Z+7	; 0x07
    3b18:	90 85       	ldd	r25, Z+8	; 0x08
    3b1a:	fc 01       	movw	r30, r24
    3b1c:	80 81       	ld	r24, Z
    3b1e:	91 81       	ldd	r25, Z+1	; 0x01
    3b20:	a2 81       	ldd	r26, Z+2	; 0x02
    3b22:	b3 81       	ldd	r27, Z+3	; 0x03
    3b24:	89 83       	std	Y+1, r24	; 0x01
    3b26:	9a 83       	std	Y+2, r25	; 0x02
    3b28:	ab 83       	std	Y+3, r26	; 0x03
    3b2a:	bc 83       	std	Y+4, r27	; 0x04
    3b2c:	04 c0       	rjmp	.+8      	; 0x3b36 <prvGetNextExpireTime+0x64>
    3b2e:	19 82       	std	Y+1, r1	; 0x01
    3b30:	1a 82       	std	Y+2, r1	; 0x02
    3b32:	1b 82       	std	Y+3, r1	; 0x03
    3b34:	1c 82       	std	Y+4, r1	; 0x04
    3b36:	89 81       	ldd	r24, Y+1	; 0x01
    3b38:	9a 81       	ldd	r25, Y+2	; 0x02
    3b3a:	ab 81       	ldd	r26, Y+3	; 0x03
    3b3c:	bc 81       	ldd	r27, Y+4	; 0x04
    3b3e:	bc 01       	movw	r22, r24
    3b40:	cd 01       	movw	r24, r26
    3b42:	26 96       	adiw	r28, 0x06	; 6
    3b44:	cd bf       	out	0x3d, r28	; 61
    3b46:	de bf       	out	0x3e, r29	; 62
    3b48:	df 91       	pop	r29
    3b4a:	cf 91       	pop	r28
    3b4c:	08 95       	ret

00003b4e <prvSampleTimeNow>:
    3b4e:	cf 93       	push	r28
    3b50:	df 93       	push	r29
    3b52:	00 d0       	rcall	.+0      	; 0x3b54 <prvSampleTimeNow+0x6>
    3b54:	00 d0       	rcall	.+0      	; 0x3b56 <prvSampleTimeNow+0x8>
    3b56:	cd b7       	in	r28, 0x3d	; 61
    3b58:	de b7       	in	r29, 0x3e	; 62
    3b5a:	8d 83       	std	Y+5, r24	; 0x05
    3b5c:	9e 83       	std	Y+6, r25	; 0x06
    3b5e:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <xTaskGetTickCount>
    3b62:	dc 01       	movw	r26, r24
    3b64:	cb 01       	movw	r24, r22
    3b66:	89 83       	std	Y+1, r24	; 0x01
    3b68:	9a 83       	std	Y+2, r25	; 0x02
    3b6a:	ab 83       	std	Y+3, r26	; 0x03
    3b6c:	bc 83       	std	Y+4, r27	; 0x04
    3b6e:	80 91 30 35 	lds	r24, 0x3530	; 0x803530 <xLastTime.4745>
    3b72:	90 91 31 35 	lds	r25, 0x3531	; 0x803531 <xLastTime.4745+0x1>
    3b76:	a0 91 32 35 	lds	r26, 0x3532	; 0x803532 <xLastTime.4745+0x2>
    3b7a:	b0 91 33 35 	lds	r27, 0x3533	; 0x803533 <xLastTime.4745+0x3>
    3b7e:	29 81       	ldd	r18, Y+1	; 0x01
    3b80:	3a 81       	ldd	r19, Y+2	; 0x02
    3b82:	4b 81       	ldd	r20, Y+3	; 0x03
    3b84:	5c 81       	ldd	r21, Y+4	; 0x04
    3b86:	28 17       	cp	r18, r24
    3b88:	39 07       	cpc	r19, r25
    3b8a:	4a 07       	cpc	r20, r26
    3b8c:	5b 07       	cpc	r21, r27
    3b8e:	40 f4       	brcc	.+16     	; 0x3ba0 <prvSampleTimeNow+0x52>
    3b90:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <prvSwitchTimerLists>
    3b94:	8d 81       	ldd	r24, Y+5	; 0x05
    3b96:	9e 81       	ldd	r25, Y+6	; 0x06
    3b98:	21 e0       	ldi	r18, 0x01	; 1
    3b9a:	fc 01       	movw	r30, r24
    3b9c:	20 83       	st	Z, r18
    3b9e:	04 c0       	rjmp	.+8      	; 0x3ba8 <prvSampleTimeNow+0x5a>
    3ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba4:	fc 01       	movw	r30, r24
    3ba6:	10 82       	st	Z, r1
    3ba8:	89 81       	ldd	r24, Y+1	; 0x01
    3baa:	9a 81       	ldd	r25, Y+2	; 0x02
    3bac:	ab 81       	ldd	r26, Y+3	; 0x03
    3bae:	bc 81       	ldd	r27, Y+4	; 0x04
    3bb0:	80 93 30 35 	sts	0x3530, r24	; 0x803530 <xLastTime.4745>
    3bb4:	90 93 31 35 	sts	0x3531, r25	; 0x803531 <xLastTime.4745+0x1>
    3bb8:	a0 93 32 35 	sts	0x3532, r26	; 0x803532 <xLastTime.4745+0x2>
    3bbc:	b0 93 33 35 	sts	0x3533, r27	; 0x803533 <xLastTime.4745+0x3>
    3bc0:	89 81       	ldd	r24, Y+1	; 0x01
    3bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc4:	ab 81       	ldd	r26, Y+3	; 0x03
    3bc6:	bc 81       	ldd	r27, Y+4	; 0x04
    3bc8:	bc 01       	movw	r22, r24
    3bca:	cd 01       	movw	r24, r26
    3bcc:	26 96       	adiw	r28, 0x06	; 6
    3bce:	cd bf       	out	0x3d, r28	; 61
    3bd0:	de bf       	out	0x3e, r29	; 62
    3bd2:	df 91       	pop	r29
    3bd4:	cf 91       	pop	r28
    3bd6:	08 95       	ret

00003bd8 <prvInsertTimerInActiveList>:
    3bd8:	cf 92       	push	r12
    3bda:	df 92       	push	r13
    3bdc:	ef 92       	push	r14
    3bde:	ff 92       	push	r15
    3be0:	0f 93       	push	r16
    3be2:	1f 93       	push	r17
    3be4:	cf 93       	push	r28
    3be6:	df 93       	push	r29
    3be8:	cd b7       	in	r28, 0x3d	; 61
    3bea:	de b7       	in	r29, 0x3e	; 62
    3bec:	2f 97       	sbiw	r28, 0x0f	; 15
    3bee:	cd bf       	out	0x3d, r28	; 61
    3bf0:	de bf       	out	0x3e, r29	; 62
    3bf2:	8a 83       	std	Y+2, r24	; 0x02
    3bf4:	9b 83       	std	Y+3, r25	; 0x03
    3bf6:	4c 83       	std	Y+4, r20	; 0x04
    3bf8:	5d 83       	std	Y+5, r21	; 0x05
    3bfa:	6e 83       	std	Y+6, r22	; 0x06
    3bfc:	7f 83       	std	Y+7, r23	; 0x07
    3bfe:	08 87       	std	Y+8, r16	; 0x08
    3c00:	19 87       	std	Y+9, r17	; 0x09
    3c02:	2a 87       	std	Y+10, r18	; 0x0a
    3c04:	3b 87       	std	Y+11, r19	; 0x0b
    3c06:	cc 86       	std	Y+12, r12	; 0x0c
    3c08:	dd 86       	std	Y+13, r13	; 0x0d
    3c0a:	ee 86       	std	Y+14, r14	; 0x0e
    3c0c:	ff 86       	std	Y+15, r15	; 0x0f
    3c0e:	19 82       	std	Y+1, r1	; 0x01
    3c10:	2a 81       	ldd	r18, Y+2	; 0x02
    3c12:	3b 81       	ldd	r19, Y+3	; 0x03
    3c14:	8c 81       	ldd	r24, Y+4	; 0x04
    3c16:	9d 81       	ldd	r25, Y+5	; 0x05
    3c18:	ae 81       	ldd	r26, Y+6	; 0x06
    3c1a:	bf 81       	ldd	r27, Y+7	; 0x07
    3c1c:	f9 01       	movw	r30, r18
    3c1e:	82 83       	std	Z+2, r24	; 0x02
    3c20:	93 83       	std	Z+3, r25	; 0x03
    3c22:	a4 83       	std	Z+4, r26	; 0x04
    3c24:	b5 83       	std	Z+5, r27	; 0x05
    3c26:	8a 81       	ldd	r24, Y+2	; 0x02
    3c28:	9b 81       	ldd	r25, Y+3	; 0x03
    3c2a:	2a 81       	ldd	r18, Y+2	; 0x02
    3c2c:	3b 81       	ldd	r19, Y+3	; 0x03
    3c2e:	fc 01       	movw	r30, r24
    3c30:	22 87       	std	Z+10, r18	; 0x0a
    3c32:	33 87       	std	Z+11, r19	; 0x0b
    3c34:	2c 81       	ldd	r18, Y+4	; 0x04
    3c36:	3d 81       	ldd	r19, Y+5	; 0x05
    3c38:	4e 81       	ldd	r20, Y+6	; 0x06
    3c3a:	5f 81       	ldd	r21, Y+7	; 0x07
    3c3c:	88 85       	ldd	r24, Y+8	; 0x08
    3c3e:	99 85       	ldd	r25, Y+9	; 0x09
    3c40:	aa 85       	ldd	r26, Y+10	; 0x0a
    3c42:	bb 85       	ldd	r27, Y+11	; 0x0b
    3c44:	82 17       	cp	r24, r18
    3c46:	93 07       	cpc	r25, r19
    3c48:	a4 07       	cpc	r26, r20
    3c4a:	b5 07       	cpc	r27, r21
    3c4c:	40 f1       	brcs	.+80     	; 0x3c9e <prvInsertTimerInActiveList+0xc6>
    3c4e:	28 85       	ldd	r18, Y+8	; 0x08
    3c50:	39 85       	ldd	r19, Y+9	; 0x09
    3c52:	4a 85       	ldd	r20, Y+10	; 0x0a
    3c54:	5b 85       	ldd	r21, Y+11	; 0x0b
    3c56:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c58:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c5a:	ae 85       	ldd	r26, Y+14	; 0x0e
    3c5c:	bf 85       	ldd	r27, Y+15	; 0x0f
    3c5e:	28 1b       	sub	r18, r24
    3c60:	39 0b       	sbc	r19, r25
    3c62:	4a 0b       	sbc	r20, r26
    3c64:	5b 0b       	sbc	r21, r27
    3c66:	8a 81       	ldd	r24, Y+2	; 0x02
    3c68:	9b 81       	ldd	r25, Y+3	; 0x03
    3c6a:	fc 01       	movw	r30, r24
    3c6c:	86 85       	ldd	r24, Z+14	; 0x0e
    3c6e:	97 85       	ldd	r25, Z+15	; 0x0f
    3c70:	a0 89       	ldd	r26, Z+16	; 0x10
    3c72:	b1 89       	ldd	r27, Z+17	; 0x11
    3c74:	28 17       	cp	r18, r24
    3c76:	39 07       	cpc	r19, r25
    3c78:	4a 07       	cpc	r20, r26
    3c7a:	5b 07       	cpc	r21, r27
    3c7c:	18 f0       	brcs	.+6      	; 0x3c84 <prvInsertTimerInActiveList+0xac>
    3c7e:	81 e0       	ldi	r24, 0x01	; 1
    3c80:	89 83       	std	Y+1, r24	; 0x01
    3c82:	36 c0       	rjmp	.+108    	; 0x3cf0 <prvInsertTimerInActiveList+0x118>
    3c84:	8a 81       	ldd	r24, Y+2	; 0x02
    3c86:	9b 81       	ldd	r25, Y+3	; 0x03
    3c88:	9c 01       	movw	r18, r24
    3c8a:	2e 5f       	subi	r18, 0xFE	; 254
    3c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c8e:	80 91 2a 35 	lds	r24, 0x352A	; 0x80352a <pxOverflowTimerList>
    3c92:	90 91 2b 35 	lds	r25, 0x352B	; 0x80352b <pxOverflowTimerList+0x1>
    3c96:	b9 01       	movw	r22, r18
    3c98:	0e 94 83 08 	call	0x1106	; 0x1106 <vListInsert>
    3c9c:	29 c0       	rjmp	.+82     	; 0x3cf0 <prvInsertTimerInActiveList+0x118>
    3c9e:	28 85       	ldd	r18, Y+8	; 0x08
    3ca0:	39 85       	ldd	r19, Y+9	; 0x09
    3ca2:	4a 85       	ldd	r20, Y+10	; 0x0a
    3ca4:	5b 85       	ldd	r21, Y+11	; 0x0b
    3ca6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ca8:	9d 85       	ldd	r25, Y+13	; 0x0d
    3caa:	ae 85       	ldd	r26, Y+14	; 0x0e
    3cac:	bf 85       	ldd	r27, Y+15	; 0x0f
    3cae:	28 17       	cp	r18, r24
    3cb0:	39 07       	cpc	r19, r25
    3cb2:	4a 07       	cpc	r20, r26
    3cb4:	5b 07       	cpc	r21, r27
    3cb6:	80 f4       	brcc	.+32     	; 0x3cd8 <prvInsertTimerInActiveList+0x100>
    3cb8:	2c 81       	ldd	r18, Y+4	; 0x04
    3cba:	3d 81       	ldd	r19, Y+5	; 0x05
    3cbc:	4e 81       	ldd	r20, Y+6	; 0x06
    3cbe:	5f 81       	ldd	r21, Y+7	; 0x07
    3cc0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3cc2:	9d 85       	ldd	r25, Y+13	; 0x0d
    3cc4:	ae 85       	ldd	r26, Y+14	; 0x0e
    3cc6:	bf 85       	ldd	r27, Y+15	; 0x0f
    3cc8:	28 17       	cp	r18, r24
    3cca:	39 07       	cpc	r19, r25
    3ccc:	4a 07       	cpc	r20, r26
    3cce:	5b 07       	cpc	r21, r27
    3cd0:	18 f0       	brcs	.+6      	; 0x3cd8 <prvInsertTimerInActiveList+0x100>
    3cd2:	81 e0       	ldi	r24, 0x01	; 1
    3cd4:	89 83       	std	Y+1, r24	; 0x01
    3cd6:	0c c0       	rjmp	.+24     	; 0x3cf0 <prvInsertTimerInActiveList+0x118>
    3cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cda:	9b 81       	ldd	r25, Y+3	; 0x03
    3cdc:	9c 01       	movw	r18, r24
    3cde:	2e 5f       	subi	r18, 0xFE	; 254
    3ce0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ce2:	80 91 28 35 	lds	r24, 0x3528	; 0x803528 <pxCurrentTimerList>
    3ce6:	90 91 29 35 	lds	r25, 0x3529	; 0x803529 <pxCurrentTimerList+0x1>
    3cea:	b9 01       	movw	r22, r18
    3cec:	0e 94 83 08 	call	0x1106	; 0x1106 <vListInsert>
    3cf0:	89 81       	ldd	r24, Y+1	; 0x01
    3cf2:	2f 96       	adiw	r28, 0x0f	; 15
    3cf4:	cd bf       	out	0x3d, r28	; 61
    3cf6:	de bf       	out	0x3e, r29	; 62
    3cf8:	df 91       	pop	r29
    3cfa:	cf 91       	pop	r28
    3cfc:	1f 91       	pop	r17
    3cfe:	0f 91       	pop	r16
    3d00:	ff 90       	pop	r15
    3d02:	ef 90       	pop	r14
    3d04:	df 90       	pop	r13
    3d06:	cf 90       	pop	r12
    3d08:	08 95       	ret

00003d0a <prvProcessReceivedCommands>:
    3d0a:	cf 92       	push	r12
    3d0c:	df 92       	push	r13
    3d0e:	ef 92       	push	r14
    3d10:	ff 92       	push	r15
    3d12:	0f 93       	push	r16
    3d14:	1f 93       	push	r17
    3d16:	cf 93       	push	r28
    3d18:	df 93       	push	r29
    3d1a:	cd b7       	in	r28, 0x3d	; 61
    3d1c:	de b7       	in	r29, 0x3e	; 62
    3d1e:	65 97       	sbiw	r28, 0x15	; 21
    3d20:	cd bf       	out	0x3d, r28	; 61
    3d22:	de bf       	out	0x3e, r29	; 62
    3d24:	e0 c0       	rjmp	.+448    	; 0x3ee6 <prvProcessReceivedCommands+0x1dc>
    3d26:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d28:	88 23       	and	r24, r24
    3d2a:	fc f4       	brge	.+62     	; 0x3d6a <prvProcessReceivedCommands+0x60>
    3d2c:	ce 01       	movw	r24, r28
    3d2e:	0a 96       	adiw	r24, 0x0a	; 10
    3d30:	01 96       	adiw	r24, 0x01	; 1
    3d32:	89 83       	std	Y+1, r24	; 0x01
    3d34:	9a 83       	std	Y+2, r25	; 0x02
    3d36:	89 81       	ldd	r24, Y+1	; 0x01
    3d38:	9a 81       	ldd	r25, Y+2	; 0x02
    3d3a:	fc 01       	movw	r30, r24
    3d3c:	20 81       	ld	r18, Z
    3d3e:	31 81       	ldd	r19, Z+1	; 0x01
    3d40:	89 81       	ldd	r24, Y+1	; 0x01
    3d42:	9a 81       	ldd	r25, Y+2	; 0x02
    3d44:	fc 01       	movw	r30, r24
    3d46:	84 81       	ldd	r24, Z+4	; 0x04
    3d48:	95 81       	ldd	r25, Z+5	; 0x05
    3d4a:	a6 81       	ldd	r26, Z+6	; 0x06
    3d4c:	b7 81       	ldd	r27, Z+7	; 0x07
    3d4e:	49 81       	ldd	r20, Y+1	; 0x01
    3d50:	5a 81       	ldd	r21, Y+2	; 0x02
    3d52:	fa 01       	movw	r30, r20
    3d54:	02 80       	ldd	r0, Z+2	; 0x02
    3d56:	f3 81       	ldd	r31, Z+3	; 0x03
    3d58:	e0 2d       	mov	r30, r0
    3d5a:	ec 8b       	std	Y+20, r30	; 0x14
    3d5c:	fd 8b       	std	Y+21, r31	; 0x15
    3d5e:	ac 01       	movw	r20, r24
    3d60:	bd 01       	movw	r22, r26
    3d62:	8c 89       	ldd	r24, Y+20	; 0x14
    3d64:	9d 89       	ldd	r25, Y+21	; 0x15
    3d66:	f9 01       	movw	r30, r18
    3d68:	19 95       	eicall
    3d6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d6c:	88 23       	and	r24, r24
    3d6e:	0c f4       	brge	.+2      	; 0x3d72 <prvProcessReceivedCommands+0x68>
    3d70:	ba c0       	rjmp	.+372    	; 0x3ee6 <prvProcessReceivedCommands+0x1dc>
    3d72:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d74:	98 89       	ldd	r25, Y+16	; 0x10
    3d76:	8b 83       	std	Y+3, r24	; 0x03
    3d78:	9c 83       	std	Y+4, r25	; 0x04
    3d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d7e:	fc 01       	movw	r30, r24
    3d80:	84 85       	ldd	r24, Z+12	; 0x0c
    3d82:	95 85       	ldd	r25, Z+13	; 0x0d
    3d84:	89 2b       	or	r24, r25
    3d86:	29 f0       	breq	.+10     	; 0x3d92 <prvProcessReceivedCommands+0x88>
    3d88:	8b 81       	ldd	r24, Y+3	; 0x03
    3d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d8c:	02 96       	adiw	r24, 0x02	; 2
    3d8e:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    3d92:	ce 01       	movw	r24, r28
    3d94:	43 96       	adiw	r24, 0x13	; 19
    3d96:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <prvSampleTimeNow>
    3d9a:	dc 01       	movw	r26, r24
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	8d 83       	std	Y+5, r24	; 0x05
    3da0:	9e 83       	std	Y+6, r25	; 0x06
    3da2:	af 83       	std	Y+7, r26	; 0x07
    3da4:	b8 87       	std	Y+8, r27	; 0x08
    3da6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3da8:	08 2e       	mov	r0, r24
    3daa:	00 0c       	add	r0, r0
    3dac:	99 0b       	sbc	r25, r25
    3dae:	09 2e       	mov	r0, r25
    3db0:	00 0c       	add	r0, r0
    3db2:	aa 0b       	sbc	r26, r26
    3db4:	bb 0b       	sbc	r27, r27
    3db6:	40 e0       	ldi	r20, 0x00	; 0
    3db8:	50 e0       	ldi	r21, 0x00	; 0
    3dba:	29 e0       	ldi	r18, 0x09	; 9
    3dbc:	30 e0       	ldi	r19, 0x00	; 0
    3dbe:	84 1b       	sub	r24, r20
    3dc0:	95 0b       	sbc	r25, r21
    3dc2:	28 17       	cp	r18, r24
    3dc4:	39 07       	cpc	r19, r25
    3dc6:	08 f4       	brcc	.+2      	; 0x3dca <prvProcessReceivedCommands+0xc0>
    3dc8:	8d c0       	rjmp	.+282    	; 0x3ee4 <prvProcessReceivedCommands+0x1da>
    3dca:	fc 01       	movw	r30, r24
    3dcc:	88 27       	eor	r24, r24
    3dce:	e2 50       	subi	r30, 0x02	; 2
    3dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd2:	8f 4f       	sbci	r24, 0xFF	; 255
    3dd4:	0c 94 31 40 	jmp	0x8062	; 0x8062 <__tablejump2__>
    3dd8:	eb 84       	ldd	r14, Y+11	; 0x0b
    3dda:	fc 84       	ldd	r15, Y+12	; 0x0c
    3ddc:	0d 85       	ldd	r16, Y+13	; 0x0d
    3dde:	1e 85       	ldd	r17, Y+14	; 0x0e
    3de0:	2b 85       	ldd	r18, Y+11	; 0x0b
    3de2:	3c 85       	ldd	r19, Y+12	; 0x0c
    3de4:	4d 85       	ldd	r20, Y+13	; 0x0d
    3de6:	5e 85       	ldd	r21, Y+14	; 0x0e
    3de8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dea:	9c 81       	ldd	r25, Y+4	; 0x04
    3dec:	fc 01       	movw	r30, r24
    3dee:	86 85       	ldd	r24, Z+14	; 0x0e
    3df0:	97 85       	ldd	r25, Z+15	; 0x0f
    3df2:	a0 89       	ldd	r26, Z+16	; 0x10
    3df4:	b1 89       	ldd	r27, Z+17	; 0x11
    3df6:	82 0f       	add	r24, r18
    3df8:	93 1f       	adc	r25, r19
    3dfa:	a4 1f       	adc	r26, r20
    3dfc:	b5 1f       	adc	r27, r21
    3dfe:	2d 81       	ldd	r18, Y+5	; 0x05
    3e00:	3e 81       	ldd	r19, Y+6	; 0x06
    3e02:	4f 81       	ldd	r20, Y+7	; 0x07
    3e04:	58 85       	ldd	r21, Y+8	; 0x08
    3e06:	eb 81       	ldd	r30, Y+3	; 0x03
    3e08:	fc 81       	ldd	r31, Y+4	; 0x04
    3e0a:	67 01       	movw	r12, r14
    3e0c:	78 01       	movw	r14, r16
    3e0e:	89 01       	movw	r16, r18
    3e10:	9a 01       	movw	r18, r20
    3e12:	ac 01       	movw	r20, r24
    3e14:	bd 01       	movw	r22, r26
    3e16:	cf 01       	movw	r24, r30
    3e18:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <prvInsertTimerInActiveList>
    3e1c:	88 23       	and	r24, r24
    3e1e:	09 f4       	brne	.+2      	; 0x3e22 <prvProcessReceivedCommands+0x118>
    3e20:	62 c0       	rjmp	.+196    	; 0x3ee6 <prvProcessReceivedCommands+0x1dc>
    3e22:	8b 81       	ldd	r24, Y+3	; 0x03
    3e24:	9c 81       	ldd	r25, Y+4	; 0x04
    3e26:	fc 01       	movw	r30, r24
    3e28:	25 89       	ldd	r18, Z+21	; 0x15
    3e2a:	36 89       	ldd	r19, Z+22	; 0x16
    3e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e30:	f9 01       	movw	r30, r18
    3e32:	19 95       	eicall
    3e34:	8b 81       	ldd	r24, Y+3	; 0x03
    3e36:	9c 81       	ldd	r25, Y+4	; 0x04
    3e38:	fc 01       	movw	r30, r24
    3e3a:	82 89       	ldd	r24, Z+18	; 0x12
    3e3c:	81 30       	cpi	r24, 0x01	; 1
    3e3e:	09 f0       	breq	.+2      	; 0x3e42 <prvProcessReceivedCommands+0x138>
    3e40:	52 c0       	rjmp	.+164    	; 0x3ee6 <prvProcessReceivedCommands+0x1dc>
    3e42:	2b 85       	ldd	r18, Y+11	; 0x0b
    3e44:	3c 85       	ldd	r19, Y+12	; 0x0c
    3e46:	4d 85       	ldd	r20, Y+13	; 0x0d
    3e48:	5e 85       	ldd	r21, Y+14	; 0x0e
    3e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e4e:	fc 01       	movw	r30, r24
    3e50:	86 85       	ldd	r24, Z+14	; 0x0e
    3e52:	97 85       	ldd	r25, Z+15	; 0x0f
    3e54:	a0 89       	ldd	r26, Z+16	; 0x10
    3e56:	b1 89       	ldd	r27, Z+17	; 0x11
    3e58:	82 0f       	add	r24, r18
    3e5a:	93 1f       	adc	r25, r19
    3e5c:	a4 1f       	adc	r26, r20
    3e5e:	b5 1f       	adc	r27, r21
    3e60:	eb 81       	ldd	r30, Y+3	; 0x03
    3e62:	fc 81       	ldd	r31, Y+4	; 0x04
    3e64:	c1 2c       	mov	r12, r1
    3e66:	d1 2c       	mov	r13, r1
    3e68:	76 01       	movw	r14, r12
    3e6a:	00 e0       	ldi	r16, 0x00	; 0
    3e6c:	10 e0       	ldi	r17, 0x00	; 0
    3e6e:	9c 01       	movw	r18, r24
    3e70:	ad 01       	movw	r20, r26
    3e72:	60 e0       	ldi	r22, 0x00	; 0
    3e74:	cf 01       	movw	r24, r30
    3e76:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <xTimerGenericCommand>
    3e7a:	89 87       	std	Y+9, r24	; 0x09
    3e7c:	34 c0       	rjmp	.+104    	; 0x3ee6 <prvProcessReceivedCommands+0x1dc>
    3e7e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e80:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e82:	ad 85       	ldd	r26, Y+13	; 0x0d
    3e84:	be 85       	ldd	r27, Y+14	; 0x0e
    3e86:	2b 81       	ldd	r18, Y+3	; 0x03
    3e88:	3c 81       	ldd	r19, Y+4	; 0x04
    3e8a:	f9 01       	movw	r30, r18
    3e8c:	86 87       	std	Z+14, r24	; 0x0e
    3e8e:	97 87       	std	Z+15, r25	; 0x0f
    3e90:	a0 8b       	std	Z+16, r26	; 0x10
    3e92:	b1 8b       	std	Z+17, r27	; 0x11
    3e94:	8b 81       	ldd	r24, Y+3	; 0x03
    3e96:	9c 81       	ldd	r25, Y+4	; 0x04
    3e98:	fc 01       	movw	r30, r24
    3e9a:	26 85       	ldd	r18, Z+14	; 0x0e
    3e9c:	37 85       	ldd	r19, Z+15	; 0x0f
    3e9e:	40 89       	ldd	r20, Z+16	; 0x10
    3ea0:	51 89       	ldd	r21, Z+17	; 0x11
    3ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ea6:	af 81       	ldd	r26, Y+7	; 0x07
    3ea8:	b8 85       	ldd	r27, Y+8	; 0x08
    3eaa:	82 0f       	add	r24, r18
    3eac:	93 1f       	adc	r25, r19
    3eae:	a4 1f       	adc	r26, r20
    3eb0:	b5 1f       	adc	r27, r21
    3eb2:	ed 80       	ldd	r14, Y+5	; 0x05
    3eb4:	fe 80       	ldd	r15, Y+6	; 0x06
    3eb6:	0f 81       	ldd	r16, Y+7	; 0x07
    3eb8:	18 85       	ldd	r17, Y+8	; 0x08
    3eba:	2d 81       	ldd	r18, Y+5	; 0x05
    3ebc:	3e 81       	ldd	r19, Y+6	; 0x06
    3ebe:	4f 81       	ldd	r20, Y+7	; 0x07
    3ec0:	58 85       	ldd	r21, Y+8	; 0x08
    3ec2:	eb 81       	ldd	r30, Y+3	; 0x03
    3ec4:	fc 81       	ldd	r31, Y+4	; 0x04
    3ec6:	67 01       	movw	r12, r14
    3ec8:	78 01       	movw	r14, r16
    3eca:	89 01       	movw	r16, r18
    3ecc:	9a 01       	movw	r18, r20
    3ece:	ac 01       	movw	r20, r24
    3ed0:	bd 01       	movw	r22, r26
    3ed2:	cf 01       	movw	r24, r30
    3ed4:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <prvInsertTimerInActiveList>
    3ed8:	06 c0       	rjmp	.+12     	; 0x3ee6 <prvProcessReceivedCommands+0x1dc>
    3eda:	8b 81       	ldd	r24, Y+3	; 0x03
    3edc:	9c 81       	ldd	r25, Y+4	; 0x04
    3ede:	0e 94 dd 07 	call	0xfba	; 0xfba <vPortFree>
    3ee2:	01 c0       	rjmp	.+2      	; 0x3ee6 <prvProcessReceivedCommands+0x1dc>
    3ee4:	00 00       	nop
    3ee6:	80 91 2c 35 	lds	r24, 0x352C	; 0x80352c <xTimerQueue>
    3eea:	90 91 2d 35 	lds	r25, 0x352D	; 0x80352d <xTimerQueue+0x1>
    3eee:	be 01       	movw	r22, r28
    3ef0:	66 5f       	subi	r22, 0xF6	; 246
    3ef2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ef4:	20 e0       	ldi	r18, 0x00	; 0
    3ef6:	30 e0       	ldi	r19, 0x00	; 0
    3ef8:	a9 01       	movw	r20, r18
    3efa:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <xQueueReceive>
    3efe:	88 23       	and	r24, r24
    3f00:	09 f0       	breq	.+2      	; 0x3f04 <prvProcessReceivedCommands+0x1fa>
    3f02:	11 cf       	rjmp	.-478    	; 0x3d26 <prvProcessReceivedCommands+0x1c>
    3f04:	00 00       	nop
    3f06:	65 96       	adiw	r28, 0x15	; 21
    3f08:	cd bf       	out	0x3d, r28	; 61
    3f0a:	de bf       	out	0x3e, r29	; 62
    3f0c:	df 91       	pop	r29
    3f0e:	cf 91       	pop	r28
    3f10:	1f 91       	pop	r17
    3f12:	0f 91       	pop	r16
    3f14:	ff 90       	pop	r15
    3f16:	ef 90       	pop	r14
    3f18:	df 90       	pop	r13
    3f1a:	cf 90       	pop	r12
    3f1c:	08 95       	ret

00003f1e <prvSwitchTimerLists>:
    3f1e:	cf 92       	push	r12
    3f20:	df 92       	push	r13
    3f22:	ef 92       	push	r14
    3f24:	ff 92       	push	r15
    3f26:	0f 93       	push	r16
    3f28:	1f 93       	push	r17
    3f2a:	cf 93       	push	r28
    3f2c:	df 93       	push	r29
    3f2e:	cd b7       	in	r28, 0x3d	; 61
    3f30:	de b7       	in	r29, 0x3e	; 62
    3f32:	2d 97       	sbiw	r28, 0x0d	; 13
    3f34:	cd bf       	out	0x3d, r28	; 61
    3f36:	de bf       	out	0x3e, r29	; 62
    3f38:	82 c0       	rjmp	.+260    	; 0x403e <__stack+0x3f>
    3f3a:	80 91 28 35 	lds	r24, 0x3528	; 0x803528 <pxCurrentTimerList>
    3f3e:	90 91 29 35 	lds	r25, 0x3529	; 0x803529 <pxCurrentTimerList+0x1>
    3f42:	fc 01       	movw	r30, r24
    3f44:	87 81       	ldd	r24, Z+7	; 0x07
    3f46:	90 85       	ldd	r25, Z+8	; 0x08
    3f48:	fc 01       	movw	r30, r24
    3f4a:	80 81       	ld	r24, Z
    3f4c:	91 81       	ldd	r25, Z+1	; 0x01
    3f4e:	a2 81       	ldd	r26, Z+2	; 0x02
    3f50:	b3 81       	ldd	r27, Z+3	; 0x03
    3f52:	89 83       	std	Y+1, r24	; 0x01
    3f54:	9a 83       	std	Y+2, r25	; 0x02
    3f56:	ab 83       	std	Y+3, r26	; 0x03
    3f58:	bc 83       	std	Y+4, r27	; 0x04
    3f5a:	80 91 28 35 	lds	r24, 0x3528	; 0x803528 <pxCurrentTimerList>
    3f5e:	90 91 29 35 	lds	r25, 0x3529	; 0x803529 <pxCurrentTimerList+0x1>
    3f62:	fc 01       	movw	r30, r24
    3f64:	87 81       	ldd	r24, Z+7	; 0x07
    3f66:	90 85       	ldd	r25, Z+8	; 0x08
    3f68:	fc 01       	movw	r30, r24
    3f6a:	80 85       	ldd	r24, Z+8	; 0x08
    3f6c:	91 85       	ldd	r25, Z+9	; 0x09
    3f6e:	8d 83       	std	Y+5, r24	; 0x05
    3f70:	9e 83       	std	Y+6, r25	; 0x06
    3f72:	8d 81       	ldd	r24, Y+5	; 0x05
    3f74:	9e 81       	ldd	r25, Y+6	; 0x06
    3f76:	02 96       	adiw	r24, 0x02	; 2
    3f78:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    3f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f80:	fc 01       	movw	r30, r24
    3f82:	25 89       	ldd	r18, Z+21	; 0x15
    3f84:	36 89       	ldd	r19, Z+22	; 0x16
    3f86:	8d 81       	ldd	r24, Y+5	; 0x05
    3f88:	9e 81       	ldd	r25, Y+6	; 0x06
    3f8a:	f9 01       	movw	r30, r18
    3f8c:	19 95       	eicall
    3f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f90:	9e 81       	ldd	r25, Y+6	; 0x06
    3f92:	fc 01       	movw	r30, r24
    3f94:	82 89       	ldd	r24, Z+18	; 0x12
    3f96:	81 30       	cpi	r24, 0x01	; 1
    3f98:	09 f0       	breq	.+2      	; 0x3f9c <prvSwitchTimerLists+0x7e>
    3f9a:	51 c0       	rjmp	.+162    	; 0x403e <__stack+0x3f>
    3f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    3fa0:	fc 01       	movw	r30, r24
    3fa2:	26 85       	ldd	r18, Z+14	; 0x0e
    3fa4:	37 85       	ldd	r19, Z+15	; 0x0f
    3fa6:	40 89       	ldd	r20, Z+16	; 0x10
    3fa8:	51 89       	ldd	r21, Z+17	; 0x11
    3faa:	89 81       	ldd	r24, Y+1	; 0x01
    3fac:	9a 81       	ldd	r25, Y+2	; 0x02
    3fae:	ab 81       	ldd	r26, Y+3	; 0x03
    3fb0:	bc 81       	ldd	r27, Y+4	; 0x04
    3fb2:	82 0f       	add	r24, r18
    3fb4:	93 1f       	adc	r25, r19
    3fb6:	a4 1f       	adc	r26, r20
    3fb8:	b5 1f       	adc	r27, r21
    3fba:	8f 83       	std	Y+7, r24	; 0x07
    3fbc:	98 87       	std	Y+8, r25	; 0x08
    3fbe:	a9 87       	std	Y+9, r26	; 0x09
    3fc0:	ba 87       	std	Y+10, r27	; 0x0a
    3fc2:	2f 81       	ldd	r18, Y+7	; 0x07
    3fc4:	38 85       	ldd	r19, Y+8	; 0x08
    3fc6:	49 85       	ldd	r20, Y+9	; 0x09
    3fc8:	5a 85       	ldd	r21, Y+10	; 0x0a
    3fca:	89 81       	ldd	r24, Y+1	; 0x01
    3fcc:	9a 81       	ldd	r25, Y+2	; 0x02
    3fce:	ab 81       	ldd	r26, Y+3	; 0x03
    3fd0:	bc 81       	ldd	r27, Y+4	; 0x04
    3fd2:	82 17       	cp	r24, r18
    3fd4:	93 07       	cpc	r25, r19
    3fd6:	a4 07       	cpc	r26, r20
    3fd8:	b5 07       	cpc	r27, r21
    3fda:	f8 f4       	brcc	.+62     	; 0x401a <__stack+0x1b>
    3fdc:	2d 81       	ldd	r18, Y+5	; 0x05
    3fde:	3e 81       	ldd	r19, Y+6	; 0x06
    3fe0:	8f 81       	ldd	r24, Y+7	; 0x07
    3fe2:	98 85       	ldd	r25, Y+8	; 0x08
    3fe4:	a9 85       	ldd	r26, Y+9	; 0x09
    3fe6:	ba 85       	ldd	r27, Y+10	; 0x0a
    3fe8:	f9 01       	movw	r30, r18
    3fea:	82 83       	std	Z+2, r24	; 0x02
    3fec:	93 83       	std	Z+3, r25	; 0x03
    3fee:	a4 83       	std	Z+4, r26	; 0x04
    3ff0:	b5 83       	std	Z+5, r27	; 0x05
    3ff2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ff4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ff6:	2d 81       	ldd	r18, Y+5	; 0x05
    3ff8:	3e 81       	ldd	r19, Y+6	; 0x06
    3ffa:	fc 01       	movw	r30, r24
    3ffc:	22 87       	std	Z+10, r18	; 0x0a
    3ffe:	33 87       	std	Z+11, r19	; 0x0b
    4000:	8d 81       	ldd	r24, Y+5	; 0x05
    4002:	9e 81       	ldd	r25, Y+6	; 0x06
    4004:	9c 01       	movw	r18, r24
    4006:	2e 5f       	subi	r18, 0xFE	; 254
    4008:	3f 4f       	sbci	r19, 0xFF	; 255
    400a:	80 91 28 35 	lds	r24, 0x3528	; 0x803528 <pxCurrentTimerList>
    400e:	90 91 29 35 	lds	r25, 0x3529	; 0x803529 <pxCurrentTimerList+0x1>
    4012:	b9 01       	movw	r22, r18
    4014:	0e 94 83 08 	call	0x1106	; 0x1106 <vListInsert>
    4018:	12 c0       	rjmp	.+36     	; 0x403e <__stack+0x3f>
    401a:	89 81       	ldd	r24, Y+1	; 0x01
    401c:	9a 81       	ldd	r25, Y+2	; 0x02
    401e:	ab 81       	ldd	r26, Y+3	; 0x03
    4020:	bc 81       	ldd	r27, Y+4	; 0x04
    4022:	ed 81       	ldd	r30, Y+5	; 0x05
    4024:	fe 81       	ldd	r31, Y+6	; 0x06
    4026:	c1 2c       	mov	r12, r1
    4028:	d1 2c       	mov	r13, r1
    402a:	76 01       	movw	r14, r12
    402c:	00 e0       	ldi	r16, 0x00	; 0
    402e:	10 e0       	ldi	r17, 0x00	; 0
    4030:	9c 01       	movw	r18, r24
    4032:	ad 01       	movw	r20, r26
    4034:	60 e0       	ldi	r22, 0x00	; 0
    4036:	cf 01       	movw	r24, r30
    4038:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <xTimerGenericCommand>
    403c:	8b 87       	std	Y+11, r24	; 0x0b
    403e:	80 91 28 35 	lds	r24, 0x3528	; 0x803528 <pxCurrentTimerList>
    4042:	90 91 29 35 	lds	r25, 0x3529	; 0x803529 <pxCurrentTimerList+0x1>
    4046:	fc 01       	movw	r30, r24
    4048:	80 81       	ld	r24, Z
    404a:	88 23       	and	r24, r24
    404c:	09 f0       	breq	.+2      	; 0x4050 <__stack+0x51>
    404e:	75 cf       	rjmp	.-278    	; 0x3f3a <prvSwitchTimerLists+0x1c>
    4050:	80 91 28 35 	lds	r24, 0x3528	; 0x803528 <pxCurrentTimerList>
    4054:	90 91 29 35 	lds	r25, 0x3529	; 0x803529 <pxCurrentTimerList+0x1>
    4058:	8c 87       	std	Y+12, r24	; 0x0c
    405a:	9d 87       	std	Y+13, r25	; 0x0d
    405c:	80 91 2a 35 	lds	r24, 0x352A	; 0x80352a <pxOverflowTimerList>
    4060:	90 91 2b 35 	lds	r25, 0x352B	; 0x80352b <pxOverflowTimerList+0x1>
    4064:	80 93 28 35 	sts	0x3528, r24	; 0x803528 <pxCurrentTimerList>
    4068:	90 93 29 35 	sts	0x3529, r25	; 0x803529 <pxCurrentTimerList+0x1>
    406c:	8c 85       	ldd	r24, Y+12	; 0x0c
    406e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4070:	80 93 2a 35 	sts	0x352A, r24	; 0x80352a <pxOverflowTimerList>
    4074:	90 93 2b 35 	sts	0x352B, r25	; 0x80352b <pxOverflowTimerList+0x1>
    4078:	00 00       	nop
    407a:	2d 96       	adiw	r28, 0x0d	; 13
    407c:	cd bf       	out	0x3d, r28	; 61
    407e:	de bf       	out	0x3e, r29	; 62
    4080:	df 91       	pop	r29
    4082:	cf 91       	pop	r28
    4084:	1f 91       	pop	r17
    4086:	0f 91       	pop	r16
    4088:	ff 90       	pop	r15
    408a:	ef 90       	pop	r14
    408c:	df 90       	pop	r13
    408e:	cf 90       	pop	r12
    4090:	08 95       	ret

00004092 <prvCheckForValidListAndQueue>:
    4092:	cf 93       	push	r28
    4094:	df 93       	push	r29
    4096:	cd b7       	in	r28, 0x3d	; 61
    4098:	de b7       	in	r29, 0x3e	; 62
    409a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    409e:	ff 93       	push	r31
    40a0:	f8 7f       	andi	r31, 0xF8	; 248
    40a2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    40a6:	80 91 2c 35 	lds	r24, 0x352C	; 0x80352c <xTimerQueue>
    40aa:	90 91 2d 35 	lds	r25, 0x352D	; 0x80352d <xTimerQueue+0x1>
    40ae:	89 2b       	or	r24, r25
    40b0:	e9 f4       	brne	.+58     	; 0x40ec <prvCheckForValidListAndQueue+0x5a>
    40b2:	82 e1       	ldi	r24, 0x12	; 18
    40b4:	95 e3       	ldi	r25, 0x35	; 53
    40b6:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vListInitialise>
    40ba:	8d e1       	ldi	r24, 0x1D	; 29
    40bc:	95 e3       	ldi	r25, 0x35	; 53
    40be:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vListInitialise>
    40c2:	82 e1       	ldi	r24, 0x12	; 18
    40c4:	95 e3       	ldi	r25, 0x35	; 53
    40c6:	80 93 28 35 	sts	0x3528, r24	; 0x803528 <pxCurrentTimerList>
    40ca:	90 93 29 35 	sts	0x3529, r25	; 0x803529 <pxCurrentTimerList+0x1>
    40ce:	8d e1       	ldi	r24, 0x1D	; 29
    40d0:	95 e3       	ldi	r25, 0x35	; 53
    40d2:	80 93 2a 35 	sts	0x352A, r24	; 0x80352a <pxOverflowTimerList>
    40d6:	90 93 2b 35 	sts	0x352B, r25	; 0x80352b <pxOverflowTimerList+0x1>
    40da:	40 e0       	ldi	r20, 0x00	; 0
    40dc:	69 e0       	ldi	r22, 0x09	; 9
    40de:	85 e0       	ldi	r24, 0x05	; 5
    40e0:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <xQueueGenericCreate>
    40e4:	80 93 2c 35 	sts	0x352C, r24	; 0x80352c <xTimerQueue>
    40e8:	90 93 2d 35 	sts	0x352D, r25	; 0x80352d <xTimerQueue+0x1>
    40ec:	ff 91       	pop	r31
    40ee:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    40f2:	00 00       	nop
    40f4:	df 91       	pop	r29
    40f6:	cf 91       	pop	r28
    40f8:	08 95       	ret

000040fa <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    40fa:	0f 93       	push	r16
    40fc:	1f 93       	push	r17
    40fe:	cf 93       	push	r28
    4100:	df 93       	push	r29
    4102:	cd b7       	in	r28, 0x3d	; 61
    4104:	de b7       	in	r29, 0x3e	; 62
    4106:	64 97       	sbiw	r28, 0x14	; 20
    4108:	cd bf       	out	0x3d, r28	; 61
    410a:	de bf       	out	0x3e, r29	; 62
    410c:	8b 87       	std	Y+11, r24	; 0x0b
    410e:	9c 87       	std	Y+12, r25	; 0x0c
    4110:	6d 87       	std	Y+13, r22	; 0x0d
    4112:	7e 87       	std	Y+14, r23	; 0x0e
    4114:	2f 87       	std	Y+15, r18	; 0x0f
    4116:	38 8b       	std	Y+16, r19	; 0x10
    4118:	49 8b       	std	Y+17, r20	; 0x11
    411a:	5a 8b       	std	Y+18, r21	; 0x12
    411c:	0b 8b       	std	Y+19, r16	; 0x13
    411e:	1c 8b       	std	Y+20, r17	; 0x14
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    4120:	8e ef       	ldi	r24, 0xFE	; 254
    4122:	8a 83       	std	Y+2, r24	; 0x02
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    4124:	8b 85       	ldd	r24, Y+11	; 0x0b
    4126:	9c 85       	ldd	r25, Y+12	; 0x0c
    4128:	8b 83       	std	Y+3, r24	; 0x03
    412a:	9c 83       	std	Y+4, r25	; 0x04
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    412c:	8d 85       	ldd	r24, Y+13	; 0x0d
    412e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4130:	8d 83       	std	Y+5, r24	; 0x05
    4132:	9e 83       	std	Y+6, r25	; 0x06
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    4134:	8f 85       	ldd	r24, Y+15	; 0x0f
    4136:	98 89       	ldd	r25, Y+16	; 0x10
    4138:	a9 89       	ldd	r26, Y+17	; 0x11
    413a:	ba 89       	ldd	r27, Y+18	; 0x12
    413c:	8f 83       	std	Y+7, r24	; 0x07
    413e:	98 87       	std	Y+8, r25	; 0x08
    4140:	a9 87       	std	Y+9, r26	; 0x09
    4142:	ba 87       	std	Y+10, r27	; 0x0a

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    4144:	80 91 2c 35 	lds	r24, 0x352C	; 0x80352c <xTimerQueue>
    4148:	90 91 2d 35 	lds	r25, 0x352D	; 0x80352d <xTimerQueue+0x1>
    414c:	4b 89       	ldd	r20, Y+19	; 0x13
    414e:	5c 89       	ldd	r21, Y+20	; 0x14
    4150:	be 01       	movw	r22, r28
    4152:	6e 5f       	subi	r22, 0xFE	; 254
    4154:	7f 4f       	sbci	r23, 0xFF	; 255
    4156:	20 e0       	ldi	r18, 0x00	; 0
    4158:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <xQueueGenericSendFromISR>
    415c:	89 83       	std	Y+1, r24	; 0x01

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
    415e:	89 81       	ldd	r24, Y+1	; 0x01
	}
    4160:	64 96       	adiw	r28, 0x14	; 20
    4162:	cd bf       	out	0x3d, r28	; 61
    4164:	de bf       	out	0x3e, r29	; 62
    4166:	df 91       	pop	r29
    4168:	cf 91       	pop	r28
    416a:	1f 91       	pop	r17
    416c:	0f 91       	pop	r16
    416e:	08 95       	ret

00004170 <vInitClock>:
#include "init.h"
#include "clksys_driver.h"


void vInitClock(void)
{
    4170:	cf 93       	push	r28
    4172:	df 93       	push	r29
    4174:	cd b7       	in	r28, 0x3d	; 61
    4176:	de b7       	in	r29, 0x3e	; 62
	CLKSYS_Enable( OSC_RC2MEN_bm );
    4178:	80 e5       	ldi	r24, 0x50	; 80
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	20 e5       	ldi	r18, 0x50	; 80
    417e:	30 e0       	ldi	r19, 0x00	; 0
    4180:	f9 01       	movw	r30, r18
    4182:	20 81       	ld	r18, Z
    4184:	21 60       	ori	r18, 0x01	; 1
    4186:	fc 01       	movw	r30, r24
    4188:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    418a:	80 e5       	ldi	r24, 0x50	; 80
    418c:	90 e0       	ldi	r25, 0x00	; 0
    418e:	fc 01       	movw	r30, r24
    4190:	81 81       	ldd	r24, Z+1	; 0x01
    4192:	88 2f       	mov	r24, r24
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	81 70       	andi	r24, 0x01	; 1
    4198:	99 27       	eor	r25, r25
    419a:	89 2b       	or	r24, r25
    419c:	b1 f3       	breq	.-20     	; 0x418a <vInitClock+0x1a>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    419e:	80 e0       	ldi	r24, 0x00	; 0
    41a0:	0e 94 9c 03 	call	0x738	; 0x738 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    41a4:	8e e1       	ldi	r24, 0x1E	; 30
    41a6:	0e 94 65 03 	call	0x6ca	; 0x6ca <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    41aa:	60 e0       	ldi	r22, 0x00	; 0
    41ac:	80 e0       	ldi	r24, 0x00	; 0
    41ae:	0e 94 85 03 	call	0x70a	; 0x70a <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    41b2:	43 e0       	ldi	r20, 0x03	; 3
    41b4:	60 e0       	ldi	r22, 0x00	; 0
    41b6:	80 e4       	ldi	r24, 0x40	; 64
    41b8:	0e 94 30 03 	call	0x660	; 0x660 <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    41bc:	80 e5       	ldi	r24, 0x50	; 80
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	20 e5       	ldi	r18, 0x50	; 80
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	f9 01       	movw	r30, r18
    41c6:	20 81       	ld	r18, Z
    41c8:	28 60       	ori	r18, 0x08	; 8
    41ca:	fc 01       	movw	r30, r24
    41cc:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    41ce:	80 e5       	ldi	r24, 0x50	; 80
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	fc 01       	movw	r30, r24
    41d4:	81 81       	ldd	r24, Z+1	; 0x01
    41d6:	88 2f       	mov	r24, r24
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	88 70       	andi	r24, 0x08	; 8
    41dc:	99 27       	eor	r25, r25
    41de:	89 2b       	or	r24, r25
    41e0:	b1 f3       	breq	.-20     	; 0x41ce <vInitClock+0x5e>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    41e2:	64 e0       	ldi	r22, 0x04	; 4
    41e4:	80 ec       	ldi	r24, 0xC0	; 192
    41e6:	0e 94 4d 03 	call	0x69a	; 0x69a <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    41ea:	80 e5       	ldi	r24, 0x50	; 80
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	20 e5       	ldi	r18, 0x50	; 80
    41f0:	30 e0       	ldi	r19, 0x00	; 0
    41f2:	f9 01       	movw	r30, r18
    41f4:	20 81       	ld	r18, Z
    41f6:	20 61       	ori	r18, 0x10	; 16
    41f8:	fc 01       	movw	r30, r24
    41fa:	20 83       	st	Z, r18
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    41fc:	60 e0       	ldi	r22, 0x00	; 0
    41fe:	80 e0       	ldi	r24, 0x00	; 0
    4200:	0e 94 85 03 	call	0x70a	; 0x70a <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    4204:	80 e5       	ldi	r24, 0x50	; 80
    4206:	90 e0       	ldi	r25, 0x00	; 0
    4208:	fc 01       	movw	r30, r24
    420a:	81 81       	ldd	r24, Z+1	; 0x01
    420c:	88 2f       	mov	r24, r24
    420e:	90 e0       	ldi	r25, 0x00	; 0
    4210:	80 71       	andi	r24, 0x10	; 16
    4212:	99 27       	eor	r25, r25
    4214:	89 2b       	or	r24, r25
    4216:	b1 f3       	breq	.-20     	; 0x4204 <vInitClock+0x94>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    4218:	84 e0       	ldi	r24, 0x04	; 4
    421a:	0e 94 9c 03 	call	0x738	; 0x738 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    421e:	87 e0       	ldi	r24, 0x07	; 7
    4220:	0e 94 65 03 	call	0x6ca	; 0x6ca <CLKSYS_Disable>
    4224:	00 00       	nop
    4226:	df 91       	pop	r29
    4228:	cf 91       	pop	r28
    422a:	08 95       	ret

0000422c <vApplicationIdleHook>:

//////////////////////////////////////////////////////////////////////////
//						Idle Hook Application							//
//////////////////////////////////////////////////////////////////////////

void vApplicationIdleHook(void){
    422c:	cf 93       	push	r28
    422e:	df 93       	push	r29
    4230:	cd b7       	in	r28, 0x3d	; 61
    4232:	de b7       	in	r29, 0x3e	; 62
	
}
    4234:	00 00       	nop
    4236:	df 91       	pop	r29
    4238:	cf 91       	pop	r28
    423a:	08 95       	ret

0000423c <main>:

//////////////////////////////////////////////////////////////////////////
//								Main									//
//////////////////////////////////////////////////////////////////////////

int main(void){
    423c:	ef 92       	push	r14
    423e:	ff 92       	push	r15
    4240:	0f 93       	push	r16
    4242:	cf 93       	push	r28
    4244:	df 93       	push	r29
    4246:	cd b7       	in	r28, 0x3d	; 61
    4248:	de b7       	in	r29, 0x3e	; 62
	vInitClock();
    424a:	0e 94 b8 20 	call	0x4170	; 0x4170 <vInitClock>
	vInitDisplay();
    424e:	0e 94 8d 32 	call	0x651a	; 0x651a <vInitDisplay>

	evStartStopEvents = xEventGroupCreate();
    4252:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <xEventGroupCreate>
    4256:	80 93 76 35 	sts	0x3576, r24	; 0x803576 <evStartStopEvents>
    425a:	90 93 77 35 	sts	0x3577, r25	; 0x803577 <evStartStopEvents+0x1>
	evButtonEvents = xEventGroupCreate();
    425e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <xEventGroupCreate>
    4262:	80 93 96 35 	sts	0x3596, r24	; 0x803596 <evButtonEvents>
    4266:	90 93 97 35 	sts	0x3597, r25	; 0x803597 <evButtonEvents+0x1>
	evREADWRITE = xEventGroupCreate();
    426a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <xEventGroupCreate>
    426e:	80 93 68 35 	sts	0x3568, r24	; 0x803568 <evREADWRITE>
    4272:	90 93 69 35 	sts	0x3569, r25	; 0x803569 <evREADWRITE+0x1>

	xTaskCreate(vUserInterface, (const char *) "ControlTask", configMINIMAL_STACK_SIZE+150, NULL, 3, NULL);
    4276:	e1 2c       	mov	r14, r1
    4278:	f1 2c       	mov	r15, r1
    427a:	03 e0       	ldi	r16, 0x03	; 3
    427c:	20 e0       	ldi	r18, 0x00	; 0
    427e:	30 e0       	ldi	r19, 0x00	; 0
    4280:	4e e5       	ldi	r20, 0x5E	; 94
    4282:	51 e0       	ldi	r21, 0x01	; 1
    4284:	6d e0       	ldi	r22, 0x0D	; 13
    4286:	70 e2       	ldi	r23, 0x20	; 32
    4288:	85 e8       	ldi	r24, 0x85	; 133
    428a:	91 e2       	ldi	r25, 0x21	; 33
    428c:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <xTaskCreate>
	xTaskCreate(vButtonHandler, (const char*) "ButtonTask", configMINIMAL_STACK_SIZE+30, NULL, 2, &ButtonTask);
    4290:	0f 2e       	mov	r0, r31
    4292:	fd e9       	ldi	r31, 0x9D	; 157
    4294:	ef 2e       	mov	r14, r31
    4296:	f5 e3       	ldi	r31, 0x35	; 53
    4298:	ff 2e       	mov	r15, r31
    429a:	f0 2d       	mov	r31, r0
    429c:	02 e0       	ldi	r16, 0x02	; 2
    429e:	20 e0       	ldi	r18, 0x00	; 0
    42a0:	30 e0       	ldi	r19, 0x00	; 0
    42a2:	46 ee       	ldi	r20, 0xE6	; 230
    42a4:	50 e0       	ldi	r21, 0x00	; 0
    42a6:	69 e1       	ldi	r22, 0x19	; 25
    42a8:	70 e2       	ldi	r23, 0x20	; 32
    42aa:	89 e8       	ldi	r24, 0x89	; 137
    42ac:	9a e2       	ldi	r25, 0x2A	; 42
    42ae:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <xTaskCreate>
	xTaskCreate(vLeibniz, (const char *) "Leibniz-Folge-Task", configMINIMAL_STACK_SIZE+100, NULL, 1, &LeibnizTask);
    42b2:	0f 2e       	mov	r0, r31
    42b4:	f6 e6       	ldi	r31, 0x66	; 102
    42b6:	ef 2e       	mov	r14, r31
    42b8:	f5 e3       	ldi	r31, 0x35	; 53
    42ba:	ff 2e       	mov	r15, r31
    42bc:	f0 2d       	mov	r31, r0
    42be:	01 e0       	ldi	r16, 0x01	; 1
    42c0:	20 e0       	ldi	r18, 0x00	; 0
    42c2:	30 e0       	ldi	r19, 0x00	; 0
    42c4:	4c e2       	ldi	r20, 0x2C	; 44
    42c6:	51 e0       	ldi	r21, 0x01	; 1
    42c8:	64 e2       	ldi	r22, 0x24	; 36
    42ca:	70 e2       	ldi	r23, 0x20	; 32
    42cc:	84 e1       	ldi	r24, 0x14	; 20
    42ce:	9b e2       	ldi	r25, 0x2B	; 43
    42d0:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <xTaskCreate>
	xTaskCreate(vNilakantha, (const char *) "Nilakantha-Folge-Task", configMINIMAL_STACK_SIZE+300, NULL, 1, &NilakanthaTask);
    42d4:	0f 2e       	mov	r0, r31
    42d6:	fb e9       	ldi	r31, 0x9B	; 155
    42d8:	ef 2e       	mov	r14, r31
    42da:	f5 e3       	ldi	r31, 0x35	; 53
    42dc:	ff 2e       	mov	r15, r31
    42de:	f0 2d       	mov	r31, r0
    42e0:	01 e0       	ldi	r16, 0x01	; 1
    42e2:	20 e0       	ldi	r18, 0x00	; 0
    42e4:	30 e0       	ldi	r19, 0x00	; 0
    42e6:	44 ef       	ldi	r20, 0xF4	; 244
    42e8:	51 e0       	ldi	r21, 0x01	; 1
    42ea:	67 e3       	ldi	r22, 0x37	; 55
    42ec:	70 e2       	ldi	r23, 0x20	; 32
    42ee:	84 ef       	ldi	r24, 0xF4	; 244
    42f0:	9d e2       	ldi	r25, 0x2D	; 45
    42f2:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <xTaskCreate>

	vTaskStartScheduler();
    42f6:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <vTaskStartScheduler>
	
	return 0;
    42fa:	80 e0       	ldi	r24, 0x00	; 0
    42fc:	90 e0       	ldi	r25, 0x00	; 0
}
    42fe:	df 91       	pop	r29
    4300:	cf 91       	pop	r28
    4302:	0f 91       	pop	r16
    4304:	ff 90       	pop	r15
    4306:	ef 90       	pop	r14
    4308:	08 95       	ret

0000430a <vUserInterface>:

//////////////////////////////////////////////////////////////////////////
//						Controller-/Interface-Task						//
//////////////////////////////////////////////////////////////////////////

void vUserInterface(void* pvParameters){
    430a:	cf 92       	push	r12
    430c:	df 92       	push	r13
    430e:	ef 92       	push	r14
    4310:	ff 92       	push	r15
    4312:	0f 93       	push	r16
    4314:	cf 93       	push	r28
    4316:	df 93       	push	r29
    4318:	cd b7       	in	r28, 0x3d	; 61
    431a:	de b7       	in	r29, 0x3e	; 62
    431c:	66 97       	sbiw	r28, 0x16	; 22
    431e:	cd bf       	out	0x3d, r28	; 61
    4320:	de bf       	out	0x3e, r29	; 62
    4322:	8d 8b       	std	Y+21, r24	; 0x15
    4324:	9e 8b       	std	Y+22, r25	; 0x16
	vDisplayClear();
    4326:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <vDisplayClear>
	vTaskDelay(500);
    432a:	64 ef       	ldi	r22, 0xF4	; 244
    432c:	71 e0       	ldi	r23, 0x01	; 1
    432e:	80 e0       	ldi	r24, 0x00	; 0
    4330:	90 e0       	ldi	r25, 0x00	; 0
    4332:	0e 94 bc 13 	call	0x2778	; 0x2778 <vTaskDelay>
	initButtons();
    4336:	0e 94 cd 01 	call	0x39a	; 0x39a <initButtons>
	uint32_t DisplayUpdateCounter = 50;
    433a:	82 e3       	ldi	r24, 0x32	; 50
    433c:	90 e0       	ldi	r25, 0x00	; 0
    433e:	a0 e0       	ldi	r26, 0x00	; 0
    4340:	b0 e0       	ldi	r27, 0x00	; 0
    4342:	89 83       	std	Y+1, r24	; 0x01
    4344:	9a 83       	std	Y+2, r25	; 0x02
    4346:	ab 83       	std	Y+3, r26	; 0x03
    4348:	bc 83       	std	Y+4, r27	; 0x04
	for(;;){
		uint32_t ButtonState = (xEventGroupGetBits(evButtonEvents)) & 0x000000FF; //Read Button States from EventGroup
    434a:	80 91 96 35 	lds	r24, 0x3596	; 0x803596 <evButtonEvents>
    434e:	90 91 97 35 	lds	r25, 0x3597	; 0x803597 <evButtonEvents+0x1>
    4352:	40 e0       	ldi	r20, 0x00	; 0
    4354:	50 e0       	ldi	r21, 0x00	; 0
    4356:	ba 01       	movw	r22, r20
    4358:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    435c:	dc 01       	movw	r26, r24
    435e:	cb 01       	movw	r24, r22
    4360:	99 27       	eor	r25, r25
    4362:	aa 27       	eor	r26, r26
    4364:	bb 27       	eor	r27, r27
    4366:	8d 83       	std	Y+5, r24	; 0x05
    4368:	9e 83       	std	Y+6, r25	; 0x06
    436a:	af 83       	std	Y+7, r26	; 0x07
    436c:	b8 87       	std	Y+8, r27	; 0x08
		xEventGroupClearBits(evButtonEvents, EVBUTTONS_CLEAR); //As the Button State is saved now, we can clear the EventGroup for new Button presses
    436e:	80 91 96 35 	lds	r24, 0x3596	; 0x803596 <evButtonEvents>
    4372:	90 91 97 35 	lds	r25, 0x3597	; 0x803597 <evButtonEvents+0x1>
    4376:	4f ef       	ldi	r20, 0xFF	; 255
    4378:	50 e0       	ldi	r21, 0x00	; 0
    437a:	60 e0       	ldi	r22, 0x00	; 0
    437c:	70 e0       	ldi	r23, 0x00	; 0
    437e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
		
		//////////////////////////////////////////////////////////////////////////
		//							User Interface								//
		//////////////////////////////////////////////////////////////////////////
		
		if (DisplayUpdateCounter == 0){
    4382:	89 81       	ldd	r24, Y+1	; 0x01
    4384:	9a 81       	ldd	r25, Y+2	; 0x02
    4386:	ab 81       	ldd	r26, Y+3	; 0x03
    4388:	bc 81       	ldd	r27, Y+4	; 0x04
    438a:	89 2b       	or	r24, r25
    438c:	8a 2b       	or	r24, r26
    438e:	8b 2b       	or	r24, r27
    4390:	09 f0       	breq	.+2      	; 0x4394 <vUserInterface+0x8a>
    4392:	2c c5       	rjmp	.+2648   	; 0x4dec <vUserInterface+0xae2>
			if(Menu == Menu_Main){	//Start screen
    4394:	80 91 34 35 	lds	r24, 0x3534	; 0x803534 <Menu>
    4398:	90 91 35 35 	lds	r25, 0x3535	; 0x803535 <Menu+0x1>
    439c:	89 2b       	or	r24, r25
    439e:	09 f0       	breq	.+2      	; 0x43a2 <vUserInterface+0x98>
    43a0:	51 c0       	rjmp	.+162    	; 0x4444 <vUserInterface+0x13a>
				vDisplayClear();
    43a2:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <vDisplayClear>
				vDisplayWriteStringAtPos(0,0, "Pi-Calculator");
    43a6:	8d e4       	ldi	r24, 0x4D	; 77
    43a8:	90 e2       	ldi	r25, 0x20	; 32
    43aa:	89 2f       	mov	r24, r25
    43ac:	8f 93       	push	r24
    43ae:	8d e4       	ldi	r24, 0x4D	; 77
    43b0:	90 e2       	ldi	r25, 0x20	; 32
    43b2:	8f 93       	push	r24
    43b4:	1f 92       	push	r1
    43b6:	1f 92       	push	r1
    43b8:	1f 92       	push	r1
    43ba:	1f 92       	push	r1
    43bc:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    43c0:	0f 90       	pop	r0
    43c2:	0f 90       	pop	r0
    43c4:	0f 90       	pop	r0
    43c6:	0f 90       	pop	r0
    43c8:	0f 90       	pop	r0
    43ca:	0f 90       	pop	r0
				vDisplayWriteStringAtPos(1,0, "1: Pi aus math.h");
    43cc:	8b e5       	ldi	r24, 0x5B	; 91
    43ce:	90 e2       	ldi	r25, 0x20	; 32
    43d0:	89 2f       	mov	r24, r25
    43d2:	8f 93       	push	r24
    43d4:	8b e5       	ldi	r24, 0x5B	; 91
    43d6:	90 e2       	ldi	r25, 0x20	; 32
    43d8:	8f 93       	push	r24
    43da:	1f 92       	push	r1
    43dc:	1f 92       	push	r1
    43de:	1f 92       	push	r1
    43e0:	81 e0       	ldi	r24, 0x01	; 1
    43e2:	8f 93       	push	r24
    43e4:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    43e8:	0f 90       	pop	r0
    43ea:	0f 90       	pop	r0
    43ec:	0f 90       	pop	r0
    43ee:	0f 90       	pop	r0
    43f0:	0f 90       	pop	r0
    43f2:	0f 90       	pop	r0
				vDisplayWriteStringAtPos(2,0, "2: Leibniz-Serie");
    43f4:	8c e6       	ldi	r24, 0x6C	; 108
    43f6:	90 e2       	ldi	r25, 0x20	; 32
    43f8:	89 2f       	mov	r24, r25
    43fa:	8f 93       	push	r24
    43fc:	8c e6       	ldi	r24, 0x6C	; 108
    43fe:	90 e2       	ldi	r25, 0x20	; 32
    4400:	8f 93       	push	r24
    4402:	1f 92       	push	r1
    4404:	1f 92       	push	r1
    4406:	1f 92       	push	r1
    4408:	82 e0       	ldi	r24, 0x02	; 2
    440a:	8f 93       	push	r24
    440c:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    4410:	0f 90       	pop	r0
    4412:	0f 90       	pop	r0
    4414:	0f 90       	pop	r0
    4416:	0f 90       	pop	r0
    4418:	0f 90       	pop	r0
    441a:	0f 90       	pop	r0
				vDisplayWriteStringAtPos(3,0, "3: Nilakantha-Serie");
    441c:	8d e7       	ldi	r24, 0x7D	; 125
    441e:	90 e2       	ldi	r25, 0x20	; 32
    4420:	89 2f       	mov	r24, r25
    4422:	8f 93       	push	r24
    4424:	8d e7       	ldi	r24, 0x7D	; 125
    4426:	90 e2       	ldi	r25, 0x20	; 32
    4428:	8f 93       	push	r24
    442a:	1f 92       	push	r1
    442c:	1f 92       	push	r1
    442e:	1f 92       	push	r1
    4430:	83 e0       	ldi	r24, 0x03	; 3
    4432:	8f 93       	push	r24
    4434:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    4438:	0f 90       	pop	r0
    443a:	0f 90       	pop	r0
    443c:	0f 90       	pop	r0
    443e:	0f 90       	pop	r0
    4440:	0f 90       	pop	r0
    4442:	0f 90       	pop	r0
			}
			if(Menu == Menu_Demo){	//Pi Demo screen
    4444:	80 91 34 35 	lds	r24, 0x3534	; 0x803534 <Menu>
    4448:	90 91 35 35 	lds	r25, 0x3535	; 0x803535 <Menu+0x1>
    444c:	01 97       	sbiw	r24, 0x01	; 1
    444e:	09 f0       	breq	.+2      	; 0x4452 <vUserInterface+0x148>
    4450:	5c c0       	rjmp	.+184    	; 0x450a <vUserInterface+0x200>
				char pistring[12];
				vDisplayClear();
    4452:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <vDisplayClear>
				sprintf(&pistring[0], "PI: %.8f", M_PI);
    4456:	80 e4       	ldi	r24, 0x40	; 64
    4458:	8f 93       	push	r24
    445a:	89 e4       	ldi	r24, 0x49	; 73
    445c:	8f 93       	push	r24
    445e:	8f e0       	ldi	r24, 0x0F	; 15
    4460:	8f 93       	push	r24
    4462:	8b ed       	ldi	r24, 0xDB	; 219
    4464:	8f 93       	push	r24
    4466:	81 e9       	ldi	r24, 0x91	; 145
    4468:	90 e2       	ldi	r25, 0x20	; 32
    446a:	89 2f       	mov	r24, r25
    446c:	8f 93       	push	r24
    446e:	81 e9       	ldi	r24, 0x91	; 145
    4470:	90 e2       	ldi	r25, 0x20	; 32
    4472:	8f 93       	push	r24
    4474:	ce 01       	movw	r24, r28
    4476:	09 96       	adiw	r24, 0x09	; 9
    4478:	29 2f       	mov	r18, r25
    447a:	2f 93       	push	r18
    447c:	8f 93       	push	r24
    447e:	0e 94 c6 41 	call	0x838c	; 0x838c <sprintf>
    4482:	8d b7       	in	r24, 0x3d	; 61
    4484:	9e b7       	in	r25, 0x3e	; 62
    4486:	08 96       	adiw	r24, 0x08	; 8
    4488:	cd bf       	out	0x3d, r28	; 61
    448a:	de bf       	out	0x3e, r29	; 62
				vDisplayWriteStringAtPos(0,0, "Pi aus math.h");
    448c:	8a e9       	ldi	r24, 0x9A	; 154
    448e:	90 e2       	ldi	r25, 0x20	; 32
    4490:	89 2f       	mov	r24, r25
    4492:	8f 93       	push	r24
    4494:	8a e9       	ldi	r24, 0x9A	; 154
    4496:	90 e2       	ldi	r25, 0x20	; 32
    4498:	8f 93       	push	r24
    449a:	1f 92       	push	r1
    449c:	1f 92       	push	r1
    449e:	1f 92       	push	r1
    44a0:	1f 92       	push	r1
    44a2:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    44a6:	0f 90       	pop	r0
    44a8:	0f 90       	pop	r0
    44aa:	0f 90       	pop	r0
    44ac:	0f 90       	pop	r0
    44ae:	0f 90       	pop	r0
    44b0:	0f 90       	pop	r0
				vDisplayWriteStringAtPos(1,0, "%s", pistring);
    44b2:	ce 01       	movw	r24, r28
    44b4:	09 96       	adiw	r24, 0x09	; 9
    44b6:	29 2f       	mov	r18, r25
    44b8:	2f 93       	push	r18
    44ba:	8f 93       	push	r24
    44bc:	88 ea       	ldi	r24, 0xA8	; 168
    44be:	90 e2       	ldi	r25, 0x20	; 32
    44c0:	89 2f       	mov	r24, r25
    44c2:	8f 93       	push	r24
    44c4:	88 ea       	ldi	r24, 0xA8	; 168
    44c6:	90 e2       	ldi	r25, 0x20	; 32
    44c8:	8f 93       	push	r24
    44ca:	1f 92       	push	r1
    44cc:	1f 92       	push	r1
    44ce:	1f 92       	push	r1
    44d0:	81 e0       	ldi	r24, 0x01	; 1
    44d2:	8f 93       	push	r24
    44d4:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    44d8:	8d b7       	in	r24, 0x3d	; 61
    44da:	9e b7       	in	r25, 0x3e	; 62
    44dc:	08 96       	adiw	r24, 0x08	; 8
    44de:	cd bf       	out	0x3d, r28	; 61
    44e0:	de bf       	out	0x3e, r29	; 62
				vDisplayWriteStringAtPos(3,0, "4: Back");
    44e2:	8b ea       	ldi	r24, 0xAB	; 171
    44e4:	90 e2       	ldi	r25, 0x20	; 32
    44e6:	89 2f       	mov	r24, r25
    44e8:	8f 93       	push	r24
    44ea:	8b ea       	ldi	r24, 0xAB	; 171
    44ec:	90 e2       	ldi	r25, 0x20	; 32
    44ee:	8f 93       	push	r24
    44f0:	1f 92       	push	r1
    44f2:	1f 92       	push	r1
    44f4:	1f 92       	push	r1
    44f6:	83 e0       	ldi	r24, 0x03	; 3
    44f8:	8f 93       	push	r24
    44fa:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    44fe:	0f 90       	pop	r0
    4500:	0f 90       	pop	r0
    4502:	0f 90       	pop	r0
    4504:	0f 90       	pop	r0
    4506:	0f 90       	pop	r0
    4508:	0f 90       	pop	r0
			}
			if(Menu == Menu_Leibniz){	//Leibniz's Pi screen
    450a:	80 91 34 35 	lds	r24, 0x3534	; 0x803534 <Menu>
    450e:	90 91 35 35 	lds	r25, 0x3535	; 0x803535 <Menu+0x1>
    4512:	02 97       	sbiw	r24, 0x02	; 2
    4514:	09 f0       	breq	.+2      	; 0x4518 <vUserInterface+0x20e>
    4516:	2c c2       	rjmp	.+1112   	; 0x4970 <vUserInterface+0x666>
				vDisplayClear();
    4518:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <vDisplayClear>
				if ((Bits == 0) | (Bits != EV_START_LEIBNIZ) | (Bits != EV_STOPPED_LEIBNIZ)){
    451c:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    4520:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    4524:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    4528:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    452c:	31 e0       	ldi	r19, 0x01	; 1
    452e:	89 2b       	or	r24, r25
    4530:	8a 2b       	or	r24, r26
    4532:	8b 2b       	or	r24, r27
    4534:	09 f0       	breq	.+2      	; 0x4538 <vUserInterface+0x22e>
    4536:	30 e0       	ldi	r19, 0x00	; 0
    4538:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    453c:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    4540:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    4544:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    4548:	21 e0       	ldi	r18, 0x01	; 1
    454a:	01 97       	sbiw	r24, 0x01	; 1
    454c:	a1 05       	cpc	r26, r1
    454e:	b1 05       	cpc	r27, r1
    4550:	09 f4       	brne	.+2      	; 0x4554 <vUserInterface+0x24a>
    4552:	20 e0       	ldi	r18, 0x00	; 0
    4554:	83 2f       	mov	r24, r19
    4556:	82 2b       	or	r24, r18
    4558:	28 2f       	mov	r18, r24
    455a:	30 e0       	ldi	r19, 0x00	; 0
    455c:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    4560:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    4564:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    4568:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    456c:	41 e0       	ldi	r20, 0x01	; 1
    456e:	40 97       	sbiw	r24, 0x10	; 16
    4570:	a1 05       	cpc	r26, r1
    4572:	b1 05       	cpc	r27, r1
    4574:	09 f4       	brne	.+2      	; 0x4578 <vUserInterface+0x26e>
    4576:	40 e0       	ldi	r20, 0x00	; 0
    4578:	84 2f       	mov	r24, r20
    457a:	90 e0       	ldi	r25, 0x00	; 0
    457c:	82 2b       	or	r24, r18
    457e:	93 2b       	or	r25, r19
    4580:	89 2b       	or	r24, r25
    4582:	09 f4       	brne	.+2      	; 0x4586 <vUserInterface+0x27c>
    4584:	51 c0       	rjmp	.+162    	; 0x4628 <vUserInterface+0x31e>
					vDisplayWriteStringAtPos(1,0, "1: Start");
    4586:	83 eb       	ldi	r24, 0xB3	; 179
    4588:	90 e2       	ldi	r25, 0x20	; 32
    458a:	89 2f       	mov	r24, r25
    458c:	8f 93       	push	r24
    458e:	83 eb       	ldi	r24, 0xB3	; 179
    4590:	90 e2       	ldi	r25, 0x20	; 32
    4592:	8f 93       	push	r24
    4594:	1f 92       	push	r1
    4596:	1f 92       	push	r1
    4598:	1f 92       	push	r1
    459a:	81 e0       	ldi	r24, 0x01	; 1
    459c:	8f 93       	push	r24
    459e:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    45a2:	0f 90       	pop	r0
    45a4:	0f 90       	pop	r0
    45a6:	0f 90       	pop	r0
    45a8:	0f 90       	pop	r0
    45aa:	0f 90       	pop	r0
    45ac:	0f 90       	pop	r0
					vDisplayWriteStringAtPos(2,0, "2: Stop");
    45ae:	8c eb       	ldi	r24, 0xBC	; 188
    45b0:	90 e2       	ldi	r25, 0x20	; 32
    45b2:	89 2f       	mov	r24, r25
    45b4:	8f 93       	push	r24
    45b6:	8c eb       	ldi	r24, 0xBC	; 188
    45b8:	90 e2       	ldi	r25, 0x20	; 32
    45ba:	8f 93       	push	r24
    45bc:	1f 92       	push	r1
    45be:	1f 92       	push	r1
    45c0:	1f 92       	push	r1
    45c2:	82 e0       	ldi	r24, 0x02	; 2
    45c4:	8f 93       	push	r24
    45c6:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    45ca:	0f 90       	pop	r0
    45cc:	0f 90       	pop	r0
    45ce:	0f 90       	pop	r0
    45d0:	0f 90       	pop	r0
    45d2:	0f 90       	pop	r0
    45d4:	0f 90       	pop	r0
					vDisplayWriteStringAtPos(2,10, "3: Reset");
    45d6:	84 ec       	ldi	r24, 0xC4	; 196
    45d8:	90 e2       	ldi	r25, 0x20	; 32
    45da:	89 2f       	mov	r24, r25
    45dc:	8f 93       	push	r24
    45de:	84 ec       	ldi	r24, 0xC4	; 196
    45e0:	90 e2       	ldi	r25, 0x20	; 32
    45e2:	8f 93       	push	r24
    45e4:	1f 92       	push	r1
    45e6:	8a e0       	ldi	r24, 0x0A	; 10
    45e8:	8f 93       	push	r24
    45ea:	1f 92       	push	r1
    45ec:	82 e0       	ldi	r24, 0x02	; 2
    45ee:	8f 93       	push	r24
    45f0:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    45f4:	0f 90       	pop	r0
    45f6:	0f 90       	pop	r0
    45f8:	0f 90       	pop	r0
    45fa:	0f 90       	pop	r0
    45fc:	0f 90       	pop	r0
    45fe:	0f 90       	pop	r0
					vDisplayWriteStringAtPos(3,0, "4: ~ Nilakantha");
    4600:	8d ec       	ldi	r24, 0xCD	; 205
    4602:	90 e2       	ldi	r25, 0x20	; 32
    4604:	89 2f       	mov	r24, r25
    4606:	8f 93       	push	r24
    4608:	8d ec       	ldi	r24, 0xCD	; 205
    460a:	90 e2       	ldi	r25, 0x20	; 32
    460c:	8f 93       	push	r24
    460e:	1f 92       	push	r1
    4610:	1f 92       	push	r1
    4612:	1f 92       	push	r1
    4614:	83 e0       	ldi	r24, 0x03	; 3
    4616:	8f 93       	push	r24
    4618:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    461c:	0f 90       	pop	r0
    461e:	0f 90       	pop	r0
    4620:	0f 90       	pop	r0
    4622:	0f 90       	pop	r0
    4624:	0f 90       	pop	r0
    4626:	0f 90       	pop	r0
				}
				if (Bits == EV_START_LEIBNIZ){
    4628:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    462c:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    4630:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    4634:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    4638:	01 97       	sbiw	r24, 0x01	; 1
    463a:	a1 05       	cpc	r26, r1
    463c:	b1 05       	cpc	r27, r1
    463e:	09 f0       	breq	.+2      	; 0x4642 <vUserInterface+0x338>
    4640:	d7 c0       	rjmp	.+430    	; 0x47f0 <vUserInterface+0x4e6>
					vDisplayWriteStringAtPos(1,0, "1: Start");
    4642:	83 eb       	ldi	r24, 0xB3	; 179
    4644:	90 e2       	ldi	r25, 0x20	; 32
    4646:	89 2f       	mov	r24, r25
    4648:	8f 93       	push	r24
    464a:	83 eb       	ldi	r24, 0xB3	; 179
    464c:	90 e2       	ldi	r25, 0x20	; 32
    464e:	8f 93       	push	r24
    4650:	1f 92       	push	r1
    4652:	1f 92       	push	r1
    4654:	1f 92       	push	r1
    4656:	81 e0       	ldi	r24, 0x01	; 1
    4658:	8f 93       	push	r24
    465a:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    465e:	0f 90       	pop	r0
    4660:	0f 90       	pop	r0
    4662:	0f 90       	pop	r0
    4664:	0f 90       	pop	r0
    4666:	0f 90       	pop	r0
    4668:	0f 90       	pop	r0
					vDisplayWriteStringAtPos(2,0, "2: Stop");
    466a:	8c eb       	ldi	r24, 0xBC	; 188
    466c:	90 e2       	ldi	r25, 0x20	; 32
    466e:	89 2f       	mov	r24, r25
    4670:	8f 93       	push	r24
    4672:	8c eb       	ldi	r24, 0xBC	; 188
    4674:	90 e2       	ldi	r25, 0x20	; 32
    4676:	8f 93       	push	r24
    4678:	1f 92       	push	r1
    467a:	1f 92       	push	r1
    467c:	1f 92       	push	r1
    467e:	82 e0       	ldi	r24, 0x02	; 2
    4680:	8f 93       	push	r24
    4682:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    4686:	0f 90       	pop	r0
    4688:	0f 90       	pop	r0
    468a:	0f 90       	pop	r0
    468c:	0f 90       	pop	r0
    468e:	0f 90       	pop	r0
    4690:	0f 90       	pop	r0
					vDisplayWriteStringAtPos(2,10, "3: Reset");
    4692:	84 ec       	ldi	r24, 0xC4	; 196
    4694:	90 e2       	ldi	r25, 0x20	; 32
    4696:	89 2f       	mov	r24, r25
    4698:	8f 93       	push	r24
    469a:	84 ec       	ldi	r24, 0xC4	; 196
    469c:	90 e2       	ldi	r25, 0x20	; 32
    469e:	8f 93       	push	r24
    46a0:	1f 92       	push	r1
    46a2:	8a e0       	ldi	r24, 0x0A	; 10
    46a4:	8f 93       	push	r24
    46a6:	1f 92       	push	r1
    46a8:	82 e0       	ldi	r24, 0x02	; 2
    46aa:	8f 93       	push	r24
    46ac:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    46b0:	0f 90       	pop	r0
    46b2:	0f 90       	pop	r0
    46b4:	0f 90       	pop	r0
    46b6:	0f 90       	pop	r0
    46b8:	0f 90       	pop	r0
    46ba:	0f 90       	pop	r0
					vDisplayWriteStringAtPos(3,0, "4: ~ Nilakantha");
    46bc:	8d ec       	ldi	r24, 0xCD	; 205
    46be:	90 e2       	ldi	r25, 0x20	; 32
    46c0:	89 2f       	mov	r24, r25
    46c2:	8f 93       	push	r24
    46c4:	8d ec       	ldi	r24, 0xCD	; 205
    46c6:	90 e2       	ldi	r25, 0x20	; 32
    46c8:	8f 93       	push	r24
    46ca:	1f 92       	push	r1
    46cc:	1f 92       	push	r1
    46ce:	1f 92       	push	r1
    46d0:	83 e0       	ldi	r24, 0x03	; 3
    46d2:	8f 93       	push	r24
    46d4:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    46d8:	0f 90       	pop	r0
    46da:	0f 90       	pop	r0
    46dc:	0f 90       	pop	r0
    46de:	0f 90       	pop	r0
    46e0:	0f 90       	pop	r0
    46e2:	0f 90       	pop	r0
					xEventGroupSetBits(evREADWRITE,EV_WRITE_IN_LEIBNIZSTRING);
    46e4:	80 91 68 35 	lds	r24, 0x3568	; 0x803568 <evREADWRITE>
    46e8:	90 91 69 35 	lds	r25, 0x3569	; 0x803569 <evREADWRITE+0x1>
    46ec:	41 e0       	ldi	r20, 0x01	; 1
    46ee:	50 e0       	ldi	r21, 0x00	; 0
    46f0:	60 e0       	ldi	r22, 0x00	; 0
    46f2:	70 e0       	ldi	r23, 0x00	; 0
    46f4:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
					checkEvent = xEventGroupGetBits(evREADWRITE);
    46f8:	80 91 68 35 	lds	r24, 0x3568	; 0x803568 <evREADWRITE>
    46fc:	90 91 69 35 	lds	r25, 0x3569	; 0x803569 <evREADWRITE+0x1>
    4700:	40 e0       	ldi	r20, 0x00	; 0
    4702:	50 e0       	ldi	r21, 0x00	; 0
    4704:	ba 01       	movw	r22, r20
    4706:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    470a:	dc 01       	movw	r26, r24
    470c:	cb 01       	movw	r24, r22
    470e:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <checkEvent>
    4712:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <checkEvent+0x1>
					xEventGroupWaitBits(evREADWRITE,EV_READ_FROM_LEIBNIZSTRING,pdTRUE,pdTRUE,portMAX_DELAY);
    4716:	80 91 68 35 	lds	r24, 0x3568	; 0x803568 <evREADWRITE>
    471a:	90 91 69 35 	lds	r25, 0x3569	; 0x803569 <evREADWRITE+0x1>
    471e:	cc 24       	eor	r12, r12
    4720:	ca 94       	dec	r12
    4722:	dc 2c       	mov	r13, r12
    4724:	76 01       	movw	r14, r12
    4726:	01 e0       	ldi	r16, 0x01	; 1
    4728:	21 e0       	ldi	r18, 0x01	; 1
    472a:	4f ef       	ldi	r20, 0xFF	; 255
    472c:	50 e0       	ldi	r21, 0x00	; 0
    472e:	60 e0       	ldi	r22, 0x00	; 0
    4730:	70 e0       	ldi	r23, 0x00	; 0
    4732:	0e 94 7f 04 	call	0x8fe	; 0x8fe <xEventGroupWaitBits>
					checkEvent = xEventGroupGetBits(evREADWRITE);
    4736:	80 91 68 35 	lds	r24, 0x3568	; 0x803568 <evREADWRITE>
    473a:	90 91 69 35 	lds	r25, 0x3569	; 0x803569 <evREADWRITE+0x1>
    473e:	40 e0       	ldi	r20, 0x00	; 0
    4740:	50 e0       	ldi	r21, 0x00	; 0
    4742:	ba 01       	movw	r22, r20
    4744:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    4748:	dc 01       	movw	r26, r24
    474a:	cb 01       	movw	r24, r22
    474c:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <checkEvent>
    4750:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <checkEvent+0x1>
					vDisplayWriteStringAtPos(0,0, "%s", LeibnizPiString);
    4754:	8f e9       	ldi	r24, 0x9F	; 159
    4756:	95 e3       	ldi	r25, 0x35	; 53
    4758:	89 2f       	mov	r24, r25
    475a:	8f 93       	push	r24
    475c:	8f e9       	ldi	r24, 0x9F	; 159
    475e:	95 e3       	ldi	r25, 0x35	; 53
    4760:	8f 93       	push	r24
    4762:	88 ea       	ldi	r24, 0xA8	; 168
    4764:	90 e2       	ldi	r25, 0x20	; 32
    4766:	89 2f       	mov	r24, r25
    4768:	8f 93       	push	r24
    476a:	88 ea       	ldi	r24, 0xA8	; 168
    476c:	90 e2       	ldi	r25, 0x20	; 32
    476e:	8f 93       	push	r24
    4770:	1f 92       	push	r1
    4772:	1f 92       	push	r1
    4774:	1f 92       	push	r1
    4776:	1f 92       	push	r1
    4778:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    477c:	8d b7       	in	r24, 0x3d	; 61
    477e:	9e b7       	in	r25, 0x3e	; 62
    4780:	08 96       	adiw	r24, 0x08	; 8
    4782:	cd bf       	out	0x3d, r28	; 61
    4784:	de bf       	out	0x3e, r29	; 62
					vDisplayWriteStringAtPos(0,16, "%s", LeibnizTimeString);
    4786:	83 e6       	ldi	r24, 0x63	; 99
    4788:	95 e3       	ldi	r25, 0x35	; 53
    478a:	89 2f       	mov	r24, r25
    478c:	8f 93       	push	r24
    478e:	83 e6       	ldi	r24, 0x63	; 99
    4790:	95 e3       	ldi	r25, 0x35	; 53
    4792:	8f 93       	push	r24
    4794:	88 ea       	ldi	r24, 0xA8	; 168
    4796:	90 e2       	ldi	r25, 0x20	; 32
    4798:	89 2f       	mov	r24, r25
    479a:	8f 93       	push	r24
    479c:	88 ea       	ldi	r24, 0xA8	; 168
    479e:	90 e2       	ldi	r25, 0x20	; 32
    47a0:	8f 93       	push	r24
    47a2:	1f 92       	push	r1
    47a4:	80 e1       	ldi	r24, 0x10	; 16
    47a6:	8f 93       	push	r24
    47a8:	1f 92       	push	r1
    47aa:	1f 92       	push	r1
    47ac:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    47b0:	8d b7       	in	r24, 0x3d	; 61
    47b2:	9e b7       	in	r25, 0x3e	; 62
    47b4:	08 96       	adiw	r24, 0x08	; 8
    47b6:	cd bf       	out	0x3d, r28	; 61
    47b8:	de bf       	out	0x3e, r29	; 62
					vDisplayWriteStringAtPos(1,9, "%s", LeibnizExactTime);
    47ba:	8c e8       	ldi	r24, 0x8C	; 140
    47bc:	95 e3       	ldi	r25, 0x35	; 53
    47be:	89 2f       	mov	r24, r25
    47c0:	8f 93       	push	r24
    47c2:	8c e8       	ldi	r24, 0x8C	; 140
    47c4:	95 e3       	ldi	r25, 0x35	; 53
    47c6:	8f 93       	push	r24
    47c8:	88 ea       	ldi	r24, 0xA8	; 168
    47ca:	90 e2       	ldi	r25, 0x20	; 32
    47cc:	89 2f       	mov	r24, r25
    47ce:	8f 93       	push	r24
    47d0:	88 ea       	ldi	r24, 0xA8	; 168
    47d2:	90 e2       	ldi	r25, 0x20	; 32
    47d4:	8f 93       	push	r24
    47d6:	1f 92       	push	r1
    47d8:	89 e0       	ldi	r24, 0x09	; 9
    47da:	8f 93       	push	r24
    47dc:	1f 92       	push	r1
    47de:	81 e0       	ldi	r24, 0x01	; 1
    47e0:	8f 93       	push	r24
    47e2:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    47e6:	8d b7       	in	r24, 0x3d	; 61
    47e8:	9e b7       	in	r25, 0x3e	; 62
    47ea:	08 96       	adiw	r24, 0x08	; 8
    47ec:	cd bf       	out	0x3d, r28	; 61
    47ee:	de bf       	out	0x3e, r29	; 62
				}
				if ((Bits == EV_STOPPED_LEIBNIZ) | (Bits == EV_STOP_NILA)){
    47f0:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    47f4:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    47f8:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    47fc:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    4800:	31 e0       	ldi	r19, 0x01	; 1
    4802:	40 97       	sbiw	r24, 0x10	; 16
    4804:	a1 05       	cpc	r26, r1
    4806:	b1 05       	cpc	r27, r1
    4808:	09 f0       	breq	.+2      	; 0x480c <vUserInterface+0x502>
    480a:	30 e0       	ldi	r19, 0x00	; 0
    480c:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    4810:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    4814:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    4818:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    481c:	21 e0       	ldi	r18, 0x01	; 1
    481e:	08 97       	sbiw	r24, 0x08	; 8
    4820:	a1 05       	cpc	r26, r1
    4822:	b1 05       	cpc	r27, r1
    4824:	09 f0       	breq	.+2      	; 0x4828 <vUserInterface+0x51e>
    4826:	20 e0       	ldi	r18, 0x00	; 0
    4828:	83 2f       	mov	r24, r19
    482a:	82 2b       	or	r24, r18
    482c:	88 23       	and	r24, r24
    482e:	09 f4       	brne	.+2      	; 0x4832 <vUserInterface+0x528>
    4830:	9f c0       	rjmp	.+318    	; 0x4970 <vUserInterface+0x666>
					vDisplayWriteStringAtPos(1,0, "1: Start");
    4832:	83 eb       	ldi	r24, 0xB3	; 179
    4834:	90 e2       	ldi	r25, 0x20	; 32
    4836:	89 2f       	mov	r24, r25
    4838:	8f 93       	push	r24
    483a:	83 eb       	ldi	r24, 0xB3	; 179
    483c:	90 e2       	ldi	r25, 0x20	; 32
    483e:	8f 93       	push	r24
    4840:	1f 92       	push	r1
    4842:	1f 92       	push	r1
    4844:	1f 92       	push	r1
    4846:	81 e0       	ldi	r24, 0x01	; 1
    4848:	8f 93       	push	r24
    484a:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    484e:	0f 90       	pop	r0
    4850:	0f 90       	pop	r0
    4852:	0f 90       	pop	r0
    4854:	0f 90       	pop	r0
    4856:	0f 90       	pop	r0
    4858:	0f 90       	pop	r0
					vDisplayWriteStringAtPos(2,0, "2: Stop");
    485a:	8c eb       	ldi	r24, 0xBC	; 188
    485c:	90 e2       	ldi	r25, 0x20	; 32
    485e:	89 2f       	mov	r24, r25
    4860:	8f 93       	push	r24
    4862:	8c eb       	ldi	r24, 0xBC	; 188
    4864:	90 e2       	ldi	r25, 0x20	; 32
    4866:	8f 93       	push	r24
    4868:	1f 92       	push	r1
    486a:	1f 92       	push	r1
    486c:	1f 92       	push	r1
    486e:	82 e0       	ldi	r24, 0x02	; 2
    4870:	8f 93       	push	r24
    4872:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    4876:	0f 90       	pop	r0
    4878:	0f 90       	pop	r0
    487a:	0f 90       	pop	r0
    487c:	0f 90       	pop	r0
    487e:	0f 90       	pop	r0
    4880:	0f 90       	pop	r0
					vDisplayWriteStringAtPos(2,10, "3: Reset");
    4882:	84 ec       	ldi	r24, 0xC4	; 196
    4884:	90 e2       	ldi	r25, 0x20	; 32
    4886:	89 2f       	mov	r24, r25
    4888:	8f 93       	push	r24
    488a:	84 ec       	ldi	r24, 0xC4	; 196
    488c:	90 e2       	ldi	r25, 0x20	; 32
    488e:	8f 93       	push	r24
    4890:	1f 92       	push	r1
    4892:	8a e0       	ldi	r24, 0x0A	; 10
    4894:	8f 93       	push	r24
    4896:	1f 92       	push	r1
    4898:	82 e0       	ldi	r24, 0x02	; 2
    489a:	8f 93       	push	r24
    489c:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    48a0:	0f 90       	pop	r0
    48a2:	0f 90       	pop	r0
    48a4:	0f 90       	pop	r0
    48a6:	0f 90       	pop	r0
    48a8:	0f 90       	pop	r0
    48aa:	0f 90       	pop	r0
					vDisplayWriteStringAtPos(3,0, "4: ~ Nilakantha");
    48ac:	8d ec       	ldi	r24, 0xCD	; 205
    48ae:	90 e2       	ldi	r25, 0x20	; 32
    48b0:	89 2f       	mov	r24, r25
    48b2:	8f 93       	push	r24
    48b4:	8d ec       	ldi	r24, 0xCD	; 205
    48b6:	90 e2       	ldi	r25, 0x20	; 32
    48b8:	8f 93       	push	r24
    48ba:	1f 92       	push	r1
    48bc:	1f 92       	push	r1
    48be:	1f 92       	push	r1
    48c0:	83 e0       	ldi	r24, 0x03	; 3
    48c2:	8f 93       	push	r24
    48c4:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    48c8:	0f 90       	pop	r0
    48ca:	0f 90       	pop	r0
    48cc:	0f 90       	pop	r0
    48ce:	0f 90       	pop	r0
    48d0:	0f 90       	pop	r0
    48d2:	0f 90       	pop	r0
					vDisplayWriteStringAtPos(0,0, "%s", LeibnizPiString);
    48d4:	8f e9       	ldi	r24, 0x9F	; 159
    48d6:	95 e3       	ldi	r25, 0x35	; 53
    48d8:	89 2f       	mov	r24, r25
    48da:	8f 93       	push	r24
    48dc:	8f e9       	ldi	r24, 0x9F	; 159
    48de:	95 e3       	ldi	r25, 0x35	; 53
    48e0:	8f 93       	push	r24
    48e2:	88 ea       	ldi	r24, 0xA8	; 168
    48e4:	90 e2       	ldi	r25, 0x20	; 32
    48e6:	89 2f       	mov	r24, r25
    48e8:	8f 93       	push	r24
    48ea:	88 ea       	ldi	r24, 0xA8	; 168
    48ec:	90 e2       	ldi	r25, 0x20	; 32
    48ee:	8f 93       	push	r24
    48f0:	1f 92       	push	r1
    48f2:	1f 92       	push	r1
    48f4:	1f 92       	push	r1
    48f6:	1f 92       	push	r1
    48f8:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    48fc:	8d b7       	in	r24, 0x3d	; 61
    48fe:	9e b7       	in	r25, 0x3e	; 62
    4900:	08 96       	adiw	r24, 0x08	; 8
    4902:	cd bf       	out	0x3d, r28	; 61
    4904:	de bf       	out	0x3e, r29	; 62
					vDisplayWriteStringAtPos(0,16, "%s", LeibnizTimeString);
    4906:	83 e6       	ldi	r24, 0x63	; 99
    4908:	95 e3       	ldi	r25, 0x35	; 53
    490a:	89 2f       	mov	r24, r25
    490c:	8f 93       	push	r24
    490e:	83 e6       	ldi	r24, 0x63	; 99
    4910:	95 e3       	ldi	r25, 0x35	; 53
    4912:	8f 93       	push	r24
    4914:	88 ea       	ldi	r24, 0xA8	; 168
    4916:	90 e2       	ldi	r25, 0x20	; 32
    4918:	89 2f       	mov	r24, r25
    491a:	8f 93       	push	r24
    491c:	88 ea       	ldi	r24, 0xA8	; 168
    491e:	90 e2       	ldi	r25, 0x20	; 32
    4920:	8f 93       	push	r24
    4922:	1f 92       	push	r1
    4924:	80 e1       	ldi	r24, 0x10	; 16
    4926:	8f 93       	push	r24
    4928:	1f 92       	push	r1
    492a:	1f 92       	push	r1
    492c:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    4930:	8d b7       	in	r24, 0x3d	; 61
    4932:	9e b7       	in	r25, 0x3e	; 62
    4934:	08 96       	adiw	r24, 0x08	; 8
    4936:	cd bf       	out	0x3d, r28	; 61
    4938:	de bf       	out	0x3e, r29	; 62
					vDisplayWriteStringAtPos(1,9, "%s", LeibnizExactTime);
    493a:	8c e8       	ldi	r24, 0x8C	; 140
    493c:	95 e3       	ldi	r25, 0x35	; 53
    493e:	89 2f       	mov	r24, r25
    4940:	8f 93       	push	r24
    4942:	8c e8       	ldi	r24, 0x8C	; 140
    4944:	95 e3       	ldi	r25, 0x35	; 53
    4946:	8f 93       	push	r24
    4948:	88 ea       	ldi	r24, 0xA8	; 168
    494a:	90 e2       	ldi	r25, 0x20	; 32
    494c:	89 2f       	mov	r24, r25
    494e:	8f 93       	push	r24
    4950:	88 ea       	ldi	r24, 0xA8	; 168
    4952:	90 e2       	ldi	r25, 0x20	; 32
    4954:	8f 93       	push	r24
    4956:	1f 92       	push	r1
    4958:	89 e0       	ldi	r24, 0x09	; 9
    495a:	8f 93       	push	r24
    495c:	1f 92       	push	r1
    495e:	81 e0       	ldi	r24, 0x01	; 1
    4960:	8f 93       	push	r24
    4962:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    4966:	8d b7       	in	r24, 0x3d	; 61
    4968:	9e b7       	in	r25, 0x3e	; 62
    496a:	08 96       	adiw	r24, 0x08	; 8
    496c:	cd bf       	out	0x3d, r28	; 61
    496e:	de bf       	out	0x3e, r29	; 62
				}
			}
			if(Menu == Menu_Nilakantha){	//Nilakantha's Pi screen
    4970:	80 91 34 35 	lds	r24, 0x3534	; 0x803534 <Menu>
    4974:	90 91 35 35 	lds	r25, 0x3535	; 0x803535 <Menu+0x1>
    4978:	03 97       	sbiw	r24, 0x03	; 3
    497a:	09 f0       	breq	.+2      	; 0x497e <vUserInterface+0x674>
    497c:	2e c2       	rjmp	.+1116   	; 0x4dda <vUserInterface+0xad0>
				if ((Bits == 0) | (Bits != EV_START_NILA) | (Bits != EV_STOPPED_NILA)){
    497e:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    4982:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    4986:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    498a:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    498e:	31 e0       	ldi	r19, 0x01	; 1
    4990:	89 2b       	or	r24, r25
    4992:	8a 2b       	or	r24, r26
    4994:	8b 2b       	or	r24, r27
    4996:	09 f0       	breq	.+2      	; 0x499a <vUserInterface+0x690>
    4998:	30 e0       	ldi	r19, 0x00	; 0
    499a:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    499e:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    49a2:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    49a6:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    49aa:	21 e0       	ldi	r18, 0x01	; 1
    49ac:	04 97       	sbiw	r24, 0x04	; 4
    49ae:	a1 05       	cpc	r26, r1
    49b0:	b1 05       	cpc	r27, r1
    49b2:	09 f4       	brne	.+2      	; 0x49b6 <vUserInterface+0x6ac>
    49b4:	20 e0       	ldi	r18, 0x00	; 0
    49b6:	83 2f       	mov	r24, r19
    49b8:	82 2b       	or	r24, r18
    49ba:	28 2f       	mov	r18, r24
    49bc:	30 e0       	ldi	r19, 0x00	; 0
    49be:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    49c2:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    49c6:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    49ca:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    49ce:	41 e0       	ldi	r20, 0x01	; 1
    49d0:	80 97       	sbiw	r24, 0x20	; 32
    49d2:	a1 05       	cpc	r26, r1
    49d4:	b1 05       	cpc	r27, r1
    49d6:	09 f4       	brne	.+2      	; 0x49da <vUserInterface+0x6d0>
    49d8:	40 e0       	ldi	r20, 0x00	; 0
    49da:	84 2f       	mov	r24, r20
    49dc:	90 e0       	ldi	r25, 0x00	; 0
    49de:	82 2b       	or	r24, r18
    49e0:	93 2b       	or	r25, r19
    49e2:	89 2b       	or	r24, r25
    49e4:	09 f4       	brne	.+2      	; 0x49e8 <vUserInterface+0x6de>
    49e6:	53 c0       	rjmp	.+166    	; 0x4a8e <vUserInterface+0x784>
					vDisplayClear();
    49e8:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <vDisplayClear>
					vDisplayWriteStringAtPos(1,0, "1: Start");
    49ec:	83 eb       	ldi	r24, 0xB3	; 179
    49ee:	90 e2       	ldi	r25, 0x20	; 32
    49f0:	89 2f       	mov	r24, r25
    49f2:	8f 93       	push	r24
    49f4:	83 eb       	ldi	r24, 0xB3	; 179
    49f6:	90 e2       	ldi	r25, 0x20	; 32
    49f8:	8f 93       	push	r24
    49fa:	1f 92       	push	r1
    49fc:	1f 92       	push	r1
    49fe:	1f 92       	push	r1
    4a00:	81 e0       	ldi	r24, 0x01	; 1
    4a02:	8f 93       	push	r24
    4a04:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    4a08:	0f 90       	pop	r0
    4a0a:	0f 90       	pop	r0
    4a0c:	0f 90       	pop	r0
    4a0e:	0f 90       	pop	r0
    4a10:	0f 90       	pop	r0
    4a12:	0f 90       	pop	r0
					vDisplayWriteStringAtPos(2,0, "2: Stop");
    4a14:	8c eb       	ldi	r24, 0xBC	; 188
    4a16:	90 e2       	ldi	r25, 0x20	; 32
    4a18:	89 2f       	mov	r24, r25
    4a1a:	8f 93       	push	r24
    4a1c:	8c eb       	ldi	r24, 0xBC	; 188
    4a1e:	90 e2       	ldi	r25, 0x20	; 32
    4a20:	8f 93       	push	r24
    4a22:	1f 92       	push	r1
    4a24:	1f 92       	push	r1
    4a26:	1f 92       	push	r1
    4a28:	82 e0       	ldi	r24, 0x02	; 2
    4a2a:	8f 93       	push	r24
    4a2c:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    4a30:	0f 90       	pop	r0
    4a32:	0f 90       	pop	r0
    4a34:	0f 90       	pop	r0
    4a36:	0f 90       	pop	r0
    4a38:	0f 90       	pop	r0
    4a3a:	0f 90       	pop	r0
					vDisplayWriteStringAtPos(2,10, "3: Reset");
    4a3c:	84 ec       	ldi	r24, 0xC4	; 196
    4a3e:	90 e2       	ldi	r25, 0x20	; 32
    4a40:	89 2f       	mov	r24, r25
    4a42:	8f 93       	push	r24
    4a44:	84 ec       	ldi	r24, 0xC4	; 196
    4a46:	90 e2       	ldi	r25, 0x20	; 32
    4a48:	8f 93       	push	r24
    4a4a:	1f 92       	push	r1
    4a4c:	8a e0       	ldi	r24, 0x0A	; 10
    4a4e:	8f 93       	push	r24
    4a50:	1f 92       	push	r1
    4a52:	82 e0       	ldi	r24, 0x02	; 2
    4a54:	8f 93       	push	r24
    4a56:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    4a5a:	0f 90       	pop	r0
    4a5c:	0f 90       	pop	r0
    4a5e:	0f 90       	pop	r0
    4a60:	0f 90       	pop	r0
    4a62:	0f 90       	pop	r0
    4a64:	0f 90       	pop	r0
					vDisplayWriteStringAtPos(3,0, "4: ~ Leibniz");
    4a66:	8d ed       	ldi	r24, 0xDD	; 221
    4a68:	90 e2       	ldi	r25, 0x20	; 32
    4a6a:	89 2f       	mov	r24, r25
    4a6c:	8f 93       	push	r24
    4a6e:	8d ed       	ldi	r24, 0xDD	; 221
    4a70:	90 e2       	ldi	r25, 0x20	; 32
    4a72:	8f 93       	push	r24
    4a74:	1f 92       	push	r1
    4a76:	1f 92       	push	r1
    4a78:	1f 92       	push	r1
    4a7a:	83 e0       	ldi	r24, 0x03	; 3
    4a7c:	8f 93       	push	r24
    4a7e:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    4a82:	0f 90       	pop	r0
    4a84:	0f 90       	pop	r0
    4a86:	0f 90       	pop	r0
    4a88:	0f 90       	pop	r0
    4a8a:	0f 90       	pop	r0
    4a8c:	0f 90       	pop	r0
				}
				if (Bits == EV_START_NILA){
    4a8e:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    4a92:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    4a96:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    4a9a:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    4a9e:	04 97       	sbiw	r24, 0x04	; 4
    4aa0:	a1 05       	cpc	r26, r1
    4aa2:	b1 05       	cpc	r27, r1
    4aa4:	09 f0       	breq	.+2      	; 0x4aa8 <vUserInterface+0x79e>
    4aa6:	d9 c0       	rjmp	.+434    	; 0x4c5a <vUserInterface+0x950>
					vDisplayWriteStringAtPos(1,0, "1: Start");
    4aa8:	83 eb       	ldi	r24, 0xB3	; 179
    4aaa:	90 e2       	ldi	r25, 0x20	; 32
    4aac:	89 2f       	mov	r24, r25
    4aae:	8f 93       	push	r24
    4ab0:	83 eb       	ldi	r24, 0xB3	; 179
    4ab2:	90 e2       	ldi	r25, 0x20	; 32
    4ab4:	8f 93       	push	r24
    4ab6:	1f 92       	push	r1
    4ab8:	1f 92       	push	r1
    4aba:	1f 92       	push	r1
    4abc:	81 e0       	ldi	r24, 0x01	; 1
    4abe:	8f 93       	push	r24
    4ac0:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    4ac4:	0f 90       	pop	r0
    4ac6:	0f 90       	pop	r0
    4ac8:	0f 90       	pop	r0
    4aca:	0f 90       	pop	r0
    4acc:	0f 90       	pop	r0
    4ace:	0f 90       	pop	r0
					vDisplayWriteStringAtPos(2,0, "2: Stop");
    4ad0:	8c eb       	ldi	r24, 0xBC	; 188
    4ad2:	90 e2       	ldi	r25, 0x20	; 32
    4ad4:	89 2f       	mov	r24, r25
    4ad6:	8f 93       	push	r24
    4ad8:	8c eb       	ldi	r24, 0xBC	; 188
    4ada:	90 e2       	ldi	r25, 0x20	; 32
    4adc:	8f 93       	push	r24
    4ade:	1f 92       	push	r1
    4ae0:	1f 92       	push	r1
    4ae2:	1f 92       	push	r1
    4ae4:	82 e0       	ldi	r24, 0x02	; 2
    4ae6:	8f 93       	push	r24
    4ae8:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    4aec:	0f 90       	pop	r0
    4aee:	0f 90       	pop	r0
    4af0:	0f 90       	pop	r0
    4af2:	0f 90       	pop	r0
    4af4:	0f 90       	pop	r0
    4af6:	0f 90       	pop	r0
					vDisplayWriteStringAtPos(2,10, "3: Reset");
    4af8:	84 ec       	ldi	r24, 0xC4	; 196
    4afa:	90 e2       	ldi	r25, 0x20	; 32
    4afc:	89 2f       	mov	r24, r25
    4afe:	8f 93       	push	r24
    4b00:	84 ec       	ldi	r24, 0xC4	; 196
    4b02:	90 e2       	ldi	r25, 0x20	; 32
    4b04:	8f 93       	push	r24
    4b06:	1f 92       	push	r1
    4b08:	8a e0       	ldi	r24, 0x0A	; 10
    4b0a:	8f 93       	push	r24
    4b0c:	1f 92       	push	r1
    4b0e:	82 e0       	ldi	r24, 0x02	; 2
    4b10:	8f 93       	push	r24
    4b12:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    4b16:	0f 90       	pop	r0
    4b18:	0f 90       	pop	r0
    4b1a:	0f 90       	pop	r0
    4b1c:	0f 90       	pop	r0
    4b1e:	0f 90       	pop	r0
    4b20:	0f 90       	pop	r0
					vDisplayWriteStringAtPos(3,0, "4: ~ Leibniz");
    4b22:	8d ed       	ldi	r24, 0xDD	; 221
    4b24:	90 e2       	ldi	r25, 0x20	; 32
    4b26:	89 2f       	mov	r24, r25
    4b28:	8f 93       	push	r24
    4b2a:	8d ed       	ldi	r24, 0xDD	; 221
    4b2c:	90 e2       	ldi	r25, 0x20	; 32
    4b2e:	8f 93       	push	r24
    4b30:	1f 92       	push	r1
    4b32:	1f 92       	push	r1
    4b34:	1f 92       	push	r1
    4b36:	83 e0       	ldi	r24, 0x03	; 3
    4b38:	8f 93       	push	r24
    4b3a:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    4b3e:	0f 90       	pop	r0
    4b40:	0f 90       	pop	r0
    4b42:	0f 90       	pop	r0
    4b44:	0f 90       	pop	r0
    4b46:	0f 90       	pop	r0
    4b48:	0f 90       	pop	r0
					xEventGroupSetBits(evREADWRITE,EV_WRITE_IN_NILASTRING);
    4b4a:	80 91 68 35 	lds	r24, 0x3568	; 0x803568 <evREADWRITE>
    4b4e:	90 91 69 35 	lds	r25, 0x3569	; 0x803569 <evREADWRITE+0x1>
    4b52:	42 e0       	ldi	r20, 0x02	; 2
    4b54:	50 e0       	ldi	r21, 0x00	; 0
    4b56:	60 e0       	ldi	r22, 0x00	; 0
    4b58:	70 e0       	ldi	r23, 0x00	; 0
    4b5a:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
					checkEvent = xEventGroupGetBits(evREADWRITE);
    4b5e:	80 91 68 35 	lds	r24, 0x3568	; 0x803568 <evREADWRITE>
    4b62:	90 91 69 35 	lds	r25, 0x3569	; 0x803569 <evREADWRITE+0x1>
    4b66:	40 e0       	ldi	r20, 0x00	; 0
    4b68:	50 e0       	ldi	r21, 0x00	; 0
    4b6a:	ba 01       	movw	r22, r20
    4b6c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    4b70:	dc 01       	movw	r26, r24
    4b72:	cb 01       	movw	r24, r22
    4b74:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <checkEvent>
    4b78:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <checkEvent+0x1>
					xEventGroupWaitBits(evREADWRITE,EV_READ_FROM_NILASTRING,pdTRUE,pdTRUE,portMAX_DELAY);
    4b7c:	80 91 68 35 	lds	r24, 0x3568	; 0x803568 <evREADWRITE>
    4b80:	90 91 69 35 	lds	r25, 0x3569	; 0x803569 <evREADWRITE+0x1>
    4b84:	cc 24       	eor	r12, r12
    4b86:	ca 94       	dec	r12
    4b88:	dc 2c       	mov	r13, r12
    4b8a:	76 01       	movw	r14, r12
    4b8c:	01 e0       	ldi	r16, 0x01	; 1
    4b8e:	21 e0       	ldi	r18, 0x01	; 1
    4b90:	4f ef       	ldi	r20, 0xFF	; 255
    4b92:	50 e0       	ldi	r21, 0x00	; 0
    4b94:	60 e0       	ldi	r22, 0x00	; 0
    4b96:	70 e0       	ldi	r23, 0x00	; 0
    4b98:	0e 94 7f 04 	call	0x8fe	; 0x8fe <xEventGroupWaitBits>
					checkEvent = xEventGroupGetBits(evREADWRITE);
    4b9c:	80 91 68 35 	lds	r24, 0x3568	; 0x803568 <evREADWRITE>
    4ba0:	90 91 69 35 	lds	r25, 0x3569	; 0x803569 <evREADWRITE+0x1>
    4ba4:	40 e0       	ldi	r20, 0x00	; 0
    4ba6:	50 e0       	ldi	r21, 0x00	; 0
    4ba8:	ba 01       	movw	r22, r20
    4baa:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    4bae:	dc 01       	movw	r26, r24
    4bb0:	cb 01       	movw	r24, r22
    4bb2:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <checkEvent>
    4bb6:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <checkEvent+0x1>
					vDisplayClear();
    4bba:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <vDisplayClear>
					vDisplayWriteStringAtPos(0,0, "%s", NilakanthaPiString);
    4bbe:	8c e7       	ldi	r24, 0x7C	; 124
    4bc0:	95 e3       	ldi	r25, 0x35	; 53
    4bc2:	89 2f       	mov	r24, r25
    4bc4:	8f 93       	push	r24
    4bc6:	8c e7       	ldi	r24, 0x7C	; 124
    4bc8:	95 e3       	ldi	r25, 0x35	; 53
    4bca:	8f 93       	push	r24
    4bcc:	88 ea       	ldi	r24, 0xA8	; 168
    4bce:	90 e2       	ldi	r25, 0x20	; 32
    4bd0:	89 2f       	mov	r24, r25
    4bd2:	8f 93       	push	r24
    4bd4:	88 ea       	ldi	r24, 0xA8	; 168
    4bd6:	90 e2       	ldi	r25, 0x20	; 32
    4bd8:	8f 93       	push	r24
    4bda:	1f 92       	push	r1
    4bdc:	1f 92       	push	r1
    4bde:	1f 92       	push	r1
    4be0:	1f 92       	push	r1
    4be2:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    4be6:	8d b7       	in	r24, 0x3d	; 61
    4be8:	9e b7       	in	r25, 0x3e	; 62
    4bea:	08 96       	adiw	r24, 0x08	; 8
    4bec:	cd bf       	out	0x3d, r28	; 61
    4bee:	de bf       	out	0x3e, r29	; 62
					vDisplayWriteStringAtPos(0,16, "%s", NilakanthaTimeString);
    4bf0:	88 e9       	ldi	r24, 0x98	; 152
    4bf2:	95 e3       	ldi	r25, 0x35	; 53
    4bf4:	89 2f       	mov	r24, r25
    4bf6:	8f 93       	push	r24
    4bf8:	88 e9       	ldi	r24, 0x98	; 152
    4bfa:	95 e3       	ldi	r25, 0x35	; 53
    4bfc:	8f 93       	push	r24
    4bfe:	88 ea       	ldi	r24, 0xA8	; 168
    4c00:	90 e2       	ldi	r25, 0x20	; 32
    4c02:	89 2f       	mov	r24, r25
    4c04:	8f 93       	push	r24
    4c06:	88 ea       	ldi	r24, 0xA8	; 168
    4c08:	90 e2       	ldi	r25, 0x20	; 32
    4c0a:	8f 93       	push	r24
    4c0c:	1f 92       	push	r1
    4c0e:	80 e1       	ldi	r24, 0x10	; 16
    4c10:	8f 93       	push	r24
    4c12:	1f 92       	push	r1
    4c14:	1f 92       	push	r1
    4c16:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    4c1a:	8d b7       	in	r24, 0x3d	; 61
    4c1c:	9e b7       	in	r25, 0x3e	; 62
    4c1e:	08 96       	adiw	r24, 0x08	; 8
    4c20:	cd bf       	out	0x3d, r28	; 61
    4c22:	de bf       	out	0x3e, r29	; 62
					vDisplayWriteStringAtPos(1,9, "%s", NilakanthaExactTime);
    4c24:	8a e6       	ldi	r24, 0x6A	; 106
    4c26:	95 e3       	ldi	r25, 0x35	; 53
    4c28:	89 2f       	mov	r24, r25
    4c2a:	8f 93       	push	r24
    4c2c:	8a e6       	ldi	r24, 0x6A	; 106
    4c2e:	95 e3       	ldi	r25, 0x35	; 53
    4c30:	8f 93       	push	r24
    4c32:	88 ea       	ldi	r24, 0xA8	; 168
    4c34:	90 e2       	ldi	r25, 0x20	; 32
    4c36:	89 2f       	mov	r24, r25
    4c38:	8f 93       	push	r24
    4c3a:	88 ea       	ldi	r24, 0xA8	; 168
    4c3c:	90 e2       	ldi	r25, 0x20	; 32
    4c3e:	8f 93       	push	r24
    4c40:	1f 92       	push	r1
    4c42:	89 e0       	ldi	r24, 0x09	; 9
    4c44:	8f 93       	push	r24
    4c46:	1f 92       	push	r1
    4c48:	81 e0       	ldi	r24, 0x01	; 1
    4c4a:	8f 93       	push	r24
    4c4c:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    4c50:	8d b7       	in	r24, 0x3d	; 61
    4c52:	9e b7       	in	r25, 0x3e	; 62
    4c54:	08 96       	adiw	r24, 0x08	; 8
    4c56:	cd bf       	out	0x3d, r28	; 61
    4c58:	de bf       	out	0x3e, r29	; 62
				}
				if ((Bits == EV_STOPPED_NILA) | (Bits == EV_STOPPED_LEIBNIZ)){
    4c5a:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    4c5e:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    4c62:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    4c66:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    4c6a:	31 e0       	ldi	r19, 0x01	; 1
    4c6c:	80 97       	sbiw	r24, 0x20	; 32
    4c6e:	a1 05       	cpc	r26, r1
    4c70:	b1 05       	cpc	r27, r1
    4c72:	09 f0       	breq	.+2      	; 0x4c76 <vUserInterface+0x96c>
    4c74:	30 e0       	ldi	r19, 0x00	; 0
    4c76:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    4c7a:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    4c7e:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    4c82:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    4c86:	21 e0       	ldi	r18, 0x01	; 1
    4c88:	40 97       	sbiw	r24, 0x10	; 16
    4c8a:	a1 05       	cpc	r26, r1
    4c8c:	b1 05       	cpc	r27, r1
    4c8e:	09 f0       	breq	.+2      	; 0x4c92 <vUserInterface+0x988>
    4c90:	20 e0       	ldi	r18, 0x00	; 0
    4c92:	83 2f       	mov	r24, r19
    4c94:	82 2b       	or	r24, r18
    4c96:	88 23       	and	r24, r24
    4c98:	09 f4       	brne	.+2      	; 0x4c9c <vUserInterface+0x992>
    4c9a:	9f c0       	rjmp	.+318    	; 0x4dda <vUserInterface+0xad0>
					vDisplayWriteStringAtPos(1,0, "1: Start");
    4c9c:	83 eb       	ldi	r24, 0xB3	; 179
    4c9e:	90 e2       	ldi	r25, 0x20	; 32
    4ca0:	89 2f       	mov	r24, r25
    4ca2:	8f 93       	push	r24
    4ca4:	83 eb       	ldi	r24, 0xB3	; 179
    4ca6:	90 e2       	ldi	r25, 0x20	; 32
    4ca8:	8f 93       	push	r24
    4caa:	1f 92       	push	r1
    4cac:	1f 92       	push	r1
    4cae:	1f 92       	push	r1
    4cb0:	81 e0       	ldi	r24, 0x01	; 1
    4cb2:	8f 93       	push	r24
    4cb4:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    4cb8:	0f 90       	pop	r0
    4cba:	0f 90       	pop	r0
    4cbc:	0f 90       	pop	r0
    4cbe:	0f 90       	pop	r0
    4cc0:	0f 90       	pop	r0
    4cc2:	0f 90       	pop	r0
					vDisplayWriteStringAtPos(2,0, "2: Stop");
    4cc4:	8c eb       	ldi	r24, 0xBC	; 188
    4cc6:	90 e2       	ldi	r25, 0x20	; 32
    4cc8:	89 2f       	mov	r24, r25
    4cca:	8f 93       	push	r24
    4ccc:	8c eb       	ldi	r24, 0xBC	; 188
    4cce:	90 e2       	ldi	r25, 0x20	; 32
    4cd0:	8f 93       	push	r24
    4cd2:	1f 92       	push	r1
    4cd4:	1f 92       	push	r1
    4cd6:	1f 92       	push	r1
    4cd8:	82 e0       	ldi	r24, 0x02	; 2
    4cda:	8f 93       	push	r24
    4cdc:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    4ce0:	0f 90       	pop	r0
    4ce2:	0f 90       	pop	r0
    4ce4:	0f 90       	pop	r0
    4ce6:	0f 90       	pop	r0
    4ce8:	0f 90       	pop	r0
    4cea:	0f 90       	pop	r0
					vDisplayWriteStringAtPos(2,10, "3: Reset");
    4cec:	84 ec       	ldi	r24, 0xC4	; 196
    4cee:	90 e2       	ldi	r25, 0x20	; 32
    4cf0:	89 2f       	mov	r24, r25
    4cf2:	8f 93       	push	r24
    4cf4:	84 ec       	ldi	r24, 0xC4	; 196
    4cf6:	90 e2       	ldi	r25, 0x20	; 32
    4cf8:	8f 93       	push	r24
    4cfa:	1f 92       	push	r1
    4cfc:	8a e0       	ldi	r24, 0x0A	; 10
    4cfe:	8f 93       	push	r24
    4d00:	1f 92       	push	r1
    4d02:	82 e0       	ldi	r24, 0x02	; 2
    4d04:	8f 93       	push	r24
    4d06:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    4d0a:	0f 90       	pop	r0
    4d0c:	0f 90       	pop	r0
    4d0e:	0f 90       	pop	r0
    4d10:	0f 90       	pop	r0
    4d12:	0f 90       	pop	r0
    4d14:	0f 90       	pop	r0
					vDisplayWriteStringAtPos(3,0, "4: ~ Leibniz");
    4d16:	8d ed       	ldi	r24, 0xDD	; 221
    4d18:	90 e2       	ldi	r25, 0x20	; 32
    4d1a:	89 2f       	mov	r24, r25
    4d1c:	8f 93       	push	r24
    4d1e:	8d ed       	ldi	r24, 0xDD	; 221
    4d20:	90 e2       	ldi	r25, 0x20	; 32
    4d22:	8f 93       	push	r24
    4d24:	1f 92       	push	r1
    4d26:	1f 92       	push	r1
    4d28:	1f 92       	push	r1
    4d2a:	83 e0       	ldi	r24, 0x03	; 3
    4d2c:	8f 93       	push	r24
    4d2e:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    4d32:	0f 90       	pop	r0
    4d34:	0f 90       	pop	r0
    4d36:	0f 90       	pop	r0
    4d38:	0f 90       	pop	r0
    4d3a:	0f 90       	pop	r0
    4d3c:	0f 90       	pop	r0
					vDisplayWriteStringAtPos(0,0, "%s", NilakanthaPiString);
    4d3e:	8c e7       	ldi	r24, 0x7C	; 124
    4d40:	95 e3       	ldi	r25, 0x35	; 53
    4d42:	89 2f       	mov	r24, r25
    4d44:	8f 93       	push	r24
    4d46:	8c e7       	ldi	r24, 0x7C	; 124
    4d48:	95 e3       	ldi	r25, 0x35	; 53
    4d4a:	8f 93       	push	r24
    4d4c:	88 ea       	ldi	r24, 0xA8	; 168
    4d4e:	90 e2       	ldi	r25, 0x20	; 32
    4d50:	89 2f       	mov	r24, r25
    4d52:	8f 93       	push	r24
    4d54:	88 ea       	ldi	r24, 0xA8	; 168
    4d56:	90 e2       	ldi	r25, 0x20	; 32
    4d58:	8f 93       	push	r24
    4d5a:	1f 92       	push	r1
    4d5c:	1f 92       	push	r1
    4d5e:	1f 92       	push	r1
    4d60:	1f 92       	push	r1
    4d62:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    4d66:	8d b7       	in	r24, 0x3d	; 61
    4d68:	9e b7       	in	r25, 0x3e	; 62
    4d6a:	08 96       	adiw	r24, 0x08	; 8
    4d6c:	cd bf       	out	0x3d, r28	; 61
    4d6e:	de bf       	out	0x3e, r29	; 62
					vDisplayWriteStringAtPos(0,16, "%s", NilakanthaTimeString);
    4d70:	88 e9       	ldi	r24, 0x98	; 152
    4d72:	95 e3       	ldi	r25, 0x35	; 53
    4d74:	89 2f       	mov	r24, r25
    4d76:	8f 93       	push	r24
    4d78:	88 e9       	ldi	r24, 0x98	; 152
    4d7a:	95 e3       	ldi	r25, 0x35	; 53
    4d7c:	8f 93       	push	r24
    4d7e:	88 ea       	ldi	r24, 0xA8	; 168
    4d80:	90 e2       	ldi	r25, 0x20	; 32
    4d82:	89 2f       	mov	r24, r25
    4d84:	8f 93       	push	r24
    4d86:	88 ea       	ldi	r24, 0xA8	; 168
    4d88:	90 e2       	ldi	r25, 0x20	; 32
    4d8a:	8f 93       	push	r24
    4d8c:	1f 92       	push	r1
    4d8e:	80 e1       	ldi	r24, 0x10	; 16
    4d90:	8f 93       	push	r24
    4d92:	1f 92       	push	r1
    4d94:	1f 92       	push	r1
    4d96:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    4d9a:	8d b7       	in	r24, 0x3d	; 61
    4d9c:	9e b7       	in	r25, 0x3e	; 62
    4d9e:	08 96       	adiw	r24, 0x08	; 8
    4da0:	cd bf       	out	0x3d, r28	; 61
    4da2:	de bf       	out	0x3e, r29	; 62
					vDisplayWriteStringAtPos(1,9, "%s", NilakanthaExactTime);
    4da4:	8a e6       	ldi	r24, 0x6A	; 106
    4da6:	95 e3       	ldi	r25, 0x35	; 53
    4da8:	89 2f       	mov	r24, r25
    4daa:	8f 93       	push	r24
    4dac:	8a e6       	ldi	r24, 0x6A	; 106
    4dae:	95 e3       	ldi	r25, 0x35	; 53
    4db0:	8f 93       	push	r24
    4db2:	88 ea       	ldi	r24, 0xA8	; 168
    4db4:	90 e2       	ldi	r25, 0x20	; 32
    4db6:	89 2f       	mov	r24, r25
    4db8:	8f 93       	push	r24
    4dba:	88 ea       	ldi	r24, 0xA8	; 168
    4dbc:	90 e2       	ldi	r25, 0x20	; 32
    4dbe:	8f 93       	push	r24
    4dc0:	1f 92       	push	r1
    4dc2:	89 e0       	ldi	r24, 0x09	; 9
    4dc4:	8f 93       	push	r24
    4dc6:	1f 92       	push	r1
    4dc8:	81 e0       	ldi	r24, 0x01	; 1
    4dca:	8f 93       	push	r24
    4dcc:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <vDisplayWriteStringAtPos>
    4dd0:	8d b7       	in	r24, 0x3d	; 61
    4dd2:	9e b7       	in	r25, 0x3e	; 62
    4dd4:	08 96       	adiw	r24, 0x08	; 8
    4dd6:	cd bf       	out	0x3d, r28	; 61
    4dd8:	de bf       	out	0x3e, r29	; 62
				}
			}
			DisplayUpdateCounter = 50;	//Refreshing Time (50*10ms=500ms)	
    4dda:	82 e3       	ldi	r24, 0x32	; 50
    4ddc:	90 e0       	ldi	r25, 0x00	; 0
    4dde:	a0 e0       	ldi	r26, 0x00	; 0
    4de0:	b0 e0       	ldi	r27, 0x00	; 0
    4de2:	89 83       	std	Y+1, r24	; 0x01
    4de4:	9a 83       	std	Y+2, r25	; 0x02
    4de6:	ab 83       	std	Y+3, r26	; 0x03
    4de8:	bc 83       	std	Y+4, r27	; 0x04
    4dea:	0b c0       	rjmp	.+22     	; 0x4e02 <vUserInterface+0xaf8>
		}
		else{
			DisplayUpdateCounter --;	//Refreshing counter
    4dec:	89 81       	ldd	r24, Y+1	; 0x01
    4dee:	9a 81       	ldd	r25, Y+2	; 0x02
    4df0:	ab 81       	ldd	r26, Y+3	; 0x03
    4df2:	bc 81       	ldd	r27, Y+4	; 0x04
    4df4:	01 97       	sbiw	r24, 0x01	; 1
    4df6:	a1 09       	sbc	r26, r1
    4df8:	b1 09       	sbc	r27, r1
    4dfa:	89 83       	std	Y+1, r24	; 0x01
    4dfc:	9a 83       	std	Y+2, r25	; 0x02
    4dfe:	ab 83       	std	Y+3, r26	; 0x03
    4e00:	bc 83       	std	Y+4, r27	; 0x04
		
		//////////////////////////////////////////////////////////////////////////
		//							Menu selection								//
		//////////////////////////////////////////////////////////////////////////
		
		if (Menu == Menu_Main){
    4e02:	80 91 34 35 	lds	r24, 0x3534	; 0x803534 <Menu>
    4e06:	90 91 35 35 	lds	r25, 0x3535	; 0x803535 <Menu+0x1>
    4e0a:	89 2b       	or	r24, r25
    4e0c:	39 f5       	brne	.+78     	; 0x4e5c <vUserInterface+0xb52>
			switch(ButtonState){
    4e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    4e10:	9e 81       	ldd	r25, Y+6	; 0x06
    4e12:	af 81       	ldd	r26, Y+7	; 0x07
    4e14:	b8 85       	ldd	r27, Y+8	; 0x08
    4e16:	82 30       	cpi	r24, 0x02	; 2
    4e18:	91 05       	cpc	r25, r1
    4e1a:	a1 05       	cpc	r26, r1
    4e1c:	b1 05       	cpc	r27, r1
    4e1e:	81 f0       	breq	.+32     	; 0x4e40 <vUserInterface+0xb36>
    4e20:	84 30       	cpi	r24, 0x04	; 4
    4e22:	91 05       	cpc	r25, r1
    4e24:	a1 05       	cpc	r26, r1
    4e26:	b1 05       	cpc	r27, r1
    4e28:	91 f0       	breq	.+36     	; 0x4e4e <vUserInterface+0xb44>
    4e2a:	01 97       	sbiw	r24, 0x01	; 1
    4e2c:	a1 05       	cpc	r26, r1
    4e2e:	b1 05       	cpc	r27, r1
    4e30:	a9 f4       	brne	.+42     	; 0x4e5c <vUserInterface+0xb52>
				case 1:
					Menu = Menu_Demo;
    4e32:	81 e0       	ldi	r24, 0x01	; 1
    4e34:	90 e0       	ldi	r25, 0x00	; 0
    4e36:	80 93 34 35 	sts	0x3534, r24	; 0x803534 <Menu>
    4e3a:	90 93 35 35 	sts	0x3535, r25	; 0x803535 <Menu+0x1>
				break;
    4e3e:	0e c0       	rjmp	.+28     	; 0x4e5c <vUserInterface+0xb52>
					
				case 2:
					Menu = Menu_Leibniz;
    4e40:	82 e0       	ldi	r24, 0x02	; 2
    4e42:	90 e0       	ldi	r25, 0x00	; 0
    4e44:	80 93 34 35 	sts	0x3534, r24	; 0x803534 <Menu>
    4e48:	90 93 35 35 	sts	0x3535, r25	; 0x803535 <Menu+0x1>
				break;
    4e4c:	07 c0       	rjmp	.+14     	; 0x4e5c <vUserInterface+0xb52>
					
				case 4:
					Menu = Menu_Nilakantha;
    4e4e:	83 e0       	ldi	r24, 0x03	; 3
    4e50:	90 e0       	ldi	r25, 0x00	; 0
    4e52:	80 93 34 35 	sts	0x3534, r24	; 0x803534 <Menu>
    4e56:	90 93 35 35 	sts	0x3535, r25	; 0x803535 <Menu+0x1>
				break;
    4e5a:	00 00       	nop

		//////////////////////////////////////////////////////////////////////////
		//							Pi Demo functions							//
		//////////////////////////////////////////////////////////////////////////
		
		if (Menu == Menu_Demo){
    4e5c:	80 91 34 35 	lds	r24, 0x3534	; 0x803534 <Menu>
    4e60:	90 91 35 35 	lds	r25, 0x3535	; 0x803535 <Menu+0x1>
    4e64:	01 97       	sbiw	r24, 0x01	; 1
    4e66:	61 f4       	brne	.+24     	; 0x4e80 <vUserInterface+0xb76>
			if (ButtonState == 8) {	//Leave Demo - back to Start screen
    4e68:	8d 81       	ldd	r24, Y+5	; 0x05
    4e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    4e6c:	af 81       	ldd	r26, Y+7	; 0x07
    4e6e:	b8 85       	ldd	r27, Y+8	; 0x08
    4e70:	08 97       	sbiw	r24, 0x08	; 8
    4e72:	a1 05       	cpc	r26, r1
    4e74:	b1 05       	cpc	r27, r1
    4e76:	21 f4       	brne	.+8      	; 0x4e80 <vUserInterface+0xb76>
					Menu = Menu_Main;
    4e78:	10 92 34 35 	sts	0x3534, r1	; 0x803534 <Menu>
    4e7c:	10 92 35 35 	sts	0x3535, r1	; 0x803535 <Menu+0x1>
		
		//////////////////////////////////////////////////////////////////////////
		//						Leibniz's Pi functions							//
		//////////////////////////////////////////////////////////////////////////
		
		if(Menu == Menu_Leibniz){
    4e80:	80 91 34 35 	lds	r24, 0x3534	; 0x803534 <Menu>
    4e84:	90 91 35 35 	lds	r25, 0x3535	; 0x803535 <Menu+0x1>
    4e88:	02 97       	sbiw	r24, 0x02	; 2
    4e8a:	09 f0       	breq	.+2      	; 0x4e8e <vUserInterface+0xb84>
    4e8c:	92 c1       	rjmp	.+804    	; 0x51b2 <vUserInterface+0xea8>
			switch (ButtonState){
    4e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    4e90:	9e 81       	ldd	r25, Y+6	; 0x06
    4e92:	af 81       	ldd	r26, Y+7	; 0x07
    4e94:	b8 85       	ldd	r27, Y+8	; 0x08
    4e96:	82 30       	cpi	r24, 0x02	; 2
    4e98:	91 05       	cpc	r25, r1
    4e9a:	a1 05       	cpc	r26, r1
    4e9c:	b1 05       	cpc	r27, r1
    4e9e:	09 f4       	brne	.+2      	; 0x4ea2 <vUserInterface+0xb98>
    4ea0:	d4 c0       	rjmp	.+424    	; 0x504a <vUserInterface+0xd40>
    4ea2:	83 30       	cpi	r24, 0x03	; 3
    4ea4:	91 05       	cpc	r25, r1
    4ea6:	a1 05       	cpc	r26, r1
    4ea8:	b1 05       	cpc	r27, r1
    4eaa:	28 f4       	brcc	.+10     	; 0x4eb6 <vUserInterface+0xbac>
    4eac:	01 97       	sbiw	r24, 0x01	; 1
    4eae:	a1 05       	cpc	r26, r1
    4eb0:	b1 05       	cpc	r27, r1
    4eb2:	69 f0       	breq	.+26     	; 0x4ece <vUserInterface+0xbc4>
    4eb4:	7e c1       	rjmp	.+764    	; 0x51b2 <vUserInterface+0xea8>
    4eb6:	84 30       	cpi	r24, 0x04	; 4
    4eb8:	91 05       	cpc	r25, r1
    4eba:	a1 05       	cpc	r26, r1
    4ebc:	b1 05       	cpc	r27, r1
    4ebe:	09 f4       	brne	.+2      	; 0x4ec2 <vUserInterface+0xbb8>
    4ec0:	fd c0       	rjmp	.+506    	; 0x50bc <vUserInterface+0xdb2>
    4ec2:	08 97       	sbiw	r24, 0x08	; 8
    4ec4:	a1 05       	cpc	r26, r1
    4ec6:	b1 05       	cpc	r27, r1
    4ec8:	09 f4       	brne	.+2      	; 0x4ecc <vUserInterface+0xbc2>
    4eca:	32 c1       	rjmp	.+612    	; 0x5130 <vUserInterface+0xe26>
    4ecc:	72 c1       	rjmp	.+740    	; 0x51b2 <vUserInterface+0xea8>
				case 1:
				if (Bits == 0){	
    4ece:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    4ed2:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    4ed6:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    4eda:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    4ede:	89 2b       	or	r24, r25
    4ee0:	8a 2b       	or	r24, r26
    4ee2:	8b 2b       	or	r24, r27
    4ee4:	f1 f4       	brne	.+60     	; 0x4f22 <vUserInterface+0xc18>
					//First start since Main screen
					xEventGroupSetBits(evStartStopEvents, EV_START_LEIBNIZ);	//Set startbit
    4ee6:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    4eea:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    4eee:	41 e0       	ldi	r20, 0x01	; 1
    4ef0:	50 e0       	ldi	r21, 0x00	; 0
    4ef2:	60 e0       	ldi	r22, 0x00	; 0
    4ef4:	70 e0       	ldi	r23, 0x00	; 0
    4ef6:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
					Bits = xEventGroupGetBits(evStartStopEvents);				//Save eventbits as value
    4efa:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    4efe:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    4f02:	40 e0       	ldi	r20, 0x00	; 0
    4f04:	50 e0       	ldi	r21, 0x00	; 0
    4f06:	ba 01       	movw	r22, r20
    4f08:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    4f0c:	dc 01       	movw	r26, r24
    4f0e:	cb 01       	movw	r24, r22
    4f10:	80 93 78 35 	sts	0x3578, r24	; 0x803578 <Bits>
    4f14:	90 93 79 35 	sts	0x3579, r25	; 0x803579 <Bits+0x1>
    4f18:	a0 93 7a 35 	sts	0x357A, r26	; 0x80357a <Bits+0x2>
    4f1c:	b0 93 7b 35 	sts	0x357B, r27	; 0x80357b <Bits+0x3>
				}
				else if (Bits & EV_RESET_LEIBNIZ){	
					//Restart Leibniz after reset
					vTaskResume(LeibnizTask);									//Resume where stopped
				}
				break;
    4f20:	45 c1       	rjmp	.+650    	; 0x51ac <vUserInterface+0xea2>
				if (Bits == 0){	
					//First start since Main screen
					xEventGroupSetBits(evStartStopEvents, EV_START_LEIBNIZ);	//Set startbit
					Bits = xEventGroupGetBits(evStartStopEvents);				//Save eventbits as value
				}
				else if (Bits & (EV_STOPPED_NILA | EV_STOP_NILA)){				//Start if switched from Nilakantha's Pi
    4f22:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    4f26:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    4f2a:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    4f2e:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    4f32:	88 72       	andi	r24, 0x28	; 40
    4f34:	99 27       	eor	r25, r25
    4f36:	aa 27       	eor	r26, r26
    4f38:	bb 27       	eor	r27, r27
    4f3a:	89 2b       	or	r24, r25
    4f3c:	8a 2b       	or	r24, r26
    4f3e:	8b 2b       	or	r24, r27
    4f40:	71 f1       	breq	.+92     	; 0x4f9e <vUserInterface+0xc94>
					xEventGroupClearBits(evStartStopEvents, EV_CLEAR);			//Clear all Bits from Event
    4f42:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    4f46:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    4f4a:	4f ef       	ldi	r20, 0xFF	; 255
    4f4c:	50 e0       	ldi	r21, 0x00	; 0
    4f4e:	60 e0       	ldi	r22, 0x00	; 0
    4f50:	70 e0       	ldi	r23, 0x00	; 0
    4f52:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
					xEventGroupSetBits(evStartStopEvents, EV_START_LEIBNIZ);	//Set startbit
    4f56:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    4f5a:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    4f5e:	41 e0       	ldi	r20, 0x01	; 1
    4f60:	50 e0       	ldi	r21, 0x00	; 0
    4f62:	60 e0       	ldi	r22, 0x00	; 0
    4f64:	70 e0       	ldi	r23, 0x00	; 0
    4f66:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
					Bits = xEventGroupGetBits(evStartStopEvents);				//Save eventbits as value
    4f6a:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    4f6e:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    4f72:	40 e0       	ldi	r20, 0x00	; 0
    4f74:	50 e0       	ldi	r21, 0x00	; 0
    4f76:	ba 01       	movw	r22, r20
    4f78:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    4f7c:	dc 01       	movw	r26, r24
    4f7e:	cb 01       	movw	r24, r22
    4f80:	80 93 78 35 	sts	0x3578, r24	; 0x803578 <Bits>
    4f84:	90 93 79 35 	sts	0x3579, r25	; 0x803579 <Bits+0x1>
    4f88:	a0 93 7a 35 	sts	0x357A, r26	; 0x80357a <Bits+0x2>
    4f8c:	b0 93 7b 35 	sts	0x357B, r27	; 0x80357b <Bits+0x3>
					vTaskResume(LeibnizTask);									//Resume where stopped
    4f90:	80 91 66 35 	lds	r24, 0x3566	; 0x803566 <LeibnizTask>
    4f94:	90 91 67 35 	lds	r25, 0x3567	; 0x803567 <LeibnizTask+0x1>
    4f98:	0e 94 8c 14 	call	0x2918	; 0x2918 <vTaskResume>
				}
				else if (Bits & EV_RESET_LEIBNIZ){	
					//Restart Leibniz after reset
					vTaskResume(LeibnizTask);									//Resume where stopped
				}
				break;
    4f9c:	07 c1       	rjmp	.+526    	; 0x51ac <vUserInterface+0xea2>
					xEventGroupClearBits(evStartStopEvents, EV_CLEAR);			//Clear all Bits from Event
					xEventGroupSetBits(evStartStopEvents, EV_START_LEIBNIZ);	//Set startbit
					Bits = xEventGroupGetBits(evStartStopEvents);				//Save eventbits as value
					vTaskResume(LeibnizTask);									//Resume where stopped
				}
				else if (Bits & (EV_STOP_LEIBNIZ | EV_STOPPED_LEIBNIZ)){ 
    4f9e:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    4fa2:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    4fa6:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    4faa:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    4fae:	82 71       	andi	r24, 0x12	; 18
    4fb0:	99 27       	eor	r25, r25
    4fb2:	aa 27       	eor	r26, r26
    4fb4:	bb 27       	eor	r27, r27
    4fb6:	89 2b       	or	r24, r25
    4fb8:	8a 2b       	or	r24, r26
    4fba:	8b 2b       	or	r24, r27
    4fbc:	71 f1       	breq	.+92     	; 0x501a <vUserInterface+0xd10>
					//Restart Leibniz calculation if stopped
					xEventGroupClearBits(evStartStopEvents, EV_CLEAR);			//Clear all Bits from Event
    4fbe:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    4fc2:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    4fc6:	4f ef       	ldi	r20, 0xFF	; 255
    4fc8:	50 e0       	ldi	r21, 0x00	; 0
    4fca:	60 e0       	ldi	r22, 0x00	; 0
    4fcc:	70 e0       	ldi	r23, 0x00	; 0
    4fce:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
					xEventGroupSetBits(evStartStopEvents, EV_START_LEIBNIZ);	//Set startbit
    4fd2:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    4fd6:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    4fda:	41 e0       	ldi	r20, 0x01	; 1
    4fdc:	50 e0       	ldi	r21, 0x00	; 0
    4fde:	60 e0       	ldi	r22, 0x00	; 0
    4fe0:	70 e0       	ldi	r23, 0x00	; 0
    4fe2:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
					Bits = xEventGroupGetBits(evStartStopEvents);				//Save eventbits as value
    4fe6:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    4fea:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    4fee:	40 e0       	ldi	r20, 0x00	; 0
    4ff0:	50 e0       	ldi	r21, 0x00	; 0
    4ff2:	ba 01       	movw	r22, r20
    4ff4:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    4ff8:	dc 01       	movw	r26, r24
    4ffa:	cb 01       	movw	r24, r22
    4ffc:	80 93 78 35 	sts	0x3578, r24	; 0x803578 <Bits>
    5000:	90 93 79 35 	sts	0x3579, r25	; 0x803579 <Bits+0x1>
    5004:	a0 93 7a 35 	sts	0x357A, r26	; 0x80357a <Bits+0x2>
    5008:	b0 93 7b 35 	sts	0x357B, r27	; 0x80357b <Bits+0x3>
					vTaskResume(LeibnizTask);									//Resume where stopped
    500c:	80 91 66 35 	lds	r24, 0x3566	; 0x803566 <LeibnizTask>
    5010:	90 91 67 35 	lds	r25, 0x3567	; 0x803567 <LeibnizTask+0x1>
    5014:	0e 94 8c 14 	call	0x2918	; 0x2918 <vTaskResume>
				}
				else if (Bits & EV_RESET_LEIBNIZ){	
					//Restart Leibniz after reset
					vTaskResume(LeibnizTask);									//Resume where stopped
				}
				break;
    5018:	c9 c0       	rjmp	.+402    	; 0x51ac <vUserInterface+0xea2>
					xEventGroupClearBits(evStartStopEvents, EV_CLEAR);			//Clear all Bits from Event
					xEventGroupSetBits(evStartStopEvents, EV_START_LEIBNIZ);	//Set startbit
					Bits = xEventGroupGetBits(evStartStopEvents);				//Save eventbits as value
					vTaskResume(LeibnizTask);									//Resume where stopped
				}
				else if (Bits & EV_RESET_LEIBNIZ){	
    501a:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    501e:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    5022:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    5026:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    502a:	80 74       	andi	r24, 0x40	; 64
    502c:	99 27       	eor	r25, r25
    502e:	aa 27       	eor	r26, r26
    5030:	bb 27       	eor	r27, r27
    5032:	89 2b       	or	r24, r25
    5034:	8a 2b       	or	r24, r26
    5036:	8b 2b       	or	r24, r27
    5038:	09 f4       	brne	.+2      	; 0x503c <vUserInterface+0xd32>
    503a:	b8 c0       	rjmp	.+368    	; 0x51ac <vUserInterface+0xea2>
					//Restart Leibniz after reset
					vTaskResume(LeibnizTask);									//Resume where stopped
    503c:	80 91 66 35 	lds	r24, 0x3566	; 0x803566 <LeibnizTask>
    5040:	90 91 67 35 	lds	r25, 0x3567	; 0x803567 <LeibnizTask+0x1>
    5044:	0e 94 8c 14 	call	0x2918	; 0x2918 <vTaskResume>
				}
				break;
    5048:	b1 c0       	rjmp	.+354    	; 0x51ac <vUserInterface+0xea2>

				case 2:
				if(Bits & (EV_START_LEIBNIZ | EV_STOP_NILA)){
    504a:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    504e:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    5052:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    5056:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    505a:	89 70       	andi	r24, 0x09	; 9
    505c:	99 27       	eor	r25, r25
    505e:	aa 27       	eor	r26, r26
    5060:	bb 27       	eor	r27, r27
    5062:	89 2b       	or	r24, r25
    5064:	8a 2b       	or	r24, r26
    5066:	8b 2b       	or	r24, r27
    5068:	09 f4       	brne	.+2      	; 0x506c <vUserInterface+0xd62>
    506a:	a2 c0       	rjmp	.+324    	; 0x51b0 <vUserInterface+0xea6>
					// Stop Leibniz calculation
					xEventGroupClearBits(evStartStopEvents, EV_CLEAR);			//Clear all Bits from Event
    506c:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    5070:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5074:	4f ef       	ldi	r20, 0xFF	; 255
    5076:	50 e0       	ldi	r21, 0x00	; 0
    5078:	60 e0       	ldi	r22, 0x00	; 0
    507a:	70 e0       	ldi	r23, 0x00	; 0
    507c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
					xEventGroupSetBits(evStartStopEvents, EV_STOP_LEIBNIZ);		//Set Stopbit
    5080:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    5084:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5088:	42 e0       	ldi	r20, 0x02	; 2
    508a:	50 e0       	ldi	r21, 0x00	; 0
    508c:	60 e0       	ldi	r22, 0x00	; 0
    508e:	70 e0       	ldi	r23, 0x00	; 0
    5090:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
					Bits = xEventGroupGetBits(evStartStopEvents);				//Save eventbits as value
    5094:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    5098:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    509c:	40 e0       	ldi	r20, 0x00	; 0
    509e:	50 e0       	ldi	r21, 0x00	; 0
    50a0:	ba 01       	movw	r22, r20
    50a2:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    50a6:	dc 01       	movw	r26, r24
    50a8:	cb 01       	movw	r24, r22
    50aa:	80 93 78 35 	sts	0x3578, r24	; 0x803578 <Bits>
    50ae:	90 93 79 35 	sts	0x3579, r25	; 0x803579 <Bits+0x1>
    50b2:	a0 93 7a 35 	sts	0x357A, r26	; 0x80357a <Bits+0x2>
    50b6:	b0 93 7b 35 	sts	0x357B, r27	; 0x80357b <Bits+0x3>
				}
				break;
    50ba:	7a c0       	rjmp	.+244    	; 0x51b0 <vUserInterface+0xea6>

				case 4:
					// Reset - set Leibniz calculation to 0
					xEventGroupClearBits(evStartStopEvents, EV_CLEAR);			//Clear all Bits from Event
    50bc:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    50c0:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    50c4:	4f ef       	ldi	r20, 0xFF	; 255
    50c6:	50 e0       	ldi	r21, 0x00	; 0
    50c8:	60 e0       	ldi	r22, 0x00	; 0
    50ca:	70 e0       	ldi	r23, 0x00	; 0
    50cc:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
					xEventGroupSetBits(evStartStopEvents, EV_RESET_LEIBNIZ);	//Set Resetbit
    50d0:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    50d4:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    50d8:	40 e4       	ldi	r20, 0x40	; 64
    50da:	50 e0       	ldi	r21, 0x00	; 0
    50dc:	60 e0       	ldi	r22, 0x00	; 0
    50de:	70 e0       	ldi	r23, 0x00	; 0
    50e0:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
					Bits = xEventGroupGetBits(evStartStopEvents);				//Save eventbits as value
    50e4:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    50e8:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    50ec:	40 e0       	ldi	r20, 0x00	; 0
    50ee:	50 e0       	ldi	r21, 0x00	; 0
    50f0:	ba 01       	movw	r22, r20
    50f2:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    50f6:	dc 01       	movw	r26, r24
    50f8:	cb 01       	movw	r24, r22
    50fa:	80 93 78 35 	sts	0x3578, r24	; 0x803578 <Bits>
    50fe:	90 93 79 35 	sts	0x3579, r25	; 0x803579 <Bits+0x1>
    5102:	a0 93 7a 35 	sts	0x357A, r26	; 0x80357a <Bits+0x2>
    5106:	b0 93 7b 35 	sts	0x357B, r27	; 0x80357b <Bits+0x3>
					sprintf(&LeibnizPiString[0], " ");							//Write " " into String, Display clears Line
    510a:	80 e2       	ldi	r24, 0x20	; 32
    510c:	90 e0       	ldi	r25, 0x00	; 0
    510e:	80 93 9f 35 	sts	0x359F, r24	; 0x80359f <LeibnizPiString>
    5112:	90 93 a0 35 	sts	0x35A0, r25	; 0x8035a0 <LeibnizPiString+0x1>
					sprintf(&LeibnizTimeString[0], " ");						//Write " " into String, Display clears Line
    5116:	80 e2       	ldi	r24, 0x20	; 32
    5118:	90 e0       	ldi	r25, 0x00	; 0
    511a:	80 93 63 35 	sts	0x3563, r24	; 0x803563 <LeibnizTimeString>
    511e:	90 93 64 35 	sts	0x3564, r25	; 0x803564 <LeibnizTimeString+0x1>
					sprintf(&LeibnizExactTime[0], " ");							//Write " " into String, Display clears Line
    5122:	80 e2       	ldi	r24, 0x20	; 32
    5124:	90 e0       	ldi	r25, 0x00	; 0
    5126:	80 93 8c 35 	sts	0x358C, r24	; 0x80358c <LeibnizExactTime>
    512a:	90 93 8d 35 	sts	0x358D, r25	; 0x80358d <LeibnizExactTime+0x1>
				break;
    512e:	41 c0       	rjmp	.+130    	; 0x51b2 <vUserInterface+0xea8>

				case 8:
					// Stop Leibniz calculation and switch to Nilakantha calculation
					xEventGroupClearBits(evStartStopEvents, EV_CLEAR);			//Clear all Bits from Event
    5130:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    5134:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5138:	4f ef       	ldi	r20, 0xFF	; 255
    513a:	50 e0       	ldi	r21, 0x00	; 0
    513c:	60 e0       	ldi	r22, 0x00	; 0
    513e:	70 e0       	ldi	r23, 0x00	; 0
    5140:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
					xEventGroupSetBits(evStartStopEvents, EV_STOP_LEIBNIZ);		//Set Stopbit
    5144:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    5148:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    514c:	42 e0       	ldi	r20, 0x02	; 2
    514e:	50 e0       	ldi	r21, 0x00	; 0
    5150:	60 e0       	ldi	r22, 0x00	; 0
    5152:	70 e0       	ldi	r23, 0x00	; 0
    5154:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
					Bits = xEventGroupGetBits(evStartStopEvents);				//Save eventbits as value
    5158:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    515c:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5160:	40 e0       	ldi	r20, 0x00	; 0
    5162:	50 e0       	ldi	r21, 0x00	; 0
    5164:	ba 01       	movw	r22, r20
    5166:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    516a:	dc 01       	movw	r26, r24
    516c:	cb 01       	movw	r24, r22
    516e:	80 93 78 35 	sts	0x3578, r24	; 0x803578 <Bits>
    5172:	90 93 79 35 	sts	0x3579, r25	; 0x803579 <Bits+0x1>
    5176:	a0 93 7a 35 	sts	0x357A, r26	; 0x80357a <Bits+0x2>
    517a:	b0 93 7b 35 	sts	0x357B, r27	; 0x80357b <Bits+0x3>
					Menu = Menu_Nilakantha;										//Set Menu to 3 to switch to Nilakantha
    517e:	83 e0       	ldi	r24, 0x03	; 3
    5180:	90 e0       	ldi	r25, 0x00	; 0
    5182:	80 93 34 35 	sts	0x3534, r24	; 0x803534 <Menu>
    5186:	90 93 35 35 	sts	0x3535, r25	; 0x803535 <Menu+0x1>
					ButtonState = xEventGroupClearBits(evButtonEvents, EVBUTTONS_CLEAR);	//Clear Buttonstate to avoid switching back imediatly
    518a:	80 91 96 35 	lds	r24, 0x3596	; 0x803596 <evButtonEvents>
    518e:	90 91 97 35 	lds	r25, 0x3597	; 0x803597 <evButtonEvents+0x1>
    5192:	4f ef       	ldi	r20, 0xFF	; 255
    5194:	50 e0       	ldi	r21, 0x00	; 0
    5196:	60 e0       	ldi	r22, 0x00	; 0
    5198:	70 e0       	ldi	r23, 0x00	; 0
    519a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    519e:	dc 01       	movw	r26, r24
    51a0:	cb 01       	movw	r24, r22
    51a2:	8d 83       	std	Y+5, r24	; 0x05
    51a4:	9e 83       	std	Y+6, r25	; 0x06
    51a6:	af 83       	std	Y+7, r26	; 0x07
    51a8:	b8 87       	std	Y+8, r27	; 0x08
				break;
    51aa:	03 c0       	rjmp	.+6      	; 0x51b2 <vUserInterface+0xea8>
				}
				else if (Bits & EV_RESET_LEIBNIZ){	
					//Restart Leibniz after reset
					vTaskResume(LeibnizTask);									//Resume where stopped
				}
				break;
    51ac:	00 00       	nop
    51ae:	01 c0       	rjmp	.+2      	; 0x51b2 <vUserInterface+0xea8>
					// Stop Leibniz calculation
					xEventGroupClearBits(evStartStopEvents, EV_CLEAR);			//Clear all Bits from Event
					xEventGroupSetBits(evStartStopEvents, EV_STOP_LEIBNIZ);		//Set Stopbit
					Bits = xEventGroupGetBits(evStartStopEvents);				//Save eventbits as value
				}
				break;
    51b0:	00 00       	nop
		
		//////////////////////////////////////////////////////////////////////////
		//						Nilakantha's Pi functions						//
		//////////////////////////////////////////////////////////////////////////
		
		if (Menu == Menu_Nilakantha) {
    51b2:	80 91 34 35 	lds	r24, 0x3534	; 0x803534 <Menu>
    51b6:	90 91 35 35 	lds	r25, 0x3535	; 0x803535 <Menu+0x1>
    51ba:	03 97       	sbiw	r24, 0x03	; 3
    51bc:	09 f0       	breq	.+2      	; 0x51c0 <vUserInterface+0xeb6>
    51be:	a1 c1       	rjmp	.+834    	; 0x5502 <vUserInterface+0x11f8>
			switch (ButtonState) {
    51c0:	8d 81       	ldd	r24, Y+5	; 0x05
    51c2:	9e 81       	ldd	r25, Y+6	; 0x06
    51c4:	af 81       	ldd	r26, Y+7	; 0x07
    51c6:	b8 85       	ldd	r27, Y+8	; 0x08
    51c8:	82 30       	cpi	r24, 0x02	; 2
    51ca:	91 05       	cpc	r25, r1
    51cc:	a1 05       	cpc	r26, r1
    51ce:	b1 05       	cpc	r27, r1
    51d0:	09 f4       	brne	.+2      	; 0x51d4 <vUserInterface+0xeca>
    51d2:	d4 c0       	rjmp	.+424    	; 0x537c <vUserInterface+0x1072>
    51d4:	83 30       	cpi	r24, 0x03	; 3
    51d6:	91 05       	cpc	r25, r1
    51d8:	a1 05       	cpc	r26, r1
    51da:	b1 05       	cpc	r27, r1
    51dc:	28 f4       	brcc	.+10     	; 0x51e8 <vUserInterface+0xede>
    51de:	01 97       	sbiw	r24, 0x01	; 1
    51e0:	a1 05       	cpc	r26, r1
    51e2:	b1 05       	cpc	r27, r1
    51e4:	69 f0       	breq	.+26     	; 0x5200 <vUserInterface+0xef6>
    51e6:	8d c1       	rjmp	.+794    	; 0x5502 <vUserInterface+0x11f8>
    51e8:	84 30       	cpi	r24, 0x04	; 4
    51ea:	91 05       	cpc	r25, r1
    51ec:	a1 05       	cpc	r26, r1
    51ee:	b1 05       	cpc	r27, r1
    51f0:	09 f4       	brne	.+2      	; 0x51f4 <vUserInterface+0xeea>
    51f2:	fd c0       	rjmp	.+506    	; 0x53ee <vUserInterface+0x10e4>
    51f4:	08 97       	sbiw	r24, 0x08	; 8
    51f6:	a1 05       	cpc	r26, r1
    51f8:	b1 05       	cpc	r27, r1
    51fa:	09 f4       	brne	.+2      	; 0x51fe <vUserInterface+0xef4>
    51fc:	3f c1       	rjmp	.+638    	; 0x547c <vUserInterface+0x1172>
    51fe:	81 c1       	rjmp	.+770    	; 0x5502 <vUserInterface+0x11f8>
				case 1:
					if (Bits == 0){	//First start since Main screen
    5200:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    5204:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    5208:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    520c:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    5210:	89 2b       	or	r24, r25
    5212:	8a 2b       	or	r24, r26
    5214:	8b 2b       	or	r24, r27
    5216:	f1 f4       	brne	.+60     	; 0x5254 <vUserInterface+0xf4a>
						xEventGroupSetBits(evStartStopEvents, EV_START_NILA);	//Set startbit
    5218:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    521c:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5220:	44 e0       	ldi	r20, 0x04	; 4
    5222:	50 e0       	ldi	r21, 0x00	; 0
    5224:	60 e0       	ldi	r22, 0x00	; 0
    5226:	70 e0       	ldi	r23, 0x00	; 0
    5228:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
						Bits = xEventGroupGetBits(evStartStopEvents);			//Save eventbits as value
    522c:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    5230:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5234:	40 e0       	ldi	r20, 0x00	; 0
    5236:	50 e0       	ldi	r21, 0x00	; 0
    5238:	ba 01       	movw	r22, r20
    523a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    523e:	dc 01       	movw	r26, r24
    5240:	cb 01       	movw	r24, r22
    5242:	80 93 78 35 	sts	0x3578, r24	; 0x803578 <Bits>
    5246:	90 93 79 35 	sts	0x3579, r25	; 0x803579 <Bits+0x1>
    524a:	a0 93 7a 35 	sts	0x357A, r26	; 0x80357a <Bits+0x2>
    524e:	b0 93 7b 35 	sts	0x357B, r27	; 0x80357b <Bits+0x3>
					} 
					else if (Bits & EV_RESET_NILA) {
						// Restart Nilakantha calculation if reseted
						vTaskResume(NilakanthaTask);							//Resume where stopped
					}
					break;
    5252:	52 c1       	rjmp	.+676    	; 0x54f8 <vUserInterface+0x11ee>
				case 1:
					if (Bits == 0){	//First start since Main screen
						xEventGroupSetBits(evStartStopEvents, EV_START_NILA);	//Set startbit
						Bits = xEventGroupGetBits(evStartStopEvents);			//Save eventbits as value
					}
					else if (Bits & (EV_STOP_LEIBNIZ | EV_STOPPED_LEIBNIZ)){	//Start if switched from Leibniz's's Pi
    5254:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    5258:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    525c:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    5260:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    5264:	82 71       	andi	r24, 0x12	; 18
    5266:	99 27       	eor	r25, r25
    5268:	aa 27       	eor	r26, r26
    526a:	bb 27       	eor	r27, r27
    526c:	89 2b       	or	r24, r25
    526e:	8a 2b       	or	r24, r26
    5270:	8b 2b       	or	r24, r27
    5272:	71 f1       	breq	.+92     	; 0x52d0 <vUserInterface+0xfc6>
						xEventGroupClearBits(evStartStopEvents, EV_CLEAR);		//Clear all Bits from Event
    5274:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    5278:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    527c:	4f ef       	ldi	r20, 0xFF	; 255
    527e:	50 e0       	ldi	r21, 0x00	; 0
    5280:	60 e0       	ldi	r22, 0x00	; 0
    5282:	70 e0       	ldi	r23, 0x00	; 0
    5284:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
						xEventGroupSetBits(evStartStopEvents, EV_START_NILA);	//Set startbit
    5288:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    528c:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5290:	44 e0       	ldi	r20, 0x04	; 4
    5292:	50 e0       	ldi	r21, 0x00	; 0
    5294:	60 e0       	ldi	r22, 0x00	; 0
    5296:	70 e0       	ldi	r23, 0x00	; 0
    5298:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
						Bits = xEventGroupGetBits(evStartStopEvents);			//Save eventbits as value
    529c:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    52a0:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    52a4:	40 e0       	ldi	r20, 0x00	; 0
    52a6:	50 e0       	ldi	r21, 0x00	; 0
    52a8:	ba 01       	movw	r22, r20
    52aa:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    52ae:	dc 01       	movw	r26, r24
    52b0:	cb 01       	movw	r24, r22
    52b2:	80 93 78 35 	sts	0x3578, r24	; 0x803578 <Bits>
    52b6:	90 93 79 35 	sts	0x3579, r25	; 0x803579 <Bits+0x1>
    52ba:	a0 93 7a 35 	sts	0x357A, r26	; 0x80357a <Bits+0x2>
    52be:	b0 93 7b 35 	sts	0x357B, r27	; 0x80357b <Bits+0x3>
						vTaskResume(NilakanthaTask);							//Resume where stopped
    52c2:	80 91 9b 35 	lds	r24, 0x359B	; 0x80359b <NilakanthaTask>
    52c6:	90 91 9c 35 	lds	r25, 0x359C	; 0x80359c <NilakanthaTask+0x1>
    52ca:	0e 94 8c 14 	call	0x2918	; 0x2918 <vTaskResume>
					} 
					else if (Bits & EV_RESET_NILA) {
						// Restart Nilakantha calculation if reseted
						vTaskResume(NilakanthaTask);							//Resume where stopped
					}
					break;
    52ce:	14 c1       	rjmp	.+552    	; 0x54f8 <vUserInterface+0x11ee>
						xEventGroupClearBits(evStartStopEvents, EV_CLEAR);		//Clear all Bits from Event
						xEventGroupSetBits(evStartStopEvents, EV_START_NILA);	//Set startbit
						Bits = xEventGroupGetBits(evStartStopEvents);			//Save eventbits as value
						vTaskResume(NilakanthaTask);							//Resume where stopped
					}
					else if (Bits & EV_STOPPED_NILA) {
    52d0:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    52d4:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    52d8:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    52dc:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    52e0:	80 72       	andi	r24, 0x20	; 32
    52e2:	99 27       	eor	r25, r25
    52e4:	aa 27       	eor	r26, r26
    52e6:	bb 27       	eor	r27, r27
    52e8:	89 2b       	or	r24, r25
    52ea:	8a 2b       	or	r24, r26
    52ec:	8b 2b       	or	r24, r27
    52ee:	71 f1       	breq	.+92     	; 0x534c <vUserInterface+0x1042>
						// Restart Nilakantha calculation if stopped or stopped and reset
						xEventGroupClearBits(evStartStopEvents, EV_CLEAR);		//Clear all Bits from Event
    52f0:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    52f4:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    52f8:	4f ef       	ldi	r20, 0xFF	; 255
    52fa:	50 e0       	ldi	r21, 0x00	; 0
    52fc:	60 e0       	ldi	r22, 0x00	; 0
    52fe:	70 e0       	ldi	r23, 0x00	; 0
    5300:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
						xEventGroupSetBits(evStartStopEvents, EV_START_NILA);	//Set startbit
    5304:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    5308:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    530c:	44 e0       	ldi	r20, 0x04	; 4
    530e:	50 e0       	ldi	r21, 0x00	; 0
    5310:	60 e0       	ldi	r22, 0x00	; 0
    5312:	70 e0       	ldi	r23, 0x00	; 0
    5314:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
						Bits = xEventGroupGetBits(evStartStopEvents);			//Save eventbits as value
    5318:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    531c:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5320:	40 e0       	ldi	r20, 0x00	; 0
    5322:	50 e0       	ldi	r21, 0x00	; 0
    5324:	ba 01       	movw	r22, r20
    5326:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    532a:	dc 01       	movw	r26, r24
    532c:	cb 01       	movw	r24, r22
    532e:	80 93 78 35 	sts	0x3578, r24	; 0x803578 <Bits>
    5332:	90 93 79 35 	sts	0x3579, r25	; 0x803579 <Bits+0x1>
    5336:	a0 93 7a 35 	sts	0x357A, r26	; 0x80357a <Bits+0x2>
    533a:	b0 93 7b 35 	sts	0x357B, r27	; 0x80357b <Bits+0x3>
						vTaskResume(NilakanthaTask);							//Resume where stopped
    533e:	80 91 9b 35 	lds	r24, 0x359B	; 0x80359b <NilakanthaTask>
    5342:	90 91 9c 35 	lds	r25, 0x359C	; 0x80359c <NilakanthaTask+0x1>
    5346:	0e 94 8c 14 	call	0x2918	; 0x2918 <vTaskResume>
					} 
					else if (Bits & EV_RESET_NILA) {
						// Restart Nilakantha calculation if reseted
						vTaskResume(NilakanthaTask);							//Resume where stopped
					}
					break;
    534a:	d6 c0       	rjmp	.+428    	; 0x54f8 <vUserInterface+0x11ee>
						xEventGroupClearBits(evStartStopEvents, EV_CLEAR);		//Clear all Bits from Event
						xEventGroupSetBits(evStartStopEvents, EV_START_NILA);	//Set startbit
						Bits = xEventGroupGetBits(evStartStopEvents);			//Save eventbits as value
						vTaskResume(NilakanthaTask);							//Resume where stopped
					} 
					else if (Bits & EV_RESET_NILA) {
    534c:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    5350:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    5354:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    5358:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    535c:	80 78       	andi	r24, 0x80	; 128
    535e:	99 27       	eor	r25, r25
    5360:	aa 27       	eor	r26, r26
    5362:	bb 27       	eor	r27, r27
    5364:	89 2b       	or	r24, r25
    5366:	8a 2b       	or	r24, r26
    5368:	8b 2b       	or	r24, r27
    536a:	09 f4       	brne	.+2      	; 0x536e <vUserInterface+0x1064>
    536c:	c5 c0       	rjmp	.+394    	; 0x54f8 <vUserInterface+0x11ee>
						// Restart Nilakantha calculation if reseted
						vTaskResume(NilakanthaTask);							//Resume where stopped
    536e:	80 91 9b 35 	lds	r24, 0x359B	; 0x80359b <NilakanthaTask>
    5372:	90 91 9c 35 	lds	r25, 0x359C	; 0x80359c <NilakanthaTask+0x1>
    5376:	0e 94 8c 14 	call	0x2918	; 0x2918 <vTaskResume>
					}
					break;
    537a:	be c0       	rjmp	.+380    	; 0x54f8 <vUserInterface+0x11ee>

				case 2:
				if(Bits & EV_START_NILA){
    537c:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    5380:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    5384:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    5388:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    538c:	84 70       	andi	r24, 0x04	; 4
    538e:	99 27       	eor	r25, r25
    5390:	aa 27       	eor	r26, r26
    5392:	bb 27       	eor	r27, r27
    5394:	89 2b       	or	r24, r25
    5396:	8a 2b       	or	r24, r26
    5398:	8b 2b       	or	r24, r27
    539a:	09 f4       	brne	.+2      	; 0x539e <vUserInterface+0x1094>
    539c:	af c0       	rjmp	.+350    	; 0x54fc <vUserInterface+0x11f2>
						// Stop Nilakantha calculation
						xEventGroupClearBits(evStartStopEvents, EV_CLEAR);		//Clear all Bits from Event
    539e:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    53a2:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    53a6:	4f ef       	ldi	r20, 0xFF	; 255
    53a8:	50 e0       	ldi	r21, 0x00	; 0
    53aa:	60 e0       	ldi	r22, 0x00	; 0
    53ac:	70 e0       	ldi	r23, 0x00	; 0
    53ae:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
						xEventGroupSetBits(evStartStopEvents, EV_STOP_NILA);	//Set Stopbit
    53b2:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    53b6:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    53ba:	48 e0       	ldi	r20, 0x08	; 8
    53bc:	50 e0       	ldi	r21, 0x00	; 0
    53be:	60 e0       	ldi	r22, 0x00	; 0
    53c0:	70 e0       	ldi	r23, 0x00	; 0
    53c2:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
						Bits = xEventGroupGetBits(evStartStopEvents);			//Save eventbits as value
    53c6:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    53ca:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    53ce:	40 e0       	ldi	r20, 0x00	; 0
    53d0:	50 e0       	ldi	r21, 0x00	; 0
    53d2:	ba 01       	movw	r22, r20
    53d4:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    53d8:	dc 01       	movw	r26, r24
    53da:	cb 01       	movw	r24, r22
    53dc:	80 93 78 35 	sts	0x3578, r24	; 0x803578 <Bits>
    53e0:	90 93 79 35 	sts	0x3579, r25	; 0x803579 <Bits+0x1>
    53e4:	a0 93 7a 35 	sts	0x357A, r26	; 0x80357a <Bits+0x2>
    53e8:	b0 93 7b 35 	sts	0x357B, r27	; 0x80357b <Bits+0x3>
					}
					break;
    53ec:	87 c0       	rjmp	.+270    	; 0x54fc <vUserInterface+0x11f2>

				case 4:
					if (Bits){
    53ee:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    53f2:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    53f6:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    53fa:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    53fe:	89 2b       	or	r24, r25
    5400:	8a 2b       	or	r24, r26
    5402:	8b 2b       	or	r24, r27
    5404:	09 f4       	brne	.+2      	; 0x5408 <vUserInterface+0x10fe>
    5406:	7c c0       	rjmp	.+248    	; 0x5500 <vUserInterface+0x11f6>
						// Reset Nilakantha calculation to 0 if reseted or stopped
						xEventGroupClearBits(evStartStopEvents, EV_CLEAR);		//Clear all Bits from Event
    5408:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    540c:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5410:	4f ef       	ldi	r20, 0xFF	; 255
    5412:	50 e0       	ldi	r21, 0x00	; 0
    5414:	60 e0       	ldi	r22, 0x00	; 0
    5416:	70 e0       	ldi	r23, 0x00	; 0
    5418:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
						xEventGroupSetBits(evStartStopEvents, EV_RESET_NILA);	//Set Resetbit
    541c:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    5420:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5424:	40 e8       	ldi	r20, 0x80	; 128
    5426:	50 e0       	ldi	r21, 0x00	; 0
    5428:	60 e0       	ldi	r22, 0x00	; 0
    542a:	70 e0       	ldi	r23, 0x00	; 0
    542c:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
						Bits = xEventGroupGetBits(evStartStopEvents);			//Save eventbits as value
    5430:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    5434:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5438:	40 e0       	ldi	r20, 0x00	; 0
    543a:	50 e0       	ldi	r21, 0x00	; 0
    543c:	ba 01       	movw	r22, r20
    543e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    5442:	dc 01       	movw	r26, r24
    5444:	cb 01       	movw	r24, r22
    5446:	80 93 78 35 	sts	0x3578, r24	; 0x803578 <Bits>
    544a:	90 93 79 35 	sts	0x3579, r25	; 0x803579 <Bits+0x1>
    544e:	a0 93 7a 35 	sts	0x357A, r26	; 0x80357a <Bits+0x2>
    5452:	b0 93 7b 35 	sts	0x357B, r27	; 0x80357b <Bits+0x3>
						sprintf(&NilakanthaPiString[0], " ");					//Write " " into String, Display clears Line
    5456:	80 e2       	ldi	r24, 0x20	; 32
    5458:	90 e0       	ldi	r25, 0x00	; 0
    545a:	80 93 7c 35 	sts	0x357C, r24	; 0x80357c <NilakanthaPiString>
    545e:	90 93 7d 35 	sts	0x357D, r25	; 0x80357d <NilakanthaPiString+0x1>
						sprintf(&NilakanthaTimeString[0], " ");					//Write " " into String, Display clears Line
    5462:	80 e2       	ldi	r24, 0x20	; 32
    5464:	90 e0       	ldi	r25, 0x00	; 0
    5466:	80 93 98 35 	sts	0x3598, r24	; 0x803598 <NilakanthaTimeString>
    546a:	90 93 99 35 	sts	0x3599, r25	; 0x803599 <NilakanthaTimeString+0x1>
						sprintf(&NilakanthaExactTime[0], " ");					//Write " " into String, Display clears Line
    546e:	80 e2       	ldi	r24, 0x20	; 32
    5470:	90 e0       	ldi	r25, 0x00	; 0
    5472:	80 93 6a 35 	sts	0x356A, r24	; 0x80356a <NilakanthaExactTime>
    5476:	90 93 6b 35 	sts	0x356B, r25	; 0x80356b <NilakanthaExactTime+0x1>
					}
					break;
    547a:	42 c0       	rjmp	.+132    	; 0x5500 <vUserInterface+0x11f6>

				case 8:
						// Stop Nikalantha calculation and switch to Leibniz calculation
						xEventGroupClearBits(evStartStopEvents, EV_CLEAR);		//Clear all Bits from Event
    547c:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    5480:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5484:	4f ef       	ldi	r20, 0xFF	; 255
    5486:	50 e0       	ldi	r21, 0x00	; 0
    5488:	60 e0       	ldi	r22, 0x00	; 0
    548a:	70 e0       	ldi	r23, 0x00	; 0
    548c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
						xEventGroupSetBits(evStartStopEvents, EV_STOP_NILA);	//Set Stopbit
    5490:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    5494:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5498:	48 e0       	ldi	r20, 0x08	; 8
    549a:	50 e0       	ldi	r21, 0x00	; 0
    549c:	60 e0       	ldi	r22, 0x00	; 0
    549e:	70 e0       	ldi	r23, 0x00	; 0
    54a0:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
						Bits = xEventGroupGetBits(evStartStopEvents);			//Save eventbits as value
    54a4:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    54a8:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    54ac:	40 e0       	ldi	r20, 0x00	; 0
    54ae:	50 e0       	ldi	r21, 0x00	; 0
    54b0:	ba 01       	movw	r22, r20
    54b2:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    54b6:	dc 01       	movw	r26, r24
    54b8:	cb 01       	movw	r24, r22
    54ba:	80 93 78 35 	sts	0x3578, r24	; 0x803578 <Bits>
    54be:	90 93 79 35 	sts	0x3579, r25	; 0x803579 <Bits+0x1>
    54c2:	a0 93 7a 35 	sts	0x357A, r26	; 0x80357a <Bits+0x2>
    54c6:	b0 93 7b 35 	sts	0x357B, r27	; 0x80357b <Bits+0x3>
						Menu = Menu_Leibniz;									//Set Menu to 2 to switch to Leibniz
    54ca:	82 e0       	ldi	r24, 0x02	; 2
    54cc:	90 e0       	ldi	r25, 0x00	; 0
    54ce:	80 93 34 35 	sts	0x3534, r24	; 0x803534 <Menu>
    54d2:	90 93 35 35 	sts	0x3535, r25	; 0x803535 <Menu+0x1>
						ButtonState = xEventGroupClearBits(evButtonEvents, EVBUTTONS_CLEAR);	//Clear Buttonstate to avoid switching back imediatly
    54d6:	80 91 96 35 	lds	r24, 0x3596	; 0x803596 <evButtonEvents>
    54da:	90 91 97 35 	lds	r25, 0x3597	; 0x803597 <evButtonEvents+0x1>
    54de:	4f ef       	ldi	r20, 0xFF	; 255
    54e0:	50 e0       	ldi	r21, 0x00	; 0
    54e2:	60 e0       	ldi	r22, 0x00	; 0
    54e4:	70 e0       	ldi	r23, 0x00	; 0
    54e6:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    54ea:	dc 01       	movw	r26, r24
    54ec:	cb 01       	movw	r24, r22
    54ee:	8d 83       	std	Y+5, r24	; 0x05
    54f0:	9e 83       	std	Y+6, r25	; 0x06
    54f2:	af 83       	std	Y+7, r26	; 0x07
    54f4:	b8 87       	std	Y+8, r27	; 0x08
					break;
    54f6:	05 c0       	rjmp	.+10     	; 0x5502 <vUserInterface+0x11f8>
					} 
					else if (Bits & EV_RESET_NILA) {
						// Restart Nilakantha calculation if reseted
						vTaskResume(NilakanthaTask);							//Resume where stopped
					}
					break;
    54f8:	00 00       	nop
    54fa:	03 c0       	rjmp	.+6      	; 0x5502 <vUserInterface+0x11f8>
						// Stop Nilakantha calculation
						xEventGroupClearBits(evStartStopEvents, EV_CLEAR);		//Clear all Bits from Event
						xEventGroupSetBits(evStartStopEvents, EV_STOP_NILA);	//Set Stopbit
						Bits = xEventGroupGetBits(evStartStopEvents);			//Save eventbits as value
					}
					break;
    54fc:	00 00       	nop
    54fe:	01 c0       	rjmp	.+2      	; 0x5502 <vUserInterface+0x11f8>
						Bits = xEventGroupGetBits(evStartStopEvents);			//Save eventbits as value
						sprintf(&NilakanthaPiString[0], " ");					//Write " " into String, Display clears Line
						sprintf(&NilakanthaTimeString[0], " ");					//Write " " into String, Display clears Line
						sprintf(&NilakanthaExactTime[0], " ");					//Write " " into String, Display clears Line
					}
					break;
    5500:	00 00       	nop
						Menu = Menu_Leibniz;									//Set Menu to 2 to switch to Leibniz
						ButtonState = xEventGroupClearBits(evButtonEvents, EVBUTTONS_CLEAR);	//Clear Buttonstate to avoid switching back imediatly
					break;
			}
		}
		vTaskDelay(10/portTICK_RATE_MS);
    5502:	6a e0       	ldi	r22, 0x0A	; 10
    5504:	70 e0       	ldi	r23, 0x00	; 0
    5506:	80 e0       	ldi	r24, 0x00	; 0
    5508:	90 e0       	ldi	r25, 0x00	; 0
    550a:	0e 94 bc 13 	call	0x2778	; 0x2778 <vTaskDelay>
	}	
    550e:	0c 94 a5 21 	jmp	0x434a	; 0x434a <vUserInterface+0x40>

00005512 <vButtonHandler>:

//////////////////////////////////////////////////////////////////////////
//							Button-Task									//
//////////////////////////////////////////////////////////////////////////

void vButtonHandler(void* pvParamter) {
    5512:	cf 93       	push	r28
    5514:	df 93       	push	r29
    5516:	1f 92       	push	r1
    5518:	1f 92       	push	r1
    551a:	cd b7       	in	r28, 0x3d	; 61
    551c:	de b7       	in	r29, 0x3e	; 62
    551e:	89 83       	std	Y+1, r24	; 0x01
    5520:	9a 83       	std	Y+2, r25	; 0x02
	initButtons(); //Initialize Buttonhandler
    5522:	0e 94 cd 01 	call	0x39a	; 0x39a <initButtons>
	for(;;) {
		updateButtons(); //Update Button States
    5526:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <updateButtons>
		
		//Read Button State and set EventBits in EventGroup
		if(getButtonPress(BUTTON1) == SHORT_PRESSED) {
    552a:	80 e0       	ldi	r24, 0x00	; 0
    552c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <getButtonPress>
    5530:	81 30       	cpi	r24, 0x01	; 1
    5532:	51 f4       	brne	.+20     	; 0x5548 <vButtonHandler+0x36>
			xEventGroupSetBits(evButtonEvents, EVBUTTONS_S1);
    5534:	80 91 96 35 	lds	r24, 0x3596	; 0x803596 <evButtonEvents>
    5538:	90 91 97 35 	lds	r25, 0x3597	; 0x803597 <evButtonEvents+0x1>
    553c:	41 e0       	ldi	r20, 0x01	; 1
    553e:	50 e0       	ldi	r21, 0x00	; 0
    5540:	60 e0       	ldi	r22, 0x00	; 0
    5542:	70 e0       	ldi	r23, 0x00	; 0
    5544:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
		}
		if(getButtonPress(BUTTON2) == SHORT_PRESSED) {
    5548:	81 e0       	ldi	r24, 0x01	; 1
    554a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <getButtonPress>
    554e:	81 30       	cpi	r24, 0x01	; 1
    5550:	51 f4       	brne	.+20     	; 0x5566 <vButtonHandler+0x54>
			xEventGroupSetBits(evButtonEvents, EVBUTTONS_S2);
    5552:	80 91 96 35 	lds	r24, 0x3596	; 0x803596 <evButtonEvents>
    5556:	90 91 97 35 	lds	r25, 0x3597	; 0x803597 <evButtonEvents+0x1>
    555a:	42 e0       	ldi	r20, 0x02	; 2
    555c:	50 e0       	ldi	r21, 0x00	; 0
    555e:	60 e0       	ldi	r22, 0x00	; 0
    5560:	70 e0       	ldi	r23, 0x00	; 0
    5562:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
		}
		if(getButtonPress(BUTTON3) == SHORT_PRESSED) {
    5566:	82 e0       	ldi	r24, 0x02	; 2
    5568:	0e 94 db 02 	call	0x5b6	; 0x5b6 <getButtonPress>
    556c:	81 30       	cpi	r24, 0x01	; 1
    556e:	51 f4       	brne	.+20     	; 0x5584 <vButtonHandler+0x72>
			xEventGroupSetBits(evButtonEvents, EVBUTTONS_S3);
    5570:	80 91 96 35 	lds	r24, 0x3596	; 0x803596 <evButtonEvents>
    5574:	90 91 97 35 	lds	r25, 0x3597	; 0x803597 <evButtonEvents+0x1>
    5578:	44 e0       	ldi	r20, 0x04	; 4
    557a:	50 e0       	ldi	r21, 0x00	; 0
    557c:	60 e0       	ldi	r22, 0x00	; 0
    557e:	70 e0       	ldi	r23, 0x00	; 0
    5580:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
		}
		if(getButtonPress(BUTTON4) == SHORT_PRESSED) {
    5584:	83 e0       	ldi	r24, 0x03	; 3
    5586:	0e 94 db 02 	call	0x5b6	; 0x5b6 <getButtonPress>
    558a:	81 30       	cpi	r24, 0x01	; 1
    558c:	51 f4       	brne	.+20     	; 0x55a2 <vButtonHandler+0x90>
			xEventGroupSetBits(evButtonEvents, EVBUTTONS_S4);
    558e:	80 91 96 35 	lds	r24, 0x3596	; 0x803596 <evButtonEvents>
    5592:	90 91 97 35 	lds	r25, 0x3597	; 0x803597 <evButtonEvents+0x1>
    5596:	48 e0       	ldi	r20, 0x08	; 8
    5598:	50 e0       	ldi	r21, 0x00	; 0
    559a:	60 e0       	ldi	r22, 0x00	; 0
    559c:	70 e0       	ldi	r23, 0x00	; 0
    559e:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
		}
		if(getButtonPress(BUTTON1) == LONG_PRESSED) {
    55a2:	80 e0       	ldi	r24, 0x00	; 0
    55a4:	0e 94 db 02 	call	0x5b6	; 0x5b6 <getButtonPress>
    55a8:	88 23       	and	r24, r24
    55aa:	51 f4       	brne	.+20     	; 0x55c0 <vButtonHandler+0xae>
			xEventGroupSetBits(evButtonEvents, EVBUTTONS_L1);
    55ac:	80 91 96 35 	lds	r24, 0x3596	; 0x803596 <evButtonEvents>
    55b0:	90 91 97 35 	lds	r25, 0x3597	; 0x803597 <evButtonEvents+0x1>
    55b4:	40 e1       	ldi	r20, 0x10	; 16
    55b6:	50 e0       	ldi	r21, 0x00	; 0
    55b8:	60 e0       	ldi	r22, 0x00	; 0
    55ba:	70 e0       	ldi	r23, 0x00	; 0
    55bc:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
		}
		if(getButtonPress(BUTTON2) == LONG_PRESSED) {
    55c0:	81 e0       	ldi	r24, 0x01	; 1
    55c2:	0e 94 db 02 	call	0x5b6	; 0x5b6 <getButtonPress>
    55c6:	88 23       	and	r24, r24
    55c8:	51 f4       	brne	.+20     	; 0x55de <vButtonHandler+0xcc>
			xEventGroupSetBits(evButtonEvents, EVBUTTONS_L2);
    55ca:	80 91 96 35 	lds	r24, 0x3596	; 0x803596 <evButtonEvents>
    55ce:	90 91 97 35 	lds	r25, 0x3597	; 0x803597 <evButtonEvents+0x1>
    55d2:	40 e2       	ldi	r20, 0x20	; 32
    55d4:	50 e0       	ldi	r21, 0x00	; 0
    55d6:	60 e0       	ldi	r22, 0x00	; 0
    55d8:	70 e0       	ldi	r23, 0x00	; 0
    55da:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
		}
		if(getButtonPress(BUTTON3) == LONG_PRESSED) {
    55de:	82 e0       	ldi	r24, 0x02	; 2
    55e0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <getButtonPress>
    55e4:	88 23       	and	r24, r24
    55e6:	51 f4       	brne	.+20     	; 0x55fc <vButtonHandler+0xea>
			xEventGroupSetBits(evButtonEvents, EVBUTTONS_L3);
    55e8:	80 91 96 35 	lds	r24, 0x3596	; 0x803596 <evButtonEvents>
    55ec:	90 91 97 35 	lds	r25, 0x3597	; 0x803597 <evButtonEvents+0x1>
    55f0:	40 e4       	ldi	r20, 0x40	; 64
    55f2:	50 e0       	ldi	r21, 0x00	; 0
    55f4:	60 e0       	ldi	r22, 0x00	; 0
    55f6:	70 e0       	ldi	r23, 0x00	; 0
    55f8:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
		}
		if(getButtonPress(BUTTON4) == LONG_PRESSED) {
    55fc:	83 e0       	ldi	r24, 0x03	; 3
    55fe:	0e 94 db 02 	call	0x5b6	; 0x5b6 <getButtonPress>
    5602:	88 23       	and	r24, r24
    5604:	51 f4       	brne	.+20     	; 0x561a <vButtonHandler+0x108>
			xEventGroupSetBits(evButtonEvents, EVBUTTONS_L4);
    5606:	80 91 96 35 	lds	r24, 0x3596	; 0x803596 <evButtonEvents>
    560a:	90 91 97 35 	lds	r25, 0x3597	; 0x803597 <evButtonEvents+0x1>
    560e:	40 e8       	ldi	r20, 0x80	; 128
    5610:	50 e0       	ldi	r21, 0x00	; 0
    5612:	60 e0       	ldi	r22, 0x00	; 0
    5614:	70 e0       	ldi	r23, 0x00	; 0
    5616:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
		}
		vTaskDelay((1000/BUTTON_UPDATE_FREQUENCY_HZ)/portTICK_RATE_MS); //Buttonupdate Delay
    561a:	6a e0       	ldi	r22, 0x0A	; 10
    561c:	70 e0       	ldi	r23, 0x00	; 0
    561e:	80 e0       	ldi	r24, 0x00	; 0
    5620:	90 e0       	ldi	r25, 0x00	; 0
    5622:	0e 94 bc 13 	call	0x2778	; 0x2778 <vTaskDelay>
	}
    5626:	7f cf       	rjmp	.-258    	; 0x5526 <vButtonHandler+0x14>

00005628 <vLeibniz>:

//////////////////////////////////////////////////////////////////////////
//						Leibniz calculation								//
//////////////////////////////////////////////////////////////////////////

void vLeibniz(void *pvParameter){
    5628:	cf 92       	push	r12
    562a:	df 92       	push	r13
    562c:	ef 92       	push	r14
    562e:	ff 92       	push	r15
    5630:	0f 93       	push	r16
    5632:	1f 93       	push	r17
    5634:	cf 93       	push	r28
    5636:	df 93       	push	r29
    5638:	cd b7       	in	r28, 0x3d	; 61
    563a:	de b7       	in	r29, 0x3e	; 62
    563c:	ac 97       	sbiw	r28, 0x2c	; 44
    563e:	cd bf       	out	0x3d, r28	; 61
    5640:	de bf       	out	0x3e, r29	; 62
    5642:	8b a7       	std	Y+43, r24	; 0x2b
    5644:	9c a7       	std	Y+44, r25	; 0x2c
	(void) pvParameter;
	//Set Local variables
	float32_t PI;
	float32_t Summe;
	
	xEventGroupWaitBits(evStartStopEvents, EV_START_LEIBNIZ, pdFALSE, pdTRUE, portMAX_DELAY);	//Task waits for Eventbit to start
    5646:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    564a:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    564e:	cc 24       	eor	r12, r12
    5650:	ca 94       	dec	r12
    5652:	dc 2c       	mov	r13, r12
    5654:	76 01       	movw	r14, r12
    5656:	01 e0       	ldi	r16, 0x01	; 1
    5658:	20 e0       	ldi	r18, 0x00	; 0
    565a:	41 e0       	ldi	r20, 0x01	; 1
    565c:	50 e0       	ldi	r21, 0x00	; 0
    565e:	60 e0       	ldi	r22, 0x00	; 0
    5660:	70 e0       	ldi	r23, 0x00	; 0
    5662:	0e 94 7f 04 	call	0x8fe	; 0x8fe <xEventGroupWaitBits>
	TickType_t Endtime;
	
	start_here:	//Startpoint after reset calculation
	
	//Local Variables with startvalue,
	PI = 0;
    5666:	1b 8e       	std	Y+27, r1	; 0x1b
    5668:	1c 8e       	std	Y+28, r1	; 0x1c
    566a:	1d 8e       	std	Y+29, r1	; 0x1d
    566c:	1e 8e       	std	Y+30, r1	; 0x1e
	Summe = 0.0;
    566e:	19 82       	std	Y+1, r1	; 0x01
    5670:	1a 82       	std	Y+2, r1	; 0x02
    5672:	1b 82       	std	Y+3, r1	; 0x03
    5674:	1c 82       	std	Y+4, r1	; 0x04
	TickType_t lastExecutionTime = xTaskGetTickCount();
    5676:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <xTaskGetTickCount>
    567a:	dc 01       	movw	r26, r24
    567c:	cb 01       	movw	r24, r22
    567e:	89 87       	std	Y+9, r24	; 0x09
    5680:	9a 87       	std	Y+10, r25	; 0x0a
    5682:	ab 87       	std	Y+11, r26	; 0x0b
    5684:	bc 87       	std	Y+12, r27	; 0x0c
	uint32_t i = -1;
    5686:	8f ef       	ldi	r24, 0xFF	; 255
    5688:	9f ef       	ldi	r25, 0xFF	; 255
    568a:	dc 01       	movw	r26, r24
    568c:	8d 87       	std	Y+13, r24	; 0x0d
    568e:	9e 87       	std	Y+14, r25	; 0x0e
    5690:	af 87       	std	Y+15, r26	; 0x0f
    5692:	b8 8b       	std	Y+16, r27	; 0x10
	uint32_t n = 1;
    5694:	81 e0       	ldi	r24, 0x01	; 1
    5696:	90 e0       	ldi	r25, 0x00	; 0
    5698:	a0 e0       	ldi	r26, 0x00	; 0
    569a:	b0 e0       	ldi	r27, 0x00	; 0
    569c:	89 8b       	std	Y+17, r24	; 0x11
    569e:	9a 8b       	std	Y+18, r25	; 0x12
    56a0:	ab 8b       	std	Y+19, r26	; 0x13
    56a2:	bc 8b       	std	Y+20, r27	; 0x14
	int Elapsedtime = 0;
    56a4:	1d 8a       	std	Y+21, r1	; 0x15
    56a6:	1e 8a       	std	Y+22, r1	; 0x16
	int elapsedSeconds = 0;
    56a8:	1f 8a       	std	Y+23, r1	; 0x17
    56aa:	18 8e       	std	Y+24, r1	; 0x18
	uint32_t currentTime = 0;
    56ac:	1f 8e       	std	Y+31, r1	; 0x1f
    56ae:	18 a2       	std	Y+32, r1	; 0x20
    56b0:	19 a2       	std	Y+33, r1	; 0x21
    56b2:	1a a2       	std	Y+34, r1	; 0x22
	uint32_t Elapsedcounter = 0;
    56b4:	1b a2       	std	Y+35, r1	; 0x23
    56b6:	1c a2       	std	Y+36, r1	; 0x24
    56b8:	1d a2       	std	Y+37, r1	; 0x25
    56ba:	1e a2       	std	Y+38, r1	; 0x26
	int Codeblocker = 0;
    56bc:	19 8e       	std	Y+25, r1	; 0x19
    56be:	1a 8e       	std	Y+26, r1	; 0x1a
	Starttime  = xTaskGetTickCount();
    56c0:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <xTaskGetTickCount>
    56c4:	dc 01       	movw	r26, r24
    56c6:	cb 01       	movw	r24, r22
    56c8:	8d 83       	std	Y+5, r24	; 0x05
    56ca:	9e 83       	std	Y+6, r25	; 0x06
    56cc:	af 83       	std	Y+7, r26	; 0x07
    56ce:	b8 87       	std	Y+8, r27	; 0x08
	
	for(i = 0; i < n; i ++){
    56d0:	1d 86       	std	Y+13, r1	; 0x0d
    56d2:	1e 86       	std	Y+14, r1	; 0x0e
    56d4:	1f 86       	std	Y+15, r1	; 0x0f
    56d6:	18 8a       	std	Y+16, r1	; 0x10
    56d8:	6c c2       	rjmp	.+1240   	; 0x5bb2 <vLeibniz+0x58a>
		currentTime = xTaskGetTickCount();
    56da:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <xTaskGetTickCount>
    56de:	dc 01       	movw	r26, r24
    56e0:	cb 01       	movw	r24, r22
    56e2:	8f 8f       	std	Y+31, r24	; 0x1f
    56e4:	98 a3       	std	Y+32, r25	; 0x20
    56e6:	a9 a3       	std	Y+33, r26	; 0x21
    56e8:	ba a3       	std	Y+34, r27	; 0x22
		Elapsedcounter = currentTime - lastExecutionTime;
    56ea:	2f 8d       	ldd	r18, Y+31	; 0x1f
    56ec:	38 a1       	ldd	r19, Y+32	; 0x20
    56ee:	49 a1       	ldd	r20, Y+33	; 0x21
    56f0:	5a a1       	ldd	r21, Y+34	; 0x22
    56f2:	89 85       	ldd	r24, Y+9	; 0x09
    56f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    56f6:	ab 85       	ldd	r26, Y+11	; 0x0b
    56f8:	bc 85       	ldd	r27, Y+12	; 0x0c
    56fa:	79 01       	movw	r14, r18
    56fc:	8a 01       	movw	r16, r20
    56fe:	e8 1a       	sub	r14, r24
    5700:	f9 0a       	sbc	r15, r25
    5702:	0a 0b       	sbc	r16, r26
    5704:	1b 0b       	sbc	r17, r27
    5706:	d8 01       	movw	r26, r16
    5708:	c7 01       	movw	r24, r14
    570a:	8b a3       	std	Y+35, r24	; 0x23
    570c:	9c a3       	std	Y+36, r25	; 0x24
    570e:	ad a3       	std	Y+37, r26	; 0x25
    5710:	be a3       	std	Y+38, r27	; 0x26
		if(Bits & EV_STOP_LEIBNIZ){	//Stop function
    5712:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    5716:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    571a:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    571e:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    5722:	82 70       	andi	r24, 0x02	; 2
    5724:	99 27       	eor	r25, r25
    5726:	aa 27       	eor	r26, r26
    5728:	bb 27       	eor	r27, r27
    572a:	89 2b       	or	r24, r25
    572c:	8a 2b       	or	r24, r26
    572e:	8b 2b       	or	r24, r27
    5730:	09 f4       	brne	.+2      	; 0x5734 <vLeibniz+0x10c>
    5732:	8f c0       	rjmp	.+286    	; 0x5852 <vLeibniz+0x22a>
			Endtime = xTaskGetTickCount() - Starttime;
    5734:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <xTaskGetTickCount>
    5738:	9b 01       	movw	r18, r22
    573a:	ac 01       	movw	r20, r24
    573c:	8d 81       	ldd	r24, Y+5	; 0x05
    573e:	9e 81       	ldd	r25, Y+6	; 0x06
    5740:	af 81       	ldd	r26, Y+7	; 0x07
    5742:	b8 85       	ldd	r27, Y+8	; 0x08
    5744:	79 01       	movw	r14, r18
    5746:	8a 01       	movw	r16, r20
    5748:	e8 1a       	sub	r14, r24
    574a:	f9 0a       	sbc	r15, r25
    574c:	0a 0b       	sbc	r16, r26
    574e:	1b 0b       	sbc	r17, r27
    5750:	d8 01       	movw	r26, r16
    5752:	c7 01       	movw	r24, r14
    5754:	8f a3       	std	Y+39, r24	; 0x27
    5756:	98 a7       	std	Y+40, r25	; 0x28
    5758:	a9 a7       	std	Y+41, r26	; 0x29
    575a:	ba a7       	std	Y+42, r27	; 0x2a
			Elapsedtime += Endtime;
    575c:	2f a1       	ldd	r18, Y+39	; 0x27
    575e:	38 a5       	ldd	r19, Y+40	; 0x28
    5760:	8d 89       	ldd	r24, Y+21	; 0x15
    5762:	9e 89       	ldd	r25, Y+22	; 0x16
    5764:	82 0f       	add	r24, r18
    5766:	93 1f       	adc	r25, r19
    5768:	8d 8b       	std	Y+21, r24	; 0x15
    576a:	9e 8b       	std	Y+22, r25	; 0x16
			xEventGroupSetBits(evStartStopEvents, EV_STOPPED_LEIBNIZ);
    576c:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    5770:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5774:	40 e1       	ldi	r20, 0x10	; 16
    5776:	50 e0       	ldi	r21, 0x00	; 0
    5778:	60 e0       	ldi	r22, 0x00	; 0
    577a:	70 e0       	ldi	r23, 0x00	; 0
    577c:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
			Bits = xEventGroupGetBits(evStartStopEvents);
    5780:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    5784:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5788:	40 e0       	ldi	r20, 0x00	; 0
    578a:	50 e0       	ldi	r21, 0x00	; 0
    578c:	ba 01       	movw	r22, r20
    578e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    5792:	dc 01       	movw	r26, r24
    5794:	cb 01       	movw	r24, r22
    5796:	80 93 78 35 	sts	0x3578, r24	; 0x803578 <Bits>
    579a:	90 93 79 35 	sts	0x3579, r25	; 0x803579 <Bits+0x1>
    579e:	a0 93 7a 35 	sts	0x357A, r26	; 0x80357a <Bits+0x2>
    57a2:	b0 93 7b 35 	sts	0x357B, r27	; 0x80357b <Bits+0x3>
			Bits &= (~EV_START_LEIBNIZ & ~EV_STOP_LEIBNIZ) ;  //delete EV_START_LEIBNIZ and EV_STOP_LEIBNIZ from eventgroup
    57a6:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    57aa:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    57ae:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    57b2:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    57b6:	8c 7f       	andi	r24, 0xFC	; 252
    57b8:	80 93 78 35 	sts	0x3578, r24	; 0x803578 <Bits>
    57bc:	90 93 79 35 	sts	0x3579, r25	; 0x803579 <Bits+0x1>
    57c0:	a0 93 7a 35 	sts	0x357A, r26	; 0x80357a <Bits+0x2>
    57c4:	b0 93 7b 35 	sts	0x357B, r27	; 0x80357b <Bits+0x3>
			vTaskSuspend(NULL);
    57c8:	80 e0       	ldi	r24, 0x00	; 0
    57ca:	90 e0       	ldi	r25, 0x00	; 0
    57cc:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <vTaskSuspend>
			if (Bits & EV_RESET_LEIBNIZ){	//Reset function
    57d0:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    57d4:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    57d8:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    57dc:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    57e0:	80 74       	andi	r24, 0x40	; 64
    57e2:	99 27       	eor	r25, r25
    57e4:	aa 27       	eor	r26, r26
    57e6:	bb 27       	eor	r27, r27
    57e8:	89 2b       	or	r24, r25
    57ea:	8a 2b       	or	r24, r26
    57ec:	8b 2b       	or	r24, r27
    57ee:	41 f1       	breq	.+80     	; 0x5840 <vLeibniz+0x218>
				xEventGroupClearBits(evStartStopEvents, EV_CLEAR);
    57f0:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    57f4:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    57f8:	4f ef       	ldi	r20, 0xFF	; 255
    57fa:	50 e0       	ldi	r21, 0x00	; 0
    57fc:	60 e0       	ldi	r22, 0x00	; 0
    57fe:	70 e0       	ldi	r23, 0x00	; 0
    5800:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
				xEventGroupSetBits(evStartStopEvents, EV_START_LEIBNIZ);
    5804:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    5808:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    580c:	41 e0       	ldi	r20, 0x01	; 1
    580e:	50 e0       	ldi	r21, 0x00	; 0
    5810:	60 e0       	ldi	r22, 0x00	; 0
    5812:	70 e0       	ldi	r23, 0x00	; 0
    5814:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
				Bits = xEventGroupGetBits(evStartStopEvents);
    5818:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    581c:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5820:	40 e0       	ldi	r20, 0x00	; 0
    5822:	50 e0       	ldi	r21, 0x00	; 0
    5824:	ba 01       	movw	r22, r20
    5826:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    582a:	dc 01       	movw	r26, r24
    582c:	cb 01       	movw	r24, r22
    582e:	80 93 78 35 	sts	0x3578, r24	; 0x803578 <Bits>
    5832:	90 93 79 35 	sts	0x3579, r25	; 0x803579 <Bits+0x1>
    5836:	a0 93 7a 35 	sts	0x357A, r26	; 0x80357a <Bits+0x2>
    583a:	b0 93 7b 35 	sts	0x357B, r27	; 0x80357b <Bits+0x3>
				goto start_here;
    583e:	13 cf       	rjmp	.-474    	; 0x5666 <vLeibniz+0x3e>
			}
			Starttime  = xTaskGetTickCount();
    5840:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <xTaskGetTickCount>
    5844:	dc 01       	movw	r26, r24
    5846:	cb 01       	movw	r24, r22
    5848:	8d 83       	std	Y+5, r24	; 0x05
    584a:	9e 83       	std	Y+6, r25	; 0x06
    584c:	af 83       	std	Y+7, r26	; 0x07
    584e:	b8 87       	std	Y+8, r27	; 0x08
    5850:	55 c0       	rjmp	.+170    	; 0x58fc <vLeibniz+0x2d4>
		}
		else if (Bits & EV_RESET_LEIBNIZ){	//Reset function
    5852:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    5856:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    585a:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    585e:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    5862:	80 74       	andi	r24, 0x40	; 64
    5864:	99 27       	eor	r25, r25
    5866:	aa 27       	eor	r26, r26
    5868:	bb 27       	eor	r27, r27
    586a:	89 2b       	or	r24, r25
    586c:	8a 2b       	or	r24, r26
    586e:	8b 2b       	or	r24, r27
    5870:	09 f4       	brne	.+2      	; 0x5874 <vLeibniz+0x24c>
    5872:	44 c0       	rjmp	.+136    	; 0x58fc <vLeibniz+0x2d4>
			xEventGroupClearBits(evStartStopEvents, EV_CLEAR);
    5874:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    5878:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    587c:	4f ef       	ldi	r20, 0xFF	; 255
    587e:	50 e0       	ldi	r21, 0x00	; 0
    5880:	60 e0       	ldi	r22, 0x00	; 0
    5882:	70 e0       	ldi	r23, 0x00	; 0
    5884:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
			xEventGroupSetBits(evStartStopEvents, EV_STOPPED_LEIBNIZ);
    5888:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    588c:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5890:	40 e1       	ldi	r20, 0x10	; 16
    5892:	50 e0       	ldi	r21, 0x00	; 0
    5894:	60 e0       	ldi	r22, 0x00	; 0
    5896:	70 e0       	ldi	r23, 0x00	; 0
    5898:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
			Bits = xEventGroupGetBits(evStartStopEvents);
    589c:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    58a0:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    58a4:	40 e0       	ldi	r20, 0x00	; 0
    58a6:	50 e0       	ldi	r21, 0x00	; 0
    58a8:	ba 01       	movw	r22, r20
    58aa:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    58ae:	dc 01       	movw	r26, r24
    58b0:	cb 01       	movw	r24, r22
    58b2:	80 93 78 35 	sts	0x3578, r24	; 0x803578 <Bits>
    58b6:	90 93 79 35 	sts	0x3579, r25	; 0x803579 <Bits+0x1>
    58ba:	a0 93 7a 35 	sts	0x357A, r26	; 0x80357a <Bits+0x2>
    58be:	b0 93 7b 35 	sts	0x357B, r27	; 0x80357b <Bits+0x3>
			memset(LeibnizPiString, 0, sizeof(LeibnizPiString));		//String gets emptied
    58c2:	40 e1       	ldi	r20, 0x10	; 16
    58c4:	50 e0       	ldi	r21, 0x00	; 0
    58c6:	60 e0       	ldi	r22, 0x00	; 0
    58c8:	70 e0       	ldi	r23, 0x00	; 0
    58ca:	8f e9       	ldi	r24, 0x9F	; 159
    58cc:	95 e3       	ldi	r25, 0x35	; 53
    58ce:	0e 94 3f 41 	call	0x827e	; 0x827e <memset>
			memset(LeibnizTimeString, 0, sizeof(LeibnizTimeString));	//String gets emptied
    58d2:	43 e0       	ldi	r20, 0x03	; 3
    58d4:	50 e0       	ldi	r21, 0x00	; 0
    58d6:	60 e0       	ldi	r22, 0x00	; 0
    58d8:	70 e0       	ldi	r23, 0x00	; 0
    58da:	83 e6       	ldi	r24, 0x63	; 99
    58dc:	95 e3       	ldi	r25, 0x35	; 53
    58de:	0e 94 3f 41 	call	0x827e	; 0x827e <memset>
			memset(LeibnizExactTime, 0, sizeof(LeibnizExactTime));		//String gets emptied
    58e2:	4a e0       	ldi	r20, 0x0A	; 10
    58e4:	50 e0       	ldi	r21, 0x00	; 0
    58e6:	60 e0       	ldi	r22, 0x00	; 0
    58e8:	70 e0       	ldi	r23, 0x00	; 0
    58ea:	8c e8       	ldi	r24, 0x8C	; 140
    58ec:	95 e3       	ldi	r25, 0x35	; 53
    58ee:	0e 94 3f 41 	call	0x827e	; 0x827e <memset>
			vTaskSuspend(NULL);
    58f2:	80 e0       	ldi	r24, 0x00	; 0
    58f4:	90 e0       	ldi	r25, 0x00	; 0
    58f6:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <vTaskSuspend>
			goto start_here;
    58fa:	b5 ce       	rjmp	.-662    	; 0x5666 <vLeibniz+0x3e>
		}
		
		//Leibniz algorithm
		Summe += (i % 2 == 0 ? 1 : -1) / (2.0 * i + 1);
    58fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    58fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    5900:	af 85       	ldd	r26, Y+15	; 0x0f
    5902:	b8 89       	ldd	r27, Y+16	; 0x10
    5904:	81 70       	andi	r24, 0x01	; 1
    5906:	99 27       	eor	r25, r25
    5908:	aa 27       	eor	r26, r26
    590a:	bb 27       	eor	r27, r27
    590c:	89 2b       	or	r24, r25
    590e:	8a 2b       	or	r24, r26
    5910:	8b 2b       	or	r24, r27
    5912:	49 f4       	brne	.+18     	; 0x5926 <vLeibniz+0x2fe>
    5914:	0f 2e       	mov	r0, r31
    5916:	c1 2c       	mov	r12, r1
    5918:	d1 2c       	mov	r13, r1
    591a:	f0 e8       	ldi	r31, 0x80	; 128
    591c:	ef 2e       	mov	r14, r31
    591e:	ff e3       	ldi	r31, 0x3F	; 63
    5920:	ff 2e       	mov	r15, r31
    5922:	f0 2d       	mov	r31, r0
    5924:	08 c0       	rjmp	.+16     	; 0x5936 <vLeibniz+0x30e>
    5926:	0f 2e       	mov	r0, r31
    5928:	c1 2c       	mov	r12, r1
    592a:	d1 2c       	mov	r13, r1
    592c:	f0 e8       	ldi	r31, 0x80	; 128
    592e:	ef 2e       	mov	r14, r31
    5930:	ff eb       	ldi	r31, 0xBF	; 191
    5932:	ff 2e       	mov	r15, r31
    5934:	f0 2d       	mov	r31, r0
    5936:	6d 85       	ldd	r22, Y+13	; 0x0d
    5938:	7e 85       	ldd	r23, Y+14	; 0x0e
    593a:	8f 85       	ldd	r24, Y+15	; 0x0f
    593c:	98 89       	ldd	r25, Y+16	; 0x10
    593e:	0e 94 5d 3b 	call	0x76ba	; 0x76ba <__floatunsisf>
    5942:	dc 01       	movw	r26, r24
    5944:	cb 01       	movw	r24, r22
    5946:	9c 01       	movw	r18, r24
    5948:	ad 01       	movw	r20, r26
    594a:	bc 01       	movw	r22, r24
    594c:	cd 01       	movw	r24, r26
    594e:	0e 94 44 3a 	call	0x7488	; 0x7488 <__addsf3>
    5952:	dc 01       	movw	r26, r24
    5954:	cb 01       	movw	r24, r22
    5956:	20 e0       	ldi	r18, 0x00	; 0
    5958:	30 e0       	ldi	r19, 0x00	; 0
    595a:	40 e8       	ldi	r20, 0x80	; 128
    595c:	5f e3       	ldi	r21, 0x3F	; 63
    595e:	bc 01       	movw	r22, r24
    5960:	cd 01       	movw	r24, r26
    5962:	0e 94 44 3a 	call	0x7488	; 0x7488 <__addsf3>
    5966:	dc 01       	movw	r26, r24
    5968:	cb 01       	movw	r24, r22
    596a:	9c 01       	movw	r18, r24
    596c:	ad 01       	movw	r20, r26
    596e:	c7 01       	movw	r24, r14
    5970:	b6 01       	movw	r22, r12
    5972:	0e 94 b5 3a 	call	0x756a	; 0x756a <__divsf3>
    5976:	dc 01       	movw	r26, r24
    5978:	cb 01       	movw	r24, r22
    597a:	9c 01       	movw	r18, r24
    597c:	ad 01       	movw	r20, r26
    597e:	69 81       	ldd	r22, Y+1	; 0x01
    5980:	7a 81       	ldd	r23, Y+2	; 0x02
    5982:	8b 81       	ldd	r24, Y+3	; 0x03
    5984:	9c 81       	ldd	r25, Y+4	; 0x04
    5986:	0e 94 44 3a 	call	0x7488	; 0x7488 <__addsf3>
    598a:	dc 01       	movw	r26, r24
    598c:	cb 01       	movw	r24, r22
    598e:	89 83       	std	Y+1, r24	; 0x01
    5990:	9a 83       	std	Y+2, r25	; 0x02
    5992:	ab 83       	std	Y+3, r26	; 0x03
    5994:	bc 83       	std	Y+4, r27	; 0x04
		PI = 4 * Summe;
    5996:	20 e0       	ldi	r18, 0x00	; 0
    5998:	30 e0       	ldi	r19, 0x00	; 0
    599a:	40 e8       	ldi	r20, 0x80	; 128
    599c:	50 e4       	ldi	r21, 0x40	; 64
    599e:	69 81       	ldd	r22, Y+1	; 0x01
    59a0:	7a 81       	ldd	r23, Y+2	; 0x02
    59a2:	8b 81       	ldd	r24, Y+3	; 0x03
    59a4:	9c 81       	ldd	r25, Y+4	; 0x04
    59a6:	0e 94 14 3c 	call	0x7828	; 0x7828 <__mulsf3>
    59aa:	dc 01       	movw	r26, r24
    59ac:	cb 01       	movw	r24, r22
    59ae:	8b 8f       	std	Y+27, r24	; 0x1b
    59b0:	9c 8f       	std	Y+28, r25	; 0x1c
    59b2:	ad 8f       	std	Y+29, r26	; 0x1d
    59b4:	be 8f       	std	Y+30, r27	; 0x1e
		n ++;
    59b6:	89 89       	ldd	r24, Y+17	; 0x11
    59b8:	9a 89       	ldd	r25, Y+18	; 0x12
    59ba:	ab 89       	ldd	r26, Y+19	; 0x13
    59bc:	bc 89       	ldd	r27, Y+20	; 0x14
    59be:	01 96       	adiw	r24, 0x01	; 1
    59c0:	a1 1d       	adc	r26, r1
    59c2:	b1 1d       	adc	r27, r1
    59c4:	89 8b       	std	Y+17, r24	; 0x11
    59c6:	9a 8b       	std	Y+18, r25	; 0x12
    59c8:	ab 8b       	std	Y+19, r26	; 0x13
    59ca:	bc 8b       	std	Y+20, r27	; 0x14
		
		//Writes Pi and elapsed Time into Strings
		if (checkEvent & EV_WRITE_IN_LEIBNIZSTRING) {
    59cc:	80 91 74 35 	lds	r24, 0x3574	; 0x803574 <checkEvent>
    59d0:	90 91 75 35 	lds	r25, 0x3575	; 0x803575 <checkEvent+0x1>
    59d4:	81 70       	andi	r24, 0x01	; 1
    59d6:	99 27       	eor	r25, r25
    59d8:	89 2b       	or	r24, r25
    59da:	09 f4       	brne	.+2      	; 0x59de <vLeibniz+0x3b6>
    59dc:	73 c0       	rjmp	.+230    	; 0x5ac4 <vLeibniz+0x49c>
			checkEvent = xEventGroupGetBits(evREADWRITE);
    59de:	80 91 68 35 	lds	r24, 0x3568	; 0x803568 <evREADWRITE>
    59e2:	90 91 69 35 	lds	r25, 0x3569	; 0x803569 <evREADWRITE+0x1>
    59e6:	40 e0       	ldi	r20, 0x00	; 0
    59e8:	50 e0       	ldi	r21, 0x00	; 0
    59ea:	ba 01       	movw	r22, r20
    59ec:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    59f0:	dc 01       	movw	r26, r24
    59f2:	cb 01       	movw	r24, r22
    59f4:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <checkEvent>
    59f8:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <checkEvent+0x1>
			sprintf(&LeibnizPiString[0], "PI is %.7f", PI);
    59fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    59fe:	8f 93       	push	r24
    5a00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5a02:	8f 93       	push	r24
    5a04:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5a06:	8f 93       	push	r24
    5a08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a0a:	8f 93       	push	r24
    5a0c:	8a ee       	ldi	r24, 0xEA	; 234
    5a0e:	90 e2       	ldi	r25, 0x20	; 32
    5a10:	89 2f       	mov	r24, r25
    5a12:	8f 93       	push	r24
    5a14:	8a ee       	ldi	r24, 0xEA	; 234
    5a16:	90 e2       	ldi	r25, 0x20	; 32
    5a18:	8f 93       	push	r24
    5a1a:	8f e9       	ldi	r24, 0x9F	; 159
    5a1c:	95 e3       	ldi	r25, 0x35	; 53
    5a1e:	89 2f       	mov	r24, r25
    5a20:	8f 93       	push	r24
    5a22:	8f e9       	ldi	r24, 0x9F	; 159
    5a24:	95 e3       	ldi	r25, 0x35	; 53
    5a26:	8f 93       	push	r24
    5a28:	0e 94 c6 41 	call	0x838c	; 0x838c <sprintf>
    5a2c:	0d b7       	in	r16, 0x3d	; 61
    5a2e:	1e b7       	in	r17, 0x3e	; 62
    5a30:	08 5f       	subi	r16, 0xF8	; 248
    5a32:	1f 4f       	sbci	r17, 0xFF	; 255
    5a34:	cd bf       	out	0x3d, r28	; 61
    5a36:	de bf       	out	0x3e, r29	; 62
			sprintf(&LeibnizTimeString[0], "%ds", (elapsedSeconds / 2));
    5a38:	8f 89       	ldd	r24, Y+23	; 0x17
    5a3a:	98 8d       	ldd	r25, Y+24	; 0x18
    5a3c:	99 23       	and	r25, r25
    5a3e:	0c f4       	brge	.+2      	; 0x5a42 <vLeibniz+0x41a>
    5a40:	01 96       	adiw	r24, 0x01	; 1
    5a42:	95 95       	asr	r25
    5a44:	87 95       	ror	r24
    5a46:	29 2f       	mov	r18, r25
    5a48:	2f 93       	push	r18
    5a4a:	8f 93       	push	r24
    5a4c:	85 ef       	ldi	r24, 0xF5	; 245
    5a4e:	90 e2       	ldi	r25, 0x20	; 32
    5a50:	89 2f       	mov	r24, r25
    5a52:	8f 93       	push	r24
    5a54:	85 ef       	ldi	r24, 0xF5	; 245
    5a56:	90 e2       	ldi	r25, 0x20	; 32
    5a58:	8f 93       	push	r24
    5a5a:	83 e6       	ldi	r24, 0x63	; 99
    5a5c:	95 e3       	ldi	r25, 0x35	; 53
    5a5e:	89 2f       	mov	r24, r25
    5a60:	8f 93       	push	r24
    5a62:	83 e6       	ldi	r24, 0x63	; 99
    5a64:	95 e3       	ldi	r25, 0x35	; 53
    5a66:	8f 93       	push	r24
    5a68:	0e 94 c6 41 	call	0x838c	; 0x838c <sprintf>
    5a6c:	0f 90       	pop	r0
    5a6e:	0f 90       	pop	r0
    5a70:	0f 90       	pop	r0
    5a72:	0f 90       	pop	r0
    5a74:	0f 90       	pop	r0
    5a76:	0f 90       	pop	r0
			lastExecutionTime = currentTime;
    5a78:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5a7a:	98 a1       	ldd	r25, Y+32	; 0x20
    5a7c:	a9 a1       	ldd	r26, Y+33	; 0x21
    5a7e:	ba a1       	ldd	r27, Y+34	; 0x22
    5a80:	89 87       	std	Y+9, r24	; 0x09
    5a82:	9a 87       	std	Y+10, r25	; 0x0a
    5a84:	ab 87       	std	Y+11, r26	; 0x0b
    5a86:	bc 87       	std	Y+12, r27	; 0x0c
			elapsedSeconds ++;
    5a88:	8f 89       	ldd	r24, Y+23	; 0x17
    5a8a:	98 8d       	ldd	r25, Y+24	; 0x18
    5a8c:	01 96       	adiw	r24, 0x01	; 1
    5a8e:	8f 8b       	std	Y+23, r24	; 0x17
    5a90:	98 8f       	std	Y+24, r25	; 0x18
			xEventGroupSetBits(evREADWRITE,EV_READ_FROM_LEIBNIZSTRING);
    5a92:	80 91 68 35 	lds	r24, 0x3568	; 0x803568 <evREADWRITE>
    5a96:	90 91 69 35 	lds	r25, 0x3569	; 0x803569 <evREADWRITE+0x1>
    5a9a:	4f ef       	ldi	r20, 0xFF	; 255
    5a9c:	50 e0       	ldi	r21, 0x00	; 0
    5a9e:	60 e0       	ldi	r22, 0x00	; 0
    5aa0:	70 e0       	ldi	r23, 0x00	; 0
    5aa2:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
			checkEvent = xEventGroupGetBits(evREADWRITE);
    5aa6:	80 91 68 35 	lds	r24, 0x3568	; 0x803568 <evREADWRITE>
    5aaa:	90 91 69 35 	lds	r25, 0x3569	; 0x803569 <evREADWRITE+0x1>
    5aae:	40 e0       	ldi	r20, 0x00	; 0
    5ab0:	50 e0       	ldi	r21, 0x00	; 0
    5ab2:	ba 01       	movw	r22, r20
    5ab4:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    5ab8:	dc 01       	movw	r26, r24
    5aba:	cb 01       	movw	r24, r22
    5abc:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <checkEvent>
    5ac0:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <checkEvent+0x1>
		}
		
		//Writes exact Time into String when Pi has reached 5 digits precise, can only happen once trough Codeblock
		if(Codeblocker == 0 && (uint32_t)((PI*100000) > 314159 && (PI*100000) < 314160)){
    5ac4:	89 8d       	ldd	r24, Y+25	; 0x19
    5ac6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5ac8:	89 2b       	or	r24, r25
    5aca:	09 f0       	breq	.+2      	; 0x5ace <vLeibniz+0x4a6>
    5acc:	67 c0       	rjmp	.+206    	; 0x5b9c <vLeibniz+0x574>
    5ace:	20 e0       	ldi	r18, 0x00	; 0
    5ad0:	30 e5       	ldi	r19, 0x50	; 80
    5ad2:	43 ec       	ldi	r20, 0xC3	; 195
    5ad4:	57 e4       	ldi	r21, 0x47	; 71
    5ad6:	6b 8d       	ldd	r22, Y+27	; 0x1b
    5ad8:	7c 8d       	ldd	r23, Y+28	; 0x1c
    5ada:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5adc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5ade:	0e 94 14 3c 	call	0x7828	; 0x7828 <__mulsf3>
    5ae2:	dc 01       	movw	r26, r24
    5ae4:	cb 01       	movw	r24, r22
    5ae6:	20 ee       	ldi	r18, 0xE0	; 224
    5ae8:	35 e6       	ldi	r19, 0x65	; 101
    5aea:	49 e9       	ldi	r20, 0x99	; 153
    5aec:	58 e4       	ldi	r21, 0x48	; 72
    5aee:	bc 01       	movw	r22, r24
    5af0:	cd 01       	movw	r24, r26
    5af2:	0e 94 0f 3c 	call	0x781e	; 0x781e <__gesf2>
    5af6:	18 16       	cp	r1, r24
    5af8:	0c f0       	brlt	.+2      	; 0x5afc <vLeibniz+0x4d4>
    5afa:	50 c0       	rjmp	.+160    	; 0x5b9c <vLeibniz+0x574>
    5afc:	20 e0       	ldi	r18, 0x00	; 0
    5afe:	30 e5       	ldi	r19, 0x50	; 80
    5b00:	43 ec       	ldi	r20, 0xC3	; 195
    5b02:	57 e4       	ldi	r21, 0x47	; 71
    5b04:	6b 8d       	ldd	r22, Y+27	; 0x1b
    5b06:	7c 8d       	ldd	r23, Y+28	; 0x1c
    5b08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5b0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5b0c:	0e 94 14 3c 	call	0x7828	; 0x7828 <__mulsf3>
    5b10:	dc 01       	movw	r26, r24
    5b12:	cb 01       	movw	r24, r22
    5b14:	20 e0       	ldi	r18, 0x00	; 0
    5b16:	36 e6       	ldi	r19, 0x66	; 102
    5b18:	49 e9       	ldi	r20, 0x99	; 153
    5b1a:	58 e4       	ldi	r21, 0x48	; 72
    5b1c:	bc 01       	movw	r22, r24
    5b1e:	cd 01       	movw	r24, r26
    5b20:	0e 94 b0 3a 	call	0x7560	; 0x7560 <__cmpsf2>
    5b24:	88 23       	and	r24, r24
    5b26:	d4 f5       	brge	.+116    	; 0x5b9c <vLeibniz+0x574>
			Endtime = xTaskGetTickCount() - Starttime;
    5b28:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <xTaskGetTickCount>
    5b2c:	9b 01       	movw	r18, r22
    5b2e:	ac 01       	movw	r20, r24
    5b30:	8d 81       	ldd	r24, Y+5	; 0x05
    5b32:	9e 81       	ldd	r25, Y+6	; 0x06
    5b34:	af 81       	ldd	r26, Y+7	; 0x07
    5b36:	b8 85       	ldd	r27, Y+8	; 0x08
    5b38:	79 01       	movw	r14, r18
    5b3a:	8a 01       	movw	r16, r20
    5b3c:	e8 1a       	sub	r14, r24
    5b3e:	f9 0a       	sbc	r15, r25
    5b40:	0a 0b       	sbc	r16, r26
    5b42:	1b 0b       	sbc	r17, r27
    5b44:	d8 01       	movw	r26, r16
    5b46:	c7 01       	movw	r24, r14
    5b48:	8f a3       	std	Y+39, r24	; 0x27
    5b4a:	98 a7       	std	Y+40, r25	; 0x28
    5b4c:	a9 a7       	std	Y+41, r26	; 0x29
    5b4e:	ba a7       	std	Y+42, r27	; 0x2a
			Elapsedtime += Endtime;
    5b50:	2f a1       	ldd	r18, Y+39	; 0x27
    5b52:	38 a5       	ldd	r19, Y+40	; 0x28
    5b54:	8d 89       	ldd	r24, Y+21	; 0x15
    5b56:	9e 89       	ldd	r25, Y+22	; 0x16
    5b58:	82 0f       	add	r24, r18
    5b5a:	93 1f       	adc	r25, r19
    5b5c:	8d 8b       	std	Y+21, r24	; 0x15
    5b5e:	9e 8b       	std	Y+22, r25	; 0x16
			sprintf(&LeibnizExactTime[0], "Pi %dms", Elapsedtime);
    5b60:	8e 89       	ldd	r24, Y+22	; 0x16
    5b62:	8f 93       	push	r24
    5b64:	8d 89       	ldd	r24, Y+21	; 0x15
    5b66:	8f 93       	push	r24
    5b68:	89 ef       	ldi	r24, 0xF9	; 249
    5b6a:	90 e2       	ldi	r25, 0x20	; 32
    5b6c:	89 2f       	mov	r24, r25
    5b6e:	8f 93       	push	r24
    5b70:	89 ef       	ldi	r24, 0xF9	; 249
    5b72:	90 e2       	ldi	r25, 0x20	; 32
    5b74:	8f 93       	push	r24
    5b76:	8c e8       	ldi	r24, 0x8C	; 140
    5b78:	95 e3       	ldi	r25, 0x35	; 53
    5b7a:	89 2f       	mov	r24, r25
    5b7c:	8f 93       	push	r24
    5b7e:	8c e8       	ldi	r24, 0x8C	; 140
    5b80:	95 e3       	ldi	r25, 0x35	; 53
    5b82:	8f 93       	push	r24
    5b84:	0e 94 c6 41 	call	0x838c	; 0x838c <sprintf>
    5b88:	0f 90       	pop	r0
    5b8a:	0f 90       	pop	r0
    5b8c:	0f 90       	pop	r0
    5b8e:	0f 90       	pop	r0
    5b90:	0f 90       	pop	r0
    5b92:	0f 90       	pop	r0
			Codeblocker = 1;
    5b94:	81 e0       	ldi	r24, 0x01	; 1
    5b96:	90 e0       	ldi	r25, 0x00	; 0
    5b98:	89 8f       	std	Y+25, r24	; 0x19
    5b9a:	9a 8f       	std	Y+26, r25	; 0x1a
	uint32_t currentTime = 0;
	uint32_t Elapsedcounter = 0;
	int Codeblocker = 0;
	Starttime  = xTaskGetTickCount();
	
	for(i = 0; i < n; i ++){
    5b9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ba0:	af 85       	ldd	r26, Y+15	; 0x0f
    5ba2:	b8 89       	ldd	r27, Y+16	; 0x10
    5ba4:	01 96       	adiw	r24, 0x01	; 1
    5ba6:	a1 1d       	adc	r26, r1
    5ba8:	b1 1d       	adc	r27, r1
    5baa:	8d 87       	std	Y+13, r24	; 0x0d
    5bac:	9e 87       	std	Y+14, r25	; 0x0e
    5bae:	af 87       	std	Y+15, r26	; 0x0f
    5bb0:	b8 8b       	std	Y+16, r27	; 0x10
    5bb2:	2d 85       	ldd	r18, Y+13	; 0x0d
    5bb4:	3e 85       	ldd	r19, Y+14	; 0x0e
    5bb6:	4f 85       	ldd	r20, Y+15	; 0x0f
    5bb8:	58 89       	ldd	r21, Y+16	; 0x10
    5bba:	89 89       	ldd	r24, Y+17	; 0x11
    5bbc:	9a 89       	ldd	r25, Y+18	; 0x12
    5bbe:	ab 89       	ldd	r26, Y+19	; 0x13
    5bc0:	bc 89       	ldd	r27, Y+20	; 0x14
    5bc2:	28 17       	cp	r18, r24
    5bc4:	39 07       	cpc	r19, r25
    5bc6:	4a 07       	cpc	r20, r26
    5bc8:	5b 07       	cpc	r21, r27
    5bca:	08 f4       	brcc	.+2      	; 0x5bce <vLeibniz+0x5a6>
    5bcc:	86 cd       	rjmp	.-1268   	; 0x56da <vLeibniz+0xb2>
			Elapsedtime += Endtime;
			sprintf(&LeibnizExactTime[0], "Pi %dms", Elapsedtime);
			Codeblocker = 1;
		}
	}
}
    5bce:	00 00       	nop
    5bd0:	ac 96       	adiw	r28, 0x2c	; 44
    5bd2:	cd bf       	out	0x3d, r28	; 61
    5bd4:	de bf       	out	0x3e, r29	; 62
    5bd6:	df 91       	pop	r29
    5bd8:	cf 91       	pop	r28
    5bda:	1f 91       	pop	r17
    5bdc:	0f 91       	pop	r16
    5bde:	ff 90       	pop	r15
    5be0:	ef 90       	pop	r14
    5be2:	df 90       	pop	r13
    5be4:	cf 90       	pop	r12
    5be6:	08 95       	ret

00005be8 <vNilakantha>:

//////////////////////////////////////////////////////////////////////////
//						Nilakantha calculation							//
//////////////////////////////////////////////////////////////////////////

void vNilakantha(void *pvParameter){
    5be8:	cf 92       	push	r12
    5bea:	df 92       	push	r13
    5bec:	ef 92       	push	r14
    5bee:	ff 92       	push	r15
    5bf0:	0f 93       	push	r16
    5bf2:	1f 93       	push	r17
    5bf4:	cf 93       	push	r28
    5bf6:	df 93       	push	r29
    5bf8:	cd b7       	in	r28, 0x3d	; 61
    5bfa:	de b7       	in	r29, 0x3e	; 62
    5bfc:	ac 97       	sbiw	r28, 0x2c	; 44
    5bfe:	cd bf       	out	0x3d, r28	; 61
    5c00:	de bf       	out	0x3e, r29	; 62
    5c02:	8b a7       	std	Y+43, r24	; 0x2b
    5c04:	9c a7       	std	Y+44, r25	; 0x2c
	//Set Local variables
	TickType_t Starttime;
	TickType_t Endtime;
	double Zaehler;
	
	xEventGroupWaitBits(evStartStopEvents, EV_START_NILA, pdFALSE, pdTRUE, portMAX_DELAY);	//Task waits for Eventbit to start
    5c06:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    5c0a:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5c0e:	cc 24       	eor	r12, r12
    5c10:	ca 94       	dec	r12
    5c12:	dc 2c       	mov	r13, r12
    5c14:	76 01       	movw	r14, r12
    5c16:	01 e0       	ldi	r16, 0x01	; 1
    5c18:	20 e0       	ldi	r18, 0x00	; 0
    5c1a:	44 e0       	ldi	r20, 0x04	; 4
    5c1c:	50 e0       	ldi	r21, 0x00	; 0
    5c1e:	60 e0       	ldi	r22, 0x00	; 0
    5c20:	70 e0       	ldi	r23, 0x00	; 0
    5c22:	0e 94 7f 04 	call	0x8fe	; 0x8fe <xEventGroupWaitBits>
	
	while (1) {
		start_here:	//Startpoint after reset calculation
		xEventGroupClearBits(evStartStopEvents, EV_CLEAR);
    5c26:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    5c2a:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5c2e:	4f ef       	ldi	r20, 0xFF	; 255
    5c30:	50 e0       	ldi	r21, 0x00	; 0
    5c32:	60 e0       	ldi	r22, 0x00	; 0
    5c34:	70 e0       	ldi	r23, 0x00	; 0
    5c36:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
		Bits = xEventGroupSetBits(evStartStopEvents, EV_START_NILA);
    5c3a:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    5c3e:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5c42:	44 e0       	ldi	r20, 0x04	; 4
    5c44:	50 e0       	ldi	r21, 0x00	; 0
    5c46:	60 e0       	ldi	r22, 0x00	; 0
    5c48:	70 e0       	ldi	r23, 0x00	; 0
    5c4a:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
    5c4e:	dc 01       	movw	r26, r24
    5c50:	cb 01       	movw	r24, r22
    5c52:	80 93 78 35 	sts	0x3578, r24	; 0x803578 <Bits>
    5c56:	90 93 79 35 	sts	0x3579, r25	; 0x803579 <Bits+0x1>
    5c5a:	a0 93 7a 35 	sts	0x357A, r26	; 0x80357a <Bits+0x2>
    5c5e:	b0 93 7b 35 	sts	0x357B, r27	; 0x80357b <Bits+0x3>
		
		//Local Variables with startvalue,
		int Elapsedtime = 0;
    5c62:	1d 82       	std	Y+5, r1	; 0x05
    5c64:	1e 82       	std	Y+6, r1	; 0x06
		float32_t PI = 0;
    5c66:	1f 82       	std	Y+7, r1	; 0x07
    5c68:	18 86       	std	Y+8, r1	; 0x08
    5c6a:	19 86       	std	Y+9, r1	; 0x09
    5c6c:	1a 86       	std	Y+10, r1	; 0x0a
		TickType_t lastExecutionTime = xTaskGetTickCount();
    5c6e:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <xTaskGetTickCount>
    5c72:	dc 01       	movw	r26, r24
    5c74:	cb 01       	movw	r24, r22
    5c76:	8b 87       	std	Y+11, r24	; 0x0b
    5c78:	9c 87       	std	Y+12, r25	; 0x0c
    5c7a:	ad 87       	std	Y+13, r26	; 0x0d
    5c7c:	be 87       	std	Y+14, r27	; 0x0e
		long int i = 0;
    5c7e:	1f 86       	std	Y+15, r1	; 0x0f
    5c80:	18 8a       	std	Y+16, r1	; 0x10
    5c82:	19 8a       	std	Y+17, r1	; 0x11
    5c84:	1a 8a       	std	Y+18, r1	; 0x12
		long int n = 2;
    5c86:	82 e0       	ldi	r24, 0x02	; 2
    5c88:	90 e0       	ldi	r25, 0x00	; 0
    5c8a:	a0 e0       	ldi	r26, 0x00	; 0
    5c8c:	b0 e0       	ldi	r27, 0x00	; 0
    5c8e:	8b 8b       	std	Y+19, r24	; 0x13
    5c90:	9c 8b       	std	Y+20, r25	; 0x14
    5c92:	ad 8b       	std	Y+21, r26	; 0x15
    5c94:	be 8b       	std	Y+22, r27	; 0x16
		int elapsedSeconds = 0;
    5c96:	1f 8a       	std	Y+23, r1	; 0x17
    5c98:	18 8e       	std	Y+24, r1	; 0x18
		uint32_t currentTime = 0;
    5c9a:	1b 8e       	std	Y+27, r1	; 0x1b
    5c9c:	1c 8e       	std	Y+28, r1	; 0x1c
    5c9e:	1d 8e       	std	Y+29, r1	; 0x1d
    5ca0:	1e 8e       	std	Y+30, r1	; 0x1e
		uint32_t Elapsedcounter = 0;
    5ca2:	1f 8e       	std	Y+31, r1	; 0x1f
    5ca4:	18 a2       	std	Y+32, r1	; 0x20
    5ca6:	19 a2       	std	Y+33, r1	; 0x21
    5ca8:	1a a2       	std	Y+34, r1	; 0x22
		int codeblock = 0;
    5caa:	19 8e       	std	Y+25, r1	; 0x19
    5cac:	1a 8e       	std	Y+26, r1	; 0x1a
		Zaehler = -1;
    5cae:	80 e0       	ldi	r24, 0x00	; 0
    5cb0:	90 e0       	ldi	r25, 0x00	; 0
    5cb2:	a0 e8       	ldi	r26, 0x80	; 128
    5cb4:	bf eb       	ldi	r27, 0xBF	; 191
    5cb6:	89 83       	std	Y+1, r24	; 0x01
    5cb8:	9a 83       	std	Y+2, r25	; 0x02
    5cba:	ab 83       	std	Y+3, r26	; 0x03
    5cbc:	bc 83       	std	Y+4, r27	; 0x04
		Starttime  = xTaskGetTickCount();
    5cbe:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <xTaskGetTickCount>
    5cc2:	dc 01       	movw	r26, r24
    5cc4:	cb 01       	movw	r24, r22
    5cc6:	8b a3       	std	Y+35, r24	; 0x23
    5cc8:	9c a3       	std	Y+36, r25	; 0x24
    5cca:	ad a3       	std	Y+37, r26	; 0x25
    5ccc:	be a3       	std	Y+38, r27	; 0x26
		
		if (i == 0) {
    5cce:	8f 85       	ldd	r24, Y+15	; 0x0f
    5cd0:	98 89       	ldd	r25, Y+16	; 0x10
    5cd2:	a9 89       	ldd	r26, Y+17	; 0x11
    5cd4:	ba 89       	ldd	r27, Y+18	; 0x12
    5cd6:	89 2b       	or	r24, r25
    5cd8:	8a 2b       	or	r24, r26
    5cda:	8b 2b       	or	r24, r27
    5cdc:	09 f0       	breq	.+2      	; 0x5ce0 <vNilakantha+0xf8>
    5cde:	72 c0       	rjmp	.+228    	; 0x5dc4 <vNilakantha+0x1dc>
			//First calculation
			PI = 3;
    5ce0:	80 e0       	ldi	r24, 0x00	; 0
    5ce2:	90 e0       	ldi	r25, 0x00	; 0
    5ce4:	a0 e4       	ldi	r26, 0x40	; 64
    5ce6:	b0 e4       	ldi	r27, 0x40	; 64
    5ce8:	8f 83       	std	Y+7, r24	; 0x07
    5cea:	98 87       	std	Y+8, r25	; 0x08
    5cec:	a9 87       	std	Y+9, r26	; 0x09
    5cee:	ba 87       	std	Y+10, r27	; 0x0a
			Zaehler *= -1;
    5cf0:	89 81       	ldd	r24, Y+1	; 0x01
    5cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    5cf4:	ab 81       	ldd	r26, Y+3	; 0x03
    5cf6:	bc 81       	ldd	r27, Y+4	; 0x04
    5cf8:	b0 58       	subi	r27, 0x80	; 128
    5cfa:	89 83       	std	Y+1, r24	; 0x01
    5cfc:	9a 83       	std	Y+2, r25	; 0x02
    5cfe:	ab 83       	std	Y+3, r26	; 0x03
    5d00:	bc 83       	std	Y+4, r27	; 0x04
			PI = PI + (Zaehler * 4 / (n * (n + 1) * (n + 2)));
    5d02:	20 e0       	ldi	r18, 0x00	; 0
    5d04:	30 e0       	ldi	r19, 0x00	; 0
    5d06:	40 e8       	ldi	r20, 0x80	; 128
    5d08:	50 e4       	ldi	r21, 0x40	; 64
    5d0a:	69 81       	ldd	r22, Y+1	; 0x01
    5d0c:	7a 81       	ldd	r23, Y+2	; 0x02
    5d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    5d10:	9c 81       	ldd	r25, Y+4	; 0x04
    5d12:	0e 94 14 3c 	call	0x7828	; 0x7828 <__mulsf3>
    5d16:	dc 01       	movw	r26, r24
    5d18:	cb 01       	movw	r24, r22
    5d1a:	6c 01       	movw	r12, r24
    5d1c:	7d 01       	movw	r14, r26
    5d1e:	8b 89       	ldd	r24, Y+19	; 0x13
    5d20:	9c 89       	ldd	r25, Y+20	; 0x14
    5d22:	ad 89       	ldd	r26, Y+21	; 0x15
    5d24:	be 89       	ldd	r27, Y+22	; 0x16
    5d26:	9c 01       	movw	r18, r24
    5d28:	ad 01       	movw	r20, r26
    5d2a:	2f 5f       	subi	r18, 0xFF	; 255
    5d2c:	3f 4f       	sbci	r19, 0xFF	; 255
    5d2e:	4f 4f       	sbci	r20, 0xFF	; 255
    5d30:	5f 4f       	sbci	r21, 0xFF	; 255
    5d32:	8b 89       	ldd	r24, Y+19	; 0x13
    5d34:	9c 89       	ldd	r25, Y+20	; 0x14
    5d36:	ad 89       	ldd	r26, Y+21	; 0x15
    5d38:	be 89       	ldd	r27, Y+22	; 0x16
    5d3a:	bc 01       	movw	r22, r24
    5d3c:	cd 01       	movw	r24, r26
    5d3e:	0e 94 21 40 	call	0x8042	; 0x8042 <__mulsi3>
    5d42:	9b 01       	movw	r18, r22
    5d44:	ac 01       	movw	r20, r24
    5d46:	8b 89       	ldd	r24, Y+19	; 0x13
    5d48:	9c 89       	ldd	r25, Y+20	; 0x14
    5d4a:	ad 89       	ldd	r26, Y+21	; 0x15
    5d4c:	be 89       	ldd	r27, Y+22	; 0x16
    5d4e:	02 96       	adiw	r24, 0x02	; 2
    5d50:	a1 1d       	adc	r26, r1
    5d52:	b1 1d       	adc	r27, r1
    5d54:	bc 01       	movw	r22, r24
    5d56:	cd 01       	movw	r24, r26
    5d58:	0e 94 21 40 	call	0x8042	; 0x8042 <__mulsi3>
    5d5c:	dc 01       	movw	r26, r24
    5d5e:	cb 01       	movw	r24, r22
    5d60:	bc 01       	movw	r22, r24
    5d62:	cd 01       	movw	r24, r26
    5d64:	0e 94 5f 3b 	call	0x76be	; 0x76be <__floatsisf>
    5d68:	dc 01       	movw	r26, r24
    5d6a:	cb 01       	movw	r24, r22
    5d6c:	9c 01       	movw	r18, r24
    5d6e:	ad 01       	movw	r20, r26
    5d70:	c7 01       	movw	r24, r14
    5d72:	b6 01       	movw	r22, r12
    5d74:	0e 94 b5 3a 	call	0x756a	; 0x756a <__divsf3>
    5d78:	dc 01       	movw	r26, r24
    5d7a:	cb 01       	movw	r24, r22
    5d7c:	9c 01       	movw	r18, r24
    5d7e:	ad 01       	movw	r20, r26
    5d80:	6f 81       	ldd	r22, Y+7	; 0x07
    5d82:	78 85       	ldd	r23, Y+8	; 0x08
    5d84:	89 85       	ldd	r24, Y+9	; 0x09
    5d86:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d88:	0e 94 44 3a 	call	0x7488	; 0x7488 <__addsf3>
    5d8c:	dc 01       	movw	r26, r24
    5d8e:	cb 01       	movw	r24, r22
    5d90:	8f 83       	std	Y+7, r24	; 0x07
    5d92:	98 87       	std	Y+8, r25	; 0x08
    5d94:	a9 87       	std	Y+9, r26	; 0x09
    5d96:	ba 87       	std	Y+10, r27	; 0x0a
			n += 2;
    5d98:	8b 89       	ldd	r24, Y+19	; 0x13
    5d9a:	9c 89       	ldd	r25, Y+20	; 0x14
    5d9c:	ad 89       	ldd	r26, Y+21	; 0x15
    5d9e:	be 89       	ldd	r27, Y+22	; 0x16
    5da0:	02 96       	adiw	r24, 0x02	; 2
    5da2:	a1 1d       	adc	r26, r1
    5da4:	b1 1d       	adc	r27, r1
    5da6:	8b 8b       	std	Y+19, r24	; 0x13
    5da8:	9c 8b       	std	Y+20, r25	; 0x14
    5daa:	ad 8b       	std	Y+21, r26	; 0x15
    5dac:	be 8b       	std	Y+22, r27	; 0x16
			i += 1;
    5dae:	8f 85       	ldd	r24, Y+15	; 0x0f
    5db0:	98 89       	ldd	r25, Y+16	; 0x10
    5db2:	a9 89       	ldd	r26, Y+17	; 0x11
    5db4:	ba 89       	ldd	r27, Y+18	; 0x12
    5db6:	01 96       	adiw	r24, 0x01	; 1
    5db8:	a1 1d       	adc	r26, r1
    5dba:	b1 1d       	adc	r27, r1
    5dbc:	8f 87       	std	Y+15, r24	; 0x0f
    5dbe:	98 8b       	std	Y+16, r25	; 0x10
    5dc0:	a9 8b       	std	Y+17, r26	; 0x11
    5dc2:	ba 8b       	std	Y+18, r27	; 0x12
		}

		for (i = 1; i < n; i++) {
    5dc4:	81 e0       	ldi	r24, 0x01	; 1
    5dc6:	90 e0       	ldi	r25, 0x00	; 0
    5dc8:	a0 e0       	ldi	r26, 0x00	; 0
    5dca:	b0 e0       	ldi	r27, 0x00	; 0
    5dcc:	8f 87       	std	Y+15, r24	; 0x0f
    5dce:	98 8b       	std	Y+16, r25	; 0x10
    5dd0:	a9 8b       	std	Y+17, r26	; 0x11
    5dd2:	ba 8b       	std	Y+18, r27	; 0x12
    5dd4:	fe c1       	rjmp	.+1020   	; 0x61d2 <vNilakantha+0x5ea>
			currentTime = xTaskGetTickCount();
    5dd6:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <xTaskGetTickCount>
    5dda:	dc 01       	movw	r26, r24
    5ddc:	cb 01       	movw	r24, r22
    5dde:	8b 8f       	std	Y+27, r24	; 0x1b
    5de0:	9c 8f       	std	Y+28, r25	; 0x1c
    5de2:	ad 8f       	std	Y+29, r26	; 0x1d
    5de4:	be 8f       	std	Y+30, r27	; 0x1e
			Elapsedcounter = currentTime - lastExecutionTime;
    5de6:	2b 8d       	ldd	r18, Y+27	; 0x1b
    5de8:	3c 8d       	ldd	r19, Y+28	; 0x1c
    5dea:	4d 8d       	ldd	r20, Y+29	; 0x1d
    5dec:	5e 8d       	ldd	r21, Y+30	; 0x1e
    5dee:	8b 85       	ldd	r24, Y+11	; 0x0b
    5df0:	9c 85       	ldd	r25, Y+12	; 0x0c
    5df2:	ad 85       	ldd	r26, Y+13	; 0x0d
    5df4:	be 85       	ldd	r27, Y+14	; 0x0e
    5df6:	79 01       	movw	r14, r18
    5df8:	8a 01       	movw	r16, r20
    5dfa:	e8 1a       	sub	r14, r24
    5dfc:	f9 0a       	sbc	r15, r25
    5dfe:	0a 0b       	sbc	r16, r26
    5e00:	1b 0b       	sbc	r17, r27
    5e02:	d8 01       	movw	r26, r16
    5e04:	c7 01       	movw	r24, r14
    5e06:	8f 8f       	std	Y+31, r24	; 0x1f
    5e08:	98 a3       	std	Y+32, r25	; 0x20
    5e0a:	a9 a3       	std	Y+33, r26	; 0x21
    5e0c:	ba a3       	std	Y+34, r27	; 0x22
			if (Bits & EV_STOP_NILA) { //Stop function
    5e0e:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    5e12:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    5e16:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    5e1a:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    5e1e:	88 70       	andi	r24, 0x08	; 8
    5e20:	99 27       	eor	r25, r25
    5e22:	aa 27       	eor	r26, r26
    5e24:	bb 27       	eor	r27, r27
    5e26:	89 2b       	or	r24, r25
    5e28:	8a 2b       	or	r24, r26
    5e2a:	8b 2b       	or	r24, r27
    5e2c:	59 f1       	breq	.+86     	; 0x5e84 <vNilakantha+0x29c>
				xEventGroupClearBits(evStartStopEvents, EV_CLEAR);
    5e2e:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    5e32:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5e36:	4f ef       	ldi	r20, 0xFF	; 255
    5e38:	50 e0       	ldi	r21, 0x00	; 0
    5e3a:	60 e0       	ldi	r22, 0x00	; 0
    5e3c:	70 e0       	ldi	r23, 0x00	; 0
    5e3e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
				xEventGroupSetBits(evStartStopEvents, EV_STOPPED_NILA);
    5e42:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    5e46:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5e4a:	40 e2       	ldi	r20, 0x20	; 32
    5e4c:	50 e0       	ldi	r21, 0x00	; 0
    5e4e:	60 e0       	ldi	r22, 0x00	; 0
    5e50:	70 e0       	ldi	r23, 0x00	; 0
    5e52:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
				Bits = xEventGroupGetBits(evStartStopEvents);
    5e56:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    5e5a:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5e5e:	40 e0       	ldi	r20, 0x00	; 0
    5e60:	50 e0       	ldi	r21, 0x00	; 0
    5e62:	ba 01       	movw	r22, r20
    5e64:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    5e68:	dc 01       	movw	r26, r24
    5e6a:	cb 01       	movw	r24, r22
    5e6c:	80 93 78 35 	sts	0x3578, r24	; 0x803578 <Bits>
    5e70:	90 93 79 35 	sts	0x3579, r25	; 0x803579 <Bits+0x1>
    5e74:	a0 93 7a 35 	sts	0x357A, r26	; 0x80357a <Bits+0x2>
    5e78:	b0 93 7b 35 	sts	0x357B, r27	; 0x80357b <Bits+0x3>
				vTaskSuspend(NULL);
    5e7c:	80 e0       	ldi	r24, 0x00	; 0
    5e7e:	90 e0       	ldi	r25, 0x00	; 0
    5e80:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <vTaskSuspend>
			}
			if (Bits & EV_RESET_NILA) {	//Reset function
    5e84:	80 91 78 35 	lds	r24, 0x3578	; 0x803578 <Bits>
    5e88:	90 91 79 35 	lds	r25, 0x3579	; 0x803579 <Bits+0x1>
    5e8c:	a0 91 7a 35 	lds	r26, 0x357A	; 0x80357a <Bits+0x2>
    5e90:	b0 91 7b 35 	lds	r27, 0x357B	; 0x80357b <Bits+0x3>
    5e94:	80 78       	andi	r24, 0x80	; 128
    5e96:	99 27       	eor	r25, r25
    5e98:	aa 27       	eor	r26, r26
    5e9a:	bb 27       	eor	r27, r27
    5e9c:	89 2b       	or	r24, r25
    5e9e:	8a 2b       	or	r24, r26
    5ea0:	8b 2b       	or	r24, r27
    5ea2:	09 f4       	brne	.+2      	; 0x5ea6 <vNilakantha+0x2be>
    5ea4:	44 c0       	rjmp	.+136    	; 0x5f2e <vNilakantha+0x346>
				xEventGroupClearBits(evStartStopEvents, EV_CLEAR);
    5ea6:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    5eaa:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5eae:	4f ef       	ldi	r20, 0xFF	; 255
    5eb0:	50 e0       	ldi	r21, 0x00	; 0
    5eb2:	60 e0       	ldi	r22, 0x00	; 0
    5eb4:	70 e0       	ldi	r23, 0x00	; 0
    5eb6:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
				xEventGroupSetBits(evStartStopEvents, EV_STOPPED_NILA);
    5eba:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    5ebe:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5ec2:	40 e2       	ldi	r20, 0x20	; 32
    5ec4:	50 e0       	ldi	r21, 0x00	; 0
    5ec6:	60 e0       	ldi	r22, 0x00	; 0
    5ec8:	70 e0       	ldi	r23, 0x00	; 0
    5eca:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
				memset(NilakanthaPiString, 0, sizeof(NilakanthaPiString));			//String gets emptied
    5ece:	40 e1       	ldi	r20, 0x10	; 16
    5ed0:	50 e0       	ldi	r21, 0x00	; 0
    5ed2:	60 e0       	ldi	r22, 0x00	; 0
    5ed4:	70 e0       	ldi	r23, 0x00	; 0
    5ed6:	8c e7       	ldi	r24, 0x7C	; 124
    5ed8:	95 e3       	ldi	r25, 0x35	; 53
    5eda:	0e 94 3f 41 	call	0x827e	; 0x827e <memset>
				memset(NilakanthaTimeString, 0, sizeof(NilakanthaTimeString));		//String gets emptied
    5ede:	43 e0       	ldi	r20, 0x03	; 3
    5ee0:	50 e0       	ldi	r21, 0x00	; 0
    5ee2:	60 e0       	ldi	r22, 0x00	; 0
    5ee4:	70 e0       	ldi	r23, 0x00	; 0
    5ee6:	88 e9       	ldi	r24, 0x98	; 152
    5ee8:	95 e3       	ldi	r25, 0x35	; 53
    5eea:	0e 94 3f 41 	call	0x827e	; 0x827e <memset>
				memset(NilakanthaExactTime, 0, sizeof(NilakanthaExactTime));		//String gets emptied
    5eee:	4a e0       	ldi	r20, 0x0A	; 10
    5ef0:	50 e0       	ldi	r21, 0x00	; 0
    5ef2:	60 e0       	ldi	r22, 0x00	; 0
    5ef4:	70 e0       	ldi	r23, 0x00	; 0
    5ef6:	8a e6       	ldi	r24, 0x6A	; 106
    5ef8:	95 e3       	ldi	r25, 0x35	; 53
    5efa:	0e 94 3f 41 	call	0x827e	; 0x827e <memset>
				Bits = xEventGroupGetBits(evStartStopEvents);
    5efe:	80 91 76 35 	lds	r24, 0x3576	; 0x803576 <evStartStopEvents>
    5f02:	90 91 77 35 	lds	r25, 0x3577	; 0x803577 <evStartStopEvents+0x1>
    5f06:	40 e0       	ldi	r20, 0x00	; 0
    5f08:	50 e0       	ldi	r21, 0x00	; 0
    5f0a:	ba 01       	movw	r22, r20
    5f0c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    5f10:	dc 01       	movw	r26, r24
    5f12:	cb 01       	movw	r24, r22
    5f14:	80 93 78 35 	sts	0x3578, r24	; 0x803578 <Bits>
    5f18:	90 93 79 35 	sts	0x3579, r25	; 0x803579 <Bits+0x1>
    5f1c:	a0 93 7a 35 	sts	0x357A, r26	; 0x80357a <Bits+0x2>
    5f20:	b0 93 7b 35 	sts	0x357B, r27	; 0x80357b <Bits+0x3>
				vTaskSuspend(NULL);
    5f24:	80 e0       	ldi	r24, 0x00	; 0
    5f26:	90 e0       	ldi	r25, 0x00	; 0
    5f28:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <vTaskSuspend>
				goto start_here;
    5f2c:	7c ce       	rjmp	.-776    	; 0x5c26 <vNilakantha+0x3e>
			}
			
			//Nilakantha Algorithm
			Zaehler *= -1;
    5f2e:	89 81       	ldd	r24, Y+1	; 0x01
    5f30:	9a 81       	ldd	r25, Y+2	; 0x02
    5f32:	ab 81       	ldd	r26, Y+3	; 0x03
    5f34:	bc 81       	ldd	r27, Y+4	; 0x04
    5f36:	b0 58       	subi	r27, 0x80	; 128
    5f38:	89 83       	std	Y+1, r24	; 0x01
    5f3a:	9a 83       	std	Y+2, r25	; 0x02
    5f3c:	ab 83       	std	Y+3, r26	; 0x03
    5f3e:	bc 83       	std	Y+4, r27	; 0x04
			PI += (Zaehler * 4 / (n * (n + 1) * (n + 2)));
    5f40:	20 e0       	ldi	r18, 0x00	; 0
    5f42:	30 e0       	ldi	r19, 0x00	; 0
    5f44:	40 e8       	ldi	r20, 0x80	; 128
    5f46:	50 e4       	ldi	r21, 0x40	; 64
    5f48:	69 81       	ldd	r22, Y+1	; 0x01
    5f4a:	7a 81       	ldd	r23, Y+2	; 0x02
    5f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    5f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    5f50:	0e 94 14 3c 	call	0x7828	; 0x7828 <__mulsf3>
    5f54:	dc 01       	movw	r26, r24
    5f56:	cb 01       	movw	r24, r22
    5f58:	6c 01       	movw	r12, r24
    5f5a:	7d 01       	movw	r14, r26
    5f5c:	8b 89       	ldd	r24, Y+19	; 0x13
    5f5e:	9c 89       	ldd	r25, Y+20	; 0x14
    5f60:	ad 89       	ldd	r26, Y+21	; 0x15
    5f62:	be 89       	ldd	r27, Y+22	; 0x16
    5f64:	9c 01       	movw	r18, r24
    5f66:	ad 01       	movw	r20, r26
    5f68:	2f 5f       	subi	r18, 0xFF	; 255
    5f6a:	3f 4f       	sbci	r19, 0xFF	; 255
    5f6c:	4f 4f       	sbci	r20, 0xFF	; 255
    5f6e:	5f 4f       	sbci	r21, 0xFF	; 255
    5f70:	8b 89       	ldd	r24, Y+19	; 0x13
    5f72:	9c 89       	ldd	r25, Y+20	; 0x14
    5f74:	ad 89       	ldd	r26, Y+21	; 0x15
    5f76:	be 89       	ldd	r27, Y+22	; 0x16
    5f78:	bc 01       	movw	r22, r24
    5f7a:	cd 01       	movw	r24, r26
    5f7c:	0e 94 21 40 	call	0x8042	; 0x8042 <__mulsi3>
    5f80:	9b 01       	movw	r18, r22
    5f82:	ac 01       	movw	r20, r24
    5f84:	8b 89       	ldd	r24, Y+19	; 0x13
    5f86:	9c 89       	ldd	r25, Y+20	; 0x14
    5f88:	ad 89       	ldd	r26, Y+21	; 0x15
    5f8a:	be 89       	ldd	r27, Y+22	; 0x16
    5f8c:	02 96       	adiw	r24, 0x02	; 2
    5f8e:	a1 1d       	adc	r26, r1
    5f90:	b1 1d       	adc	r27, r1
    5f92:	bc 01       	movw	r22, r24
    5f94:	cd 01       	movw	r24, r26
    5f96:	0e 94 21 40 	call	0x8042	; 0x8042 <__mulsi3>
    5f9a:	dc 01       	movw	r26, r24
    5f9c:	cb 01       	movw	r24, r22
    5f9e:	bc 01       	movw	r22, r24
    5fa0:	cd 01       	movw	r24, r26
    5fa2:	0e 94 5f 3b 	call	0x76be	; 0x76be <__floatsisf>
    5fa6:	dc 01       	movw	r26, r24
    5fa8:	cb 01       	movw	r24, r22
    5faa:	9c 01       	movw	r18, r24
    5fac:	ad 01       	movw	r20, r26
    5fae:	c7 01       	movw	r24, r14
    5fb0:	b6 01       	movw	r22, r12
    5fb2:	0e 94 b5 3a 	call	0x756a	; 0x756a <__divsf3>
    5fb6:	dc 01       	movw	r26, r24
    5fb8:	cb 01       	movw	r24, r22
    5fba:	9c 01       	movw	r18, r24
    5fbc:	ad 01       	movw	r20, r26
    5fbe:	6f 81       	ldd	r22, Y+7	; 0x07
    5fc0:	78 85       	ldd	r23, Y+8	; 0x08
    5fc2:	89 85       	ldd	r24, Y+9	; 0x09
    5fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5fc6:	0e 94 44 3a 	call	0x7488	; 0x7488 <__addsf3>
    5fca:	dc 01       	movw	r26, r24
    5fcc:	cb 01       	movw	r24, r22
    5fce:	8f 83       	std	Y+7, r24	; 0x07
    5fd0:	98 87       	std	Y+8, r25	; 0x08
    5fd2:	a9 87       	std	Y+9, r26	; 0x09
    5fd4:	ba 87       	std	Y+10, r27	; 0x0a
			n += 2;
    5fd6:	8b 89       	ldd	r24, Y+19	; 0x13
    5fd8:	9c 89       	ldd	r25, Y+20	; 0x14
    5fda:	ad 89       	ldd	r26, Y+21	; 0x15
    5fdc:	be 89       	ldd	r27, Y+22	; 0x16
    5fde:	02 96       	adiw	r24, 0x02	; 2
    5fe0:	a1 1d       	adc	r26, r1
    5fe2:	b1 1d       	adc	r27, r1
    5fe4:	8b 8b       	std	Y+19, r24	; 0x13
    5fe6:	9c 8b       	std	Y+20, r25	; 0x14
    5fe8:	ad 8b       	std	Y+21, r26	; 0x15
    5fea:	be 8b       	std	Y+22, r27	; 0x16
			
			//Writes Pi and elapsed Time into Strings
			if (checkEvent & EV_WRITE_IN_NILASTRING) {
    5fec:	80 91 74 35 	lds	r24, 0x3574	; 0x803574 <checkEvent>
    5ff0:	90 91 75 35 	lds	r25, 0x3575	; 0x803575 <checkEvent+0x1>
    5ff4:	82 70       	andi	r24, 0x02	; 2
    5ff6:	99 27       	eor	r25, r25
    5ff8:	89 2b       	or	r24, r25
    5ffa:	09 f4       	brne	.+2      	; 0x5ffe <vNilakantha+0x416>
    5ffc:	73 c0       	rjmp	.+230    	; 0x60e4 <vNilakantha+0x4fc>
				checkEvent = xEventGroupGetBits(evREADWRITE);
    5ffe:	80 91 68 35 	lds	r24, 0x3568	; 0x803568 <evREADWRITE>
    6002:	90 91 69 35 	lds	r25, 0x3569	; 0x803569 <evREADWRITE+0x1>
    6006:	40 e0       	ldi	r20, 0x00	; 0
    6008:	50 e0       	ldi	r21, 0x00	; 0
    600a:	ba 01       	movw	r22, r20
    600c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    6010:	dc 01       	movw	r26, r24
    6012:	cb 01       	movw	r24, r22
    6014:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <checkEvent>
    6018:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <checkEvent+0x1>
				sprintf(&NilakanthaPiString[0], "PI is %.7f", PI);
    601c:	8a 85       	ldd	r24, Y+10	; 0x0a
    601e:	8f 93       	push	r24
    6020:	89 85       	ldd	r24, Y+9	; 0x09
    6022:	8f 93       	push	r24
    6024:	88 85       	ldd	r24, Y+8	; 0x08
    6026:	8f 93       	push	r24
    6028:	8f 81       	ldd	r24, Y+7	; 0x07
    602a:	8f 93       	push	r24
    602c:	8a ee       	ldi	r24, 0xEA	; 234
    602e:	90 e2       	ldi	r25, 0x20	; 32
    6030:	89 2f       	mov	r24, r25
    6032:	8f 93       	push	r24
    6034:	8a ee       	ldi	r24, 0xEA	; 234
    6036:	90 e2       	ldi	r25, 0x20	; 32
    6038:	8f 93       	push	r24
    603a:	8c e7       	ldi	r24, 0x7C	; 124
    603c:	95 e3       	ldi	r25, 0x35	; 53
    603e:	89 2f       	mov	r24, r25
    6040:	8f 93       	push	r24
    6042:	8c e7       	ldi	r24, 0x7C	; 124
    6044:	95 e3       	ldi	r25, 0x35	; 53
    6046:	8f 93       	push	r24
    6048:	0e 94 c6 41 	call	0x838c	; 0x838c <sprintf>
    604c:	0d b7       	in	r16, 0x3d	; 61
    604e:	1e b7       	in	r17, 0x3e	; 62
    6050:	08 5f       	subi	r16, 0xF8	; 248
    6052:	1f 4f       	sbci	r17, 0xFF	; 255
    6054:	cd bf       	out	0x3d, r28	; 61
    6056:	de bf       	out	0x3e, r29	; 62
				sprintf(&NilakanthaTimeString[0], "%ds", (elapsedSeconds / 2));
    6058:	8f 89       	ldd	r24, Y+23	; 0x17
    605a:	98 8d       	ldd	r25, Y+24	; 0x18
    605c:	99 23       	and	r25, r25
    605e:	0c f4       	brge	.+2      	; 0x6062 <vNilakantha+0x47a>
    6060:	01 96       	adiw	r24, 0x01	; 1
    6062:	95 95       	asr	r25
    6064:	87 95       	ror	r24
    6066:	29 2f       	mov	r18, r25
    6068:	2f 93       	push	r18
    606a:	8f 93       	push	r24
    606c:	85 ef       	ldi	r24, 0xF5	; 245
    606e:	90 e2       	ldi	r25, 0x20	; 32
    6070:	89 2f       	mov	r24, r25
    6072:	8f 93       	push	r24
    6074:	85 ef       	ldi	r24, 0xF5	; 245
    6076:	90 e2       	ldi	r25, 0x20	; 32
    6078:	8f 93       	push	r24
    607a:	88 e9       	ldi	r24, 0x98	; 152
    607c:	95 e3       	ldi	r25, 0x35	; 53
    607e:	89 2f       	mov	r24, r25
    6080:	8f 93       	push	r24
    6082:	88 e9       	ldi	r24, 0x98	; 152
    6084:	95 e3       	ldi	r25, 0x35	; 53
    6086:	8f 93       	push	r24
    6088:	0e 94 c6 41 	call	0x838c	; 0x838c <sprintf>
    608c:	0f 90       	pop	r0
    608e:	0f 90       	pop	r0
    6090:	0f 90       	pop	r0
    6092:	0f 90       	pop	r0
    6094:	0f 90       	pop	r0
    6096:	0f 90       	pop	r0
				lastExecutionTime = currentTime;
    6098:	8b 8d       	ldd	r24, Y+27	; 0x1b
    609a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    609c:	ad 8d       	ldd	r26, Y+29	; 0x1d
    609e:	be 8d       	ldd	r27, Y+30	; 0x1e
    60a0:	8b 87       	std	Y+11, r24	; 0x0b
    60a2:	9c 87       	std	Y+12, r25	; 0x0c
    60a4:	ad 87       	std	Y+13, r26	; 0x0d
    60a6:	be 87       	std	Y+14, r27	; 0x0e
				elapsedSeconds ++;
    60a8:	8f 89       	ldd	r24, Y+23	; 0x17
    60aa:	98 8d       	ldd	r25, Y+24	; 0x18
    60ac:	01 96       	adiw	r24, 0x01	; 1
    60ae:	8f 8b       	std	Y+23, r24	; 0x17
    60b0:	98 8f       	std	Y+24, r25	; 0x18
				xEventGroupSetBits(evREADWRITE,EV_READ_FROM_NILASTRING);
    60b2:	80 91 68 35 	lds	r24, 0x3568	; 0x803568 <evREADWRITE>
    60b6:	90 91 69 35 	lds	r25, 0x3569	; 0x803569 <evREADWRITE+0x1>
    60ba:	4f ef       	ldi	r20, 0xFF	; 255
    60bc:	50 e0       	ldi	r21, 0x00	; 0
    60be:	60 e0       	ldi	r22, 0x00	; 0
    60c0:	70 e0       	ldi	r23, 0x00	; 0
    60c2:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
				checkEvent = xEventGroupGetBits(evREADWRITE);
    60c6:	80 91 68 35 	lds	r24, 0x3568	; 0x803568 <evREADWRITE>
    60ca:	90 91 69 35 	lds	r25, 0x3569	; 0x803569 <evREADWRITE+0x1>
    60ce:	40 e0       	ldi	r20, 0x00	; 0
    60d0:	50 e0       	ldi	r21, 0x00	; 0
    60d2:	ba 01       	movw	r22, r20
    60d4:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    60d8:	dc 01       	movw	r26, r24
    60da:	cb 01       	movw	r24, r22
    60dc:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <checkEvent>
    60e0:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <checkEvent+0x1>
			}
			
			//Writes exact Time into String when Pi has reached 5 digits precise, can only happen once trough Codeblock
			if(codeblock == 0 && (uint32_t)((PI*100000) > 314159 && (PI*100000) < 314160)){
    60e4:	89 8d       	ldd	r24, Y+25	; 0x19
    60e6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    60e8:	89 2b       	or	r24, r25
    60ea:	09 f0       	breq	.+2      	; 0x60ee <vNilakantha+0x506>
    60ec:	67 c0       	rjmp	.+206    	; 0x61bc <vNilakantha+0x5d4>
    60ee:	20 e0       	ldi	r18, 0x00	; 0
    60f0:	30 e5       	ldi	r19, 0x50	; 80
    60f2:	43 ec       	ldi	r20, 0xC3	; 195
    60f4:	57 e4       	ldi	r21, 0x47	; 71
    60f6:	6f 81       	ldd	r22, Y+7	; 0x07
    60f8:	78 85       	ldd	r23, Y+8	; 0x08
    60fa:	89 85       	ldd	r24, Y+9	; 0x09
    60fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    60fe:	0e 94 14 3c 	call	0x7828	; 0x7828 <__mulsf3>
    6102:	dc 01       	movw	r26, r24
    6104:	cb 01       	movw	r24, r22
    6106:	20 ee       	ldi	r18, 0xE0	; 224
    6108:	35 e6       	ldi	r19, 0x65	; 101
    610a:	49 e9       	ldi	r20, 0x99	; 153
    610c:	58 e4       	ldi	r21, 0x48	; 72
    610e:	bc 01       	movw	r22, r24
    6110:	cd 01       	movw	r24, r26
    6112:	0e 94 0f 3c 	call	0x781e	; 0x781e <__gesf2>
    6116:	18 16       	cp	r1, r24
    6118:	0c f0       	brlt	.+2      	; 0x611c <vNilakantha+0x534>
    611a:	50 c0       	rjmp	.+160    	; 0x61bc <vNilakantha+0x5d4>
    611c:	20 e0       	ldi	r18, 0x00	; 0
    611e:	30 e5       	ldi	r19, 0x50	; 80
    6120:	43 ec       	ldi	r20, 0xC3	; 195
    6122:	57 e4       	ldi	r21, 0x47	; 71
    6124:	6f 81       	ldd	r22, Y+7	; 0x07
    6126:	78 85       	ldd	r23, Y+8	; 0x08
    6128:	89 85       	ldd	r24, Y+9	; 0x09
    612a:	9a 85       	ldd	r25, Y+10	; 0x0a
    612c:	0e 94 14 3c 	call	0x7828	; 0x7828 <__mulsf3>
    6130:	dc 01       	movw	r26, r24
    6132:	cb 01       	movw	r24, r22
    6134:	20 e0       	ldi	r18, 0x00	; 0
    6136:	36 e6       	ldi	r19, 0x66	; 102
    6138:	49 e9       	ldi	r20, 0x99	; 153
    613a:	58 e4       	ldi	r21, 0x48	; 72
    613c:	bc 01       	movw	r22, r24
    613e:	cd 01       	movw	r24, r26
    6140:	0e 94 b0 3a 	call	0x7560	; 0x7560 <__cmpsf2>
    6144:	88 23       	and	r24, r24
    6146:	d4 f5       	brge	.+116    	; 0x61bc <vNilakantha+0x5d4>
				Endtime = xTaskGetTickCount() - Starttime;
    6148:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <xTaskGetTickCount>
    614c:	9b 01       	movw	r18, r22
    614e:	ac 01       	movw	r20, r24
    6150:	8b a1       	ldd	r24, Y+35	; 0x23
    6152:	9c a1       	ldd	r25, Y+36	; 0x24
    6154:	ad a1       	ldd	r26, Y+37	; 0x25
    6156:	be a1       	ldd	r27, Y+38	; 0x26
    6158:	79 01       	movw	r14, r18
    615a:	8a 01       	movw	r16, r20
    615c:	e8 1a       	sub	r14, r24
    615e:	f9 0a       	sbc	r15, r25
    6160:	0a 0b       	sbc	r16, r26
    6162:	1b 0b       	sbc	r17, r27
    6164:	d8 01       	movw	r26, r16
    6166:	c7 01       	movw	r24, r14
    6168:	8f a3       	std	Y+39, r24	; 0x27
    616a:	98 a7       	std	Y+40, r25	; 0x28
    616c:	a9 a7       	std	Y+41, r26	; 0x29
    616e:	ba a7       	std	Y+42, r27	; 0x2a
				Elapsedtime += Endtime;
    6170:	2f a1       	ldd	r18, Y+39	; 0x27
    6172:	38 a5       	ldd	r19, Y+40	; 0x28
    6174:	8d 81       	ldd	r24, Y+5	; 0x05
    6176:	9e 81       	ldd	r25, Y+6	; 0x06
    6178:	82 0f       	add	r24, r18
    617a:	93 1f       	adc	r25, r19
    617c:	8d 83       	std	Y+5, r24	; 0x05
    617e:	9e 83       	std	Y+6, r25	; 0x06
				sprintf(&NilakanthaExactTime[0], "Pi %dms", Elapsedtime);
    6180:	8e 81       	ldd	r24, Y+6	; 0x06
    6182:	8f 93       	push	r24
    6184:	8d 81       	ldd	r24, Y+5	; 0x05
    6186:	8f 93       	push	r24
    6188:	89 ef       	ldi	r24, 0xF9	; 249
    618a:	90 e2       	ldi	r25, 0x20	; 32
    618c:	89 2f       	mov	r24, r25
    618e:	8f 93       	push	r24
    6190:	89 ef       	ldi	r24, 0xF9	; 249
    6192:	90 e2       	ldi	r25, 0x20	; 32
    6194:	8f 93       	push	r24
    6196:	8a e6       	ldi	r24, 0x6A	; 106
    6198:	95 e3       	ldi	r25, 0x35	; 53
    619a:	89 2f       	mov	r24, r25
    619c:	8f 93       	push	r24
    619e:	8a e6       	ldi	r24, 0x6A	; 106
    61a0:	95 e3       	ldi	r25, 0x35	; 53
    61a2:	8f 93       	push	r24
    61a4:	0e 94 c6 41 	call	0x838c	; 0x838c <sprintf>
    61a8:	0f 90       	pop	r0
    61aa:	0f 90       	pop	r0
    61ac:	0f 90       	pop	r0
    61ae:	0f 90       	pop	r0
    61b0:	0f 90       	pop	r0
    61b2:	0f 90       	pop	r0
				codeblock = 1;
    61b4:	81 e0       	ldi	r24, 0x01	; 1
    61b6:	90 e0       	ldi	r25, 0x00	; 0
    61b8:	89 8f       	std	Y+25, r24	; 0x19
    61ba:	9a 8f       	std	Y+26, r25	; 0x1a
			PI = PI + (Zaehler * 4 / (n * (n + 1) * (n + 2)));
			n += 2;
			i += 1;
		}

		for (i = 1; i < n; i++) {
    61bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    61be:	98 89       	ldd	r25, Y+16	; 0x10
    61c0:	a9 89       	ldd	r26, Y+17	; 0x11
    61c2:	ba 89       	ldd	r27, Y+18	; 0x12
    61c4:	01 96       	adiw	r24, 0x01	; 1
    61c6:	a1 1d       	adc	r26, r1
    61c8:	b1 1d       	adc	r27, r1
    61ca:	8f 87       	std	Y+15, r24	; 0x0f
    61cc:	98 8b       	std	Y+16, r25	; 0x10
    61ce:	a9 8b       	std	Y+17, r26	; 0x11
    61d0:	ba 8b       	std	Y+18, r27	; 0x12
    61d2:	2f 85       	ldd	r18, Y+15	; 0x0f
    61d4:	38 89       	ldd	r19, Y+16	; 0x10
    61d6:	49 89       	ldd	r20, Y+17	; 0x11
    61d8:	5a 89       	ldd	r21, Y+18	; 0x12
    61da:	8b 89       	ldd	r24, Y+19	; 0x13
    61dc:	9c 89       	ldd	r25, Y+20	; 0x14
    61de:	ad 89       	ldd	r26, Y+21	; 0x15
    61e0:	be 89       	ldd	r27, Y+22	; 0x16
    61e2:	28 17       	cp	r18, r24
    61e4:	39 07       	cpc	r19, r25
    61e6:	4a 07       	cpc	r20, r26
    61e8:	5b 07       	cpc	r21, r27
    61ea:	0c f4       	brge	.+2      	; 0x61ee <vNilakantha+0x606>
    61ec:	f4 cd       	rjmp	.-1048   	; 0x5dd6 <vNilakantha+0x1ee>
				Elapsedtime += Endtime;
				sprintf(&NilakanthaExactTime[0], "Pi %dms", Elapsedtime);
				codeblock = 1;
			}
		}
	}
    61ee:	1b cd       	rjmp	.-1482   	; 0x5c26 <vNilakantha+0x3e>

000061f0 <__vector_108>:
	 command(0x02);
 }
 void _displayClear() {
	 command(0x01);
	 delayUS(2000);
 }
    61f0:	1f 92       	push	r1
    61f2:	0f 92       	push	r0
    61f4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
    61f8:	0f 92       	push	r0
    61fa:	11 24       	eor	r1, r1
    61fc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
    6200:	0f 92       	push	r0
    6202:	2f 93       	push	r18
    6204:	3f 93       	push	r19
    6206:	4f 93       	push	r20
    6208:	5f 93       	push	r21
    620a:	6f 93       	push	r22
    620c:	7f 93       	push	r23
    620e:	8f 93       	push	r24
    6210:	9f 93       	push	r25
    6212:	af 93       	push	r26
    6214:	bf 93       	push	r27
    6216:	ef 93       	push	r30
    6218:	ff 93       	push	r31
    621a:	cf 93       	push	r28
    621c:	df 93       	push	r29
    621e:	1f 92       	push	r1
    6220:	cd b7       	in	r28, 0x3d	; 61
    6222:	de b7       	in	r29, 0x3e	; 62
    6224:	19 82       	std	Y+1, r1	; 0x01
    6226:	80 91 b1 35 	lds	r24, 0x35B1	; 0x8035b1 <egDisplayTiming>
    622a:	90 91 b2 35 	lds	r25, 0x35B2	; 0x8035b2 <egDisplayTiming+0x1>
    622e:	9e 01       	movw	r18, r28
    6230:	2f 5f       	subi	r18, 0xFF	; 255
    6232:	3f 4f       	sbci	r19, 0xFF	; 255
    6234:	41 e0       	ldi	r20, 0x01	; 1
    6236:	50 e0       	ldi	r21, 0x00	; 0
    6238:	60 e0       	ldi	r22, 0x00	; 0
    623a:	70 e0       	ldi	r23, 0x00	; 0
    623c:	0e 94 6f 07 	call	0xede	; 0xede <xEventGroupSetBitsFromISR>
    6240:	60 e0       	ldi	r22, 0x00	; 0
    6242:	80 e0       	ldi	r24, 0x00	; 0
    6244:	9b e0       	ldi	r25, 0x0B	; 11
    6246:	0e 94 be 03 	call	0x77c	; 0x77c <TC0_ConfigClockSource>
    624a:	80 e0       	ldi	r24, 0x00	; 0
    624c:	9b e0       	ldi	r25, 0x0B	; 11
    624e:	fc 01       	movw	r30, r24
    6250:	16 82       	std	Z+6, r1	; 0x06
    6252:	00 00       	nop
    6254:	0f 90       	pop	r0
    6256:	df 91       	pop	r29
    6258:	cf 91       	pop	r28
    625a:	ff 91       	pop	r31
    625c:	ef 91       	pop	r30
    625e:	bf 91       	pop	r27
    6260:	af 91       	pop	r26
    6262:	9f 91       	pop	r25
    6264:	8f 91       	pop	r24
    6266:	7f 91       	pop	r23
    6268:	6f 91       	pop	r22
    626a:	5f 91       	pop	r21
    626c:	4f 91       	pop	r20
    626e:	3f 91       	pop	r19
    6270:	2f 91       	pop	r18
    6272:	0f 90       	pop	r0
    6274:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
    6278:	0f 90       	pop	r0
    627a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
    627e:	0f 90       	pop	r0
    6280:	1f 90       	pop	r1
    6282:	18 95       	reti

00006284 <delayUS>:
    6284:	cf 92       	push	r12
    6286:	df 92       	push	r13
    6288:	ef 92       	push	r14
    628a:	ff 92       	push	r15
    628c:	0f 93       	push	r16
    628e:	cf 93       	push	r28
    6290:	df 93       	push	r29
    6292:	00 d0       	rcall	.+0      	; 0x6294 <delayUS+0x10>
    6294:	1f 92       	push	r1
    6296:	cd b7       	in	r28, 0x3d	; 61
    6298:	de b7       	in	r29, 0x3e	; 62
    629a:	69 83       	std	Y+1, r22	; 0x01
    629c:	7a 83       	std	Y+2, r23	; 0x02
    629e:	8b 83       	std	Y+3, r24	; 0x03
    62a0:	9c 83       	std	Y+4, r25	; 0x04
    62a2:	89 81       	ldd	r24, Y+1	; 0x01
    62a4:	9a 81       	ldd	r25, Y+2	; 0x02
    62a6:	ab 81       	ldd	r26, Y+3	; 0x03
    62a8:	bc 81       	ldd	r27, Y+4	; 0x04
    62aa:	02 97       	sbiw	r24, 0x02	; 2
    62ac:	a1 05       	cpc	r26, r1
    62ae:	b1 05       	cpc	r27, r1
    62b0:	40 f4       	brcc	.+16     	; 0x62c2 <delayUS+0x3e>
    62b2:	82 e0       	ldi	r24, 0x02	; 2
    62b4:	90 e0       	ldi	r25, 0x00	; 0
    62b6:	a0 e0       	ldi	r26, 0x00	; 0
    62b8:	b0 e0       	ldi	r27, 0x00	; 0
    62ba:	89 83       	std	Y+1, r24	; 0x01
    62bc:	9a 83       	std	Y+2, r25	; 0x02
    62be:	ab 83       	std	Y+3, r26	; 0x03
    62c0:	bc 83       	std	Y+4, r27	; 0x04
    62c2:	80 e0       	ldi	r24, 0x00	; 0
    62c4:	9b e0       	ldi	r25, 0x0B	; 11
    62c6:	21 e0       	ldi	r18, 0x01	; 1
    62c8:	fc 01       	movw	r30, r24
    62ca:	26 83       	std	Z+6, r18	; 0x06
    62cc:	80 e0       	ldi	r24, 0x00	; 0
    62ce:	9b e0       	ldi	r25, 0x0B	; 11
    62d0:	fc 01       	movw	r30, r24
    62d2:	10 a2       	std	Z+32, r1	; 0x20
    62d4:	11 a2       	std	Z+33, r1	; 0x21
    62d6:	60 e0       	ldi	r22, 0x00	; 0
    62d8:	80 e0       	ldi	r24, 0x00	; 0
    62da:	9b e0       	ldi	r25, 0x0B	; 11
    62dc:	0e 94 da 03 	call	0x7b4	; 0x7b4 <TC0_ConfigWGM>
    62e0:	89 81       	ldd	r24, Y+1	; 0x01
    62e2:	9a 81       	ldd	r25, Y+2	; 0x02
    62e4:	ab 81       	ldd	r26, Y+3	; 0x03
    62e6:	bc 81       	ldd	r27, Y+4	; 0x04
    62e8:	8e 3f       	cpi	r24, 0xFE	; 254
    62ea:	9f 4f       	sbci	r25, 0xFF	; 255
    62ec:	a1 05       	cpc	r26, r1
    62ee:	b1 05       	cpc	r27, r1
    62f0:	98 f4       	brcc	.+38     	; 0x6318 <delayUS+0x94>
    62f2:	20 e0       	ldi	r18, 0x00	; 0
    62f4:	3b e0       	ldi	r19, 0x0B	; 11
    62f6:	89 81       	ldd	r24, Y+1	; 0x01
    62f8:	9a 81       	ldd	r25, Y+2	; 0x02
    62fa:	ab 81       	ldd	r26, Y+3	; 0x03
    62fc:	bc 81       	ldd	r27, Y+4	; 0x04
    62fe:	b6 95       	lsr	r27
    6300:	a7 95       	ror	r26
    6302:	97 95       	ror	r25
    6304:	87 95       	ror	r24
    6306:	f9 01       	movw	r30, r18
    6308:	86 a3       	std	Z+38, r24	; 0x26
    630a:	97 a3       	std	Z+39, r25	; 0x27
    630c:	65 e0       	ldi	r22, 0x05	; 5
    630e:	80 e0       	ldi	r24, 0x00	; 0
    6310:	9b e0       	ldi	r25, 0x0B	; 11
    6312:	0e 94 be 03 	call	0x77c	; 0x77c <TC0_ConfigClockSource>
    6316:	1f c0       	rjmp	.+62     	; 0x6356 <delayUS+0xd2>
    6318:	89 81       	ldd	r24, Y+1	; 0x01
    631a:	9a 81       	ldd	r25, Y+2	; 0x02
    631c:	ab 81       	ldd	r26, Y+3	; 0x03
    631e:	bc 81       	ldd	r27, Y+4	; 0x04
    6320:	80 34       	cpi	r24, 0x40	; 64
    6322:	92 44       	sbci	r25, 0x42	; 66
    6324:	af 40       	sbci	r26, 0x0F	; 15
    6326:	b1 05       	cpc	r27, r1
    6328:	b0 f4       	brcc	.+44     	; 0x6356 <delayUS+0xd2>
    632a:	20 e0       	ldi	r18, 0x00	; 0
    632c:	3b e0       	ldi	r19, 0x0B	; 11
    632e:	89 81       	ldd	r24, Y+1	; 0x01
    6330:	9a 81       	ldd	r25, Y+2	; 0x02
    6332:	ab 81       	ldd	r26, Y+3	; 0x03
    6334:	bc 81       	ldd	r27, Y+4	; 0x04
    6336:	68 94       	set
    6338:	14 f8       	bld	r1, 4
    633a:	b6 95       	lsr	r27
    633c:	a7 95       	ror	r26
    633e:	97 95       	ror	r25
    6340:	87 95       	ror	r24
    6342:	16 94       	lsr	r1
    6344:	d1 f7       	brne	.-12     	; 0x633a <delayUS+0xb6>
    6346:	f9 01       	movw	r30, r18
    6348:	86 a3       	std	Z+38, r24	; 0x26
    634a:	97 a3       	std	Z+39, r25	; 0x27
    634c:	67 e0       	ldi	r22, 0x07	; 7
    634e:	80 e0       	ldi	r24, 0x00	; 0
    6350:	9b e0       	ldi	r25, 0x0B	; 11
    6352:	0e 94 be 03 	call	0x77c	; 0x77c <TC0_ConfigClockSource>
    6356:	80 91 b1 35 	lds	r24, 0x35B1	; 0x8035b1 <egDisplayTiming>
    635a:	90 91 b2 35 	lds	r25, 0x35B2	; 0x8035b2 <egDisplayTiming+0x1>
    635e:	0f 2e       	mov	r0, r31
    6360:	f4 ef       	ldi	r31, 0xF4	; 244
    6362:	cf 2e       	mov	r12, r31
    6364:	dd 24       	eor	r13, r13
    6366:	d3 94       	inc	r13
    6368:	e1 2c       	mov	r14, r1
    636a:	f1 2c       	mov	r15, r1
    636c:	f0 2d       	mov	r31, r0
    636e:	00 e0       	ldi	r16, 0x00	; 0
    6370:	21 e0       	ldi	r18, 0x01	; 1
    6372:	41 e0       	ldi	r20, 0x01	; 1
    6374:	50 e0       	ldi	r21, 0x00	; 0
    6376:	60 e0       	ldi	r22, 0x00	; 0
    6378:	70 e0       	ldi	r23, 0x00	; 0
    637a:	0e 94 7f 04 	call	0x8fe	; 0x8fe <xEventGroupWaitBits>
    637e:	00 00       	nop
    6380:	24 96       	adiw	r28, 0x04	; 4
    6382:	cd bf       	out	0x3d, r28	; 61
    6384:	de bf       	out	0x3e, r29	; 62
    6386:	df 91       	pop	r29
    6388:	cf 91       	pop	r28
    638a:	0f 91       	pop	r16
    638c:	ff 90       	pop	r15
    638e:	ef 90       	pop	r14
    6390:	df 90       	pop	r13
    6392:	cf 90       	pop	r12
    6394:	08 95       	ret

00006396 <setPort>:
    6396:	cf 93       	push	r28
    6398:	df 93       	push	r29
    639a:	1f 92       	push	r1
    639c:	cd b7       	in	r28, 0x3d	; 61
    639e:	de b7       	in	r29, 0x3e	; 62
    63a0:	89 83       	std	Y+1, r24	; 0x01
    63a2:	89 81       	ldd	r24, Y+1	; 0x01
    63a4:	8f 70       	andi	r24, 0x0F	; 15
    63a6:	89 83       	std	Y+1, r24	; 0x01
    63a8:	89 81       	ldd	r24, Y+1	; 0x01
    63aa:	82 95       	swap	r24
    63ac:	80 7f       	andi	r24, 0xF0	; 240
    63ae:	89 83       	std	Y+1, r24	; 0x01
    63b0:	80 e0       	ldi	r24, 0x00	; 0
    63b2:	96 e0       	ldi	r25, 0x06	; 6
    63b4:	20 e0       	ldi	r18, 0x00	; 0
    63b6:	36 e0       	ldi	r19, 0x06	; 6
    63b8:	f9 01       	movw	r30, r18
    63ba:	34 81       	ldd	r19, Z+4	; 0x04
    63bc:	29 81       	ldd	r18, Y+1	; 0x01
    63be:	2f 60       	ori	r18, 0x0F	; 15
    63c0:	23 23       	and	r18, r19
    63c2:	fc 01       	movw	r30, r24
    63c4:	24 83       	std	Z+4, r18	; 0x04
    63c6:	80 e0       	ldi	r24, 0x00	; 0
    63c8:	96 e0       	ldi	r25, 0x06	; 6
    63ca:	20 e0       	ldi	r18, 0x00	; 0
    63cc:	36 e0       	ldi	r19, 0x06	; 6
    63ce:	f9 01       	movw	r30, r18
    63d0:	34 81       	ldd	r19, Z+4	; 0x04
    63d2:	29 81       	ldd	r18, Y+1	; 0x01
    63d4:	23 2b       	or	r18, r19
    63d6:	fc 01       	movw	r30, r24
    63d8:	24 83       	std	Z+4, r18	; 0x04
    63da:	00 00       	nop
    63dc:	0f 90       	pop	r0
    63de:	df 91       	pop	r29
    63e0:	cf 91       	pop	r28
    63e2:	08 95       	ret

000063e4 <setRS>:
    63e4:	cf 93       	push	r28
    63e6:	df 93       	push	r29
    63e8:	1f 92       	push	r1
    63ea:	cd b7       	in	r28, 0x3d	; 61
    63ec:	de b7       	in	r29, 0x3e	; 62
    63ee:	89 83       	std	Y+1, r24	; 0x01
    63f0:	89 81       	ldd	r24, Y+1	; 0x01
    63f2:	88 23       	and	r24, r24
    63f4:	31 f0       	breq	.+12     	; 0x6402 <setRS+0x1e>
    63f6:	80 e6       	ldi	r24, 0x60	; 96
    63f8:	96 e0       	ldi	r25, 0x06	; 6
    63fa:	21 e0       	ldi	r18, 0x01	; 1
    63fc:	fc 01       	movw	r30, r24
    63fe:	25 83       	std	Z+5, r18	; 0x05
    6400:	05 c0       	rjmp	.+10     	; 0x640c <setRS+0x28>
    6402:	80 e6       	ldi	r24, 0x60	; 96
    6404:	96 e0       	ldi	r25, 0x06	; 6
    6406:	21 e0       	ldi	r18, 0x01	; 1
    6408:	fc 01       	movw	r30, r24
    640a:	26 83       	std	Z+6, r18	; 0x06
    640c:	00 00       	nop
    640e:	0f 90       	pop	r0
    6410:	df 91       	pop	r29
    6412:	cf 91       	pop	r28
    6414:	08 95       	ret

00006416 <setRW>:
    6416:	cf 93       	push	r28
    6418:	df 93       	push	r29
    641a:	1f 92       	push	r1
    641c:	cd b7       	in	r28, 0x3d	; 61
    641e:	de b7       	in	r29, 0x3e	; 62
    6420:	89 83       	std	Y+1, r24	; 0x01
    6422:	89 81       	ldd	r24, Y+1	; 0x01
    6424:	88 23       	and	r24, r24
    6426:	31 f0       	breq	.+12     	; 0x6434 <setRW+0x1e>
    6428:	80 e6       	ldi	r24, 0x60	; 96
    642a:	96 e0       	ldi	r25, 0x06	; 6
    642c:	22 e0       	ldi	r18, 0x02	; 2
    642e:	fc 01       	movw	r30, r24
    6430:	25 83       	std	Z+5, r18	; 0x05
    6432:	05 c0       	rjmp	.+10     	; 0x643e <setRW+0x28>
    6434:	80 e6       	ldi	r24, 0x60	; 96
    6436:	96 e0       	ldi	r25, 0x06	; 6
    6438:	22 e0       	ldi	r18, 0x02	; 2
    643a:	fc 01       	movw	r30, r24
    643c:	26 83       	std	Z+6, r18	; 0x06
    643e:	00 00       	nop
    6440:	0f 90       	pop	r0
    6442:	df 91       	pop	r29
    6444:	cf 91       	pop	r28
    6446:	08 95       	ret

00006448 <setE>:
    6448:	cf 93       	push	r28
    644a:	df 93       	push	r29
    644c:	1f 92       	push	r1
    644e:	cd b7       	in	r28, 0x3d	; 61
    6450:	de b7       	in	r29, 0x3e	; 62
    6452:	89 83       	std	Y+1, r24	; 0x01
    6454:	89 81       	ldd	r24, Y+1	; 0x01
    6456:	88 23       	and	r24, r24
    6458:	31 f0       	breq	.+12     	; 0x6466 <setE+0x1e>
    645a:	80 e6       	ldi	r24, 0x60	; 96
    645c:	96 e0       	ldi	r25, 0x06	; 6
    645e:	24 e0       	ldi	r18, 0x04	; 4
    6460:	fc 01       	movw	r30, r24
    6462:	25 83       	std	Z+5, r18	; 0x05
    6464:	05 c0       	rjmp	.+10     	; 0x6470 <setE+0x28>
    6466:	80 e6       	ldi	r24, 0x60	; 96
    6468:	96 e0       	ldi	r25, 0x06	; 6
    646a:	24 e0       	ldi	r18, 0x04	; 4
    646c:	fc 01       	movw	r30, r24
    646e:	26 83       	std	Z+6, r18	; 0x06
    6470:	00 00       	nop
    6472:	0f 90       	pop	r0
    6474:	df 91       	pop	r29
    6476:	cf 91       	pop	r28
    6478:	08 95       	ret

0000647a <Nybble>:
    647a:	cf 93       	push	r28
    647c:	df 93       	push	r29
    647e:	cd b7       	in	r28, 0x3d	; 61
    6480:	de b7       	in	r29, 0x3e	; 62
    6482:	81 e0       	ldi	r24, 0x01	; 1
    6484:	0e 94 24 32 	call	0x6448	; 0x6448 <setE>
    6488:	61 e0       	ldi	r22, 0x01	; 1
    648a:	70 e0       	ldi	r23, 0x00	; 0
    648c:	80 e0       	ldi	r24, 0x00	; 0
    648e:	90 e0       	ldi	r25, 0x00	; 0
    6490:	0e 94 42 31 	call	0x6284	; 0x6284 <delayUS>
    6494:	80 e0       	ldi	r24, 0x00	; 0
    6496:	0e 94 24 32 	call	0x6448	; 0x6448 <setE>
    649a:	00 00       	nop
    649c:	df 91       	pop	r29
    649e:	cf 91       	pop	r28
    64a0:	08 95       	ret

000064a2 <command>:
    64a2:	cf 93       	push	r28
    64a4:	df 93       	push	r29
    64a6:	1f 92       	push	r1
    64a8:	cd b7       	in	r28, 0x3d	; 61
    64aa:	de b7       	in	r29, 0x3e	; 62
    64ac:	89 83       	std	Y+1, r24	; 0x01
    64ae:	89 81       	ldd	r24, Y+1	; 0x01
    64b0:	82 95       	swap	r24
    64b2:	8f 70       	andi	r24, 0x0F	; 15
    64b4:	0e 94 cb 31 	call	0x6396	; 0x6396 <setPort>
    64b8:	80 e0       	ldi	r24, 0x00	; 0
    64ba:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <setRS>
    64be:	80 e0       	ldi	r24, 0x00	; 0
    64c0:	0e 94 0b 32 	call	0x6416	; 0x6416 <setRW>
    64c4:	0e 94 3d 32 	call	0x647a	; 0x647a <Nybble>
    64c8:	89 81       	ldd	r24, Y+1	; 0x01
    64ca:	8f 70       	andi	r24, 0x0F	; 15
    64cc:	0e 94 cb 31 	call	0x6396	; 0x6396 <setPort>
    64d0:	0e 94 3d 32 	call	0x647a	; 0x647a <Nybble>
    64d4:	00 00       	nop
    64d6:	0f 90       	pop	r0
    64d8:	df 91       	pop	r29
    64da:	cf 91       	pop	r28
    64dc:	08 95       	ret

000064de <write>:
    64de:	cf 93       	push	r28
    64e0:	df 93       	push	r29
    64e2:	1f 92       	push	r1
    64e4:	cd b7       	in	r28, 0x3d	; 61
    64e6:	de b7       	in	r29, 0x3e	; 62
    64e8:	89 83       	std	Y+1, r24	; 0x01
    64ea:	89 81       	ldd	r24, Y+1	; 0x01
    64ec:	82 95       	swap	r24
    64ee:	8f 70       	andi	r24, 0x0F	; 15
    64f0:	0e 94 cb 31 	call	0x6396	; 0x6396 <setPort>
    64f4:	81 e0       	ldi	r24, 0x01	; 1
    64f6:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <setRS>
    64fa:	80 e0       	ldi	r24, 0x00	; 0
    64fc:	0e 94 0b 32 	call	0x6416	; 0x6416 <setRW>
    6500:	0e 94 3d 32 	call	0x647a	; 0x647a <Nybble>
    6504:	89 81       	ldd	r24, Y+1	; 0x01
    6506:	8f 70       	andi	r24, 0x0F	; 15
    6508:	0e 94 cb 31 	call	0x6396	; 0x6396 <setPort>
    650c:	0e 94 3d 32 	call	0x647a	; 0x647a <Nybble>
    6510:	00 00       	nop
    6512:	0f 90       	pop	r0
    6514:	df 91       	pop	r29
    6516:	cf 91       	pop	r28
    6518:	08 95       	ret

0000651a <vInitDisplay>:
 
 void vInitDisplay() {
    651a:	ef 92       	push	r14
    651c:	ff 92       	push	r15
    651e:	0f 93       	push	r16
    6520:	cf 93       	push	r28
    6522:	df 93       	push	r29
    6524:	cd b7       	in	r28, 0x3d	; 61
    6526:	de b7       	in	r29, 0x3e	; 62
	PORTA.DIRSET = PIN4_bm;
    6528:	80 e0       	ldi	r24, 0x00	; 0
    652a:	96 e0       	ldi	r25, 0x06	; 6
    652c:	20 e1       	ldi	r18, 0x10	; 16
    652e:	fc 01       	movw	r30, r24
    6530:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN5_bm;
    6532:	80 e0       	ldi	r24, 0x00	; 0
    6534:	96 e0       	ldi	r25, 0x06	; 6
    6536:	20 e2       	ldi	r18, 0x20	; 32
    6538:	fc 01       	movw	r30, r24
    653a:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN6_bm;
    653c:	80 e0       	ldi	r24, 0x00	; 0
    653e:	96 e0       	ldi	r25, 0x06	; 6
    6540:	20 e4       	ldi	r18, 0x40	; 64
    6542:	fc 01       	movw	r30, r24
    6544:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN7_bm;
    6546:	80 e0       	ldi	r24, 0x00	; 0
    6548:	96 e0       	ldi	r25, 0x06	; 6
    654a:	20 e8       	ldi	r18, 0x80	; 128
    654c:	fc 01       	movw	r30, r24
    654e:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN0_bm;
    6550:	80 e6       	ldi	r24, 0x60	; 96
    6552:	96 e0       	ldi	r25, 0x06	; 6
    6554:	21 e0       	ldi	r18, 0x01	; 1
    6556:	fc 01       	movw	r30, r24
    6558:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN1_bm;
    655a:	80 e6       	ldi	r24, 0x60	; 96
    655c:	96 e0       	ldi	r25, 0x06	; 6
    655e:	22 e0       	ldi	r18, 0x02	; 2
    6560:	fc 01       	movw	r30, r24
    6562:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN2_bm;
    6564:	80 e6       	ldi	r24, 0x60	; 96
    6566:	96 e0       	ldi	r25, 0x06	; 6
    6568:	24 e0       	ldi	r18, 0x04	; 4
    656a:	fc 01       	movw	r30, r24
    656c:	21 83       	std	Z+1, r18	; 0x01
	PORTA.OUT &= 0x0F;
    656e:	80 e0       	ldi	r24, 0x00	; 0
    6570:	96 e0       	ldi	r25, 0x06	; 6
    6572:	20 e0       	ldi	r18, 0x00	; 0
    6574:	36 e0       	ldi	r19, 0x06	; 6
    6576:	f9 01       	movw	r30, r18
    6578:	24 81       	ldd	r18, Z+4	; 0x04
    657a:	2f 70       	andi	r18, 0x0F	; 15
    657c:	fc 01       	movw	r30, r24
    657e:	24 83       	std	Z+4, r18	; 0x04
	PORTD.OUT &= 0xF8;
    6580:	80 e6       	ldi	r24, 0x60	; 96
    6582:	96 e0       	ldi	r25, 0x06	; 6
    6584:	20 e6       	ldi	r18, 0x60	; 96
    6586:	36 e0       	ldi	r19, 0x06	; 6
    6588:	f9 01       	movw	r30, r18
    658a:	24 81       	ldd	r18, Z+4	; 0x04
    658c:	28 7f       	andi	r18, 0xF8	; 248
    658e:	fc 01       	movw	r30, r24
    6590:	24 83       	std	Z+4, r18	; 0x04

	if((displayLineQueue = xQueueCreate(DISPLAY_QUEUE_DEPTH, sizeof(displayLine_t))) == NULL)
    6592:	40 e0       	ldi	r20, 0x00	; 0
    6594:	66 e1       	ldi	r22, 0x16	; 22
    6596:	88 e0       	ldi	r24, 0x08	; 8
    6598:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <xQueueGenericCreate>
    659c:	80 93 af 35 	sts	0x35AF, r24	; 0x8035af <displayLineQueue>
    65a0:	90 93 b0 35 	sts	0x35B0, r25	; 0x8035b0 <displayLineQueue+0x1>
	{
		//error(ERR_QUEUE_CREATE_HANDLE_NULL);
	}
	
	egDisplayTiming = xEventGroupCreate();
    65a4:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <xEventGroupCreate>
    65a8:	80 93 b1 35 	sts	0x35B1, r24	; 0x8035b1 <egDisplayTiming>
    65ac:	90 93 b2 35 	sts	0x35B2, r25	; 0x8035b2 <egDisplayTiming+0x1>
	

	xTaskCreate(vDisplayUpdateTask, (const char*) "dispUpdate", configMINIMAL_STACK_SIZE+150, NULL, 1, NULL);	
    65b0:	e1 2c       	mov	r14, r1
    65b2:	f1 2c       	mov	r15, r1
    65b4:	01 e0       	ldi	r16, 0x01	; 1
    65b6:	20 e0       	ldi	r18, 0x00	; 0
    65b8:	30 e0       	ldi	r19, 0x00	; 0
    65ba:	4e e5       	ldi	r20, 0x5E	; 94
    65bc:	51 e0       	ldi	r21, 0x01	; 1
    65be:	61 e0       	ldi	r22, 0x01	; 1
    65c0:	71 e2       	ldi	r23, 0x21	; 33
    65c2:	8b e8       	ldi	r24, 0x8B	; 139
    65c4:	93 e3       	ldi	r25, 0x33	; 51
    65c6:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <xTaskCreate>
 }
    65ca:	00 00       	nop
    65cc:	df 91       	pop	r29
    65ce:	cf 91       	pop	r28
    65d0:	0f 91       	pop	r16
    65d2:	ff 90       	pop	r15
    65d4:	ef 90       	pop	r14
    65d6:	08 95       	ret

000065d8 <_displaySetPos>:
 
 void _displaySetPos(int line, int pos) {
    65d8:	cf 93       	push	r28
    65da:	df 93       	push	r29
    65dc:	00 d0       	rcall	.+0      	; 0x65de <_displaySetPos+0x6>
    65de:	1f 92       	push	r1
    65e0:	cd b7       	in	r28, 0x3d	; 61
    65e2:	de b7       	in	r29, 0x3e	; 62
    65e4:	89 83       	std	Y+1, r24	; 0x01
    65e6:	9a 83       	std	Y+2, r25	; 0x02
    65e8:	6b 83       	std	Y+3, r22	; 0x03
    65ea:	7c 83       	std	Y+4, r23	; 0x04
	 switch(line) {
    65ec:	89 81       	ldd	r24, Y+1	; 0x01
    65ee:	9a 81       	ldd	r25, Y+2	; 0x02
    65f0:	81 30       	cpi	r24, 0x01	; 1
    65f2:	91 05       	cpc	r25, r1
    65f4:	89 f0       	breq	.+34     	; 0x6618 <_displaySetPos+0x40>
    65f6:	82 30       	cpi	r24, 0x02	; 2
    65f8:	91 05       	cpc	r25, r1
    65fa:	1c f4       	brge	.+6      	; 0x6602 <_displaySetPos+0x2a>
    65fc:	89 2b       	or	r24, r25
    65fe:	39 f0       	breq	.+14     	; 0x660e <_displaySetPos+0x36>
    6600:	1a c0       	rjmp	.+52     	; 0x6636 <_displaySetPos+0x5e>
    6602:	82 30       	cpi	r24, 0x02	; 2
    6604:	91 05       	cpc	r25, r1
    6606:	69 f0       	breq	.+26     	; 0x6622 <_displaySetPos+0x4a>
    6608:	03 97       	sbiw	r24, 0x03	; 3
    660a:	81 f0       	breq	.+32     	; 0x662c <_displaySetPos+0x54>
    660c:	14 c0       	rjmp	.+40     	; 0x6636 <_displaySetPos+0x5e>
		 case 0:
		 command(0x80 + 0x00 + pos);
    660e:	8b 81       	ldd	r24, Y+3	; 0x03
    6610:	80 58       	subi	r24, 0x80	; 128
    6612:	0e 94 51 32 	call	0x64a2	; 0x64a2 <command>
		 break;
    6616:	0f c0       	rjmp	.+30     	; 0x6636 <_displaySetPos+0x5e>
		 case 1:
		 command(0x80 + 0x40 + pos);
    6618:	8b 81       	ldd	r24, Y+3	; 0x03
    661a:	80 54       	subi	r24, 0x40	; 64
    661c:	0e 94 51 32 	call	0x64a2	; 0x64a2 <command>
		 break;
    6620:	0a c0       	rjmp	.+20     	; 0x6636 <_displaySetPos+0x5e>
		 case 2:
		 command(0x80 + 0x14 + pos);
    6622:	8b 81       	ldd	r24, Y+3	; 0x03
    6624:	8c 56       	subi	r24, 0x6C	; 108
    6626:	0e 94 51 32 	call	0x64a2	; 0x64a2 <command>
		 break;
    662a:	05 c0       	rjmp	.+10     	; 0x6636 <_displaySetPos+0x5e>
		 case 3:
		 command(0x80 + 0x54 + pos);
    662c:	8b 81       	ldd	r24, Y+3	; 0x03
    662e:	8c 52       	subi	r24, 0x2C	; 44
    6630:	0e 94 51 32 	call	0x64a2	; 0x64a2 <command>
		 break;
    6634:	00 00       	nop
	 }
	 delayUS(39);
    6636:	67 e2       	ldi	r22, 0x27	; 39
    6638:	70 e0       	ldi	r23, 0x00	; 0
    663a:	80 e0       	ldi	r24, 0x00	; 0
    663c:	90 e0       	ldi	r25, 0x00	; 0
    663e:	0e 94 42 31 	call	0x6284	; 0x6284 <delayUS>
 }
    6642:	00 00       	nop
    6644:	24 96       	adiw	r28, 0x04	; 4
    6646:	cd bf       	out	0x3d, r28	; 61
    6648:	de bf       	out	0x3e, r29	; 62
    664a:	df 91       	pop	r29
    664c:	cf 91       	pop	r28
    664e:	08 95       	ret

00006650 <_displayWriteChar>:

 void _displayWriteChar(char c) {
    6650:	cf 93       	push	r28
    6652:	df 93       	push	r29
    6654:	1f 92       	push	r1
    6656:	cd b7       	in	r28, 0x3d	; 61
    6658:	de b7       	in	r29, 0x3e	; 62
    665a:	89 83       	std	Y+1, r24	; 0x01
	 write(c);
    665c:	89 81       	ldd	r24, Y+1	; 0x01
    665e:	0e 94 6f 32 	call	0x64de	; 0x64de <write>
	 delayUS(43);
    6662:	6b e2       	ldi	r22, 0x2B	; 43
    6664:	70 e0       	ldi	r23, 0x00	; 0
    6666:	80 e0       	ldi	r24, 0x00	; 0
    6668:	90 e0       	ldi	r25, 0x00	; 0
    666a:	0e 94 42 31 	call	0x6284	; 0x6284 <delayUS>
 }
    666e:	00 00       	nop
    6670:	0f 90       	pop	r0
    6672:	df 91       	pop	r29
    6674:	cf 91       	pop	r28
    6676:	08 95       	ret

00006678 <_displayWriteString>:
 
 void _displayWriteString(char* s) {
    6678:	cf 93       	push	r28
    667a:	df 93       	push	r29
    667c:	00 d0       	rcall	.+0      	; 0x667e <_displayWriteString+0x6>
    667e:	1f 92       	push	r1
    6680:	cd b7       	in	r28, 0x3d	; 61
    6682:	de b7       	in	r29, 0x3e	; 62
    6684:	8b 83       	std	Y+3, r24	; 0x03
    6686:	9c 83       	std	Y+4, r25	; 0x04
	 for(int i = 0; i < 20; i++) {
    6688:	19 82       	std	Y+1, r1	; 0x01
    668a:	1a 82       	std	Y+2, r1	; 0x02
    668c:	19 c0       	rjmp	.+50     	; 0x66c0 <_displayWriteString+0x48>
		 if(s[i] == '\0') {
    668e:	89 81       	ldd	r24, Y+1	; 0x01
    6690:	9a 81       	ldd	r25, Y+2	; 0x02
    6692:	2b 81       	ldd	r18, Y+3	; 0x03
    6694:	3c 81       	ldd	r19, Y+4	; 0x04
    6696:	82 0f       	add	r24, r18
    6698:	93 1f       	adc	r25, r19
    669a:	fc 01       	movw	r30, r24
    669c:	80 81       	ld	r24, Z
    669e:	88 23       	and	r24, r24
    66a0:	a1 f0       	breq	.+40     	; 0x66ca <_displayWriteString+0x52>
			 break;
		 }
		 _displayWriteChar(s[i]);
    66a2:	89 81       	ldd	r24, Y+1	; 0x01
    66a4:	9a 81       	ldd	r25, Y+2	; 0x02
    66a6:	2b 81       	ldd	r18, Y+3	; 0x03
    66a8:	3c 81       	ldd	r19, Y+4	; 0x04
    66aa:	82 0f       	add	r24, r18
    66ac:	93 1f       	adc	r25, r19
    66ae:	fc 01       	movw	r30, r24
    66b0:	80 81       	ld	r24, Z
    66b2:	0e 94 28 33 	call	0x6650	; 0x6650 <_displayWriteChar>
	 write(c);
	 delayUS(43);
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
    66b6:	89 81       	ldd	r24, Y+1	; 0x01
    66b8:	9a 81       	ldd	r25, Y+2	; 0x02
    66ba:	01 96       	adiw	r24, 0x01	; 1
    66bc:	89 83       	std	Y+1, r24	; 0x01
    66be:	9a 83       	std	Y+2, r25	; 0x02
    66c0:	89 81       	ldd	r24, Y+1	; 0x01
    66c2:	9a 81       	ldd	r25, Y+2	; 0x02
    66c4:	44 97       	sbiw	r24, 0x14	; 20
    66c6:	1c f3       	brlt	.-58     	; 0x668e <_displayWriteString+0x16>
		 if(s[i] == '\0') {
			 break;
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    66c8:	01 c0       	rjmp	.+2      	; 0x66cc <_displayWriteString+0x54>
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
		 if(s[i] == '\0') {
			 break;
    66ca:	00 00       	nop
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    66cc:	00 00       	nop
    66ce:	24 96       	adiw	r28, 0x04	; 4
    66d0:	cd bf       	out	0x3d, r28	; 61
    66d2:	de bf       	out	0x3e, r29	; 62
    66d4:	df 91       	pop	r29
    66d6:	cf 91       	pop	r28
    66d8:	08 95       	ret

000066da <_displayWriteStringAtPos>:

 void _displayWriteStringAtPos(int line, int pos, char* s) {
    66da:	cf 93       	push	r28
    66dc:	df 93       	push	r29
    66de:	00 d0       	rcall	.+0      	; 0x66e0 <_displayWriteStringAtPos+0x6>
    66e0:	00 d0       	rcall	.+0      	; 0x66e2 <_displayWriteStringAtPos+0x8>
    66e2:	cd b7       	in	r28, 0x3d	; 61
    66e4:	de b7       	in	r29, 0x3e	; 62
    66e6:	89 83       	std	Y+1, r24	; 0x01
    66e8:	9a 83       	std	Y+2, r25	; 0x02
    66ea:	6b 83       	std	Y+3, r22	; 0x03
    66ec:	7c 83       	std	Y+4, r23	; 0x04
    66ee:	4d 83       	std	Y+5, r20	; 0x05
    66f0:	5e 83       	std	Y+6, r21	; 0x06
	 _displaySetPos(line, pos);
    66f2:	2b 81       	ldd	r18, Y+3	; 0x03
    66f4:	3c 81       	ldd	r19, Y+4	; 0x04
    66f6:	89 81       	ldd	r24, Y+1	; 0x01
    66f8:	9a 81       	ldd	r25, Y+2	; 0x02
    66fa:	b9 01       	movw	r22, r18
    66fc:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <_displaySetPos>
	 _displayWriteString(s);
    6700:	8d 81       	ldd	r24, Y+5	; 0x05
    6702:	9e 81       	ldd	r25, Y+6	; 0x06
    6704:	0e 94 3c 33 	call	0x6678	; 0x6678 <_displayWriteString>
 }
    6708:	00 00       	nop
    670a:	26 96       	adiw	r28, 0x06	; 6
    670c:	cd bf       	out	0x3d, r28	; 61
    670e:	de bf       	out	0x3e, r29	; 62
    6710:	df 91       	pop	r29
    6712:	cf 91       	pop	r28
    6714:	08 95       	ret

00006716 <vDisplayUpdateTask>:

 void vDisplayUpdateTask(void *pvParameters) {
    6716:	cf 93       	push	r28
    6718:	df 93       	push	r29
    671a:	cd b7       	in	r28, 0x3d	; 61
    671c:	de b7       	in	r29, 0x3e	; 62
    671e:	c0 57       	subi	r28, 0x70	; 112
    6720:	d1 09       	sbc	r29, r1
    6722:	cd bf       	out	0x3d, r28	; 61
    6724:	de bf       	out	0x3e, r29	; 62
    6726:	9e 01       	movw	r18, r28
    6728:	21 59       	subi	r18, 0x91	; 145
    672a:	3f 4f       	sbci	r19, 0xFF	; 255
    672c:	f9 01       	movw	r30, r18
    672e:	80 83       	st	Z, r24
    6730:	91 83       	std	Z+1, r25	; 0x01
	 int i = 0;
    6732:	19 82       	std	Y+1, r1	; 0x01
    6734:	1a 82       	std	Y+2, r1	; 0x02
	 int j = 0;
    6736:	1b 82       	std	Y+3, r1	; 0x03
    6738:	1c 82       	std	Y+4, r1	; 0x04
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    673a:	1d 82       	std	Y+5, r1	; 0x05
    673c:	1e 82       	std	Y+6, r1	; 0x06
    673e:	26 c0       	rjmp	.+76     	; 0x678c <vDisplayUpdateTask+0x76>
		for(int j = 0; j < 20; j ++) {
    6740:	1f 82       	std	Y+7, r1	; 0x07
    6742:	18 86       	std	Y+8, r1	; 0x08
    6744:	1a c0       	rjmp	.+52     	; 0x677a <vDisplayUpdateTask+0x64>
			displayLines[i][j] = 0x20;
    6746:	2d 81       	ldd	r18, Y+5	; 0x05
    6748:	3e 81       	ldd	r19, Y+6	; 0x06
    674a:	44 e1       	ldi	r20, 0x14	; 20
    674c:	42 9f       	mul	r20, r18
    674e:	c0 01       	movw	r24, r0
    6750:	43 9f       	mul	r20, r19
    6752:	90 0d       	add	r25, r0
    6754:	11 24       	eor	r1, r1
    6756:	9e 01       	movw	r18, r28
    6758:	2f 5f       	subi	r18, 0xFF	; 255
    675a:	3f 4f       	sbci	r19, 0xFF	; 255
    675c:	28 0f       	add	r18, r24
    675e:	39 1f       	adc	r19, r25
    6760:	8f 81       	ldd	r24, Y+7	; 0x07
    6762:	98 85       	ldd	r25, Y+8	; 0x08
    6764:	82 0f       	add	r24, r18
    6766:	93 1f       	adc	r25, r19
    6768:	08 96       	adiw	r24, 0x08	; 8
    676a:	20 e2       	ldi	r18, 0x20	; 32
    676c:	fc 01       	movw	r30, r24
    676e:	20 83       	st	Z, r18
 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
    6770:	8f 81       	ldd	r24, Y+7	; 0x07
    6772:	98 85       	ldd	r25, Y+8	; 0x08
    6774:	01 96       	adiw	r24, 0x01	; 1
    6776:	8f 83       	std	Y+7, r24	; 0x07
    6778:	98 87       	std	Y+8, r25	; 0x08
    677a:	8f 81       	ldd	r24, Y+7	; 0x07
    677c:	98 85       	ldd	r25, Y+8	; 0x08
    677e:	44 97       	sbiw	r24, 0x14	; 20
    6780:	14 f3       	brlt	.-60     	; 0x6746 <vDisplayUpdateTask+0x30>

 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    6782:	8d 81       	ldd	r24, Y+5	; 0x05
    6784:	9e 81       	ldd	r25, Y+6	; 0x06
    6786:	01 96       	adiw	r24, 0x01	; 1
    6788:	8d 83       	std	Y+5, r24	; 0x05
    678a:	9e 83       	std	Y+6, r25	; 0x06
    678c:	8d 81       	ldd	r24, Y+5	; 0x05
    678e:	9e 81       	ldd	r25, Y+6	; 0x06
    6790:	04 97       	sbiw	r24, 0x04	; 4
    6792:	b4 f2       	brlt	.-84     	; 0x6740 <vDisplayUpdateTask+0x2a>
			displayLines[i][j] = 0x20;
		}
	 }
	 displayLine_t newLine;

	 delayUS(40000);
    6794:	60 e4       	ldi	r22, 0x40	; 64
    6796:	7c e9       	ldi	r23, 0x9C	; 156
    6798:	80 e0       	ldi	r24, 0x00	; 0
    679a:	90 e0       	ldi	r25, 0x00	; 0
    679c:	0e 94 42 31 	call	0x6284	; 0x6284 <delayUS>
	 setPort(0x03);
    67a0:	83 e0       	ldi	r24, 0x03	; 3
    67a2:	0e 94 cb 31 	call	0x6396	; 0x6396 <setPort>
	 delayUS(5000);
    67a6:	68 e8       	ldi	r22, 0x88	; 136
    67a8:	73 e1       	ldi	r23, 0x13	; 19
    67aa:	80 e0       	ldi	r24, 0x00	; 0
    67ac:	90 e0       	ldi	r25, 0x00	; 0
    67ae:	0e 94 42 31 	call	0x6284	; 0x6284 <delayUS>
	 Nybble();
    67b2:	0e 94 3d 32 	call	0x647a	; 0x647a <Nybble>
	 delayUS(160);
    67b6:	60 ea       	ldi	r22, 0xA0	; 160
    67b8:	70 e0       	ldi	r23, 0x00	; 0
    67ba:	80 e0       	ldi	r24, 0x00	; 0
    67bc:	90 e0       	ldi	r25, 0x00	; 0
    67be:	0e 94 42 31 	call	0x6284	; 0x6284 <delayUS>
	 Nybble();
    67c2:	0e 94 3d 32 	call	0x647a	; 0x647a <Nybble>
	 delayUS(160);
    67c6:	60 ea       	ldi	r22, 0xA0	; 160
    67c8:	70 e0       	ldi	r23, 0x00	; 0
    67ca:	80 e0       	ldi	r24, 0x00	; 0
    67cc:	90 e0       	ldi	r25, 0x00	; 0
    67ce:	0e 94 42 31 	call	0x6284	; 0x6284 <delayUS>
	 Nybble();
    67d2:	0e 94 3d 32 	call	0x647a	; 0x647a <Nybble>
	 delayUS(160);
    67d6:	60 ea       	ldi	r22, 0xA0	; 160
    67d8:	70 e0       	ldi	r23, 0x00	; 0
    67da:	80 e0       	ldi	r24, 0x00	; 0
    67dc:	90 e0       	ldi	r25, 0x00	; 0
    67de:	0e 94 42 31 	call	0x6284	; 0x6284 <delayUS>
	 setPort(0x02);
    67e2:	82 e0       	ldi	r24, 0x02	; 2
    67e4:	0e 94 cb 31 	call	0x6396	; 0x6396 <setPort>
	 Nybble();
    67e8:	0e 94 3d 32 	call	0x647a	; 0x647a <Nybble>
	 command(0x28);
    67ec:	88 e2       	ldi	r24, 0x28	; 40
    67ee:	0e 94 51 32 	call	0x64a2	; 0x64a2 <command>
	 command(0x10);
    67f2:	80 e1       	ldi	r24, 0x10	; 16
    67f4:	0e 94 51 32 	call	0x64a2	; 0x64a2 <command>
	 command(0x0C); //Cursor and Blinking off
    67f8:	8c e0       	ldi	r24, 0x0C	; 12
    67fa:	0e 94 51 32 	call	0x64a2	; 0x64a2 <command>
	 command(0x06);
    67fe:	86 e0       	ldi	r24, 0x06	; 6
    6800:	0e 94 51 32 	call	0x64a2	; 0x64a2 <command>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
    6804:	68 ec       	ldi	r22, 0xC8	; 200
    6806:	70 e0       	ldi	r23, 0x00	; 0
    6808:	80 e0       	ldi	r24, 0x00	; 0
    680a:	90 e0       	ldi	r25, 0x00	; 0
    680c:	0e 94 bc 13 	call	0x2778	; 0x2778 <vTaskDelay>
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
    6810:	80 91 b1 35 	lds	r24, 0x35B1	; 0x8035b1 <egDisplayTiming>
    6814:	90 91 b2 35 	lds	r25, 0x35B2	; 0x8035b2 <egDisplayTiming+0x1>
    6818:	40 e0       	ldi	r20, 0x00	; 0
    681a:	50 e0       	ldi	r21, 0x00	; 0
    681c:	ba 01       	movw	r22, r20
    681e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    6822:	dc 01       	movw	r26, r24
    6824:	cb 01       	movw	r24, r22
    6826:	89 2b       	or	r24, r25
    6828:	8a 2b       	or	r24, r26
    682a:	8b 2b       	or	r24, r27
    682c:	09 f4       	brne	.+2      	; 0x6830 <vDisplayUpdateTask+0x11a>
    682e:	96 c0       	rjmp	.+300    	; 0x695c <vDisplayUpdateTask+0x246>
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    6830:	80 91 b1 35 	lds	r24, 0x35B1	; 0x8035b1 <egDisplayTiming>
    6834:	90 91 b2 35 	lds	r25, 0x35B2	; 0x8035b2 <egDisplayTiming+0x1>
    6838:	42 e0       	ldi	r20, 0x02	; 2
    683a:	50 e0       	ldi	r21, 0x00	; 0
    683c:	60 e0       	ldi	r22, 0x00	; 0
    683e:	70 e0       	ldi	r23, 0x00	; 0
    6840:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
			for(i = 0; i < 4;i++) {
    6844:	19 82       	std	Y+1, r1	; 0x01
    6846:	1a 82       	std	Y+2, r1	; 0x02
    6848:	26 c0       	rjmp	.+76     	; 0x6896 <vDisplayUpdateTask+0x180>
				for(j = 0; j < 20; j ++) {
    684a:	1b 82       	std	Y+3, r1	; 0x03
    684c:	1c 82       	std	Y+4, r1	; 0x04
    684e:	1a c0       	rjmp	.+52     	; 0x6884 <vDisplayUpdateTask+0x16e>
					displayLines[i][j] = 0x20;
    6850:	29 81       	ldd	r18, Y+1	; 0x01
    6852:	3a 81       	ldd	r19, Y+2	; 0x02
    6854:	44 e1       	ldi	r20, 0x14	; 20
    6856:	42 9f       	mul	r20, r18
    6858:	c0 01       	movw	r24, r0
    685a:	43 9f       	mul	r20, r19
    685c:	90 0d       	add	r25, r0
    685e:	11 24       	eor	r1, r1
    6860:	9e 01       	movw	r18, r28
    6862:	2f 5f       	subi	r18, 0xFF	; 255
    6864:	3f 4f       	sbci	r19, 0xFF	; 255
    6866:	28 0f       	add	r18, r24
    6868:	39 1f       	adc	r19, r25
    686a:	8b 81       	ldd	r24, Y+3	; 0x03
    686c:	9c 81       	ldd	r25, Y+4	; 0x04
    686e:	82 0f       	add	r24, r18
    6870:	93 1f       	adc	r25, r19
    6872:	08 96       	adiw	r24, 0x08	; 8
    6874:	20 e2       	ldi	r18, 0x20	; 32
    6876:	fc 01       	movw	r30, r24
    6878:	20 83       	st	Z, r18
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
    687a:	8b 81       	ldd	r24, Y+3	; 0x03
    687c:	9c 81       	ldd	r25, Y+4	; 0x04
    687e:	01 96       	adiw	r24, 0x01	; 1
    6880:	8b 83       	std	Y+3, r24	; 0x03
    6882:	9c 83       	std	Y+4, r25	; 0x04
    6884:	8b 81       	ldd	r24, Y+3	; 0x03
    6886:	9c 81       	ldd	r25, Y+4	; 0x04
    6888:	44 97       	sbiw	r24, 0x14	; 20
    688a:	14 f3       	brlt	.-60     	; 0x6850 <vDisplayUpdateTask+0x13a>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
    688c:	89 81       	ldd	r24, Y+1	; 0x01
    688e:	9a 81       	ldd	r25, Y+2	; 0x02
    6890:	01 96       	adiw	r24, 0x01	; 1
    6892:	89 83       	std	Y+1, r24	; 0x01
    6894:	9a 83       	std	Y+2, r25	; 0x02
    6896:	89 81       	ldd	r24, Y+1	; 0x01
    6898:	9a 81       	ldd	r25, Y+2	; 0x02
    689a:	04 97       	sbiw	r24, 0x04	; 4
    689c:	b4 f2       	brlt	.-84     	; 0x684a <vDisplayUpdateTask+0x134>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    689e:	5e c0       	rjmp	.+188    	; 0x695c <vDisplayUpdateTask+0x246>
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    68a0:	80 91 af 35 	lds	r24, 0x35AF	; 0x8035af <displayLineQueue>
    68a4:	90 91 b0 35 	lds	r25, 0x35B0	; 0x8035b0 <displayLineQueue+0x1>
    68a8:	be 01       	movw	r22, r28
    68aa:	67 5a       	subi	r22, 0xA7	; 167
    68ac:	7f 4f       	sbci	r23, 0xFF	; 255
    68ae:	2f ef       	ldi	r18, 0xFF	; 255
    68b0:	3f ef       	ldi	r19, 0xFF	; 255
    68b2:	a9 01       	movw	r20, r18
    68b4:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <xQueueReceive>
    68b8:	88 23       	and	r24, r24
    68ba:	09 f4       	brne	.+2      	; 0x68be <vDisplayUpdateTask+0x1a8>
    68bc:	4f c0       	rjmp	.+158    	; 0x695c <vDisplayUpdateTask+0x246>
				i=0;			
    68be:	19 82       	std	Y+1, r1	; 0x01
    68c0:	1a 82       	std	Y+2, r1	; 0x02
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    68c2:	32 c0       	rjmp	.+100    	; 0x6928 <vDisplayUpdateTask+0x212>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
    68c4:	ce 01       	movw	r24, r28
    68c6:	87 5a       	subi	r24, 0xA7	; 167
    68c8:	9f 4f       	sbci	r25, 0xFF	; 255
    68ca:	fc 01       	movw	r30, r24
    68cc:	80 81       	ld	r24, Z
    68ce:	48 2f       	mov	r20, r24
    68d0:	50 e0       	ldi	r21, 0x00	; 0
    68d2:	ce 01       	movw	r24, r28
    68d4:	87 5a       	subi	r24, 0xA7	; 167
    68d6:	9f 4f       	sbci	r25, 0xFF	; 255
    68d8:	fc 01       	movw	r30, r24
    68da:	81 81       	ldd	r24, Z+1	; 0x01
    68dc:	28 2f       	mov	r18, r24
    68de:	30 e0       	ldi	r19, 0x00	; 0
    68e0:	89 81       	ldd	r24, Y+1	; 0x01
    68e2:	9a 81       	ldd	r25, Y+2	; 0x02
    68e4:	82 0f       	add	r24, r18
    68e6:	93 1f       	adc	r25, r19
    68e8:	be 01       	movw	r22, r28
    68ea:	67 5a       	subi	r22, 0xA7	; 167
    68ec:	7f 4f       	sbci	r23, 0xFF	; 255
    68ee:	29 81       	ldd	r18, Y+1	; 0x01
    68f0:	3a 81       	ldd	r19, Y+2	; 0x02
    68f2:	26 0f       	add	r18, r22
    68f4:	37 1f       	adc	r19, r23
    68f6:	2e 5f       	subi	r18, 0xFE	; 254
    68f8:	3f 4f       	sbci	r19, 0xFF	; 255
    68fa:	f9 01       	movw	r30, r18
    68fc:	60 81       	ld	r22, Z
    68fe:	74 e1       	ldi	r23, 0x14	; 20
    6900:	74 9f       	mul	r23, r20
    6902:	90 01       	movw	r18, r0
    6904:	75 9f       	mul	r23, r21
    6906:	30 0d       	add	r19, r0
    6908:	11 24       	eor	r1, r1
    690a:	ae 01       	movw	r20, r28
    690c:	4f 5f       	subi	r20, 0xFF	; 255
    690e:	5f 4f       	sbci	r21, 0xFF	; 255
    6910:	24 0f       	add	r18, r20
    6912:	35 1f       	adc	r19, r21
    6914:	82 0f       	add	r24, r18
    6916:	93 1f       	adc	r25, r19
    6918:	08 96       	adiw	r24, 0x08	; 8
    691a:	fc 01       	movw	r30, r24
    691c:	60 83       	st	Z, r22
					i++;
    691e:	89 81       	ldd	r24, Y+1	; 0x01
    6920:	9a 81       	ldd	r25, Y+2	; 0x02
    6922:	01 96       	adiw	r24, 0x01	; 1
    6924:	89 83       	std	Y+1, r24	; 0x01
    6926:	9a 83       	std	Y+2, r25	; 0x02
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    6928:	ce 01       	movw	r24, r28
    692a:	87 5a       	subi	r24, 0xA7	; 167
    692c:	9f 4f       	sbci	r25, 0xFF	; 255
    692e:	fc 01       	movw	r30, r24
    6930:	81 81       	ldd	r24, Z+1	; 0x01
    6932:	28 2f       	mov	r18, r24
    6934:	30 e0       	ldi	r19, 0x00	; 0
    6936:	89 81       	ldd	r24, Y+1	; 0x01
    6938:	9a 81       	ldd	r25, Y+2	; 0x02
    693a:	82 0f       	add	r24, r18
    693c:	93 1f       	adc	r25, r19
    693e:	44 97       	sbiw	r24, 0x14	; 20
    6940:	6c f4       	brge	.+26     	; 0x695c <vDisplayUpdateTask+0x246>
    6942:	9e 01       	movw	r18, r28
    6944:	27 5a       	subi	r18, 0xA7	; 167
    6946:	3f 4f       	sbci	r19, 0xFF	; 255
    6948:	89 81       	ldd	r24, Y+1	; 0x01
    694a:	9a 81       	ldd	r25, Y+2	; 0x02
    694c:	82 0f       	add	r24, r18
    694e:	93 1f       	adc	r25, r19
    6950:	02 96       	adiw	r24, 0x02	; 2
    6952:	fc 01       	movw	r30, r24
    6954:	80 81       	ld	r24, Z
    6956:	88 23       	and	r24, r24
    6958:	09 f0       	breq	.+2      	; 0x695c <vDisplayUpdateTask+0x246>
    695a:	b4 cf       	rjmp	.-152    	; 0x68c4 <vDisplayUpdateTask+0x1ae>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    695c:	80 91 af 35 	lds	r24, 0x35AF	; 0x8035af <displayLineQueue>
    6960:	90 91 b0 35 	lds	r25, 0x35B0	; 0x8035b0 <displayLineQueue+0x1>
    6964:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <uxQueueMessagesWaiting>
    6968:	88 23       	and	r24, r24
    696a:	09 f0       	breq	.+2      	; 0x696e <vDisplayUpdateTask+0x258>
    696c:	99 cf       	rjmp	.-206    	; 0x68a0 <vDisplayUpdateTask+0x18a>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    696e:	19 82       	std	Y+1, r1	; 0x01
    6970:	1a 82       	std	Y+2, r1	; 0x02
    6972:	19 c0       	rjmp	.+50     	; 0x69a6 <vDisplayUpdateTask+0x290>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
    6974:	9e 01       	movw	r18, r28
    6976:	27 5f       	subi	r18, 0xF7	; 247
    6978:	3f 4f       	sbci	r19, 0xFF	; 255
    697a:	49 81       	ldd	r20, Y+1	; 0x01
    697c:	5a 81       	ldd	r21, Y+2	; 0x02
    697e:	64 e1       	ldi	r22, 0x14	; 20
    6980:	64 9f       	mul	r22, r20
    6982:	c0 01       	movw	r24, r0
    6984:	65 9f       	mul	r22, r21
    6986:	90 0d       	add	r25, r0
    6988:	11 24       	eor	r1, r1
    698a:	28 0f       	add	r18, r24
    698c:	39 1f       	adc	r19, r25
    698e:	89 81       	ldd	r24, Y+1	; 0x01
    6990:	9a 81       	ldd	r25, Y+2	; 0x02
    6992:	a9 01       	movw	r20, r18
    6994:	60 e0       	ldi	r22, 0x00	; 0
    6996:	70 e0       	ldi	r23, 0x00	; 0
    6998:	0e 94 6d 33 	call	0x66da	; 0x66da <_displayWriteStringAtPos>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    699c:	89 81       	ldd	r24, Y+1	; 0x01
    699e:	9a 81       	ldd	r25, Y+2	; 0x02
    69a0:	01 96       	adiw	r24, 0x01	; 1
    69a2:	89 83       	std	Y+1, r24	; 0x01
    69a4:	9a 83       	std	Y+2, r25	; 0x02
    69a6:	89 81       	ldd	r24, Y+1	; 0x01
    69a8:	9a 81       	ldd	r25, Y+2	; 0x02
    69aa:	04 97       	sbiw	r24, 0x04	; 4
    69ac:	1c f3       	brlt	.-58     	; 0x6974 <vDisplayUpdateTask+0x25e>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
		 }
	 }
    69ae:	2a cf       	rjmp	.-428    	; 0x6804 <vDisplayUpdateTask+0xee>

000069b0 <vDisplayClear>:
 }
 

void vDisplayClear() {
    69b0:	cf 93       	push	r28
    69b2:	df 93       	push	r29
    69b4:	cd b7       	in	r28, 0x3d	; 61
    69b6:	de b7       	in	r29, 0x3e	; 62
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    69b8:	80 91 b1 35 	lds	r24, 0x35B1	; 0x8035b1 <egDisplayTiming>
    69bc:	90 91 b2 35 	lds	r25, 0x35B2	; 0x8035b2 <egDisplayTiming+0x1>
    69c0:	42 e0       	ldi	r20, 0x02	; 2
    69c2:	50 e0       	ldi	r21, 0x00	; 0
    69c4:	60 e0       	ldi	r22, 0x00	; 0
    69c6:	70 e0       	ldi	r23, 0x00	; 0
    69c8:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
}
    69cc:	00 00       	nop
    69ce:	df 91       	pop	r29
    69d0:	cf 91       	pop	r28
    69d2:	08 95       	ret

000069d4 <vDisplayWriteStringAtPos>:

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    69d4:	cf 93       	push	r28
    69d6:	df 93       	push	r29
    69d8:	1f 92       	push	r1
    69da:	1f 92       	push	r1
    69dc:	cd b7       	in	r28, 0x3d	; 61
    69de:	de b7       	in	r29, 0x3e	; 62
	va_list arg;	
	va_start(arg, fmt);
    69e0:	ce 01       	movw	r24, r28
    69e2:	0e 96       	adiw	r24, 0x0e	; 14
    69e4:	89 83       	std	Y+1, r24	; 0x01
    69e6:	9a 83       	std	Y+2, r25	; 0x02
	display_vprintf(line, pos, fmt, arg);
    69e8:	29 81       	ldd	r18, Y+1	; 0x01
    69ea:	3a 81       	ldd	r19, Y+2	; 0x02
    69ec:	4c 85       	ldd	r20, Y+12	; 0x0c
    69ee:	5d 85       	ldd	r21, Y+13	; 0x0d
    69f0:	6a 85       	ldd	r22, Y+10	; 0x0a
    69f2:	7b 85       	ldd	r23, Y+11	; 0x0b
    69f4:	88 85       	ldd	r24, Y+8	; 0x08
    69f6:	99 85       	ldd	r25, Y+9	; 0x09
    69f8:	0e 94 04 35 	call	0x6a08	; 0x6a08 <display_vprintf>
	va_end(arg);	
}
    69fc:	00 00       	nop
    69fe:	0f 90       	pop	r0
    6a00:	0f 90       	pop	r0
    6a02:	df 91       	pop	r29
    6a04:	cf 91       	pop	r28
    6a06:	08 95       	ret

00006a08 <display_vprintf>:
 
static int display_vprintf(int line, int pos, char const *fmt, va_list arg) {
    6a08:	0f 93       	push	r16
    6a0a:	cf 93       	push	r28
    6a0c:	df 93       	push	r29
    6a0e:	cd b7       	in	r28, 0x3d	; 61
    6a10:	de b7       	in	r29, 0x3e	; 62
    6a12:	ec 97       	sbiw	r28, 0x3c	; 60
    6a14:	cd bf       	out	0x3d, r28	; 61
    6a16:	de bf       	out	0x3e, r29	; 62
    6a18:	8d ab       	std	Y+53, r24	; 0x35
    6a1a:	9e ab       	std	Y+54, r25	; 0x36
    6a1c:	6f ab       	std	Y+55, r22	; 0x37
    6a1e:	78 af       	std	Y+56, r23	; 0x38
    6a20:	49 af       	std	Y+57, r20	; 0x39
    6a22:	5a af       	std	Y+58, r21	; 0x3a
    6a24:	2b af       	std	Y+59, r18	; 0x3b
    6a26:	3c af       	std	Y+60, r19	; 0x3c
	int int_temp;
	char char_temp;
	char *string_temp;
	double double_temp;
	char ch;
	int length = 0;
    6a28:	19 82       	std	Y+1, r1	; 0x01
    6a2a:	1a 82       	std	Y+2, r1	; 0x02

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    6a2c:	1b 82       	std	Y+3, r1	; 0x03
    6a2e:	1c 82       	std	Y+4, r1	; 0x04
    6a30:	0b c0       	rjmp	.+22     	; 0x6a48 <display_vprintf+0x40>
		buffer[i] = 0x00;
    6a32:	8b 81       	ldd	r24, Y+3	; 0x03
    6a34:	9c 81       	ldd	r25, Y+4	; 0x04
    6a36:	8a 5c       	subi	r24, 0xCA	; 202
    6a38:	9a 4c       	sbci	r25, 0xCA	; 202
    6a3a:	fc 01       	movw	r30, r24
    6a3c:	10 82       	st	Z, r1
	char ch;
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    6a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    6a40:	9c 81       	ldd	r25, Y+4	; 0x04
    6a42:	01 96       	adiw	r24, 0x01	; 1
    6a44:	8b 83       	std	Y+3, r24	; 0x03
    6a46:	9c 83       	std	Y+4, r25	; 0x04
    6a48:	8b 81       	ldd	r24, Y+3	; 0x03
    6a4a:	9c 81       	ldd	r25, Y+4	; 0x04
    6a4c:	44 97       	sbiw	r24, 0x14	; 20
    6a4e:	8c f3       	brlt	.-30     	; 0x6a32 <display_vprintf+0x2a>
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    6a50:	1d 82       	std	Y+5, r1	; 0x05
    6a52:	1e 82       	std	Y+6, r1	; 0x06
    6a54:	0b c0       	rjmp	.+22     	; 0x6a6c <display_vprintf+0x64>
		str[i] = 0x00;
    6a56:	8d 81       	ldd	r24, Y+5	; 0x05
    6a58:	9e 81       	ldd	r25, Y+6	; 0x06
    6a5a:	86 5b       	subi	r24, 0xB6	; 182
    6a5c:	9a 4c       	sbci	r25, 0xCA	; 202
    6a5e:	fc 01       	movw	r30, r24
    6a60:	10 82       	st	Z, r1
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    6a62:	8d 81       	ldd	r24, Y+5	; 0x05
    6a64:	9e 81       	ldd	r25, Y+6	; 0x06
    6a66:	01 96       	adiw	r24, 0x01	; 1
    6a68:	8d 83       	std	Y+5, r24	; 0x05
    6a6a:	9e 83       	std	Y+6, r25	; 0x06
    6a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    6a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    6a70:	44 97       	sbiw	r24, 0x14	; 20
    6a72:	8c f3       	brlt	.-30     	; 0x6a56 <display_vprintf+0x4e>
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    6a74:	be c1       	rjmp	.+892    	; 0x6df2 <display_vprintf+0x3ea>
		if ( '%' == ch ) {
    6a76:	8d 89       	ldd	r24, Y+21	; 0x15
    6a78:	85 32       	cpi	r24, 0x25	; 37
    6a7a:	09 f0       	breq	.+2      	; 0x6a7e <display_vprintf+0x76>
    6a7c:	a0 c1       	rjmp	.+832    	; 0x6dbe <display_vprintf+0x3b6>
			switch (ch = *fmt++) {
    6a7e:	89 ad       	ldd	r24, Y+57	; 0x39
    6a80:	9a ad       	ldd	r25, Y+58	; 0x3a
    6a82:	9c 01       	movw	r18, r24
    6a84:	2f 5f       	subi	r18, 0xFF	; 255
    6a86:	3f 4f       	sbci	r19, 0xFF	; 255
    6a88:	29 af       	std	Y+57, r18	; 0x39
    6a8a:	3a af       	std	Y+58, r19	; 0x3a
    6a8c:	fc 01       	movw	r30, r24
    6a8e:	80 81       	ld	r24, Z
    6a90:	8d 8b       	std	Y+21, r24	; 0x15
    6a92:	8d 89       	ldd	r24, Y+21	; 0x15
    6a94:	88 2f       	mov	r24, r24
    6a96:	90 e0       	ldi	r25, 0x00	; 0
    6a98:	85 36       	cpi	r24, 0x65	; 101
    6a9a:	91 05       	cpc	r25, r1
    6a9c:	09 f4       	brne	.+2      	; 0x6aa0 <display_vprintf+0x98>
    6a9e:	46 c1       	rjmp	.+652    	; 0x6d2c <display_vprintf+0x324>
    6aa0:	86 36       	cpi	r24, 0x66	; 102
    6aa2:	91 05       	cpc	r25, r1
    6aa4:	54 f4       	brge	.+20     	; 0x6aba <display_vprintf+0xb2>
    6aa6:	83 36       	cpi	r24, 0x63	; 99
    6aa8:	91 05       	cpc	r25, r1
    6aaa:	01 f1       	breq	.+64     	; 0x6aec <display_vprintf+0xe4>
    6aac:	84 36       	cpi	r24, 0x64	; 100
    6aae:	91 05       	cpc	r25, r1
    6ab0:	0c f0       	brlt	.+2      	; 0x6ab4 <display_vprintf+0xac>
    6ab2:	70 c0       	rjmp	.+224    	; 0x6b94 <display_vprintf+0x18c>
    6ab4:	85 97       	sbiw	r24, 0x25	; 37
    6ab6:	69 f0       	breq	.+26     	; 0x6ad2 <display_vprintf+0xca>
    6ab8:	9c c1       	rjmp	.+824    	; 0x6df2 <display_vprintf+0x3ea>
    6aba:	83 37       	cpi	r24, 0x73	; 115
    6abc:	91 05       	cpc	r25, r1
    6abe:	71 f1       	breq	.+92     	; 0x6b1c <display_vprintf+0x114>
    6ac0:	88 37       	cpi	r24, 0x78	; 120
    6ac2:	91 05       	cpc	r25, r1
    6ac4:	09 f4       	brne	.+2      	; 0x6ac8 <display_vprintf+0xc0>
    6ac6:	a8 c0       	rjmp	.+336    	; 0x6c18 <display_vprintf+0x210>
    6ac8:	86 36       	cpi	r24, 0x66	; 102
    6aca:	91 05       	cpc	r25, r1
    6acc:	09 f4       	brne	.+2      	; 0x6ad0 <display_vprintf+0xc8>
    6ace:	e6 c0       	rjmp	.+460    	; 0x6c9c <display_vprintf+0x294>
    6ad0:	90 c1       	rjmp	.+800    	; 0x6df2 <display_vprintf+0x3ea>
				/* %% - print out a single %    */
				case '%':
				str[length] = '%';
    6ad2:	89 81       	ldd	r24, Y+1	; 0x01
    6ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    6ad6:	86 5b       	subi	r24, 0xB6	; 182
    6ad8:	9a 4c       	sbci	r25, 0xCA	; 202
    6ada:	25 e2       	ldi	r18, 0x25	; 37
    6adc:	fc 01       	movw	r30, r24
    6ade:	20 83       	st	Z, r18
				length++;
    6ae0:	89 81       	ldd	r24, Y+1	; 0x01
    6ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    6ae4:	01 96       	adiw	r24, 0x01	; 1
    6ae6:	89 83       	std	Y+1, r24	; 0x01
    6ae8:	9a 83       	std	Y+2, r25	; 0x02
				break;
    6aea:	83 c1       	rjmp	.+774    	; 0x6df2 <display_vprintf+0x3ea>

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
    6aec:	8b ad       	ldd	r24, Y+59	; 0x3b
    6aee:	9c ad       	ldd	r25, Y+60	; 0x3c
    6af0:	9c 01       	movw	r18, r24
    6af2:	2e 5f       	subi	r18, 0xFE	; 254
    6af4:	3f 4f       	sbci	r19, 0xFF	; 255
    6af6:	2b af       	std	Y+59, r18	; 0x3b
    6af8:	3c af       	std	Y+60, r19	; 0x3c
    6afa:	fc 01       	movw	r30, r24
    6afc:	80 81       	ld	r24, Z
    6afe:	91 81       	ldd	r25, Z+1	; 0x01
    6b00:	8e 8b       	std	Y+22, r24	; 0x16
				str[length] = char_temp;
    6b02:	89 81       	ldd	r24, Y+1	; 0x01
    6b04:	9a 81       	ldd	r25, Y+2	; 0x02
    6b06:	86 5b       	subi	r24, 0xB6	; 182
    6b08:	9a 4c       	sbci	r25, 0xCA	; 202
    6b0a:	2e 89       	ldd	r18, Y+22	; 0x16
    6b0c:	fc 01       	movw	r30, r24
    6b0e:	20 83       	st	Z, r18
				length++;
    6b10:	89 81       	ldd	r24, Y+1	; 0x01
    6b12:	9a 81       	ldd	r25, Y+2	; 0x02
    6b14:	01 96       	adiw	r24, 0x01	; 1
    6b16:	89 83       	std	Y+1, r24	; 0x01
    6b18:	9a 83       	std	Y+2, r25	; 0x02
				break;
    6b1a:	6b c1       	rjmp	.+726    	; 0x6df2 <display_vprintf+0x3ea>

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    6b1c:	8b ad       	ldd	r24, Y+59	; 0x3b
    6b1e:	9c ad       	ldd	r25, Y+60	; 0x3c
    6b20:	9c 01       	movw	r18, r24
    6b22:	2e 5f       	subi	r18, 0xFE	; 254
    6b24:	3f 4f       	sbci	r19, 0xFF	; 255
    6b26:	2b af       	std	Y+59, r18	; 0x3b
    6b28:	3c af       	std	Y+60, r19	; 0x3c
    6b2a:	fc 01       	movw	r30, r24
    6b2c:	80 81       	ld	r24, Z
    6b2e:	91 81       	ldd	r25, Z+1	; 0x01
    6b30:	8f 8b       	std	Y+23, r24	; 0x17
    6b32:	98 8f       	std	Y+24, r25	; 0x18
				for(int i = 0; i < strlen(string_temp);i++) {
    6b34:	1f 82       	std	Y+7, r1	; 0x07
    6b36:	18 86       	std	Y+8, r1	; 0x08
    6b38:	17 c0       	rjmp	.+46     	; 0x6b68 <display_vprintf+0x160>
					str[length+i] = string_temp[i];
    6b3a:	29 81       	ldd	r18, Y+1	; 0x01
    6b3c:	3a 81       	ldd	r19, Y+2	; 0x02
    6b3e:	8f 81       	ldd	r24, Y+7	; 0x07
    6b40:	98 85       	ldd	r25, Y+8	; 0x08
    6b42:	82 0f       	add	r24, r18
    6b44:	93 1f       	adc	r25, r19
    6b46:	2f 81       	ldd	r18, Y+7	; 0x07
    6b48:	38 85       	ldd	r19, Y+8	; 0x08
    6b4a:	4f 89       	ldd	r20, Y+23	; 0x17
    6b4c:	58 8d       	ldd	r21, Y+24	; 0x18
    6b4e:	24 0f       	add	r18, r20
    6b50:	35 1f       	adc	r19, r21
    6b52:	f9 01       	movw	r30, r18
    6b54:	20 81       	ld	r18, Z
    6b56:	86 5b       	subi	r24, 0xB6	; 182
    6b58:	9a 4c       	sbci	r25, 0xCA	; 202
    6b5a:	fc 01       	movw	r30, r24
    6b5c:	20 83       	st	Z, r18
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
				for(int i = 0; i < strlen(string_temp);i++) {
    6b5e:	8f 81       	ldd	r24, Y+7	; 0x07
    6b60:	98 85       	ldd	r25, Y+8	; 0x08
    6b62:	01 96       	adiw	r24, 0x01	; 1
    6b64:	8f 83       	std	Y+7, r24	; 0x07
    6b66:	98 87       	std	Y+8, r25	; 0x08
    6b68:	8f 89       	ldd	r24, Y+23	; 0x17
    6b6a:	98 8d       	ldd	r25, Y+24	; 0x18
    6b6c:	0e 94 46 41 	call	0x828c	; 0x828c <strlen>
    6b70:	9c 01       	movw	r18, r24
    6b72:	8f 81       	ldd	r24, Y+7	; 0x07
    6b74:	98 85       	ldd	r25, Y+8	; 0x08
    6b76:	82 17       	cp	r24, r18
    6b78:	93 07       	cpc	r25, r19
    6b7a:	f8 f2       	brcs	.-66     	; 0x6b3a <display_vprintf+0x132>
					str[length+i] = string_temp[i];
				}
				length += strlen(string_temp);
    6b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    6b7e:	98 8d       	ldd	r25, Y+24	; 0x18
    6b80:	0e 94 46 41 	call	0x828c	; 0x828c <strlen>
    6b84:	9c 01       	movw	r18, r24
    6b86:	89 81       	ldd	r24, Y+1	; 0x01
    6b88:	9a 81       	ldd	r25, Y+2	; 0x02
    6b8a:	82 0f       	add	r24, r18
    6b8c:	93 1f       	adc	r25, r19
    6b8e:	89 83       	std	Y+1, r24	; 0x01
    6b90:	9a 83       	std	Y+2, r25	; 0x02
				break;
    6b92:	2f c1       	rjmp	.+606    	; 0x6df2 <display_vprintf+0x3ea>

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    6b94:	8b ad       	ldd	r24, Y+59	; 0x3b
    6b96:	9c ad       	ldd	r25, Y+60	; 0x3c
    6b98:	9c 01       	movw	r18, r24
    6b9a:	2e 5f       	subi	r18, 0xFE	; 254
    6b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    6b9e:	2b af       	std	Y+59, r18	; 0x3b
    6ba0:	3c af       	std	Y+60, r19	; 0x3c
    6ba2:	fc 01       	movw	r30, r24
    6ba4:	80 81       	ld	r24, Z
    6ba6:	91 81       	ldd	r25, Z+1	; 0x01
    6ba8:	89 8f       	std	Y+25, r24	; 0x19
    6baa:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 10);
    6bac:	89 8d       	ldd	r24, Y+25	; 0x19
    6bae:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6bb0:	4a e0       	ldi	r20, 0x0A	; 10
    6bb2:	50 e0       	ldi	r21, 0x00	; 0
    6bb4:	66 e3       	ldi	r22, 0x36	; 54
    6bb6:	75 e3       	ldi	r23, 0x35	; 53
    6bb8:	0e 94 5a 41 	call	0x82b4	; 0x82b4 <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    6bbc:	19 86       	std	Y+9, r1	; 0x09
    6bbe:	1a 86       	std	Y+10, r1	; 0x0a
    6bc0:	15 c0       	rjmp	.+42     	; 0x6bec <display_vprintf+0x1e4>
					str[length+i] = buffer[i];
    6bc2:	29 81       	ldd	r18, Y+1	; 0x01
    6bc4:	3a 81       	ldd	r19, Y+2	; 0x02
    6bc6:	89 85       	ldd	r24, Y+9	; 0x09
    6bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    6bca:	82 0f       	add	r24, r18
    6bcc:	93 1f       	adc	r25, r19
    6bce:	29 85       	ldd	r18, Y+9	; 0x09
    6bd0:	3a 85       	ldd	r19, Y+10	; 0x0a
    6bd2:	2a 5c       	subi	r18, 0xCA	; 202
    6bd4:	3a 4c       	sbci	r19, 0xCA	; 202
    6bd6:	f9 01       	movw	r30, r18
    6bd8:	20 81       	ld	r18, Z
    6bda:	86 5b       	subi	r24, 0xB6	; 182
    6bdc:	9a 4c       	sbci	r25, 0xCA	; 202
    6bde:	fc 01       	movw	r30, r24
    6be0:	20 83       	st	Z, r18

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    6be2:	89 85       	ldd	r24, Y+9	; 0x09
    6be4:	9a 85       	ldd	r25, Y+10	; 0x0a
    6be6:	01 96       	adiw	r24, 0x01	; 1
    6be8:	89 87       	std	Y+9, r24	; 0x09
    6bea:	9a 87       	std	Y+10, r25	; 0x0a
    6bec:	86 e3       	ldi	r24, 0x36	; 54
    6bee:	95 e3       	ldi	r25, 0x35	; 53
    6bf0:	0e 94 46 41 	call	0x828c	; 0x828c <strlen>
    6bf4:	9c 01       	movw	r18, r24
    6bf6:	89 85       	ldd	r24, Y+9	; 0x09
    6bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    6bfa:	82 17       	cp	r24, r18
    6bfc:	93 07       	cpc	r25, r19
    6bfe:	08 f3       	brcs	.-62     	; 0x6bc2 <display_vprintf+0x1ba>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    6c00:	86 e3       	ldi	r24, 0x36	; 54
    6c02:	95 e3       	ldi	r25, 0x35	; 53
    6c04:	0e 94 46 41 	call	0x828c	; 0x828c <strlen>
    6c08:	9c 01       	movw	r18, r24
    6c0a:	89 81       	ldd	r24, Y+1	; 0x01
    6c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    6c0e:	82 0f       	add	r24, r18
    6c10:	93 1f       	adc	r25, r19
    6c12:	89 83       	std	Y+1, r24	; 0x01
    6c14:	9a 83       	std	Y+2, r25	; 0x02
				break;
    6c16:	ed c0       	rjmp	.+474    	; 0x6df2 <display_vprintf+0x3ea>

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    6c18:	8b ad       	ldd	r24, Y+59	; 0x3b
    6c1a:	9c ad       	ldd	r25, Y+60	; 0x3c
    6c1c:	9c 01       	movw	r18, r24
    6c1e:	2e 5f       	subi	r18, 0xFE	; 254
    6c20:	3f 4f       	sbci	r19, 0xFF	; 255
    6c22:	2b af       	std	Y+59, r18	; 0x3b
    6c24:	3c af       	std	Y+60, r19	; 0x3c
    6c26:	fc 01       	movw	r30, r24
    6c28:	80 81       	ld	r24, Z
    6c2a:	91 81       	ldd	r25, Z+1	; 0x01
    6c2c:	89 8f       	std	Y+25, r24	; 0x19
    6c2e:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 16);
    6c30:	89 8d       	ldd	r24, Y+25	; 0x19
    6c32:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6c34:	40 e1       	ldi	r20, 0x10	; 16
    6c36:	50 e0       	ldi	r21, 0x00	; 0
    6c38:	66 e3       	ldi	r22, 0x36	; 54
    6c3a:	75 e3       	ldi	r23, 0x35	; 53
    6c3c:	0e 94 5a 41 	call	0x82b4	; 0x82b4 <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    6c40:	1b 86       	std	Y+11, r1	; 0x0b
    6c42:	1c 86       	std	Y+12, r1	; 0x0c
    6c44:	15 c0       	rjmp	.+42     	; 0x6c70 <display_vprintf+0x268>
					str[length+i] = buffer[i];
    6c46:	29 81       	ldd	r18, Y+1	; 0x01
    6c48:	3a 81       	ldd	r19, Y+2	; 0x02
    6c4a:	8b 85       	ldd	r24, Y+11	; 0x0b
    6c4c:	9c 85       	ldd	r25, Y+12	; 0x0c
    6c4e:	82 0f       	add	r24, r18
    6c50:	93 1f       	adc	r25, r19
    6c52:	2b 85       	ldd	r18, Y+11	; 0x0b
    6c54:	3c 85       	ldd	r19, Y+12	; 0x0c
    6c56:	2a 5c       	subi	r18, 0xCA	; 202
    6c58:	3a 4c       	sbci	r19, 0xCA	; 202
    6c5a:	f9 01       	movw	r30, r18
    6c5c:	20 81       	ld	r18, Z
    6c5e:	86 5b       	subi	r24, 0xB6	; 182
    6c60:	9a 4c       	sbci	r25, 0xCA	; 202
    6c62:	fc 01       	movw	r30, r24
    6c64:	20 83       	st	Z, r18

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    6c66:	8b 85       	ldd	r24, Y+11	; 0x0b
    6c68:	9c 85       	ldd	r25, Y+12	; 0x0c
    6c6a:	01 96       	adiw	r24, 0x01	; 1
    6c6c:	8b 87       	std	Y+11, r24	; 0x0b
    6c6e:	9c 87       	std	Y+12, r25	; 0x0c
    6c70:	86 e3       	ldi	r24, 0x36	; 54
    6c72:	95 e3       	ldi	r25, 0x35	; 53
    6c74:	0e 94 46 41 	call	0x828c	; 0x828c <strlen>
    6c78:	9c 01       	movw	r18, r24
    6c7a:	8b 85       	ldd	r24, Y+11	; 0x0b
    6c7c:	9c 85       	ldd	r25, Y+12	; 0x0c
    6c7e:	82 17       	cp	r24, r18
    6c80:	93 07       	cpc	r25, r19
    6c82:	08 f3       	brcs	.-62     	; 0x6c46 <display_vprintf+0x23e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    6c84:	86 e3       	ldi	r24, 0x36	; 54
    6c86:	95 e3       	ldi	r25, 0x35	; 53
    6c88:	0e 94 46 41 	call	0x828c	; 0x828c <strlen>
    6c8c:	9c 01       	movw	r18, r24
    6c8e:	89 81       	ldd	r24, Y+1	; 0x01
    6c90:	9a 81       	ldd	r25, Y+2	; 0x02
    6c92:	82 0f       	add	r24, r18
    6c94:	93 1f       	adc	r25, r19
    6c96:	89 83       	std	Y+1, r24	; 0x01
    6c98:	9a 83       	std	Y+2, r25	; 0x02
				break;
    6c9a:	ab c0       	rjmp	.+342    	; 0x6df2 <display_vprintf+0x3ea>

				case 'f':
				double_temp = va_arg(arg, double);
    6c9c:	8b ad       	ldd	r24, Y+59	; 0x3b
    6c9e:	9c ad       	ldd	r25, Y+60	; 0x3c
    6ca0:	9c 01       	movw	r18, r24
    6ca2:	2c 5f       	subi	r18, 0xFC	; 252
    6ca4:	3f 4f       	sbci	r19, 0xFF	; 255
    6ca6:	2b af       	std	Y+59, r18	; 0x3b
    6ca8:	3c af       	std	Y+60, r19	; 0x3c
    6caa:	fc 01       	movw	r30, r24
    6cac:	80 81       	ld	r24, Z
    6cae:	91 81       	ldd	r25, Z+1	; 0x01
    6cb0:	a2 81       	ldd	r26, Z+2	; 0x02
    6cb2:	b3 81       	ldd	r27, Z+3	; 0x03
    6cb4:	8b 8f       	std	Y+27, r24	; 0x1b
    6cb6:	9c 8f       	std	Y+28, r25	; 0x1c
    6cb8:	ad 8f       	std	Y+29, r26	; 0x1d
    6cba:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_fixed(buffer, double_temp);
    6cbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6cbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6cc0:	ad 8d       	ldd	r26, Y+29	; 0x1d
    6cc2:	be 8d       	ldd	r27, Y+30	; 0x1e
    6cc4:	ac 01       	movw	r20, r24
    6cc6:	bd 01       	movw	r22, r26
    6cc8:	86 e3       	ldi	r24, 0x36	; 54
    6cca:	95 e3       	ldi	r25, 0x35	; 53
    6ccc:	0e 94 d3 37 	call	0x6fa6	; 0x6fa6 <ftoa_fixed>
				for(int i = 0; i < strlen(buffer);i++) {
    6cd0:	1d 86       	std	Y+13, r1	; 0x0d
    6cd2:	1e 86       	std	Y+14, r1	; 0x0e
    6cd4:	15 c0       	rjmp	.+42     	; 0x6d00 <display_vprintf+0x2f8>
					str[length+i] = buffer[i];
    6cd6:	29 81       	ldd	r18, Y+1	; 0x01
    6cd8:	3a 81       	ldd	r19, Y+2	; 0x02
    6cda:	8d 85       	ldd	r24, Y+13	; 0x0d
    6cdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    6cde:	82 0f       	add	r24, r18
    6ce0:	93 1f       	adc	r25, r19
    6ce2:	2d 85       	ldd	r18, Y+13	; 0x0d
    6ce4:	3e 85       	ldd	r19, Y+14	; 0x0e
    6ce6:	2a 5c       	subi	r18, 0xCA	; 202
    6ce8:	3a 4c       	sbci	r19, 0xCA	; 202
    6cea:	f9 01       	movw	r30, r18
    6cec:	20 81       	ld	r18, Z
    6cee:	86 5b       	subi	r24, 0xB6	; 182
    6cf0:	9a 4c       	sbci	r25, 0xCA	; 202
    6cf2:	fc 01       	movw	r30, r24
    6cf4:	20 83       	st	Z, r18
				break;

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    6cf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    6cf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    6cfa:	01 96       	adiw	r24, 0x01	; 1
    6cfc:	8d 87       	std	Y+13, r24	; 0x0d
    6cfe:	9e 87       	std	Y+14, r25	; 0x0e
    6d00:	86 e3       	ldi	r24, 0x36	; 54
    6d02:	95 e3       	ldi	r25, 0x35	; 53
    6d04:	0e 94 46 41 	call	0x828c	; 0x828c <strlen>
    6d08:	9c 01       	movw	r18, r24
    6d0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    6d0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    6d0e:	82 17       	cp	r24, r18
    6d10:	93 07       	cpc	r25, r19
    6d12:	08 f3       	brcs	.-62     	; 0x6cd6 <display_vprintf+0x2ce>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    6d14:	86 e3       	ldi	r24, 0x36	; 54
    6d16:	95 e3       	ldi	r25, 0x35	; 53
    6d18:	0e 94 46 41 	call	0x828c	; 0x828c <strlen>
    6d1c:	9c 01       	movw	r18, r24
    6d1e:	89 81       	ldd	r24, Y+1	; 0x01
    6d20:	9a 81       	ldd	r25, Y+2	; 0x02
    6d22:	82 0f       	add	r24, r18
    6d24:	93 1f       	adc	r25, r19
    6d26:	89 83       	std	Y+1, r24	; 0x01
    6d28:	9a 83       	std	Y+2, r25	; 0x02
				break;
    6d2a:	63 c0       	rjmp	.+198    	; 0x6df2 <display_vprintf+0x3ea>

				case 'e':
				double_temp = va_arg(arg, double);
    6d2c:	8b ad       	ldd	r24, Y+59	; 0x3b
    6d2e:	9c ad       	ldd	r25, Y+60	; 0x3c
    6d30:	9c 01       	movw	r18, r24
    6d32:	2c 5f       	subi	r18, 0xFC	; 252
    6d34:	3f 4f       	sbci	r19, 0xFF	; 255
    6d36:	2b af       	std	Y+59, r18	; 0x3b
    6d38:	3c af       	std	Y+60, r19	; 0x3c
    6d3a:	fc 01       	movw	r30, r24
    6d3c:	80 81       	ld	r24, Z
    6d3e:	91 81       	ldd	r25, Z+1	; 0x01
    6d40:	a2 81       	ldd	r26, Z+2	; 0x02
    6d42:	b3 81       	ldd	r27, Z+3	; 0x03
    6d44:	8b 8f       	std	Y+27, r24	; 0x1b
    6d46:	9c 8f       	std	Y+28, r25	; 0x1c
    6d48:	ad 8f       	std	Y+29, r26	; 0x1d
    6d4a:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_sci(buffer, double_temp);
    6d4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6d4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6d50:	ad 8d       	ldd	r26, Y+29	; 0x1d
    6d52:	be 8d       	ldd	r27, Y+30	; 0x1e
    6d54:	ac 01       	movw	r20, r24
    6d56:	bd 01       	movw	r22, r26
    6d58:	86 e3       	ldi	r24, 0x36	; 54
    6d5a:	95 e3       	ldi	r25, 0x35	; 53
    6d5c:	0e 94 22 39 	call	0x7244	; 0x7244 <ftoa_sci>
				for(int i = 0; i < strlen(buffer);i++) {
    6d60:	1f 86       	std	Y+15, r1	; 0x0f
    6d62:	18 8a       	std	Y+16, r1	; 0x10
    6d64:	15 c0       	rjmp	.+42     	; 0x6d90 <display_vprintf+0x388>
					str[length+i] = buffer[i];
    6d66:	29 81       	ldd	r18, Y+1	; 0x01
    6d68:	3a 81       	ldd	r19, Y+2	; 0x02
    6d6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    6d6c:	98 89       	ldd	r25, Y+16	; 0x10
    6d6e:	82 0f       	add	r24, r18
    6d70:	93 1f       	adc	r25, r19
    6d72:	2f 85       	ldd	r18, Y+15	; 0x0f
    6d74:	38 89       	ldd	r19, Y+16	; 0x10
    6d76:	2a 5c       	subi	r18, 0xCA	; 202
    6d78:	3a 4c       	sbci	r19, 0xCA	; 202
    6d7a:	f9 01       	movw	r30, r18
    6d7c:	20 81       	ld	r18, Z
    6d7e:	86 5b       	subi	r24, 0xB6	; 182
    6d80:	9a 4c       	sbci	r25, 0xCA	; 202
    6d82:	fc 01       	movw	r30, r24
    6d84:	20 83       	st	Z, r18
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    6d86:	8f 85       	ldd	r24, Y+15	; 0x0f
    6d88:	98 89       	ldd	r25, Y+16	; 0x10
    6d8a:	01 96       	adiw	r24, 0x01	; 1
    6d8c:	8f 87       	std	Y+15, r24	; 0x0f
    6d8e:	98 8b       	std	Y+16, r25	; 0x10
    6d90:	86 e3       	ldi	r24, 0x36	; 54
    6d92:	95 e3       	ldi	r25, 0x35	; 53
    6d94:	0e 94 46 41 	call	0x828c	; 0x828c <strlen>
    6d98:	9c 01       	movw	r18, r24
    6d9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    6d9c:	98 89       	ldd	r25, Y+16	; 0x10
    6d9e:	82 17       	cp	r24, r18
    6da0:	93 07       	cpc	r25, r19
    6da2:	08 f3       	brcs	.-62     	; 0x6d66 <display_vprintf+0x35e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    6da4:	86 e3       	ldi	r24, 0x36	; 54
    6da6:	95 e3       	ldi	r25, 0x35	; 53
    6da8:	0e 94 46 41 	call	0x828c	; 0x828c <strlen>
    6dac:	9c 01       	movw	r18, r24
    6dae:	89 81       	ldd	r24, Y+1	; 0x01
    6db0:	9a 81       	ldd	r25, Y+2	; 0x02
    6db2:	82 0f       	add	r24, r18
    6db4:	93 1f       	adc	r25, r19
    6db6:	89 83       	std	Y+1, r24	; 0x01
    6db8:	9a 83       	std	Y+2, r25	; 0x02
				break;
    6dba:	00 00       	nop
    6dbc:	1a c0       	rjmp	.+52     	; 0x6df2 <display_vprintf+0x3ea>
			}
		}
		else {
			str[length] = ch;
    6dbe:	89 81       	ldd	r24, Y+1	; 0x01
    6dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    6dc2:	86 5b       	subi	r24, 0xB6	; 182
    6dc4:	9a 4c       	sbci	r25, 0xCA	; 202
    6dc6:	2d 89       	ldd	r18, Y+21	; 0x15
    6dc8:	fc 01       	movw	r30, r24
    6dca:	20 83       	st	Z, r18
			if(str[length] == '\n') {
    6dcc:	89 81       	ldd	r24, Y+1	; 0x01
    6dce:	9a 81       	ldd	r25, Y+2	; 0x02
    6dd0:	86 5b       	subi	r24, 0xB6	; 182
    6dd2:	9a 4c       	sbci	r25, 0xCA	; 202
    6dd4:	fc 01       	movw	r30, r24
    6dd6:	80 81       	ld	r24, Z
    6dd8:	8a 30       	cpi	r24, 0x0A	; 10
    6dda:	31 f4       	brne	.+12     	; 0x6de8 <display_vprintf+0x3e0>
				str[length] = '\0';				
    6ddc:	89 81       	ldd	r24, Y+1	; 0x01
    6dde:	9a 81       	ldd	r25, Y+2	; 0x02
    6de0:	86 5b       	subi	r24, 0xB6	; 182
    6de2:	9a 4c       	sbci	r25, 0xCA	; 202
    6de4:	fc 01       	movw	r30, r24
    6de6:	10 82       	st	Z, r1
			}
			length++;
    6de8:	89 81       	ldd	r24, Y+1	; 0x01
    6dea:	9a 81       	ldd	r25, Y+2	; 0x02
    6dec:	01 96       	adiw	r24, 0x01	; 1
    6dee:	89 83       	std	Y+1, r24	; 0x01
    6df0:	9a 83       	std	Y+2, r25	; 0x02
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    6df2:	89 ad       	ldd	r24, Y+57	; 0x39
    6df4:	9a ad       	ldd	r25, Y+58	; 0x3a
    6df6:	9c 01       	movw	r18, r24
    6df8:	2f 5f       	subi	r18, 0xFF	; 255
    6dfa:	3f 4f       	sbci	r19, 0xFF	; 255
    6dfc:	29 af       	std	Y+57, r18	; 0x39
    6dfe:	3a af       	std	Y+58, r19	; 0x3a
    6e00:	fc 01       	movw	r30, r24
    6e02:	80 81       	ld	r24, Z
    6e04:	8d 8b       	std	Y+21, r24	; 0x15
    6e06:	8d 89       	ldd	r24, Y+21	; 0x15
    6e08:	88 23       	and	r24, r24
    6e0a:	09 f0       	breq	.+2      	; 0x6e0e <display_vprintf+0x406>
    6e0c:	34 ce       	rjmp	.-920    	; 0x6a76 <display_vprintf+0x6e>
				str[length] = '\0';				
			}
			length++;
		}
	}
	if(length + pos >= 20) {
    6e0e:	29 81       	ldd	r18, Y+1	; 0x01
    6e10:	3a 81       	ldd	r19, Y+2	; 0x02
    6e12:	8f a9       	ldd	r24, Y+55	; 0x37
    6e14:	98 ad       	ldd	r25, Y+56	; 0x38
    6e16:	82 0f       	add	r24, r18
    6e18:	93 1f       	adc	r25, r19
    6e1a:	44 97       	sbiw	r24, 0x14	; 20
    6e1c:	54 f0       	brlt	.+20     	; 0x6e32 <display_vprintf+0x42a>
		length = 20-pos;
    6e1e:	24 e1       	ldi	r18, 0x14	; 20
    6e20:	30 e0       	ldi	r19, 0x00	; 0
    6e22:	8f a9       	ldd	r24, Y+55	; 0x37
    6e24:	98 ad       	ldd	r25, Y+56	; 0x38
    6e26:	a9 01       	movw	r20, r18
    6e28:	48 1b       	sub	r20, r24
    6e2a:	59 0b       	sbc	r21, r25
    6e2c:	ca 01       	movw	r24, r20
    6e2e:	89 83       	std	Y+1, r24	; 0x01
    6e30:	9a 83       	std	Y+2, r25	; 0x02
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    6e32:	19 8a       	std	Y+17, r1	; 0x11
    6e34:	1a 8a       	std	Y+18, r1	; 0x12
    6e36:	0e c0       	rjmp	.+28     	; 0x6e54 <display_vprintf+0x44c>
		newLine.displayBuffer[i] = 0x00;
    6e38:	9e 01       	movw	r18, r28
    6e3a:	2f 5d       	subi	r18, 0xDF	; 223
    6e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    6e3e:	89 89       	ldd	r24, Y+17	; 0x11
    6e40:	9a 89       	ldd	r25, Y+18	; 0x12
    6e42:	82 0f       	add	r24, r18
    6e44:	93 1f       	adc	r25, r19
    6e46:	fc 01       	movw	r30, r24
    6e48:	10 82       	st	Z, r1
	}
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    6e4a:	89 89       	ldd	r24, Y+17	; 0x11
    6e4c:	9a 89       	ldd	r25, Y+18	; 0x12
    6e4e:	01 96       	adiw	r24, 0x01	; 1
    6e50:	89 8b       	std	Y+17, r24	; 0x11
    6e52:	9a 8b       	std	Y+18, r25	; 0x12
    6e54:	89 89       	ldd	r24, Y+17	; 0x11
    6e56:	9a 89       	ldd	r25, Y+18	; 0x12
    6e58:	44 97       	sbiw	r24, 0x14	; 20
    6e5a:	74 f3       	brlt	.-36     	; 0x6e38 <display_vprintf+0x430>
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
    6e5c:	8d a9       	ldd	r24, Y+53	; 0x35
    6e5e:	8f 8f       	std	Y+31, r24	; 0x1f
	newLine.displayPos = pos;
    6e60:	8f a9       	ldd	r24, Y+55	; 0x37
    6e62:	88 a3       	std	Y+32, r24	; 0x20
	for(int i = 0; i < length;i++) {
    6e64:	1b 8a       	std	Y+19, r1	; 0x13
    6e66:	1c 8a       	std	Y+20, r1	; 0x14
    6e68:	14 c0       	rjmp	.+40     	; 0x6e92 <display_vprintf+0x48a>
		newLine.displayBuffer[i] = str[i];
    6e6a:	8b 89       	ldd	r24, Y+19	; 0x13
    6e6c:	9c 89       	ldd	r25, Y+20	; 0x14
    6e6e:	86 5b       	subi	r24, 0xB6	; 182
    6e70:	9a 4c       	sbci	r25, 0xCA	; 202
    6e72:	fc 01       	movw	r30, r24
    6e74:	40 81       	ld	r20, Z
    6e76:	9e 01       	movw	r18, r28
    6e78:	2f 5d       	subi	r18, 0xDF	; 223
    6e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    6e7c:	8b 89       	ldd	r24, Y+19	; 0x13
    6e7e:	9c 89       	ldd	r25, Y+20	; 0x14
    6e80:	82 0f       	add	r24, r18
    6e82:	93 1f       	adc	r25, r19
    6e84:	fc 01       	movw	r30, r24
    6e86:	40 83       	st	Z, r20
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
	newLine.displayPos = pos;
	for(int i = 0; i < length;i++) {
    6e88:	8b 89       	ldd	r24, Y+19	; 0x13
    6e8a:	9c 89       	ldd	r25, Y+20	; 0x14
    6e8c:	01 96       	adiw	r24, 0x01	; 1
    6e8e:	8b 8b       	std	Y+19, r24	; 0x13
    6e90:	9c 8b       	std	Y+20, r25	; 0x14
    6e92:	2b 89       	ldd	r18, Y+19	; 0x13
    6e94:	3c 89       	ldd	r19, Y+20	; 0x14
    6e96:	89 81       	ldd	r24, Y+1	; 0x01
    6e98:	9a 81       	ldd	r25, Y+2	; 0x02
    6e9a:	28 17       	cp	r18, r24
    6e9c:	39 07       	cpc	r19, r25
    6e9e:	2c f3       	brlt	.-54     	; 0x6e6a <display_vprintf+0x462>
		newLine.displayBuffer[i] = str[i];
	}	
	xQueueSend(displayLineQueue, (void *) &newLine, portMAX_DELAY);
    6ea0:	80 91 af 35 	lds	r24, 0x35AF	; 0x8035af <displayLineQueue>
    6ea4:	90 91 b0 35 	lds	r25, 0x35B0	; 0x8035b0 <displayLineQueue+0x1>
    6ea8:	be 01       	movw	r22, r28
    6eaa:	61 5e       	subi	r22, 0xE1	; 225
    6eac:	7f 4f       	sbci	r23, 0xFF	; 255
    6eae:	00 e0       	ldi	r16, 0x00	; 0
    6eb0:	2f ef       	ldi	r18, 0xFF	; 255
    6eb2:	3f ef       	ldi	r19, 0xFF	; 255
    6eb4:	a9 01       	movw	r20, r18
    6eb6:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <xQueueGenericSend>
	
	
	return length;
    6eba:	89 81       	ldd	r24, Y+1	; 0x01
    6ebc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    6ebe:	ec 96       	adiw	r28, 0x3c	; 60
    6ec0:	cd bf       	out	0x3d, r28	; 61
    6ec2:	de bf       	out	0x3e, r29	; 62
    6ec4:	df 91       	pop	r29
    6ec6:	cf 91       	pop	r28
    6ec8:	0f 91       	pop	r16
    6eca:	08 95       	ret

00006ecc <normalize>:

static int normalize(double *val) {
    6ecc:	cf 93       	push	r28
    6ece:	df 93       	push	r29
    6ed0:	cd b7       	in	r28, 0x3d	; 61
    6ed2:	de b7       	in	r29, 0x3e	; 62
    6ed4:	28 97       	sbiw	r28, 0x08	; 8
    6ed6:	cd bf       	out	0x3d, r28	; 61
    6ed8:	de bf       	out	0x3e, r29	; 62
    6eda:	8f 83       	std	Y+7, r24	; 0x07
    6edc:	98 87       	std	Y+8, r25	; 0x08
    int exponent = 0;
    6ede:	19 82       	std	Y+1, r1	; 0x01
    6ee0:	1a 82       	std	Y+2, r1	; 0x02
    double value = *val;
    6ee2:	8f 81       	ldd	r24, Y+7	; 0x07
    6ee4:	98 85       	ldd	r25, Y+8	; 0x08
    6ee6:	fc 01       	movw	r30, r24
    6ee8:	80 81       	ld	r24, Z
    6eea:	91 81       	ldd	r25, Z+1	; 0x01
    6eec:	a2 81       	ldd	r26, Z+2	; 0x02
    6eee:	b3 81       	ldd	r27, Z+3	; 0x03
    6ef0:	8b 83       	std	Y+3, r24	; 0x03
    6ef2:	9c 83       	std	Y+4, r25	; 0x04
    6ef4:	ad 83       	std	Y+5, r26	; 0x05
    6ef6:	be 83       	std	Y+6, r27	; 0x06

    while (value >= 1.0) {
    6ef8:	15 c0       	rjmp	.+42     	; 0x6f24 <normalize+0x58>
        value /= 10.0;
    6efa:	20 e0       	ldi	r18, 0x00	; 0
    6efc:	30 e0       	ldi	r19, 0x00	; 0
    6efe:	40 e2       	ldi	r20, 0x20	; 32
    6f00:	51 e4       	ldi	r21, 0x41	; 65
    6f02:	6b 81       	ldd	r22, Y+3	; 0x03
    6f04:	7c 81       	ldd	r23, Y+4	; 0x04
    6f06:	8d 81       	ldd	r24, Y+5	; 0x05
    6f08:	9e 81       	ldd	r25, Y+6	; 0x06
    6f0a:	0e 94 b5 3a 	call	0x756a	; 0x756a <__divsf3>
    6f0e:	dc 01       	movw	r26, r24
    6f10:	cb 01       	movw	r24, r22
    6f12:	8b 83       	std	Y+3, r24	; 0x03
    6f14:	9c 83       	std	Y+4, r25	; 0x04
    6f16:	ad 83       	std	Y+5, r26	; 0x05
    6f18:	be 83       	std	Y+6, r27	; 0x06
        ++exponent;
    6f1a:	89 81       	ldd	r24, Y+1	; 0x01
    6f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    6f1e:	01 96       	adiw	r24, 0x01	; 1
    6f20:	89 83       	std	Y+1, r24	; 0x01
    6f22:	9a 83       	std	Y+2, r25	; 0x02

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    6f24:	20 e0       	ldi	r18, 0x00	; 0
    6f26:	30 e0       	ldi	r19, 0x00	; 0
    6f28:	40 e8       	ldi	r20, 0x80	; 128
    6f2a:	5f e3       	ldi	r21, 0x3F	; 63
    6f2c:	6b 81       	ldd	r22, Y+3	; 0x03
    6f2e:	7c 81       	ldd	r23, Y+4	; 0x04
    6f30:	8d 81       	ldd	r24, Y+5	; 0x05
    6f32:	9e 81       	ldd	r25, Y+6	; 0x06
    6f34:	0e 94 0f 3c 	call	0x781e	; 0x781e <__gesf2>
    6f38:	88 23       	and	r24, r24
    6f3a:	fc f6       	brge	.-66     	; 0x6efa <normalize+0x2e>
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    6f3c:	15 c0       	rjmp	.+42     	; 0x6f68 <normalize+0x9c>
        value *= 10.0;
    6f3e:	20 e0       	ldi	r18, 0x00	; 0
    6f40:	30 e0       	ldi	r19, 0x00	; 0
    6f42:	40 e2       	ldi	r20, 0x20	; 32
    6f44:	51 e4       	ldi	r21, 0x41	; 65
    6f46:	6b 81       	ldd	r22, Y+3	; 0x03
    6f48:	7c 81       	ldd	r23, Y+4	; 0x04
    6f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    6f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    6f4e:	0e 94 14 3c 	call	0x7828	; 0x7828 <__mulsf3>
    6f52:	dc 01       	movw	r26, r24
    6f54:	cb 01       	movw	r24, r22
    6f56:	8b 83       	std	Y+3, r24	; 0x03
    6f58:	9c 83       	std	Y+4, r25	; 0x04
    6f5a:	ad 83       	std	Y+5, r26	; 0x05
    6f5c:	be 83       	std	Y+6, r27	; 0x06
        --exponent;
    6f5e:	89 81       	ldd	r24, Y+1	; 0x01
    6f60:	9a 81       	ldd	r25, Y+2	; 0x02
    6f62:	01 97       	sbiw	r24, 0x01	; 1
    6f64:	89 83       	std	Y+1, r24	; 0x01
    6f66:	9a 83       	std	Y+2, r25	; 0x02
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    6f68:	2d ec       	ldi	r18, 0xCD	; 205
    6f6a:	3c ec       	ldi	r19, 0xCC	; 204
    6f6c:	4c ec       	ldi	r20, 0xCC	; 204
    6f6e:	5d e3       	ldi	r21, 0x3D	; 61
    6f70:	6b 81       	ldd	r22, Y+3	; 0x03
    6f72:	7c 81       	ldd	r23, Y+4	; 0x04
    6f74:	8d 81       	ldd	r24, Y+5	; 0x05
    6f76:	9e 81       	ldd	r25, Y+6	; 0x06
    6f78:	0e 94 b0 3a 	call	0x7560	; 0x7560 <__cmpsf2>
    6f7c:	88 23       	and	r24, r24
    6f7e:	fc f2       	brlt	.-66     	; 0x6f3e <normalize+0x72>
        value *= 10.0;
        --exponent;
    }
    *val = value;
    6f80:	2f 81       	ldd	r18, Y+7	; 0x07
    6f82:	38 85       	ldd	r19, Y+8	; 0x08
    6f84:	8b 81       	ldd	r24, Y+3	; 0x03
    6f86:	9c 81       	ldd	r25, Y+4	; 0x04
    6f88:	ad 81       	ldd	r26, Y+5	; 0x05
    6f8a:	be 81       	ldd	r27, Y+6	; 0x06
    6f8c:	f9 01       	movw	r30, r18
    6f8e:	80 83       	st	Z, r24
    6f90:	91 83       	std	Z+1, r25	; 0x01
    6f92:	a2 83       	std	Z+2, r26	; 0x02
    6f94:	b3 83       	std	Z+3, r27	; 0x03
    return exponent;
    6f96:	89 81       	ldd	r24, Y+1	; 0x01
    6f98:	9a 81       	ldd	r25, Y+2	; 0x02
}
    6f9a:	28 96       	adiw	r28, 0x08	; 8
    6f9c:	cd bf       	out	0x3d, r28	; 61
    6f9e:	de bf       	out	0x3e, r29	; 62
    6fa0:	df 91       	pop	r29
    6fa2:	cf 91       	pop	r28
    6fa4:	08 95       	ret

00006fa6 <ftoa_fixed>:

static void ftoa_fixed(char *buffer, double value) {  
    6fa6:	cf 92       	push	r12
    6fa8:	df 92       	push	r13
    6faa:	ef 92       	push	r14
    6fac:	ff 92       	push	r15
    6fae:	cf 93       	push	r28
    6fb0:	df 93       	push	r29
    6fb2:	cd b7       	in	r28, 0x3d	; 61
    6fb4:	de b7       	in	r29, 0x3e	; 62
    6fb6:	2e 97       	sbiw	r28, 0x0e	; 14
    6fb8:	cd bf       	out	0x3d, r28	; 61
    6fba:	de bf       	out	0x3e, r29	; 62
    6fbc:	89 87       	std	Y+9, r24	; 0x09
    6fbe:	9a 87       	std	Y+10, r25	; 0x0a
    6fc0:	4b 87       	std	Y+11, r20	; 0x0b
    6fc2:	5c 87       	std	Y+12, r21	; 0x0c
    6fc4:	6d 87       	std	Y+13, r22	; 0x0d
    6fc6:	7e 87       	std	Y+14, r23	; 0x0e
     * The largest value we expect is an IEEE 754 double precision real, with maximum magnitude of approximately
     * e+308. The C standard requires an implementation to allow a single conversion to produce up to 512 
     * characters, so that's what we really expect as the buffer size.     
     */

    int exponent = 0;
    6fc8:	19 82       	std	Y+1, r1	; 0x01
    6fca:	1a 82       	std	Y+2, r1	; 0x02
    int places = 0;
    6fcc:	1b 82       	std	Y+3, r1	; 0x03
    6fce:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    6fd0:	8b 85       	ldd	r24, Y+11	; 0x0b
    6fd2:	9c 85       	ldd	r25, Y+12	; 0x0c
    6fd4:	ad 85       	ldd	r26, Y+13	; 0x0d
    6fd6:	be 85       	ldd	r27, Y+14	; 0x0e
    6fd8:	20 e0       	ldi	r18, 0x00	; 0
    6fda:	30 e0       	ldi	r19, 0x00	; 0
    6fdc:	a9 01       	movw	r20, r18
    6fde:	bc 01       	movw	r22, r24
    6fe0:	cd 01       	movw	r24, r26
    6fe2:	0e 94 b0 3a 	call	0x7560	; 0x7560 <__cmpsf2>
    6fe6:	88 23       	and	r24, r24
    6fe8:	59 f4       	brne	.+22     	; 0x7000 <ftoa_fixed+0x5a>
        buffer[0] = '0';
    6fea:	89 85       	ldd	r24, Y+9	; 0x09
    6fec:	9a 85       	ldd	r25, Y+10	; 0x0a
    6fee:	20 e3       	ldi	r18, 0x30	; 48
    6ff0:	fc 01       	movw	r30, r24
    6ff2:	20 83       	st	Z, r18
        buffer[1] = '\0';
    6ff4:	89 85       	ldd	r24, Y+9	; 0x09
    6ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ff8:	01 96       	adiw	r24, 0x01	; 1
    6ffa:	fc 01       	movw	r30, r24
    6ffc:	10 82       	st	Z, r1
        return;
    6ffe:	18 c1       	rjmp	.+560    	; 0x7230 <ftoa_fixed+0x28a>
    }         

    if (value < 0.0) {
    7000:	8b 85       	ldd	r24, Y+11	; 0x0b
    7002:	9c 85       	ldd	r25, Y+12	; 0x0c
    7004:	ad 85       	ldd	r26, Y+13	; 0x0d
    7006:	be 85       	ldd	r27, Y+14	; 0x0e
    7008:	20 e0       	ldi	r18, 0x00	; 0
    700a:	30 e0       	ldi	r19, 0x00	; 0
    700c:	a9 01       	movw	r20, r18
    700e:	bc 01       	movw	r22, r24
    7010:	cd 01       	movw	r24, r26
    7012:	0e 94 b0 3a 	call	0x7560	; 0x7560 <__cmpsf2>
    7016:	88 23       	and	r24, r24
    7018:	9c f4       	brge	.+38     	; 0x7040 <ftoa_fixed+0x9a>
        *buffer++ = '-';
    701a:	89 85       	ldd	r24, Y+9	; 0x09
    701c:	9a 85       	ldd	r25, Y+10	; 0x0a
    701e:	9c 01       	movw	r18, r24
    7020:	2f 5f       	subi	r18, 0xFF	; 255
    7022:	3f 4f       	sbci	r19, 0xFF	; 255
    7024:	29 87       	std	Y+9, r18	; 0x09
    7026:	3a 87       	std	Y+10, r19	; 0x0a
    7028:	2d e2       	ldi	r18, 0x2D	; 45
    702a:	fc 01       	movw	r30, r24
    702c:	20 83       	st	Z, r18
        value = -value;
    702e:	8b 85       	ldd	r24, Y+11	; 0x0b
    7030:	9c 85       	ldd	r25, Y+12	; 0x0c
    7032:	ad 85       	ldd	r26, Y+13	; 0x0d
    7034:	be 85       	ldd	r27, Y+14	; 0x0e
    7036:	b0 58       	subi	r27, 0x80	; 128
    7038:	8b 87       	std	Y+11, r24	; 0x0b
    703a:	9c 87       	std	Y+12, r25	; 0x0c
    703c:	ad 87       	std	Y+13, r26	; 0x0d
    703e:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    7040:	ce 01       	movw	r24, r28
    7042:	0b 96       	adiw	r24, 0x0b	; 11
    7044:	0e 94 66 37 	call	0x6ecc	; 0x6ecc <normalize>
    7048:	89 83       	std	Y+1, r24	; 0x01
    704a:	9a 83       	std	Y+2, r25	; 0x02

    while (exponent > 0) {
    704c:	53 c0       	rjmp	.+166    	; 0x70f4 <ftoa_fixed+0x14e>
        int digit = value * 10;
    704e:	8b 85       	ldd	r24, Y+11	; 0x0b
    7050:	9c 85       	ldd	r25, Y+12	; 0x0c
    7052:	ad 85       	ldd	r26, Y+13	; 0x0d
    7054:	be 85       	ldd	r27, Y+14	; 0x0e
    7056:	20 e0       	ldi	r18, 0x00	; 0
    7058:	30 e0       	ldi	r19, 0x00	; 0
    705a:	40 e2       	ldi	r20, 0x20	; 32
    705c:	51 e4       	ldi	r21, 0x41	; 65
    705e:	bc 01       	movw	r22, r24
    7060:	cd 01       	movw	r24, r26
    7062:	0e 94 14 3c 	call	0x7828	; 0x7828 <__mulsf3>
    7066:	dc 01       	movw	r26, r24
    7068:	cb 01       	movw	r24, r22
    706a:	bc 01       	movw	r22, r24
    706c:	cd 01       	movw	r24, r26
    706e:	0e 94 27 3b 	call	0x764e	; 0x764e <__fixsfsi>
    7072:	dc 01       	movw	r26, r24
    7074:	cb 01       	movw	r24, r22
    7076:	8d 83       	std	Y+5, r24	; 0x05
    7078:	9e 83       	std	Y+6, r25	; 0x06
        *buffer++ = digit + '0';
    707a:	89 85       	ldd	r24, Y+9	; 0x09
    707c:	9a 85       	ldd	r25, Y+10	; 0x0a
    707e:	9c 01       	movw	r18, r24
    7080:	2f 5f       	subi	r18, 0xFF	; 255
    7082:	3f 4f       	sbci	r19, 0xFF	; 255
    7084:	29 87       	std	Y+9, r18	; 0x09
    7086:	3a 87       	std	Y+10, r19	; 0x0a
    7088:	2d 81       	ldd	r18, Y+5	; 0x05
    708a:	20 5d       	subi	r18, 0xD0	; 208
    708c:	fc 01       	movw	r30, r24
    708e:	20 83       	st	Z, r18
        value = value * 10 - digit;
    7090:	8b 85       	ldd	r24, Y+11	; 0x0b
    7092:	9c 85       	ldd	r25, Y+12	; 0x0c
    7094:	ad 85       	ldd	r26, Y+13	; 0x0d
    7096:	be 85       	ldd	r27, Y+14	; 0x0e
    7098:	20 e0       	ldi	r18, 0x00	; 0
    709a:	30 e0       	ldi	r19, 0x00	; 0
    709c:	40 e2       	ldi	r20, 0x20	; 32
    709e:	51 e4       	ldi	r21, 0x41	; 65
    70a0:	bc 01       	movw	r22, r24
    70a2:	cd 01       	movw	r24, r26
    70a4:	0e 94 14 3c 	call	0x7828	; 0x7828 <__mulsf3>
    70a8:	dc 01       	movw	r26, r24
    70aa:	cb 01       	movw	r24, r22
    70ac:	6c 01       	movw	r12, r24
    70ae:	7d 01       	movw	r14, r26
    70b0:	8d 81       	ldd	r24, Y+5	; 0x05
    70b2:	9e 81       	ldd	r25, Y+6	; 0x06
    70b4:	09 2e       	mov	r0, r25
    70b6:	00 0c       	add	r0, r0
    70b8:	aa 0b       	sbc	r26, r26
    70ba:	bb 0b       	sbc	r27, r27
    70bc:	bc 01       	movw	r22, r24
    70be:	cd 01       	movw	r24, r26
    70c0:	0e 94 5f 3b 	call	0x76be	; 0x76be <__floatsisf>
    70c4:	dc 01       	movw	r26, r24
    70c6:	cb 01       	movw	r24, r22
    70c8:	9c 01       	movw	r18, r24
    70ca:	ad 01       	movw	r20, r26
    70cc:	c7 01       	movw	r24, r14
    70ce:	b6 01       	movw	r22, r12
    70d0:	0e 94 43 3a 	call	0x7486	; 0x7486 <__subsf3>
    70d4:	dc 01       	movw	r26, r24
    70d6:	cb 01       	movw	r24, r22
    70d8:	8b 87       	std	Y+11, r24	; 0x0b
    70da:	9c 87       	std	Y+12, r25	; 0x0c
    70dc:	ad 87       	std	Y+13, r26	; 0x0d
    70de:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    70e0:	8b 81       	ldd	r24, Y+3	; 0x03
    70e2:	9c 81       	ldd	r25, Y+4	; 0x04
    70e4:	01 96       	adiw	r24, 0x01	; 1
    70e6:	8b 83       	std	Y+3, r24	; 0x03
    70e8:	9c 83       	std	Y+4, r25	; 0x04
        --exponent;
    70ea:	89 81       	ldd	r24, Y+1	; 0x01
    70ec:	9a 81       	ldd	r25, Y+2	; 0x02
    70ee:	01 97       	sbiw	r24, 0x01	; 1
    70f0:	89 83       	std	Y+1, r24	; 0x01
    70f2:	9a 83       	std	Y+2, r25	; 0x02
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    70f4:	89 81       	ldd	r24, Y+1	; 0x01
    70f6:	9a 81       	ldd	r25, Y+2	; 0x02
    70f8:	18 16       	cp	r1, r24
    70fa:	19 06       	cpc	r1, r25
    70fc:	0c f4       	brge	.+2      	; 0x7100 <ftoa_fixed+0x15a>
    70fe:	a7 cf       	rjmp	.-178    	; 0x704e <ftoa_fixed+0xa8>
        value = value * 10 - digit;
        ++places;
        --exponent;
    }

    if (places == 0)
    7100:	8b 81       	ldd	r24, Y+3	; 0x03
    7102:	9c 81       	ldd	r25, Y+4	; 0x04
    7104:	89 2b       	or	r24, r25
    7106:	51 f4       	brne	.+20     	; 0x711c <ftoa_fixed+0x176>
        *buffer++ = '0';
    7108:	89 85       	ldd	r24, Y+9	; 0x09
    710a:	9a 85       	ldd	r25, Y+10	; 0x0a
    710c:	9c 01       	movw	r18, r24
    710e:	2f 5f       	subi	r18, 0xFF	; 255
    7110:	3f 4f       	sbci	r19, 0xFF	; 255
    7112:	29 87       	std	Y+9, r18	; 0x09
    7114:	3a 87       	std	Y+10, r19	; 0x0a
    7116:	20 e3       	ldi	r18, 0x30	; 48
    7118:	fc 01       	movw	r30, r24
    711a:	20 83       	st	Z, r18

    *buffer++ = '.';
    711c:	89 85       	ldd	r24, Y+9	; 0x09
    711e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7120:	9c 01       	movw	r18, r24
    7122:	2f 5f       	subi	r18, 0xFF	; 255
    7124:	3f 4f       	sbci	r19, 0xFF	; 255
    7126:	29 87       	std	Y+9, r18	; 0x09
    7128:	3a 87       	std	Y+10, r19	; 0x0a
    712a:	2e e2       	ldi	r18, 0x2E	; 46
    712c:	fc 01       	movw	r30, r24
    712e:	20 83       	st	Z, r18

    while (exponent < 0 && places < width) {
    7130:	14 c0       	rjmp	.+40     	; 0x715a <ftoa_fixed+0x1b4>
        *buffer++ = '0';
    7132:	89 85       	ldd	r24, Y+9	; 0x09
    7134:	9a 85       	ldd	r25, Y+10	; 0x0a
    7136:	9c 01       	movw	r18, r24
    7138:	2f 5f       	subi	r18, 0xFF	; 255
    713a:	3f 4f       	sbci	r19, 0xFF	; 255
    713c:	29 87       	std	Y+9, r18	; 0x09
    713e:	3a 87       	std	Y+10, r19	; 0x0a
    7140:	20 e3       	ldi	r18, 0x30	; 48
    7142:	fc 01       	movw	r30, r24
    7144:	20 83       	st	Z, r18
        --exponent;
    7146:	89 81       	ldd	r24, Y+1	; 0x01
    7148:	9a 81       	ldd	r25, Y+2	; 0x02
    714a:	01 97       	sbiw	r24, 0x01	; 1
    714c:	89 83       	std	Y+1, r24	; 0x01
    714e:	9a 83       	std	Y+2, r25	; 0x02
        ++places;
    7150:	8b 81       	ldd	r24, Y+3	; 0x03
    7152:	9c 81       	ldd	r25, Y+4	; 0x04
    7154:	01 96       	adiw	r24, 0x01	; 1
    7156:	8b 83       	std	Y+3, r24	; 0x03
    7158:	9c 83       	std	Y+4, r25	; 0x04
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    715a:	89 81       	ldd	r24, Y+1	; 0x01
    715c:	9a 81       	ldd	r25, Y+2	; 0x02
    715e:	99 23       	and	r25, r25
    7160:	0c f0       	brlt	.+2      	; 0x7164 <ftoa_fixed+0x1be>
    7162:	58 c0       	rjmp	.+176    	; 0x7214 <ftoa_fixed+0x26e>
    7164:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <width.5062>
    7168:	90 91 0d 21 	lds	r25, 0x210D	; 0x80210d <width.5062+0x1>
    716c:	2b 81       	ldd	r18, Y+3	; 0x03
    716e:	3c 81       	ldd	r19, Y+4	; 0x04
    7170:	28 17       	cp	r18, r24
    7172:	39 07       	cpc	r19, r25
    7174:	f4 f2       	brlt	.-68     	; 0x7132 <ftoa_fixed+0x18c>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    7176:	4e c0       	rjmp	.+156    	; 0x7214 <ftoa_fixed+0x26e>
        int digit = value * 10.0;
    7178:	8b 85       	ldd	r24, Y+11	; 0x0b
    717a:	9c 85       	ldd	r25, Y+12	; 0x0c
    717c:	ad 85       	ldd	r26, Y+13	; 0x0d
    717e:	be 85       	ldd	r27, Y+14	; 0x0e
    7180:	20 e0       	ldi	r18, 0x00	; 0
    7182:	30 e0       	ldi	r19, 0x00	; 0
    7184:	40 e2       	ldi	r20, 0x20	; 32
    7186:	51 e4       	ldi	r21, 0x41	; 65
    7188:	bc 01       	movw	r22, r24
    718a:	cd 01       	movw	r24, r26
    718c:	0e 94 14 3c 	call	0x7828	; 0x7828 <__mulsf3>
    7190:	dc 01       	movw	r26, r24
    7192:	cb 01       	movw	r24, r22
    7194:	bc 01       	movw	r22, r24
    7196:	cd 01       	movw	r24, r26
    7198:	0e 94 27 3b 	call	0x764e	; 0x764e <__fixsfsi>
    719c:	dc 01       	movw	r26, r24
    719e:	cb 01       	movw	r24, r22
    71a0:	8f 83       	std	Y+7, r24	; 0x07
    71a2:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    71a4:	89 85       	ldd	r24, Y+9	; 0x09
    71a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    71a8:	9c 01       	movw	r18, r24
    71aa:	2f 5f       	subi	r18, 0xFF	; 255
    71ac:	3f 4f       	sbci	r19, 0xFF	; 255
    71ae:	29 87       	std	Y+9, r18	; 0x09
    71b0:	3a 87       	std	Y+10, r19	; 0x0a
    71b2:	2f 81       	ldd	r18, Y+7	; 0x07
    71b4:	20 5d       	subi	r18, 0xD0	; 208
    71b6:	fc 01       	movw	r30, r24
    71b8:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    71ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    71bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    71be:	ad 85       	ldd	r26, Y+13	; 0x0d
    71c0:	be 85       	ldd	r27, Y+14	; 0x0e
    71c2:	20 e0       	ldi	r18, 0x00	; 0
    71c4:	30 e0       	ldi	r19, 0x00	; 0
    71c6:	40 e2       	ldi	r20, 0x20	; 32
    71c8:	51 e4       	ldi	r21, 0x41	; 65
    71ca:	bc 01       	movw	r22, r24
    71cc:	cd 01       	movw	r24, r26
    71ce:	0e 94 14 3c 	call	0x7828	; 0x7828 <__mulsf3>
    71d2:	dc 01       	movw	r26, r24
    71d4:	cb 01       	movw	r24, r22
    71d6:	6c 01       	movw	r12, r24
    71d8:	7d 01       	movw	r14, r26
    71da:	8f 81       	ldd	r24, Y+7	; 0x07
    71dc:	98 85       	ldd	r25, Y+8	; 0x08
    71de:	09 2e       	mov	r0, r25
    71e0:	00 0c       	add	r0, r0
    71e2:	aa 0b       	sbc	r26, r26
    71e4:	bb 0b       	sbc	r27, r27
    71e6:	bc 01       	movw	r22, r24
    71e8:	cd 01       	movw	r24, r26
    71ea:	0e 94 5f 3b 	call	0x76be	; 0x76be <__floatsisf>
    71ee:	dc 01       	movw	r26, r24
    71f0:	cb 01       	movw	r24, r22
    71f2:	9c 01       	movw	r18, r24
    71f4:	ad 01       	movw	r20, r26
    71f6:	c7 01       	movw	r24, r14
    71f8:	b6 01       	movw	r22, r12
    71fa:	0e 94 43 3a 	call	0x7486	; 0x7486 <__subsf3>
    71fe:	dc 01       	movw	r26, r24
    7200:	cb 01       	movw	r24, r22
    7202:	8b 87       	std	Y+11, r24	; 0x0b
    7204:	9c 87       	std	Y+12, r25	; 0x0c
    7206:	ad 87       	std	Y+13, r26	; 0x0d
    7208:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    720a:	8b 81       	ldd	r24, Y+3	; 0x03
    720c:	9c 81       	ldd	r25, Y+4	; 0x04
    720e:	01 96       	adiw	r24, 0x01	; 1
    7210:	8b 83       	std	Y+3, r24	; 0x03
    7212:	9c 83       	std	Y+4, r25	; 0x04
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    7214:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <width.5062>
    7218:	90 91 0d 21 	lds	r25, 0x210D	; 0x80210d <width.5062+0x1>
    721c:	2b 81       	ldd	r18, Y+3	; 0x03
    721e:	3c 81       	ldd	r19, Y+4	; 0x04
    7220:	28 17       	cp	r18, r24
    7222:	39 07       	cpc	r19, r25
    7224:	0c f4       	brge	.+2      	; 0x7228 <ftoa_fixed+0x282>
    7226:	a8 cf       	rjmp	.-176    	; 0x7178 <ftoa_fixed+0x1d2>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
        ++places;
    }
    *buffer = '\0';
    7228:	89 85       	ldd	r24, Y+9	; 0x09
    722a:	9a 85       	ldd	r25, Y+10	; 0x0a
    722c:	fc 01       	movw	r30, r24
    722e:	10 82       	st	Z, r1
}
    7230:	2e 96       	adiw	r28, 0x0e	; 14
    7232:	cd bf       	out	0x3d, r28	; 61
    7234:	de bf       	out	0x3e, r29	; 62
    7236:	df 91       	pop	r29
    7238:	cf 91       	pop	r28
    723a:	ff 90       	pop	r15
    723c:	ef 90       	pop	r14
    723e:	df 90       	pop	r13
    7240:	cf 90       	pop	r12
    7242:	08 95       	ret

00007244 <ftoa_sci>:

void ftoa_sci(char *buffer, double value) {
    7244:	cf 92       	push	r12
    7246:	df 92       	push	r13
    7248:	ef 92       	push	r14
    724a:	ff 92       	push	r15
    724c:	cf 93       	push	r28
    724e:	df 93       	push	r29
    7250:	cd b7       	in	r28, 0x3d	; 61
    7252:	de b7       	in	r29, 0x3e	; 62
    7254:	2e 97       	sbiw	r28, 0x0e	; 14
    7256:	cd bf       	out	0x3d, r28	; 61
    7258:	de bf       	out	0x3e, r29	; 62
    725a:	89 87       	std	Y+9, r24	; 0x09
    725c:	9a 87       	std	Y+10, r25	; 0x0a
    725e:	4b 87       	std	Y+11, r20	; 0x0b
    7260:	5c 87       	std	Y+12, r21	; 0x0c
    7262:	6d 87       	std	Y+13, r22	; 0x0d
    7264:	7e 87       	std	Y+14, r23	; 0x0e
    int exponent = 0;    
    7266:	1b 82       	std	Y+3, r1	; 0x03
    7268:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    726a:	8b 85       	ldd	r24, Y+11	; 0x0b
    726c:	9c 85       	ldd	r25, Y+12	; 0x0c
    726e:	ad 85       	ldd	r26, Y+13	; 0x0d
    7270:	be 85       	ldd	r27, Y+14	; 0x0e
    7272:	20 e0       	ldi	r18, 0x00	; 0
    7274:	30 e0       	ldi	r19, 0x00	; 0
    7276:	a9 01       	movw	r20, r18
    7278:	bc 01       	movw	r22, r24
    727a:	cd 01       	movw	r24, r26
    727c:	0e 94 b0 3a 	call	0x7560	; 0x7560 <__cmpsf2>
    7280:	88 23       	and	r24, r24
    7282:	59 f4       	brne	.+22     	; 0x729a <ftoa_sci+0x56>
        buffer[0] = '0';
    7284:	89 85       	ldd	r24, Y+9	; 0x09
    7286:	9a 85       	ldd	r25, Y+10	; 0x0a
    7288:	20 e3       	ldi	r18, 0x30	; 48
    728a:	fc 01       	movw	r30, r24
    728c:	20 83       	st	Z, r18
        buffer[1] = '\0';
    728e:	89 85       	ldd	r24, Y+9	; 0x09
    7290:	9a 85       	ldd	r25, Y+10	; 0x0a
    7292:	01 96       	adiw	r24, 0x01	; 1
    7294:	fc 01       	movw	r30, r24
    7296:	10 82       	st	Z, r1
        return;
    7298:	ec c0       	rjmp	.+472    	; 0x7472 <ftoa_sci+0x22e>
    }

    if (value < 0.0) {
    729a:	8b 85       	ldd	r24, Y+11	; 0x0b
    729c:	9c 85       	ldd	r25, Y+12	; 0x0c
    729e:	ad 85       	ldd	r26, Y+13	; 0x0d
    72a0:	be 85       	ldd	r27, Y+14	; 0x0e
    72a2:	20 e0       	ldi	r18, 0x00	; 0
    72a4:	30 e0       	ldi	r19, 0x00	; 0
    72a6:	a9 01       	movw	r20, r18
    72a8:	bc 01       	movw	r22, r24
    72aa:	cd 01       	movw	r24, r26
    72ac:	0e 94 b0 3a 	call	0x7560	; 0x7560 <__cmpsf2>
    72b0:	88 23       	and	r24, r24
    72b2:	9c f4       	brge	.+38     	; 0x72da <ftoa_sci+0x96>
        *buffer++ = '-';
    72b4:	89 85       	ldd	r24, Y+9	; 0x09
    72b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    72b8:	9c 01       	movw	r18, r24
    72ba:	2f 5f       	subi	r18, 0xFF	; 255
    72bc:	3f 4f       	sbci	r19, 0xFF	; 255
    72be:	29 87       	std	Y+9, r18	; 0x09
    72c0:	3a 87       	std	Y+10, r19	; 0x0a
    72c2:	2d e2       	ldi	r18, 0x2D	; 45
    72c4:	fc 01       	movw	r30, r24
    72c6:	20 83       	st	Z, r18
        value = -value;
    72c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    72ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    72cc:	ad 85       	ldd	r26, Y+13	; 0x0d
    72ce:	be 85       	ldd	r27, Y+14	; 0x0e
    72d0:	b0 58       	subi	r27, 0x80	; 128
    72d2:	8b 87       	std	Y+11, r24	; 0x0b
    72d4:	9c 87       	std	Y+12, r25	; 0x0c
    72d6:	ad 87       	std	Y+13, r26	; 0x0d
    72d8:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    72da:	ce 01       	movw	r24, r28
    72dc:	0b 96       	adiw	r24, 0x0b	; 11
    72de:	0e 94 66 37 	call	0x6ecc	; 0x6ecc <normalize>
    72e2:	8b 83       	std	Y+3, r24	; 0x03
    72e4:	9c 83       	std	Y+4, r25	; 0x04

    int digit = value * 10.0;
    72e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    72e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    72ea:	ad 85       	ldd	r26, Y+13	; 0x0d
    72ec:	be 85       	ldd	r27, Y+14	; 0x0e
    72ee:	20 e0       	ldi	r18, 0x00	; 0
    72f0:	30 e0       	ldi	r19, 0x00	; 0
    72f2:	40 e2       	ldi	r20, 0x20	; 32
    72f4:	51 e4       	ldi	r21, 0x41	; 65
    72f6:	bc 01       	movw	r22, r24
    72f8:	cd 01       	movw	r24, r26
    72fa:	0e 94 14 3c 	call	0x7828	; 0x7828 <__mulsf3>
    72fe:	dc 01       	movw	r26, r24
    7300:	cb 01       	movw	r24, r22
    7302:	bc 01       	movw	r22, r24
    7304:	cd 01       	movw	r24, r26
    7306:	0e 94 27 3b 	call	0x764e	; 0x764e <__fixsfsi>
    730a:	dc 01       	movw	r26, r24
    730c:	cb 01       	movw	r24, r22
    730e:	8d 83       	std	Y+5, r24	; 0x05
    7310:	9e 83       	std	Y+6, r25	; 0x06
    *buffer++ = digit + '0';
    7312:	89 85       	ldd	r24, Y+9	; 0x09
    7314:	9a 85       	ldd	r25, Y+10	; 0x0a
    7316:	9c 01       	movw	r18, r24
    7318:	2f 5f       	subi	r18, 0xFF	; 255
    731a:	3f 4f       	sbci	r19, 0xFF	; 255
    731c:	29 87       	std	Y+9, r18	; 0x09
    731e:	3a 87       	std	Y+10, r19	; 0x0a
    7320:	2d 81       	ldd	r18, Y+5	; 0x05
    7322:	20 5d       	subi	r18, 0xD0	; 208
    7324:	fc 01       	movw	r30, r24
    7326:	20 83       	st	Z, r18
    value = value * 10.0 - digit;
    7328:	8b 85       	ldd	r24, Y+11	; 0x0b
    732a:	9c 85       	ldd	r25, Y+12	; 0x0c
    732c:	ad 85       	ldd	r26, Y+13	; 0x0d
    732e:	be 85       	ldd	r27, Y+14	; 0x0e
    7330:	20 e0       	ldi	r18, 0x00	; 0
    7332:	30 e0       	ldi	r19, 0x00	; 0
    7334:	40 e2       	ldi	r20, 0x20	; 32
    7336:	51 e4       	ldi	r21, 0x41	; 65
    7338:	bc 01       	movw	r22, r24
    733a:	cd 01       	movw	r24, r26
    733c:	0e 94 14 3c 	call	0x7828	; 0x7828 <__mulsf3>
    7340:	dc 01       	movw	r26, r24
    7342:	cb 01       	movw	r24, r22
    7344:	6c 01       	movw	r12, r24
    7346:	7d 01       	movw	r14, r26
    7348:	8d 81       	ldd	r24, Y+5	; 0x05
    734a:	9e 81       	ldd	r25, Y+6	; 0x06
    734c:	09 2e       	mov	r0, r25
    734e:	00 0c       	add	r0, r0
    7350:	aa 0b       	sbc	r26, r26
    7352:	bb 0b       	sbc	r27, r27
    7354:	bc 01       	movw	r22, r24
    7356:	cd 01       	movw	r24, r26
    7358:	0e 94 5f 3b 	call	0x76be	; 0x76be <__floatsisf>
    735c:	dc 01       	movw	r26, r24
    735e:	cb 01       	movw	r24, r22
    7360:	9c 01       	movw	r18, r24
    7362:	ad 01       	movw	r20, r26
    7364:	c7 01       	movw	r24, r14
    7366:	b6 01       	movw	r22, r12
    7368:	0e 94 43 3a 	call	0x7486	; 0x7486 <__subsf3>
    736c:	dc 01       	movw	r26, r24
    736e:	cb 01       	movw	r24, r22
    7370:	8b 87       	std	Y+11, r24	; 0x0b
    7372:	9c 87       	std	Y+12, r25	; 0x0c
    7374:	ad 87       	std	Y+13, r26	; 0x0d
    7376:	be 87       	std	Y+14, r27	; 0x0e
    --exponent;
    7378:	8b 81       	ldd	r24, Y+3	; 0x03
    737a:	9c 81       	ldd	r25, Y+4	; 0x04
    737c:	01 97       	sbiw	r24, 0x01	; 1
    737e:	8b 83       	std	Y+3, r24	; 0x03
    7380:	9c 83       	std	Y+4, r25	; 0x04

    *buffer++ = '.';
    7382:	89 85       	ldd	r24, Y+9	; 0x09
    7384:	9a 85       	ldd	r25, Y+10	; 0x0a
    7386:	9c 01       	movw	r18, r24
    7388:	2f 5f       	subi	r18, 0xFF	; 255
    738a:	3f 4f       	sbci	r19, 0xFF	; 255
    738c:	29 87       	std	Y+9, r18	; 0x09
    738e:	3a 87       	std	Y+10, r19	; 0x0a
    7390:	2e e2       	ldi	r18, 0x2E	; 46
    7392:	fc 01       	movw	r30, r24
    7394:	20 83       	st	Z, r18

    for (int i = 0; i < width; i++) {
    7396:	19 82       	std	Y+1, r1	; 0x01
    7398:	1a 82       	std	Y+2, r1	; 0x02
    739a:	4e c0       	rjmp	.+156    	; 0x7438 <ftoa_sci+0x1f4>
        int digit = value * 10.0;
    739c:	8b 85       	ldd	r24, Y+11	; 0x0b
    739e:	9c 85       	ldd	r25, Y+12	; 0x0c
    73a0:	ad 85       	ldd	r26, Y+13	; 0x0d
    73a2:	be 85       	ldd	r27, Y+14	; 0x0e
    73a4:	20 e0       	ldi	r18, 0x00	; 0
    73a6:	30 e0       	ldi	r19, 0x00	; 0
    73a8:	40 e2       	ldi	r20, 0x20	; 32
    73aa:	51 e4       	ldi	r21, 0x41	; 65
    73ac:	bc 01       	movw	r22, r24
    73ae:	cd 01       	movw	r24, r26
    73b0:	0e 94 14 3c 	call	0x7828	; 0x7828 <__mulsf3>
    73b4:	dc 01       	movw	r26, r24
    73b6:	cb 01       	movw	r24, r22
    73b8:	bc 01       	movw	r22, r24
    73ba:	cd 01       	movw	r24, r26
    73bc:	0e 94 27 3b 	call	0x764e	; 0x764e <__fixsfsi>
    73c0:	dc 01       	movw	r26, r24
    73c2:	cb 01       	movw	r24, r22
    73c4:	8f 83       	std	Y+7, r24	; 0x07
    73c6:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    73c8:	89 85       	ldd	r24, Y+9	; 0x09
    73ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    73cc:	9c 01       	movw	r18, r24
    73ce:	2f 5f       	subi	r18, 0xFF	; 255
    73d0:	3f 4f       	sbci	r19, 0xFF	; 255
    73d2:	29 87       	std	Y+9, r18	; 0x09
    73d4:	3a 87       	std	Y+10, r19	; 0x0a
    73d6:	2f 81       	ldd	r18, Y+7	; 0x07
    73d8:	20 5d       	subi	r18, 0xD0	; 208
    73da:	fc 01       	movw	r30, r24
    73dc:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    73de:	8b 85       	ldd	r24, Y+11	; 0x0b
    73e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    73e2:	ad 85       	ldd	r26, Y+13	; 0x0d
    73e4:	be 85       	ldd	r27, Y+14	; 0x0e
    73e6:	20 e0       	ldi	r18, 0x00	; 0
    73e8:	30 e0       	ldi	r19, 0x00	; 0
    73ea:	40 e2       	ldi	r20, 0x20	; 32
    73ec:	51 e4       	ldi	r21, 0x41	; 65
    73ee:	bc 01       	movw	r22, r24
    73f0:	cd 01       	movw	r24, r26
    73f2:	0e 94 14 3c 	call	0x7828	; 0x7828 <__mulsf3>
    73f6:	dc 01       	movw	r26, r24
    73f8:	cb 01       	movw	r24, r22
    73fa:	6c 01       	movw	r12, r24
    73fc:	7d 01       	movw	r14, r26
    73fe:	8f 81       	ldd	r24, Y+7	; 0x07
    7400:	98 85       	ldd	r25, Y+8	; 0x08
    7402:	09 2e       	mov	r0, r25
    7404:	00 0c       	add	r0, r0
    7406:	aa 0b       	sbc	r26, r26
    7408:	bb 0b       	sbc	r27, r27
    740a:	bc 01       	movw	r22, r24
    740c:	cd 01       	movw	r24, r26
    740e:	0e 94 5f 3b 	call	0x76be	; 0x76be <__floatsisf>
    7412:	dc 01       	movw	r26, r24
    7414:	cb 01       	movw	r24, r22
    7416:	9c 01       	movw	r18, r24
    7418:	ad 01       	movw	r20, r26
    741a:	c7 01       	movw	r24, r14
    741c:	b6 01       	movw	r22, r12
    741e:	0e 94 43 3a 	call	0x7486	; 0x7486 <__subsf3>
    7422:	dc 01       	movw	r26, r24
    7424:	cb 01       	movw	r24, r22
    7426:	8b 87       	std	Y+11, r24	; 0x0b
    7428:	9c 87       	std	Y+12, r25	; 0x0c
    742a:	ad 87       	std	Y+13, r26	; 0x0d
    742c:	be 87       	std	Y+14, r27	; 0x0e
    value = value * 10.0 - digit;
    --exponent;

    *buffer++ = '.';

    for (int i = 0; i < width; i++) {
    742e:	89 81       	ldd	r24, Y+1	; 0x01
    7430:	9a 81       	ldd	r25, Y+2	; 0x02
    7432:	01 96       	adiw	r24, 0x01	; 1
    7434:	89 83       	std	Y+1, r24	; 0x01
    7436:	9a 83       	std	Y+2, r25	; 0x02
    7438:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <width.5079>
    743c:	90 91 0f 21 	lds	r25, 0x210F	; 0x80210f <width.5079+0x1>
    7440:	29 81       	ldd	r18, Y+1	; 0x01
    7442:	3a 81       	ldd	r19, Y+2	; 0x02
    7444:	28 17       	cp	r18, r24
    7446:	39 07       	cpc	r19, r25
    7448:	0c f4       	brge	.+2      	; 0x744c <ftoa_sci+0x208>
    744a:	a8 cf       	rjmp	.-176    	; 0x739c <ftoa_sci+0x158>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
    }

    *buffer++ = 'e';
    744c:	89 85       	ldd	r24, Y+9	; 0x09
    744e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7450:	9c 01       	movw	r18, r24
    7452:	2f 5f       	subi	r18, 0xFF	; 255
    7454:	3f 4f       	sbci	r19, 0xFF	; 255
    7456:	29 87       	std	Y+9, r18	; 0x09
    7458:	3a 87       	std	Y+10, r19	; 0x0a
    745a:	25 e6       	ldi	r18, 0x65	; 101
    745c:	fc 01       	movw	r30, r24
    745e:	20 83       	st	Z, r18
    itoa(exponent, buffer, 10);
    7460:	29 85       	ldd	r18, Y+9	; 0x09
    7462:	3a 85       	ldd	r19, Y+10	; 0x0a
    7464:	8b 81       	ldd	r24, Y+3	; 0x03
    7466:	9c 81       	ldd	r25, Y+4	; 0x04
    7468:	4a e0       	ldi	r20, 0x0A	; 10
    746a:	50 e0       	ldi	r21, 0x00	; 0
    746c:	b9 01       	movw	r22, r18
    746e:	0e 94 5a 41 	call	0x82b4	; 0x82b4 <itoa>
}
    7472:	2e 96       	adiw	r28, 0x0e	; 14
    7474:	cd bf       	out	0x3d, r28	; 61
    7476:	de bf       	out	0x3e, r29	; 62
    7478:	df 91       	pop	r29
    747a:	cf 91       	pop	r28
    747c:	ff 90       	pop	r15
    747e:	ef 90       	pop	r14
    7480:	df 90       	pop	r13
    7482:	cf 90       	pop	r12
    7484:	08 95       	ret

00007486 <__subsf3>:
    7486:	50 58       	subi	r21, 0x80	; 128

00007488 <__addsf3>:
    7488:	bb 27       	eor	r27, r27
    748a:	aa 27       	eor	r26, r26
    748c:	0e 94 5b 3a 	call	0x74b6	; 0x74b6 <__addsf3x>
    7490:	0c 94 d5 3b 	jmp	0x77aa	; 0x77aa <__fp_round>
    7494:	0e 94 c7 3b 	call	0x778e	; 0x778e <__fp_pscA>
    7498:	38 f0       	brcs	.+14     	; 0x74a8 <__addsf3+0x20>
    749a:	0e 94 ce 3b 	call	0x779c	; 0x779c <__fp_pscB>
    749e:	20 f0       	brcs	.+8      	; 0x74a8 <__addsf3+0x20>
    74a0:	39 f4       	brne	.+14     	; 0x74b0 <__addsf3+0x28>
    74a2:	9f 3f       	cpi	r25, 0xFF	; 255
    74a4:	19 f4       	brne	.+6      	; 0x74ac <__addsf3+0x24>
    74a6:	26 f4       	brtc	.+8      	; 0x74b0 <__addsf3+0x28>
    74a8:	0c 94 c4 3b 	jmp	0x7788	; 0x7788 <__fp_nan>
    74ac:	0e f4       	brtc	.+2      	; 0x74b0 <__addsf3+0x28>
    74ae:	e0 95       	com	r30
    74b0:	e7 fb       	bst	r30, 7
    74b2:	0c 94 be 3b 	jmp	0x777c	; 0x777c <__fp_inf>

000074b6 <__addsf3x>:
    74b6:	e9 2f       	mov	r30, r25
    74b8:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <__fp_split3>
    74bc:	58 f3       	brcs	.-42     	; 0x7494 <__addsf3+0xc>
    74be:	ba 17       	cp	r27, r26
    74c0:	62 07       	cpc	r22, r18
    74c2:	73 07       	cpc	r23, r19
    74c4:	84 07       	cpc	r24, r20
    74c6:	95 07       	cpc	r25, r21
    74c8:	20 f0       	brcs	.+8      	; 0x74d2 <__addsf3x+0x1c>
    74ca:	79 f4       	brne	.+30     	; 0x74ea <__addsf3x+0x34>
    74cc:	a6 f5       	brtc	.+104    	; 0x7536 <__addsf3x+0x80>
    74ce:	0c 94 08 3c 	jmp	0x7810	; 0x7810 <__fp_zero>
    74d2:	0e f4       	brtc	.+2      	; 0x74d6 <__addsf3x+0x20>
    74d4:	e0 95       	com	r30
    74d6:	0b 2e       	mov	r0, r27
    74d8:	ba 2f       	mov	r27, r26
    74da:	a0 2d       	mov	r26, r0
    74dc:	0b 01       	movw	r0, r22
    74de:	b9 01       	movw	r22, r18
    74e0:	90 01       	movw	r18, r0
    74e2:	0c 01       	movw	r0, r24
    74e4:	ca 01       	movw	r24, r20
    74e6:	a0 01       	movw	r20, r0
    74e8:	11 24       	eor	r1, r1
    74ea:	ff 27       	eor	r31, r31
    74ec:	59 1b       	sub	r21, r25
    74ee:	99 f0       	breq	.+38     	; 0x7516 <__addsf3x+0x60>
    74f0:	59 3f       	cpi	r21, 0xF9	; 249
    74f2:	50 f4       	brcc	.+20     	; 0x7508 <__addsf3x+0x52>
    74f4:	50 3e       	cpi	r21, 0xE0	; 224
    74f6:	68 f1       	brcs	.+90     	; 0x7552 <__addsf3x+0x9c>
    74f8:	1a 16       	cp	r1, r26
    74fa:	f0 40       	sbci	r31, 0x00	; 0
    74fc:	a2 2f       	mov	r26, r18
    74fe:	23 2f       	mov	r18, r19
    7500:	34 2f       	mov	r19, r20
    7502:	44 27       	eor	r20, r20
    7504:	58 5f       	subi	r21, 0xF8	; 248
    7506:	f3 cf       	rjmp	.-26     	; 0x74ee <__addsf3x+0x38>
    7508:	46 95       	lsr	r20
    750a:	37 95       	ror	r19
    750c:	27 95       	ror	r18
    750e:	a7 95       	ror	r26
    7510:	f0 40       	sbci	r31, 0x00	; 0
    7512:	53 95       	inc	r21
    7514:	c9 f7       	brne	.-14     	; 0x7508 <__addsf3x+0x52>
    7516:	7e f4       	brtc	.+30     	; 0x7536 <__addsf3x+0x80>
    7518:	1f 16       	cp	r1, r31
    751a:	ba 0b       	sbc	r27, r26
    751c:	62 0b       	sbc	r22, r18
    751e:	73 0b       	sbc	r23, r19
    7520:	84 0b       	sbc	r24, r20
    7522:	ba f0       	brmi	.+46     	; 0x7552 <__addsf3x+0x9c>
    7524:	91 50       	subi	r25, 0x01	; 1
    7526:	a1 f0       	breq	.+40     	; 0x7550 <__addsf3x+0x9a>
    7528:	ff 0f       	add	r31, r31
    752a:	bb 1f       	adc	r27, r27
    752c:	66 1f       	adc	r22, r22
    752e:	77 1f       	adc	r23, r23
    7530:	88 1f       	adc	r24, r24
    7532:	c2 f7       	brpl	.-16     	; 0x7524 <__addsf3x+0x6e>
    7534:	0e c0       	rjmp	.+28     	; 0x7552 <__addsf3x+0x9c>
    7536:	ba 0f       	add	r27, r26
    7538:	62 1f       	adc	r22, r18
    753a:	73 1f       	adc	r23, r19
    753c:	84 1f       	adc	r24, r20
    753e:	48 f4       	brcc	.+18     	; 0x7552 <__addsf3x+0x9c>
    7540:	87 95       	ror	r24
    7542:	77 95       	ror	r23
    7544:	67 95       	ror	r22
    7546:	b7 95       	ror	r27
    7548:	f7 95       	ror	r31
    754a:	9e 3f       	cpi	r25, 0xFE	; 254
    754c:	08 f0       	brcs	.+2      	; 0x7550 <__addsf3x+0x9a>
    754e:	b0 cf       	rjmp	.-160    	; 0x74b0 <__addsf3+0x28>
    7550:	93 95       	inc	r25
    7552:	88 0f       	add	r24, r24
    7554:	08 f0       	brcs	.+2      	; 0x7558 <__addsf3x+0xa2>
    7556:	99 27       	eor	r25, r25
    7558:	ee 0f       	add	r30, r30
    755a:	97 95       	ror	r25
    755c:	87 95       	ror	r24
    755e:	08 95       	ret

00007560 <__cmpsf2>:
    7560:	0e 94 9a 3b 	call	0x7734	; 0x7734 <__fp_cmp>
    7564:	08 f4       	brcc	.+2      	; 0x7568 <__cmpsf2+0x8>
    7566:	81 e0       	ldi	r24, 0x01	; 1
    7568:	08 95       	ret

0000756a <__divsf3>:
    756a:	0e 94 c9 3a 	call	0x7592	; 0x7592 <__divsf3x>
    756e:	0c 94 d5 3b 	jmp	0x77aa	; 0x77aa <__fp_round>
    7572:	0e 94 ce 3b 	call	0x779c	; 0x779c <__fp_pscB>
    7576:	58 f0       	brcs	.+22     	; 0x758e <__divsf3+0x24>
    7578:	0e 94 c7 3b 	call	0x778e	; 0x778e <__fp_pscA>
    757c:	40 f0       	brcs	.+16     	; 0x758e <__divsf3+0x24>
    757e:	29 f4       	brne	.+10     	; 0x758a <__divsf3+0x20>
    7580:	5f 3f       	cpi	r21, 0xFF	; 255
    7582:	29 f0       	breq	.+10     	; 0x758e <__divsf3+0x24>
    7584:	0c 94 be 3b 	jmp	0x777c	; 0x777c <__fp_inf>
    7588:	51 11       	cpse	r21, r1
    758a:	0c 94 09 3c 	jmp	0x7812	; 0x7812 <__fp_szero>
    758e:	0c 94 c4 3b 	jmp	0x7788	; 0x7788 <__fp_nan>

00007592 <__divsf3x>:
    7592:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <__fp_split3>
    7596:	68 f3       	brcs	.-38     	; 0x7572 <__divsf3+0x8>

00007598 <__divsf3_pse>:
    7598:	99 23       	and	r25, r25
    759a:	b1 f3       	breq	.-20     	; 0x7588 <__divsf3+0x1e>
    759c:	55 23       	and	r21, r21
    759e:	91 f3       	breq	.-28     	; 0x7584 <__divsf3+0x1a>
    75a0:	95 1b       	sub	r25, r21
    75a2:	55 0b       	sbc	r21, r21
    75a4:	bb 27       	eor	r27, r27
    75a6:	aa 27       	eor	r26, r26
    75a8:	62 17       	cp	r22, r18
    75aa:	73 07       	cpc	r23, r19
    75ac:	84 07       	cpc	r24, r20
    75ae:	38 f0       	brcs	.+14     	; 0x75be <__divsf3_pse+0x26>
    75b0:	9f 5f       	subi	r25, 0xFF	; 255
    75b2:	5f 4f       	sbci	r21, 0xFF	; 255
    75b4:	22 0f       	add	r18, r18
    75b6:	33 1f       	adc	r19, r19
    75b8:	44 1f       	adc	r20, r20
    75ba:	aa 1f       	adc	r26, r26
    75bc:	a9 f3       	breq	.-22     	; 0x75a8 <__divsf3_pse+0x10>
    75be:	35 d0       	rcall	.+106    	; 0x762a <__divsf3_pse+0x92>
    75c0:	0e 2e       	mov	r0, r30
    75c2:	3a f0       	brmi	.+14     	; 0x75d2 <__divsf3_pse+0x3a>
    75c4:	e0 e8       	ldi	r30, 0x80	; 128
    75c6:	32 d0       	rcall	.+100    	; 0x762c <__divsf3_pse+0x94>
    75c8:	91 50       	subi	r25, 0x01	; 1
    75ca:	50 40       	sbci	r21, 0x00	; 0
    75cc:	e6 95       	lsr	r30
    75ce:	00 1c       	adc	r0, r0
    75d0:	ca f7       	brpl	.-14     	; 0x75c4 <__divsf3_pse+0x2c>
    75d2:	2b d0       	rcall	.+86     	; 0x762a <__divsf3_pse+0x92>
    75d4:	fe 2f       	mov	r31, r30
    75d6:	29 d0       	rcall	.+82     	; 0x762a <__divsf3_pse+0x92>
    75d8:	66 0f       	add	r22, r22
    75da:	77 1f       	adc	r23, r23
    75dc:	88 1f       	adc	r24, r24
    75de:	bb 1f       	adc	r27, r27
    75e0:	26 17       	cp	r18, r22
    75e2:	37 07       	cpc	r19, r23
    75e4:	48 07       	cpc	r20, r24
    75e6:	ab 07       	cpc	r26, r27
    75e8:	b0 e8       	ldi	r27, 0x80	; 128
    75ea:	09 f0       	breq	.+2      	; 0x75ee <__divsf3_pse+0x56>
    75ec:	bb 0b       	sbc	r27, r27
    75ee:	80 2d       	mov	r24, r0
    75f0:	bf 01       	movw	r22, r30
    75f2:	ff 27       	eor	r31, r31
    75f4:	93 58       	subi	r25, 0x83	; 131
    75f6:	5f 4f       	sbci	r21, 0xFF	; 255
    75f8:	3a f0       	brmi	.+14     	; 0x7608 <__divsf3_pse+0x70>
    75fa:	9e 3f       	cpi	r25, 0xFE	; 254
    75fc:	51 05       	cpc	r21, r1
    75fe:	78 f0       	brcs	.+30     	; 0x761e <__divsf3_pse+0x86>
    7600:	0c 94 be 3b 	jmp	0x777c	; 0x777c <__fp_inf>
    7604:	0c 94 09 3c 	jmp	0x7812	; 0x7812 <__fp_szero>
    7608:	5f 3f       	cpi	r21, 0xFF	; 255
    760a:	e4 f3       	brlt	.-8      	; 0x7604 <__divsf3_pse+0x6c>
    760c:	98 3e       	cpi	r25, 0xE8	; 232
    760e:	d4 f3       	brlt	.-12     	; 0x7604 <__divsf3_pse+0x6c>
    7610:	86 95       	lsr	r24
    7612:	77 95       	ror	r23
    7614:	67 95       	ror	r22
    7616:	b7 95       	ror	r27
    7618:	f7 95       	ror	r31
    761a:	9f 5f       	subi	r25, 0xFF	; 255
    761c:	c9 f7       	brne	.-14     	; 0x7610 <__divsf3_pse+0x78>
    761e:	88 0f       	add	r24, r24
    7620:	91 1d       	adc	r25, r1
    7622:	96 95       	lsr	r25
    7624:	87 95       	ror	r24
    7626:	97 f9       	bld	r25, 7
    7628:	08 95       	ret
    762a:	e1 e0       	ldi	r30, 0x01	; 1
    762c:	66 0f       	add	r22, r22
    762e:	77 1f       	adc	r23, r23
    7630:	88 1f       	adc	r24, r24
    7632:	bb 1f       	adc	r27, r27
    7634:	62 17       	cp	r22, r18
    7636:	73 07       	cpc	r23, r19
    7638:	84 07       	cpc	r24, r20
    763a:	ba 07       	cpc	r27, r26
    763c:	20 f0       	brcs	.+8      	; 0x7646 <__divsf3_pse+0xae>
    763e:	62 1b       	sub	r22, r18
    7640:	73 0b       	sbc	r23, r19
    7642:	84 0b       	sbc	r24, r20
    7644:	ba 0b       	sbc	r27, r26
    7646:	ee 1f       	adc	r30, r30
    7648:	88 f7       	brcc	.-30     	; 0x762c <__divsf3_pse+0x94>
    764a:	e0 95       	com	r30
    764c:	08 95       	ret

0000764e <__fixsfsi>:
    764e:	0e 94 2e 3b 	call	0x765c	; 0x765c <__fixunssfsi>
    7652:	68 94       	set
    7654:	b1 11       	cpse	r27, r1
    7656:	0c 94 09 3c 	jmp	0x7812	; 0x7812 <__fp_szero>
    765a:	08 95       	ret

0000765c <__fixunssfsi>:
    765c:	0e 94 ee 3b 	call	0x77dc	; 0x77dc <__fp_splitA>
    7660:	88 f0       	brcs	.+34     	; 0x7684 <__fixunssfsi+0x28>
    7662:	9f 57       	subi	r25, 0x7F	; 127
    7664:	98 f0       	brcs	.+38     	; 0x768c <__fixunssfsi+0x30>
    7666:	b9 2f       	mov	r27, r25
    7668:	99 27       	eor	r25, r25
    766a:	b7 51       	subi	r27, 0x17	; 23
    766c:	b0 f0       	brcs	.+44     	; 0x769a <__fixunssfsi+0x3e>
    766e:	e1 f0       	breq	.+56     	; 0x76a8 <__fixunssfsi+0x4c>
    7670:	66 0f       	add	r22, r22
    7672:	77 1f       	adc	r23, r23
    7674:	88 1f       	adc	r24, r24
    7676:	99 1f       	adc	r25, r25
    7678:	1a f0       	brmi	.+6      	; 0x7680 <__fixunssfsi+0x24>
    767a:	ba 95       	dec	r27
    767c:	c9 f7       	brne	.-14     	; 0x7670 <__fixunssfsi+0x14>
    767e:	14 c0       	rjmp	.+40     	; 0x76a8 <__fixunssfsi+0x4c>
    7680:	b1 30       	cpi	r27, 0x01	; 1
    7682:	91 f0       	breq	.+36     	; 0x76a8 <__fixunssfsi+0x4c>
    7684:	0e 94 08 3c 	call	0x7810	; 0x7810 <__fp_zero>
    7688:	b1 e0       	ldi	r27, 0x01	; 1
    768a:	08 95       	ret
    768c:	0c 94 08 3c 	jmp	0x7810	; 0x7810 <__fp_zero>
    7690:	67 2f       	mov	r22, r23
    7692:	78 2f       	mov	r23, r24
    7694:	88 27       	eor	r24, r24
    7696:	b8 5f       	subi	r27, 0xF8	; 248
    7698:	39 f0       	breq	.+14     	; 0x76a8 <__fixunssfsi+0x4c>
    769a:	b9 3f       	cpi	r27, 0xF9	; 249
    769c:	cc f3       	brlt	.-14     	; 0x7690 <__fixunssfsi+0x34>
    769e:	86 95       	lsr	r24
    76a0:	77 95       	ror	r23
    76a2:	67 95       	ror	r22
    76a4:	b3 95       	inc	r27
    76a6:	d9 f7       	brne	.-10     	; 0x769e <__fixunssfsi+0x42>
    76a8:	3e f4       	brtc	.+14     	; 0x76b8 <__fixunssfsi+0x5c>
    76aa:	90 95       	com	r25
    76ac:	80 95       	com	r24
    76ae:	70 95       	com	r23
    76b0:	61 95       	neg	r22
    76b2:	7f 4f       	sbci	r23, 0xFF	; 255
    76b4:	8f 4f       	sbci	r24, 0xFF	; 255
    76b6:	9f 4f       	sbci	r25, 0xFF	; 255
    76b8:	08 95       	ret

000076ba <__floatunsisf>:
    76ba:	e8 94       	clt
    76bc:	09 c0       	rjmp	.+18     	; 0x76d0 <__floatsisf+0x12>

000076be <__floatsisf>:
    76be:	97 fb       	bst	r25, 7
    76c0:	3e f4       	brtc	.+14     	; 0x76d0 <__floatsisf+0x12>
    76c2:	90 95       	com	r25
    76c4:	80 95       	com	r24
    76c6:	70 95       	com	r23
    76c8:	61 95       	neg	r22
    76ca:	7f 4f       	sbci	r23, 0xFF	; 255
    76cc:	8f 4f       	sbci	r24, 0xFF	; 255
    76ce:	9f 4f       	sbci	r25, 0xFF	; 255
    76d0:	99 23       	and	r25, r25
    76d2:	a9 f0       	breq	.+42     	; 0x76fe <__floatsisf+0x40>
    76d4:	f9 2f       	mov	r31, r25
    76d6:	96 e9       	ldi	r25, 0x96	; 150
    76d8:	bb 27       	eor	r27, r27
    76da:	93 95       	inc	r25
    76dc:	f6 95       	lsr	r31
    76de:	87 95       	ror	r24
    76e0:	77 95       	ror	r23
    76e2:	67 95       	ror	r22
    76e4:	b7 95       	ror	r27
    76e6:	f1 11       	cpse	r31, r1
    76e8:	f8 cf       	rjmp	.-16     	; 0x76da <__floatsisf+0x1c>
    76ea:	fa f4       	brpl	.+62     	; 0x772a <__floatsisf+0x6c>
    76ec:	bb 0f       	add	r27, r27
    76ee:	11 f4       	brne	.+4      	; 0x76f4 <__floatsisf+0x36>
    76f0:	60 ff       	sbrs	r22, 0
    76f2:	1b c0       	rjmp	.+54     	; 0x772a <__floatsisf+0x6c>
    76f4:	6f 5f       	subi	r22, 0xFF	; 255
    76f6:	7f 4f       	sbci	r23, 0xFF	; 255
    76f8:	8f 4f       	sbci	r24, 0xFF	; 255
    76fa:	9f 4f       	sbci	r25, 0xFF	; 255
    76fc:	16 c0       	rjmp	.+44     	; 0x772a <__floatsisf+0x6c>
    76fe:	88 23       	and	r24, r24
    7700:	11 f0       	breq	.+4      	; 0x7706 <__floatsisf+0x48>
    7702:	96 e9       	ldi	r25, 0x96	; 150
    7704:	11 c0       	rjmp	.+34     	; 0x7728 <__floatsisf+0x6a>
    7706:	77 23       	and	r23, r23
    7708:	21 f0       	breq	.+8      	; 0x7712 <__floatsisf+0x54>
    770a:	9e e8       	ldi	r25, 0x8E	; 142
    770c:	87 2f       	mov	r24, r23
    770e:	76 2f       	mov	r23, r22
    7710:	05 c0       	rjmp	.+10     	; 0x771c <__floatsisf+0x5e>
    7712:	66 23       	and	r22, r22
    7714:	71 f0       	breq	.+28     	; 0x7732 <__floatsisf+0x74>
    7716:	96 e8       	ldi	r25, 0x86	; 134
    7718:	86 2f       	mov	r24, r22
    771a:	70 e0       	ldi	r23, 0x00	; 0
    771c:	60 e0       	ldi	r22, 0x00	; 0
    771e:	2a f0       	brmi	.+10     	; 0x772a <__floatsisf+0x6c>
    7720:	9a 95       	dec	r25
    7722:	66 0f       	add	r22, r22
    7724:	77 1f       	adc	r23, r23
    7726:	88 1f       	adc	r24, r24
    7728:	da f7       	brpl	.-10     	; 0x7720 <__floatsisf+0x62>
    772a:	88 0f       	add	r24, r24
    772c:	96 95       	lsr	r25
    772e:	87 95       	ror	r24
    7730:	97 f9       	bld	r25, 7
    7732:	08 95       	ret

00007734 <__fp_cmp>:
    7734:	99 0f       	add	r25, r25
    7736:	00 08       	sbc	r0, r0
    7738:	55 0f       	add	r21, r21
    773a:	aa 0b       	sbc	r26, r26
    773c:	e0 e8       	ldi	r30, 0x80	; 128
    773e:	fe ef       	ldi	r31, 0xFE	; 254
    7740:	16 16       	cp	r1, r22
    7742:	17 06       	cpc	r1, r23
    7744:	e8 07       	cpc	r30, r24
    7746:	f9 07       	cpc	r31, r25
    7748:	c0 f0       	brcs	.+48     	; 0x777a <__fp_cmp+0x46>
    774a:	12 16       	cp	r1, r18
    774c:	13 06       	cpc	r1, r19
    774e:	e4 07       	cpc	r30, r20
    7750:	f5 07       	cpc	r31, r21
    7752:	98 f0       	brcs	.+38     	; 0x777a <__fp_cmp+0x46>
    7754:	62 1b       	sub	r22, r18
    7756:	73 0b       	sbc	r23, r19
    7758:	84 0b       	sbc	r24, r20
    775a:	95 0b       	sbc	r25, r21
    775c:	39 f4       	brne	.+14     	; 0x776c <__fp_cmp+0x38>
    775e:	0a 26       	eor	r0, r26
    7760:	61 f0       	breq	.+24     	; 0x777a <__fp_cmp+0x46>
    7762:	23 2b       	or	r18, r19
    7764:	24 2b       	or	r18, r20
    7766:	25 2b       	or	r18, r21
    7768:	21 f4       	brne	.+8      	; 0x7772 <__fp_cmp+0x3e>
    776a:	08 95       	ret
    776c:	0a 26       	eor	r0, r26
    776e:	09 f4       	brne	.+2      	; 0x7772 <__fp_cmp+0x3e>
    7770:	a1 40       	sbci	r26, 0x01	; 1
    7772:	a6 95       	lsr	r26
    7774:	8f ef       	ldi	r24, 0xFF	; 255
    7776:	81 1d       	adc	r24, r1
    7778:	81 1d       	adc	r24, r1
    777a:	08 95       	ret

0000777c <__fp_inf>:
    777c:	97 f9       	bld	r25, 7
    777e:	9f 67       	ori	r25, 0x7F	; 127
    7780:	80 e8       	ldi	r24, 0x80	; 128
    7782:	70 e0       	ldi	r23, 0x00	; 0
    7784:	60 e0       	ldi	r22, 0x00	; 0
    7786:	08 95       	ret

00007788 <__fp_nan>:
    7788:	9f ef       	ldi	r25, 0xFF	; 255
    778a:	80 ec       	ldi	r24, 0xC0	; 192
    778c:	08 95       	ret

0000778e <__fp_pscA>:
    778e:	00 24       	eor	r0, r0
    7790:	0a 94       	dec	r0
    7792:	16 16       	cp	r1, r22
    7794:	17 06       	cpc	r1, r23
    7796:	18 06       	cpc	r1, r24
    7798:	09 06       	cpc	r0, r25
    779a:	08 95       	ret

0000779c <__fp_pscB>:
    779c:	00 24       	eor	r0, r0
    779e:	0a 94       	dec	r0
    77a0:	12 16       	cp	r1, r18
    77a2:	13 06       	cpc	r1, r19
    77a4:	14 06       	cpc	r1, r20
    77a6:	05 06       	cpc	r0, r21
    77a8:	08 95       	ret

000077aa <__fp_round>:
    77aa:	09 2e       	mov	r0, r25
    77ac:	03 94       	inc	r0
    77ae:	00 0c       	add	r0, r0
    77b0:	11 f4       	brne	.+4      	; 0x77b6 <__fp_round+0xc>
    77b2:	88 23       	and	r24, r24
    77b4:	52 f0       	brmi	.+20     	; 0x77ca <__fp_round+0x20>
    77b6:	bb 0f       	add	r27, r27
    77b8:	40 f4       	brcc	.+16     	; 0x77ca <__fp_round+0x20>
    77ba:	bf 2b       	or	r27, r31
    77bc:	11 f4       	brne	.+4      	; 0x77c2 <__fp_round+0x18>
    77be:	60 ff       	sbrs	r22, 0
    77c0:	04 c0       	rjmp	.+8      	; 0x77ca <__fp_round+0x20>
    77c2:	6f 5f       	subi	r22, 0xFF	; 255
    77c4:	7f 4f       	sbci	r23, 0xFF	; 255
    77c6:	8f 4f       	sbci	r24, 0xFF	; 255
    77c8:	9f 4f       	sbci	r25, 0xFF	; 255
    77ca:	08 95       	ret

000077cc <__fp_split3>:
    77cc:	57 fd       	sbrc	r21, 7
    77ce:	90 58       	subi	r25, 0x80	; 128
    77d0:	44 0f       	add	r20, r20
    77d2:	55 1f       	adc	r21, r21
    77d4:	59 f0       	breq	.+22     	; 0x77ec <__fp_splitA+0x10>
    77d6:	5f 3f       	cpi	r21, 0xFF	; 255
    77d8:	71 f0       	breq	.+28     	; 0x77f6 <__fp_splitA+0x1a>
    77da:	47 95       	ror	r20

000077dc <__fp_splitA>:
    77dc:	88 0f       	add	r24, r24
    77de:	97 fb       	bst	r25, 7
    77e0:	99 1f       	adc	r25, r25
    77e2:	61 f0       	breq	.+24     	; 0x77fc <__fp_splitA+0x20>
    77e4:	9f 3f       	cpi	r25, 0xFF	; 255
    77e6:	79 f0       	breq	.+30     	; 0x7806 <__fp_splitA+0x2a>
    77e8:	87 95       	ror	r24
    77ea:	08 95       	ret
    77ec:	12 16       	cp	r1, r18
    77ee:	13 06       	cpc	r1, r19
    77f0:	14 06       	cpc	r1, r20
    77f2:	55 1f       	adc	r21, r21
    77f4:	f2 cf       	rjmp	.-28     	; 0x77da <__fp_split3+0xe>
    77f6:	46 95       	lsr	r20
    77f8:	f1 df       	rcall	.-30     	; 0x77dc <__fp_splitA>
    77fa:	08 c0       	rjmp	.+16     	; 0x780c <__fp_splitA+0x30>
    77fc:	16 16       	cp	r1, r22
    77fe:	17 06       	cpc	r1, r23
    7800:	18 06       	cpc	r1, r24
    7802:	99 1f       	adc	r25, r25
    7804:	f1 cf       	rjmp	.-30     	; 0x77e8 <__fp_splitA+0xc>
    7806:	86 95       	lsr	r24
    7808:	71 05       	cpc	r23, r1
    780a:	61 05       	cpc	r22, r1
    780c:	08 94       	sec
    780e:	08 95       	ret

00007810 <__fp_zero>:
    7810:	e8 94       	clt

00007812 <__fp_szero>:
    7812:	bb 27       	eor	r27, r27
    7814:	66 27       	eor	r22, r22
    7816:	77 27       	eor	r23, r23
    7818:	cb 01       	movw	r24, r22
    781a:	97 f9       	bld	r25, 7
    781c:	08 95       	ret

0000781e <__gesf2>:
    781e:	0e 94 9a 3b 	call	0x7734	; 0x7734 <__fp_cmp>
    7822:	08 f4       	brcc	.+2      	; 0x7826 <__gesf2+0x8>
    7824:	8f ef       	ldi	r24, 0xFF	; 255
    7826:	08 95       	ret

00007828 <__mulsf3>:
    7828:	0e 94 27 3c 	call	0x784e	; 0x784e <__mulsf3x>
    782c:	0c 94 d5 3b 	jmp	0x77aa	; 0x77aa <__fp_round>
    7830:	0e 94 c7 3b 	call	0x778e	; 0x778e <__fp_pscA>
    7834:	38 f0       	brcs	.+14     	; 0x7844 <__mulsf3+0x1c>
    7836:	0e 94 ce 3b 	call	0x779c	; 0x779c <__fp_pscB>
    783a:	20 f0       	brcs	.+8      	; 0x7844 <__mulsf3+0x1c>
    783c:	95 23       	and	r25, r21
    783e:	11 f0       	breq	.+4      	; 0x7844 <__mulsf3+0x1c>
    7840:	0c 94 be 3b 	jmp	0x777c	; 0x777c <__fp_inf>
    7844:	0c 94 c4 3b 	jmp	0x7788	; 0x7788 <__fp_nan>
    7848:	11 24       	eor	r1, r1
    784a:	0c 94 09 3c 	jmp	0x7812	; 0x7812 <__fp_szero>

0000784e <__mulsf3x>:
    784e:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <__fp_split3>
    7852:	70 f3       	brcs	.-36     	; 0x7830 <__mulsf3+0x8>

00007854 <__mulsf3_pse>:
    7854:	95 9f       	mul	r25, r21
    7856:	c1 f3       	breq	.-16     	; 0x7848 <__mulsf3+0x20>
    7858:	95 0f       	add	r25, r21
    785a:	50 e0       	ldi	r21, 0x00	; 0
    785c:	55 1f       	adc	r21, r21
    785e:	62 9f       	mul	r22, r18
    7860:	f0 01       	movw	r30, r0
    7862:	72 9f       	mul	r23, r18
    7864:	bb 27       	eor	r27, r27
    7866:	f0 0d       	add	r31, r0
    7868:	b1 1d       	adc	r27, r1
    786a:	63 9f       	mul	r22, r19
    786c:	aa 27       	eor	r26, r26
    786e:	f0 0d       	add	r31, r0
    7870:	b1 1d       	adc	r27, r1
    7872:	aa 1f       	adc	r26, r26
    7874:	64 9f       	mul	r22, r20
    7876:	66 27       	eor	r22, r22
    7878:	b0 0d       	add	r27, r0
    787a:	a1 1d       	adc	r26, r1
    787c:	66 1f       	adc	r22, r22
    787e:	82 9f       	mul	r24, r18
    7880:	22 27       	eor	r18, r18
    7882:	b0 0d       	add	r27, r0
    7884:	a1 1d       	adc	r26, r1
    7886:	62 1f       	adc	r22, r18
    7888:	73 9f       	mul	r23, r19
    788a:	b0 0d       	add	r27, r0
    788c:	a1 1d       	adc	r26, r1
    788e:	62 1f       	adc	r22, r18
    7890:	83 9f       	mul	r24, r19
    7892:	a0 0d       	add	r26, r0
    7894:	61 1d       	adc	r22, r1
    7896:	22 1f       	adc	r18, r18
    7898:	74 9f       	mul	r23, r20
    789a:	33 27       	eor	r19, r19
    789c:	a0 0d       	add	r26, r0
    789e:	61 1d       	adc	r22, r1
    78a0:	23 1f       	adc	r18, r19
    78a2:	84 9f       	mul	r24, r20
    78a4:	60 0d       	add	r22, r0
    78a6:	21 1d       	adc	r18, r1
    78a8:	82 2f       	mov	r24, r18
    78aa:	76 2f       	mov	r23, r22
    78ac:	6a 2f       	mov	r22, r26
    78ae:	11 24       	eor	r1, r1
    78b0:	9f 57       	subi	r25, 0x7F	; 127
    78b2:	50 40       	sbci	r21, 0x00	; 0
    78b4:	9a f0       	brmi	.+38     	; 0x78dc <__mulsf3_pse+0x88>
    78b6:	f1 f0       	breq	.+60     	; 0x78f4 <__mulsf3_pse+0xa0>
    78b8:	88 23       	and	r24, r24
    78ba:	4a f0       	brmi	.+18     	; 0x78ce <__mulsf3_pse+0x7a>
    78bc:	ee 0f       	add	r30, r30
    78be:	ff 1f       	adc	r31, r31
    78c0:	bb 1f       	adc	r27, r27
    78c2:	66 1f       	adc	r22, r22
    78c4:	77 1f       	adc	r23, r23
    78c6:	88 1f       	adc	r24, r24
    78c8:	91 50       	subi	r25, 0x01	; 1
    78ca:	50 40       	sbci	r21, 0x00	; 0
    78cc:	a9 f7       	brne	.-22     	; 0x78b8 <__mulsf3_pse+0x64>
    78ce:	9e 3f       	cpi	r25, 0xFE	; 254
    78d0:	51 05       	cpc	r21, r1
    78d2:	80 f0       	brcs	.+32     	; 0x78f4 <__mulsf3_pse+0xa0>
    78d4:	0c 94 be 3b 	jmp	0x777c	; 0x777c <__fp_inf>
    78d8:	0c 94 09 3c 	jmp	0x7812	; 0x7812 <__fp_szero>
    78dc:	5f 3f       	cpi	r21, 0xFF	; 255
    78de:	e4 f3       	brlt	.-8      	; 0x78d8 <__mulsf3_pse+0x84>
    78e0:	98 3e       	cpi	r25, 0xE8	; 232
    78e2:	d4 f3       	brlt	.-12     	; 0x78d8 <__mulsf3_pse+0x84>
    78e4:	86 95       	lsr	r24
    78e6:	77 95       	ror	r23
    78e8:	67 95       	ror	r22
    78ea:	b7 95       	ror	r27
    78ec:	f7 95       	ror	r31
    78ee:	e7 95       	ror	r30
    78f0:	9f 5f       	subi	r25, 0xFF	; 255
    78f2:	c1 f7       	brne	.-16     	; 0x78e4 <__mulsf3_pse+0x90>
    78f4:	fe 2b       	or	r31, r30
    78f6:	88 0f       	add	r24, r24
    78f8:	91 1d       	adc	r25, r1
    78fa:	96 95       	lsr	r25
    78fc:	87 95       	ror	r24
    78fe:	97 f9       	bld	r25, 7
    7900:	08 95       	ret

00007902 <vfprintf>:
    7902:	2f 92       	push	r2
    7904:	3f 92       	push	r3
    7906:	4f 92       	push	r4
    7908:	5f 92       	push	r5
    790a:	6f 92       	push	r6
    790c:	7f 92       	push	r7
    790e:	8f 92       	push	r8
    7910:	9f 92       	push	r9
    7912:	af 92       	push	r10
    7914:	bf 92       	push	r11
    7916:	cf 92       	push	r12
    7918:	df 92       	push	r13
    791a:	ef 92       	push	r14
    791c:	ff 92       	push	r15
    791e:	0f 93       	push	r16
    7920:	1f 93       	push	r17
    7922:	cf 93       	push	r28
    7924:	df 93       	push	r29
    7926:	cd b7       	in	r28, 0x3d	; 61
    7928:	de b7       	in	r29, 0x3e	; 62
    792a:	60 97       	sbiw	r28, 0x10	; 16
    792c:	cd bf       	out	0x3d, r28	; 61
    792e:	de bf       	out	0x3e, r29	; 62
    7930:	7c 01       	movw	r14, r24
    7932:	1b 01       	movw	r2, r22
    7934:	6a 01       	movw	r12, r20
    7936:	fc 01       	movw	r30, r24
    7938:	16 82       	std	Z+6, r1	; 0x06
    793a:	17 82       	std	Z+7, r1	; 0x07
    793c:	83 81       	ldd	r24, Z+3	; 0x03
    793e:	81 ff       	sbrs	r24, 1
    7940:	44 c3       	rjmp	.+1672   	; 0x7fca <vfprintf+0x6c8>
    7942:	9e 01       	movw	r18, r28
    7944:	2f 5f       	subi	r18, 0xFF	; 255
    7946:	3f 4f       	sbci	r19, 0xFF	; 255
    7948:	39 01       	movw	r6, r18
    794a:	f7 01       	movw	r30, r14
    794c:	93 81       	ldd	r25, Z+3	; 0x03
    794e:	f1 01       	movw	r30, r2
    7950:	93 fd       	sbrc	r25, 3
    7952:	85 91       	lpm	r24, Z+
    7954:	93 ff       	sbrs	r25, 3
    7956:	81 91       	ld	r24, Z+
    7958:	1f 01       	movw	r2, r30
    795a:	88 23       	and	r24, r24
    795c:	09 f4       	brne	.+2      	; 0x7960 <vfprintf+0x5e>
    795e:	31 c3       	rjmp	.+1634   	; 0x7fc2 <vfprintf+0x6c0>
    7960:	85 32       	cpi	r24, 0x25	; 37
    7962:	39 f4       	brne	.+14     	; 0x7972 <vfprintf+0x70>
    7964:	93 fd       	sbrc	r25, 3
    7966:	85 91       	lpm	r24, Z+
    7968:	93 ff       	sbrs	r25, 3
    796a:	81 91       	ld	r24, Z+
    796c:	1f 01       	movw	r2, r30
    796e:	85 32       	cpi	r24, 0x25	; 37
    7970:	39 f4       	brne	.+14     	; 0x7980 <vfprintf+0x7e>
    7972:	b7 01       	movw	r22, r14
    7974:	90 e0       	ldi	r25, 0x00	; 0
    7976:	0e 94 8a 41 	call	0x8314	; 0x8314 <fputc>
    797a:	56 01       	movw	r10, r12
    797c:	65 01       	movw	r12, r10
    797e:	e5 cf       	rjmp	.-54     	; 0x794a <vfprintf+0x48>
    7980:	10 e0       	ldi	r17, 0x00	; 0
    7982:	51 2c       	mov	r5, r1
    7984:	91 2c       	mov	r9, r1
    7986:	ff e1       	ldi	r31, 0x1F	; 31
    7988:	f9 15       	cp	r31, r9
    798a:	d8 f0       	brcs	.+54     	; 0x79c2 <vfprintf+0xc0>
    798c:	8b 32       	cpi	r24, 0x2B	; 43
    798e:	79 f0       	breq	.+30     	; 0x79ae <vfprintf+0xac>
    7990:	38 f4       	brcc	.+14     	; 0x79a0 <vfprintf+0x9e>
    7992:	80 32       	cpi	r24, 0x20	; 32
    7994:	79 f0       	breq	.+30     	; 0x79b4 <vfprintf+0xb2>
    7996:	83 32       	cpi	r24, 0x23	; 35
    7998:	a1 f4       	brne	.+40     	; 0x79c2 <vfprintf+0xc0>
    799a:	f9 2d       	mov	r31, r9
    799c:	f0 61       	ori	r31, 0x10	; 16
    799e:	2e c0       	rjmp	.+92     	; 0x79fc <vfprintf+0xfa>
    79a0:	8d 32       	cpi	r24, 0x2D	; 45
    79a2:	61 f0       	breq	.+24     	; 0x79bc <vfprintf+0xba>
    79a4:	80 33       	cpi	r24, 0x30	; 48
    79a6:	69 f4       	brne	.+26     	; 0x79c2 <vfprintf+0xc0>
    79a8:	29 2d       	mov	r18, r9
    79aa:	21 60       	ori	r18, 0x01	; 1
    79ac:	2d c0       	rjmp	.+90     	; 0x7a08 <vfprintf+0x106>
    79ae:	39 2d       	mov	r19, r9
    79b0:	32 60       	ori	r19, 0x02	; 2
    79b2:	93 2e       	mov	r9, r19
    79b4:	89 2d       	mov	r24, r9
    79b6:	84 60       	ori	r24, 0x04	; 4
    79b8:	98 2e       	mov	r9, r24
    79ba:	2a c0       	rjmp	.+84     	; 0x7a10 <vfprintf+0x10e>
    79bc:	e9 2d       	mov	r30, r9
    79be:	e8 60       	ori	r30, 0x08	; 8
    79c0:	15 c0       	rjmp	.+42     	; 0x79ec <vfprintf+0xea>
    79c2:	97 fc       	sbrc	r9, 7
    79c4:	2d c0       	rjmp	.+90     	; 0x7a20 <vfprintf+0x11e>
    79c6:	20 ed       	ldi	r18, 0xD0	; 208
    79c8:	28 0f       	add	r18, r24
    79ca:	2a 30       	cpi	r18, 0x0A	; 10
    79cc:	88 f4       	brcc	.+34     	; 0x79f0 <vfprintf+0xee>
    79ce:	96 fe       	sbrs	r9, 6
    79d0:	06 c0       	rjmp	.+12     	; 0x79de <vfprintf+0xdc>
    79d2:	3a e0       	ldi	r19, 0x0A	; 10
    79d4:	13 9f       	mul	r17, r19
    79d6:	20 0d       	add	r18, r0
    79d8:	11 24       	eor	r1, r1
    79da:	12 2f       	mov	r17, r18
    79dc:	19 c0       	rjmp	.+50     	; 0x7a10 <vfprintf+0x10e>
    79de:	8a e0       	ldi	r24, 0x0A	; 10
    79e0:	58 9e       	mul	r5, r24
    79e2:	20 0d       	add	r18, r0
    79e4:	11 24       	eor	r1, r1
    79e6:	52 2e       	mov	r5, r18
    79e8:	e9 2d       	mov	r30, r9
    79ea:	e0 62       	ori	r30, 0x20	; 32
    79ec:	9e 2e       	mov	r9, r30
    79ee:	10 c0       	rjmp	.+32     	; 0x7a10 <vfprintf+0x10e>
    79f0:	8e 32       	cpi	r24, 0x2E	; 46
    79f2:	31 f4       	brne	.+12     	; 0x7a00 <vfprintf+0xfe>
    79f4:	96 fc       	sbrc	r9, 6
    79f6:	e5 c2       	rjmp	.+1482   	; 0x7fc2 <vfprintf+0x6c0>
    79f8:	f9 2d       	mov	r31, r9
    79fa:	f0 64       	ori	r31, 0x40	; 64
    79fc:	9f 2e       	mov	r9, r31
    79fe:	08 c0       	rjmp	.+16     	; 0x7a10 <vfprintf+0x10e>
    7a00:	8c 36       	cpi	r24, 0x6C	; 108
    7a02:	21 f4       	brne	.+8      	; 0x7a0c <vfprintf+0x10a>
    7a04:	29 2d       	mov	r18, r9
    7a06:	20 68       	ori	r18, 0x80	; 128
    7a08:	92 2e       	mov	r9, r18
    7a0a:	02 c0       	rjmp	.+4      	; 0x7a10 <vfprintf+0x10e>
    7a0c:	88 36       	cpi	r24, 0x68	; 104
    7a0e:	41 f4       	brne	.+16     	; 0x7a20 <vfprintf+0x11e>
    7a10:	f1 01       	movw	r30, r2
    7a12:	93 fd       	sbrc	r25, 3
    7a14:	85 91       	lpm	r24, Z+
    7a16:	93 ff       	sbrs	r25, 3
    7a18:	81 91       	ld	r24, Z+
    7a1a:	1f 01       	movw	r2, r30
    7a1c:	81 11       	cpse	r24, r1
    7a1e:	b3 cf       	rjmp	.-154    	; 0x7986 <vfprintf+0x84>
    7a20:	9b eb       	ldi	r25, 0xBB	; 187
    7a22:	98 0f       	add	r25, r24
    7a24:	93 30       	cpi	r25, 0x03	; 3
    7a26:	20 f4       	brcc	.+8      	; 0x7a30 <vfprintf+0x12e>
    7a28:	99 2d       	mov	r25, r9
    7a2a:	90 61       	ori	r25, 0x10	; 16
    7a2c:	80 5e       	subi	r24, 0xE0	; 224
    7a2e:	07 c0       	rjmp	.+14     	; 0x7a3e <vfprintf+0x13c>
    7a30:	9b e9       	ldi	r25, 0x9B	; 155
    7a32:	98 0f       	add	r25, r24
    7a34:	93 30       	cpi	r25, 0x03	; 3
    7a36:	08 f0       	brcs	.+2      	; 0x7a3a <vfprintf+0x138>
    7a38:	66 c1       	rjmp	.+716    	; 0x7d06 <vfprintf+0x404>
    7a3a:	99 2d       	mov	r25, r9
    7a3c:	9f 7e       	andi	r25, 0xEF	; 239
    7a3e:	96 ff       	sbrs	r25, 6
    7a40:	16 e0       	ldi	r17, 0x06	; 6
    7a42:	9f 73       	andi	r25, 0x3F	; 63
    7a44:	99 2e       	mov	r9, r25
    7a46:	85 36       	cpi	r24, 0x65	; 101
    7a48:	19 f4       	brne	.+6      	; 0x7a50 <vfprintf+0x14e>
    7a4a:	90 64       	ori	r25, 0x40	; 64
    7a4c:	99 2e       	mov	r9, r25
    7a4e:	08 c0       	rjmp	.+16     	; 0x7a60 <vfprintf+0x15e>
    7a50:	86 36       	cpi	r24, 0x66	; 102
    7a52:	21 f4       	brne	.+8      	; 0x7a5c <vfprintf+0x15a>
    7a54:	39 2f       	mov	r19, r25
    7a56:	30 68       	ori	r19, 0x80	; 128
    7a58:	93 2e       	mov	r9, r19
    7a5a:	02 c0       	rjmp	.+4      	; 0x7a60 <vfprintf+0x15e>
    7a5c:	11 11       	cpse	r17, r1
    7a5e:	11 50       	subi	r17, 0x01	; 1
    7a60:	97 fe       	sbrs	r9, 7
    7a62:	07 c0       	rjmp	.+14     	; 0x7a72 <vfprintf+0x170>
    7a64:	1c 33       	cpi	r17, 0x3C	; 60
    7a66:	50 f4       	brcc	.+20     	; 0x7a7c <vfprintf+0x17a>
    7a68:	44 24       	eor	r4, r4
    7a6a:	43 94       	inc	r4
    7a6c:	41 0e       	add	r4, r17
    7a6e:	27 e0       	ldi	r18, 0x07	; 7
    7a70:	0b c0       	rjmp	.+22     	; 0x7a88 <vfprintf+0x186>
    7a72:	18 30       	cpi	r17, 0x08	; 8
    7a74:	38 f0       	brcs	.+14     	; 0x7a84 <vfprintf+0x182>
    7a76:	27 e0       	ldi	r18, 0x07	; 7
    7a78:	17 e0       	ldi	r17, 0x07	; 7
    7a7a:	05 c0       	rjmp	.+10     	; 0x7a86 <vfprintf+0x184>
    7a7c:	27 e0       	ldi	r18, 0x07	; 7
    7a7e:	9c e3       	ldi	r25, 0x3C	; 60
    7a80:	49 2e       	mov	r4, r25
    7a82:	02 c0       	rjmp	.+4      	; 0x7a88 <vfprintf+0x186>
    7a84:	21 2f       	mov	r18, r17
    7a86:	41 2c       	mov	r4, r1
    7a88:	56 01       	movw	r10, r12
    7a8a:	84 e0       	ldi	r24, 0x04	; 4
    7a8c:	a8 0e       	add	r10, r24
    7a8e:	b1 1c       	adc	r11, r1
    7a90:	f6 01       	movw	r30, r12
    7a92:	60 81       	ld	r22, Z
    7a94:	71 81       	ldd	r23, Z+1	; 0x01
    7a96:	82 81       	ldd	r24, Z+2	; 0x02
    7a98:	93 81       	ldd	r25, Z+3	; 0x03
    7a9a:	04 2d       	mov	r16, r4
    7a9c:	a3 01       	movw	r20, r6
    7a9e:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__ftoa_engine>
    7aa2:	6c 01       	movw	r12, r24
    7aa4:	f9 81       	ldd	r31, Y+1	; 0x01
    7aa6:	fc 87       	std	Y+12, r31	; 0x0c
    7aa8:	f0 ff       	sbrs	r31, 0
    7aaa:	02 c0       	rjmp	.+4      	; 0x7ab0 <vfprintf+0x1ae>
    7aac:	f3 ff       	sbrs	r31, 3
    7aae:	06 c0       	rjmp	.+12     	; 0x7abc <vfprintf+0x1ba>
    7ab0:	91 fc       	sbrc	r9, 1
    7ab2:	06 c0       	rjmp	.+12     	; 0x7ac0 <vfprintf+0x1be>
    7ab4:	92 fe       	sbrs	r9, 2
    7ab6:	06 c0       	rjmp	.+12     	; 0x7ac4 <vfprintf+0x1c2>
    7ab8:	00 e2       	ldi	r16, 0x20	; 32
    7aba:	05 c0       	rjmp	.+10     	; 0x7ac6 <vfprintf+0x1c4>
    7abc:	0d e2       	ldi	r16, 0x2D	; 45
    7abe:	03 c0       	rjmp	.+6      	; 0x7ac6 <vfprintf+0x1c4>
    7ac0:	0b e2       	ldi	r16, 0x2B	; 43
    7ac2:	01 c0       	rjmp	.+2      	; 0x7ac6 <vfprintf+0x1c4>
    7ac4:	00 e0       	ldi	r16, 0x00	; 0
    7ac6:	8c 85       	ldd	r24, Y+12	; 0x0c
    7ac8:	8c 70       	andi	r24, 0x0C	; 12
    7aca:	19 f0       	breq	.+6      	; 0x7ad2 <vfprintf+0x1d0>
    7acc:	01 11       	cpse	r16, r1
    7ace:	5a c2       	rjmp	.+1204   	; 0x7f84 <vfprintf+0x682>
    7ad0:	9b c2       	rjmp	.+1334   	; 0x8008 <vfprintf+0x706>
    7ad2:	97 fe       	sbrs	r9, 7
    7ad4:	10 c0       	rjmp	.+32     	; 0x7af6 <vfprintf+0x1f4>
    7ad6:	4c 0c       	add	r4, r12
    7ad8:	fc 85       	ldd	r31, Y+12	; 0x0c
    7ada:	f4 ff       	sbrs	r31, 4
    7adc:	04 c0       	rjmp	.+8      	; 0x7ae6 <vfprintf+0x1e4>
    7ade:	8a 81       	ldd	r24, Y+2	; 0x02
    7ae0:	81 33       	cpi	r24, 0x31	; 49
    7ae2:	09 f4       	brne	.+2      	; 0x7ae6 <vfprintf+0x1e4>
    7ae4:	4a 94       	dec	r4
    7ae6:	14 14       	cp	r1, r4
    7ae8:	74 f5       	brge	.+92     	; 0x7b46 <vfprintf+0x244>
    7aea:	28 e0       	ldi	r18, 0x08	; 8
    7aec:	24 15       	cp	r18, r4
    7aee:	78 f5       	brcc	.+94     	; 0x7b4e <vfprintf+0x24c>
    7af0:	88 e0       	ldi	r24, 0x08	; 8
    7af2:	48 2e       	mov	r4, r24
    7af4:	2c c0       	rjmp	.+88     	; 0x7b4e <vfprintf+0x24c>
    7af6:	96 fc       	sbrc	r9, 6
    7af8:	2a c0       	rjmp	.+84     	; 0x7b4e <vfprintf+0x24c>
    7afa:	81 2f       	mov	r24, r17
    7afc:	90 e0       	ldi	r25, 0x00	; 0
    7afe:	8c 15       	cp	r24, r12
    7b00:	9d 05       	cpc	r25, r13
    7b02:	9c f0       	brlt	.+38     	; 0x7b2a <vfprintf+0x228>
    7b04:	3c ef       	ldi	r19, 0xFC	; 252
    7b06:	c3 16       	cp	r12, r19
    7b08:	3f ef       	ldi	r19, 0xFF	; 255
    7b0a:	d3 06       	cpc	r13, r19
    7b0c:	74 f0       	brlt	.+28     	; 0x7b2a <vfprintf+0x228>
    7b0e:	89 2d       	mov	r24, r9
    7b10:	80 68       	ori	r24, 0x80	; 128
    7b12:	98 2e       	mov	r9, r24
    7b14:	0a c0       	rjmp	.+20     	; 0x7b2a <vfprintf+0x228>
    7b16:	e2 e0       	ldi	r30, 0x02	; 2
    7b18:	f0 e0       	ldi	r31, 0x00	; 0
    7b1a:	ec 0f       	add	r30, r28
    7b1c:	fd 1f       	adc	r31, r29
    7b1e:	e1 0f       	add	r30, r17
    7b20:	f1 1d       	adc	r31, r1
    7b22:	80 81       	ld	r24, Z
    7b24:	80 33       	cpi	r24, 0x30	; 48
    7b26:	19 f4       	brne	.+6      	; 0x7b2e <vfprintf+0x22c>
    7b28:	11 50       	subi	r17, 0x01	; 1
    7b2a:	11 11       	cpse	r17, r1
    7b2c:	f4 cf       	rjmp	.-24     	; 0x7b16 <vfprintf+0x214>
    7b2e:	97 fe       	sbrs	r9, 7
    7b30:	0e c0       	rjmp	.+28     	; 0x7b4e <vfprintf+0x24c>
    7b32:	44 24       	eor	r4, r4
    7b34:	43 94       	inc	r4
    7b36:	41 0e       	add	r4, r17
    7b38:	81 2f       	mov	r24, r17
    7b3a:	90 e0       	ldi	r25, 0x00	; 0
    7b3c:	c8 16       	cp	r12, r24
    7b3e:	d9 06       	cpc	r13, r25
    7b40:	2c f4       	brge	.+10     	; 0x7b4c <vfprintf+0x24a>
    7b42:	1c 19       	sub	r17, r12
    7b44:	04 c0       	rjmp	.+8      	; 0x7b4e <vfprintf+0x24c>
    7b46:	44 24       	eor	r4, r4
    7b48:	43 94       	inc	r4
    7b4a:	01 c0       	rjmp	.+2      	; 0x7b4e <vfprintf+0x24c>
    7b4c:	10 e0       	ldi	r17, 0x00	; 0
    7b4e:	97 fe       	sbrs	r9, 7
    7b50:	06 c0       	rjmp	.+12     	; 0x7b5e <vfprintf+0x25c>
    7b52:	1c 14       	cp	r1, r12
    7b54:	1d 04       	cpc	r1, r13
    7b56:	34 f4       	brge	.+12     	; 0x7b64 <vfprintf+0x262>
    7b58:	c6 01       	movw	r24, r12
    7b5a:	01 96       	adiw	r24, 0x01	; 1
    7b5c:	05 c0       	rjmp	.+10     	; 0x7b68 <vfprintf+0x266>
    7b5e:	85 e0       	ldi	r24, 0x05	; 5
    7b60:	90 e0       	ldi	r25, 0x00	; 0
    7b62:	02 c0       	rjmp	.+4      	; 0x7b68 <vfprintf+0x266>
    7b64:	81 e0       	ldi	r24, 0x01	; 1
    7b66:	90 e0       	ldi	r25, 0x00	; 0
    7b68:	01 11       	cpse	r16, r1
    7b6a:	01 96       	adiw	r24, 0x01	; 1
    7b6c:	11 23       	and	r17, r17
    7b6e:	31 f0       	breq	.+12     	; 0x7b7c <vfprintf+0x27a>
    7b70:	21 2f       	mov	r18, r17
    7b72:	30 e0       	ldi	r19, 0x00	; 0
    7b74:	2f 5f       	subi	r18, 0xFF	; 255
    7b76:	3f 4f       	sbci	r19, 0xFF	; 255
    7b78:	82 0f       	add	r24, r18
    7b7a:	93 1f       	adc	r25, r19
    7b7c:	25 2d       	mov	r18, r5
    7b7e:	30 e0       	ldi	r19, 0x00	; 0
    7b80:	82 17       	cp	r24, r18
    7b82:	93 07       	cpc	r25, r19
    7b84:	14 f4       	brge	.+4      	; 0x7b8a <vfprintf+0x288>
    7b86:	58 1a       	sub	r5, r24
    7b88:	01 c0       	rjmp	.+2      	; 0x7b8c <vfprintf+0x28a>
    7b8a:	51 2c       	mov	r5, r1
    7b8c:	89 2d       	mov	r24, r9
    7b8e:	89 70       	andi	r24, 0x09	; 9
    7b90:	49 f4       	brne	.+18     	; 0x7ba4 <vfprintf+0x2a2>
    7b92:	55 20       	and	r5, r5
    7b94:	39 f0       	breq	.+14     	; 0x7ba4 <vfprintf+0x2a2>
    7b96:	b7 01       	movw	r22, r14
    7b98:	80 e2       	ldi	r24, 0x20	; 32
    7b9a:	90 e0       	ldi	r25, 0x00	; 0
    7b9c:	0e 94 8a 41 	call	0x8314	; 0x8314 <fputc>
    7ba0:	5a 94       	dec	r5
    7ba2:	f7 cf       	rjmp	.-18     	; 0x7b92 <vfprintf+0x290>
    7ba4:	00 23       	and	r16, r16
    7ba6:	29 f0       	breq	.+10     	; 0x7bb2 <vfprintf+0x2b0>
    7ba8:	b7 01       	movw	r22, r14
    7baa:	80 2f       	mov	r24, r16
    7bac:	90 e0       	ldi	r25, 0x00	; 0
    7bae:	0e 94 8a 41 	call	0x8314	; 0x8314 <fputc>
    7bb2:	93 fc       	sbrc	r9, 3
    7bb4:	09 c0       	rjmp	.+18     	; 0x7bc8 <vfprintf+0x2c6>
    7bb6:	55 20       	and	r5, r5
    7bb8:	39 f0       	breq	.+14     	; 0x7bc8 <vfprintf+0x2c6>
    7bba:	b7 01       	movw	r22, r14
    7bbc:	80 e3       	ldi	r24, 0x30	; 48
    7bbe:	90 e0       	ldi	r25, 0x00	; 0
    7bc0:	0e 94 8a 41 	call	0x8314	; 0x8314 <fputc>
    7bc4:	5a 94       	dec	r5
    7bc6:	f7 cf       	rjmp	.-18     	; 0x7bb6 <vfprintf+0x2b4>
    7bc8:	97 fe       	sbrs	r9, 7
    7bca:	4c c0       	rjmp	.+152    	; 0x7c64 <vfprintf+0x362>
    7bcc:	46 01       	movw	r8, r12
    7bce:	d7 fe       	sbrs	r13, 7
    7bd0:	02 c0       	rjmp	.+4      	; 0x7bd6 <vfprintf+0x2d4>
    7bd2:	81 2c       	mov	r8, r1
    7bd4:	91 2c       	mov	r9, r1
    7bd6:	c6 01       	movw	r24, r12
    7bd8:	88 19       	sub	r24, r8
    7bda:	99 09       	sbc	r25, r9
    7bdc:	f3 01       	movw	r30, r6
    7bde:	e8 0f       	add	r30, r24
    7be0:	f9 1f       	adc	r31, r25
    7be2:	ed 87       	std	Y+13, r30	; 0x0d
    7be4:	fe 87       	std	Y+14, r31	; 0x0e
    7be6:	96 01       	movw	r18, r12
    7be8:	24 19       	sub	r18, r4
    7bea:	31 09       	sbc	r19, r1
    7bec:	2f 87       	std	Y+15, r18	; 0x0f
    7bee:	38 8b       	std	Y+16, r19	; 0x10
    7bf0:	01 2f       	mov	r16, r17
    7bf2:	10 e0       	ldi	r17, 0x00	; 0
    7bf4:	11 95       	neg	r17
    7bf6:	01 95       	neg	r16
    7bf8:	11 09       	sbc	r17, r1
    7bfa:	3f ef       	ldi	r19, 0xFF	; 255
    7bfc:	83 16       	cp	r8, r19
    7bfe:	93 06       	cpc	r9, r19
    7c00:	29 f4       	brne	.+10     	; 0x7c0c <vfprintf+0x30a>
    7c02:	b7 01       	movw	r22, r14
    7c04:	8e e2       	ldi	r24, 0x2E	; 46
    7c06:	90 e0       	ldi	r25, 0x00	; 0
    7c08:	0e 94 8a 41 	call	0x8314	; 0x8314 <fputc>
    7c0c:	c8 14       	cp	r12, r8
    7c0e:	d9 04       	cpc	r13, r9
    7c10:	4c f0       	brlt	.+18     	; 0x7c24 <vfprintf+0x322>
    7c12:	8f 85       	ldd	r24, Y+15	; 0x0f
    7c14:	98 89       	ldd	r25, Y+16	; 0x10
    7c16:	88 15       	cp	r24, r8
    7c18:	99 05       	cpc	r25, r9
    7c1a:	24 f4       	brge	.+8      	; 0x7c24 <vfprintf+0x322>
    7c1c:	ed 85       	ldd	r30, Y+13	; 0x0d
    7c1e:	fe 85       	ldd	r31, Y+14	; 0x0e
    7c20:	81 81       	ldd	r24, Z+1	; 0x01
    7c22:	01 c0       	rjmp	.+2      	; 0x7c26 <vfprintf+0x324>
    7c24:	80 e3       	ldi	r24, 0x30	; 48
    7c26:	f1 e0       	ldi	r31, 0x01	; 1
    7c28:	8f 1a       	sub	r8, r31
    7c2a:	91 08       	sbc	r9, r1
    7c2c:	2d 85       	ldd	r18, Y+13	; 0x0d
    7c2e:	3e 85       	ldd	r19, Y+14	; 0x0e
    7c30:	2f 5f       	subi	r18, 0xFF	; 255
    7c32:	3f 4f       	sbci	r19, 0xFF	; 255
    7c34:	2d 87       	std	Y+13, r18	; 0x0d
    7c36:	3e 87       	std	Y+14, r19	; 0x0e
    7c38:	80 16       	cp	r8, r16
    7c3a:	91 06       	cpc	r9, r17
    7c3c:	2c f0       	brlt	.+10     	; 0x7c48 <vfprintf+0x346>
    7c3e:	b7 01       	movw	r22, r14
    7c40:	90 e0       	ldi	r25, 0x00	; 0
    7c42:	0e 94 8a 41 	call	0x8314	; 0x8314 <fputc>
    7c46:	d9 cf       	rjmp	.-78     	; 0x7bfa <vfprintf+0x2f8>
    7c48:	c8 14       	cp	r12, r8
    7c4a:	d9 04       	cpc	r13, r9
    7c4c:	41 f4       	brne	.+16     	; 0x7c5e <vfprintf+0x35c>
    7c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    7c50:	96 33       	cpi	r25, 0x36	; 54
    7c52:	20 f4       	brcc	.+8      	; 0x7c5c <vfprintf+0x35a>
    7c54:	95 33       	cpi	r25, 0x35	; 53
    7c56:	19 f4       	brne	.+6      	; 0x7c5e <vfprintf+0x35c>
    7c58:	3c 85       	ldd	r19, Y+12	; 0x0c
    7c5a:	34 ff       	sbrs	r19, 4
    7c5c:	81 e3       	ldi	r24, 0x31	; 49
    7c5e:	b7 01       	movw	r22, r14
    7c60:	90 e0       	ldi	r25, 0x00	; 0
    7c62:	4e c0       	rjmp	.+156    	; 0x7d00 <vfprintf+0x3fe>
    7c64:	8a 81       	ldd	r24, Y+2	; 0x02
    7c66:	81 33       	cpi	r24, 0x31	; 49
    7c68:	19 f0       	breq	.+6      	; 0x7c70 <vfprintf+0x36e>
    7c6a:	9c 85       	ldd	r25, Y+12	; 0x0c
    7c6c:	9f 7e       	andi	r25, 0xEF	; 239
    7c6e:	9c 87       	std	Y+12, r25	; 0x0c
    7c70:	b7 01       	movw	r22, r14
    7c72:	90 e0       	ldi	r25, 0x00	; 0
    7c74:	0e 94 8a 41 	call	0x8314	; 0x8314 <fputc>
    7c78:	11 11       	cpse	r17, r1
    7c7a:	05 c0       	rjmp	.+10     	; 0x7c86 <vfprintf+0x384>
    7c7c:	94 fc       	sbrc	r9, 4
    7c7e:	18 c0       	rjmp	.+48     	; 0x7cb0 <vfprintf+0x3ae>
    7c80:	85 e6       	ldi	r24, 0x65	; 101
    7c82:	90 e0       	ldi	r25, 0x00	; 0
    7c84:	17 c0       	rjmp	.+46     	; 0x7cb4 <vfprintf+0x3b2>
    7c86:	b7 01       	movw	r22, r14
    7c88:	8e e2       	ldi	r24, 0x2E	; 46
    7c8a:	90 e0       	ldi	r25, 0x00	; 0
    7c8c:	0e 94 8a 41 	call	0x8314	; 0x8314 <fputc>
    7c90:	1e 5f       	subi	r17, 0xFE	; 254
    7c92:	82 e0       	ldi	r24, 0x02	; 2
    7c94:	01 e0       	ldi	r16, 0x01	; 1
    7c96:	08 0f       	add	r16, r24
    7c98:	f3 01       	movw	r30, r6
    7c9a:	e8 0f       	add	r30, r24
    7c9c:	f1 1d       	adc	r31, r1
    7c9e:	80 81       	ld	r24, Z
    7ca0:	b7 01       	movw	r22, r14
    7ca2:	90 e0       	ldi	r25, 0x00	; 0
    7ca4:	0e 94 8a 41 	call	0x8314	; 0x8314 <fputc>
    7ca8:	80 2f       	mov	r24, r16
    7caa:	01 13       	cpse	r16, r17
    7cac:	f3 cf       	rjmp	.-26     	; 0x7c94 <vfprintf+0x392>
    7cae:	e6 cf       	rjmp	.-52     	; 0x7c7c <vfprintf+0x37a>
    7cb0:	85 e4       	ldi	r24, 0x45	; 69
    7cb2:	90 e0       	ldi	r25, 0x00	; 0
    7cb4:	b7 01       	movw	r22, r14
    7cb6:	0e 94 8a 41 	call	0x8314	; 0x8314 <fputc>
    7cba:	d7 fc       	sbrc	r13, 7
    7cbc:	06 c0       	rjmp	.+12     	; 0x7cca <vfprintf+0x3c8>
    7cbe:	c1 14       	cp	r12, r1
    7cc0:	d1 04       	cpc	r13, r1
    7cc2:	41 f4       	brne	.+16     	; 0x7cd4 <vfprintf+0x3d2>
    7cc4:	ec 85       	ldd	r30, Y+12	; 0x0c
    7cc6:	e4 ff       	sbrs	r30, 4
    7cc8:	05 c0       	rjmp	.+10     	; 0x7cd4 <vfprintf+0x3d2>
    7cca:	d1 94       	neg	r13
    7ccc:	c1 94       	neg	r12
    7cce:	d1 08       	sbc	r13, r1
    7cd0:	8d e2       	ldi	r24, 0x2D	; 45
    7cd2:	01 c0       	rjmp	.+2      	; 0x7cd6 <vfprintf+0x3d4>
    7cd4:	8b e2       	ldi	r24, 0x2B	; 43
    7cd6:	b7 01       	movw	r22, r14
    7cd8:	90 e0       	ldi	r25, 0x00	; 0
    7cda:	0e 94 8a 41 	call	0x8314	; 0x8314 <fputc>
    7cde:	80 e3       	ldi	r24, 0x30	; 48
    7ce0:	2a e0       	ldi	r18, 0x0A	; 10
    7ce2:	c2 16       	cp	r12, r18
    7ce4:	d1 04       	cpc	r13, r1
    7ce6:	2c f0       	brlt	.+10     	; 0x7cf2 <vfprintf+0x3f0>
    7ce8:	8f 5f       	subi	r24, 0xFF	; 255
    7cea:	fa e0       	ldi	r31, 0x0A	; 10
    7cec:	cf 1a       	sub	r12, r31
    7cee:	d1 08       	sbc	r13, r1
    7cf0:	f7 cf       	rjmp	.-18     	; 0x7ce0 <vfprintf+0x3de>
    7cf2:	b7 01       	movw	r22, r14
    7cf4:	90 e0       	ldi	r25, 0x00	; 0
    7cf6:	0e 94 8a 41 	call	0x8314	; 0x8314 <fputc>
    7cfa:	b7 01       	movw	r22, r14
    7cfc:	c6 01       	movw	r24, r12
    7cfe:	c0 96       	adiw	r24, 0x30	; 48
    7d00:	0e 94 8a 41 	call	0x8314	; 0x8314 <fputc>
    7d04:	54 c1       	rjmp	.+680    	; 0x7fae <vfprintf+0x6ac>
    7d06:	83 36       	cpi	r24, 0x63	; 99
    7d08:	31 f0       	breq	.+12     	; 0x7d16 <vfprintf+0x414>
    7d0a:	83 37       	cpi	r24, 0x73	; 115
    7d0c:	79 f0       	breq	.+30     	; 0x7d2c <vfprintf+0x42a>
    7d0e:	83 35       	cpi	r24, 0x53	; 83
    7d10:	09 f0       	breq	.+2      	; 0x7d14 <vfprintf+0x412>
    7d12:	56 c0       	rjmp	.+172    	; 0x7dc0 <vfprintf+0x4be>
    7d14:	20 c0       	rjmp	.+64     	; 0x7d56 <vfprintf+0x454>
    7d16:	56 01       	movw	r10, r12
    7d18:	32 e0       	ldi	r19, 0x02	; 2
    7d1a:	a3 0e       	add	r10, r19
    7d1c:	b1 1c       	adc	r11, r1
    7d1e:	f6 01       	movw	r30, r12
    7d20:	80 81       	ld	r24, Z
    7d22:	89 83       	std	Y+1, r24	; 0x01
    7d24:	01 e0       	ldi	r16, 0x01	; 1
    7d26:	10 e0       	ldi	r17, 0x00	; 0
    7d28:	63 01       	movw	r12, r6
    7d2a:	12 c0       	rjmp	.+36     	; 0x7d50 <vfprintf+0x44e>
    7d2c:	56 01       	movw	r10, r12
    7d2e:	f2 e0       	ldi	r31, 0x02	; 2
    7d30:	af 0e       	add	r10, r31
    7d32:	b1 1c       	adc	r11, r1
    7d34:	f6 01       	movw	r30, r12
    7d36:	c0 80       	ld	r12, Z
    7d38:	d1 80       	ldd	r13, Z+1	; 0x01
    7d3a:	96 fe       	sbrs	r9, 6
    7d3c:	03 c0       	rjmp	.+6      	; 0x7d44 <vfprintf+0x442>
    7d3e:	61 2f       	mov	r22, r17
    7d40:	70 e0       	ldi	r23, 0x00	; 0
    7d42:	02 c0       	rjmp	.+4      	; 0x7d48 <vfprintf+0x446>
    7d44:	6f ef       	ldi	r22, 0xFF	; 255
    7d46:	7f ef       	ldi	r23, 0xFF	; 255
    7d48:	c6 01       	movw	r24, r12
    7d4a:	0e 94 4f 41 	call	0x829e	; 0x829e <strnlen>
    7d4e:	8c 01       	movw	r16, r24
    7d50:	f9 2d       	mov	r31, r9
    7d52:	ff 77       	andi	r31, 0x7F	; 127
    7d54:	14 c0       	rjmp	.+40     	; 0x7d7e <vfprintf+0x47c>
    7d56:	56 01       	movw	r10, r12
    7d58:	22 e0       	ldi	r18, 0x02	; 2
    7d5a:	a2 0e       	add	r10, r18
    7d5c:	b1 1c       	adc	r11, r1
    7d5e:	f6 01       	movw	r30, r12
    7d60:	c0 80       	ld	r12, Z
    7d62:	d1 80       	ldd	r13, Z+1	; 0x01
    7d64:	96 fe       	sbrs	r9, 6
    7d66:	03 c0       	rjmp	.+6      	; 0x7d6e <vfprintf+0x46c>
    7d68:	61 2f       	mov	r22, r17
    7d6a:	70 e0       	ldi	r23, 0x00	; 0
    7d6c:	02 c0       	rjmp	.+4      	; 0x7d72 <vfprintf+0x470>
    7d6e:	6f ef       	ldi	r22, 0xFF	; 255
    7d70:	7f ef       	ldi	r23, 0xFF	; 255
    7d72:	c6 01       	movw	r24, r12
    7d74:	0e 94 2b 41 	call	0x8256	; 0x8256 <strnlen_P>
    7d78:	8c 01       	movw	r16, r24
    7d7a:	f9 2d       	mov	r31, r9
    7d7c:	f0 68       	ori	r31, 0x80	; 128
    7d7e:	9f 2e       	mov	r9, r31
    7d80:	f3 fd       	sbrc	r31, 3
    7d82:	1a c0       	rjmp	.+52     	; 0x7db8 <vfprintf+0x4b6>
    7d84:	85 2d       	mov	r24, r5
    7d86:	90 e0       	ldi	r25, 0x00	; 0
    7d88:	08 17       	cp	r16, r24
    7d8a:	19 07       	cpc	r17, r25
    7d8c:	a8 f4       	brcc	.+42     	; 0x7db8 <vfprintf+0x4b6>
    7d8e:	b7 01       	movw	r22, r14
    7d90:	80 e2       	ldi	r24, 0x20	; 32
    7d92:	90 e0       	ldi	r25, 0x00	; 0
    7d94:	0e 94 8a 41 	call	0x8314	; 0x8314 <fputc>
    7d98:	5a 94       	dec	r5
    7d9a:	f4 cf       	rjmp	.-24     	; 0x7d84 <vfprintf+0x482>
    7d9c:	f6 01       	movw	r30, r12
    7d9e:	97 fc       	sbrc	r9, 7
    7da0:	85 91       	lpm	r24, Z+
    7da2:	97 fe       	sbrs	r9, 7
    7da4:	81 91       	ld	r24, Z+
    7da6:	6f 01       	movw	r12, r30
    7da8:	b7 01       	movw	r22, r14
    7daa:	90 e0       	ldi	r25, 0x00	; 0
    7dac:	0e 94 8a 41 	call	0x8314	; 0x8314 <fputc>
    7db0:	51 10       	cpse	r5, r1
    7db2:	5a 94       	dec	r5
    7db4:	01 50       	subi	r16, 0x01	; 1
    7db6:	11 09       	sbc	r17, r1
    7db8:	01 15       	cp	r16, r1
    7dba:	11 05       	cpc	r17, r1
    7dbc:	79 f7       	brne	.-34     	; 0x7d9c <vfprintf+0x49a>
    7dbe:	f7 c0       	rjmp	.+494    	; 0x7fae <vfprintf+0x6ac>
    7dc0:	84 36       	cpi	r24, 0x64	; 100
    7dc2:	11 f0       	breq	.+4      	; 0x7dc8 <vfprintf+0x4c6>
    7dc4:	89 36       	cpi	r24, 0x69	; 105
    7dc6:	61 f5       	brne	.+88     	; 0x7e20 <vfprintf+0x51e>
    7dc8:	56 01       	movw	r10, r12
    7dca:	97 fe       	sbrs	r9, 7
    7dcc:	09 c0       	rjmp	.+18     	; 0x7de0 <vfprintf+0x4de>
    7dce:	24 e0       	ldi	r18, 0x04	; 4
    7dd0:	a2 0e       	add	r10, r18
    7dd2:	b1 1c       	adc	r11, r1
    7dd4:	f6 01       	movw	r30, r12
    7dd6:	60 81       	ld	r22, Z
    7dd8:	71 81       	ldd	r23, Z+1	; 0x01
    7dda:	82 81       	ldd	r24, Z+2	; 0x02
    7ddc:	93 81       	ldd	r25, Z+3	; 0x03
    7dde:	0a c0       	rjmp	.+20     	; 0x7df4 <vfprintf+0x4f2>
    7de0:	f2 e0       	ldi	r31, 0x02	; 2
    7de2:	af 0e       	add	r10, r31
    7de4:	b1 1c       	adc	r11, r1
    7de6:	f6 01       	movw	r30, r12
    7de8:	60 81       	ld	r22, Z
    7dea:	71 81       	ldd	r23, Z+1	; 0x01
    7dec:	07 2e       	mov	r0, r23
    7dee:	00 0c       	add	r0, r0
    7df0:	88 0b       	sbc	r24, r24
    7df2:	99 0b       	sbc	r25, r25
    7df4:	f9 2d       	mov	r31, r9
    7df6:	ff 76       	andi	r31, 0x6F	; 111
    7df8:	9f 2e       	mov	r9, r31
    7dfa:	97 ff       	sbrs	r25, 7
    7dfc:	09 c0       	rjmp	.+18     	; 0x7e10 <vfprintf+0x50e>
    7dfe:	90 95       	com	r25
    7e00:	80 95       	com	r24
    7e02:	70 95       	com	r23
    7e04:	61 95       	neg	r22
    7e06:	7f 4f       	sbci	r23, 0xFF	; 255
    7e08:	8f 4f       	sbci	r24, 0xFF	; 255
    7e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    7e0c:	f0 68       	ori	r31, 0x80	; 128
    7e0e:	9f 2e       	mov	r9, r31
    7e10:	2a e0       	ldi	r18, 0x0A	; 10
    7e12:	30 e0       	ldi	r19, 0x00	; 0
    7e14:	a3 01       	movw	r20, r6
    7e16:	0e 94 ef 41 	call	0x83de	; 0x83de <__ultoa_invert>
    7e1a:	c8 2e       	mov	r12, r24
    7e1c:	c6 18       	sub	r12, r6
    7e1e:	3f c0       	rjmp	.+126    	; 0x7e9e <vfprintf+0x59c>
    7e20:	09 2d       	mov	r16, r9
    7e22:	85 37       	cpi	r24, 0x75	; 117
    7e24:	21 f4       	brne	.+8      	; 0x7e2e <vfprintf+0x52c>
    7e26:	0f 7e       	andi	r16, 0xEF	; 239
    7e28:	2a e0       	ldi	r18, 0x0A	; 10
    7e2a:	30 e0       	ldi	r19, 0x00	; 0
    7e2c:	1d c0       	rjmp	.+58     	; 0x7e68 <vfprintf+0x566>
    7e2e:	09 7f       	andi	r16, 0xF9	; 249
    7e30:	8f 36       	cpi	r24, 0x6F	; 111
    7e32:	91 f0       	breq	.+36     	; 0x7e58 <vfprintf+0x556>
    7e34:	18 f4       	brcc	.+6      	; 0x7e3c <vfprintf+0x53a>
    7e36:	88 35       	cpi	r24, 0x58	; 88
    7e38:	59 f0       	breq	.+22     	; 0x7e50 <vfprintf+0x54e>
    7e3a:	c3 c0       	rjmp	.+390    	; 0x7fc2 <vfprintf+0x6c0>
    7e3c:	80 37       	cpi	r24, 0x70	; 112
    7e3e:	19 f0       	breq	.+6      	; 0x7e46 <vfprintf+0x544>
    7e40:	88 37       	cpi	r24, 0x78	; 120
    7e42:	11 f0       	breq	.+4      	; 0x7e48 <vfprintf+0x546>
    7e44:	be c0       	rjmp	.+380    	; 0x7fc2 <vfprintf+0x6c0>
    7e46:	00 61       	ori	r16, 0x10	; 16
    7e48:	04 ff       	sbrs	r16, 4
    7e4a:	09 c0       	rjmp	.+18     	; 0x7e5e <vfprintf+0x55c>
    7e4c:	04 60       	ori	r16, 0x04	; 4
    7e4e:	07 c0       	rjmp	.+14     	; 0x7e5e <vfprintf+0x55c>
    7e50:	94 fe       	sbrs	r9, 4
    7e52:	08 c0       	rjmp	.+16     	; 0x7e64 <vfprintf+0x562>
    7e54:	06 60       	ori	r16, 0x06	; 6
    7e56:	06 c0       	rjmp	.+12     	; 0x7e64 <vfprintf+0x562>
    7e58:	28 e0       	ldi	r18, 0x08	; 8
    7e5a:	30 e0       	ldi	r19, 0x00	; 0
    7e5c:	05 c0       	rjmp	.+10     	; 0x7e68 <vfprintf+0x566>
    7e5e:	20 e1       	ldi	r18, 0x10	; 16
    7e60:	30 e0       	ldi	r19, 0x00	; 0
    7e62:	02 c0       	rjmp	.+4      	; 0x7e68 <vfprintf+0x566>
    7e64:	20 e1       	ldi	r18, 0x10	; 16
    7e66:	32 e0       	ldi	r19, 0x02	; 2
    7e68:	56 01       	movw	r10, r12
    7e6a:	07 ff       	sbrs	r16, 7
    7e6c:	09 c0       	rjmp	.+18     	; 0x7e80 <vfprintf+0x57e>
    7e6e:	84 e0       	ldi	r24, 0x04	; 4
    7e70:	a8 0e       	add	r10, r24
    7e72:	b1 1c       	adc	r11, r1
    7e74:	f6 01       	movw	r30, r12
    7e76:	60 81       	ld	r22, Z
    7e78:	71 81       	ldd	r23, Z+1	; 0x01
    7e7a:	82 81       	ldd	r24, Z+2	; 0x02
    7e7c:	93 81       	ldd	r25, Z+3	; 0x03
    7e7e:	08 c0       	rjmp	.+16     	; 0x7e90 <vfprintf+0x58e>
    7e80:	f2 e0       	ldi	r31, 0x02	; 2
    7e82:	af 0e       	add	r10, r31
    7e84:	b1 1c       	adc	r11, r1
    7e86:	f6 01       	movw	r30, r12
    7e88:	60 81       	ld	r22, Z
    7e8a:	71 81       	ldd	r23, Z+1	; 0x01
    7e8c:	80 e0       	ldi	r24, 0x00	; 0
    7e8e:	90 e0       	ldi	r25, 0x00	; 0
    7e90:	a3 01       	movw	r20, r6
    7e92:	0e 94 ef 41 	call	0x83de	; 0x83de <__ultoa_invert>
    7e96:	c8 2e       	mov	r12, r24
    7e98:	c6 18       	sub	r12, r6
    7e9a:	0f 77       	andi	r16, 0x7F	; 127
    7e9c:	90 2e       	mov	r9, r16
    7e9e:	96 fe       	sbrs	r9, 6
    7ea0:	0b c0       	rjmp	.+22     	; 0x7eb8 <vfprintf+0x5b6>
    7ea2:	09 2d       	mov	r16, r9
    7ea4:	0e 7f       	andi	r16, 0xFE	; 254
    7ea6:	c1 16       	cp	r12, r17
    7ea8:	50 f4       	brcc	.+20     	; 0x7ebe <vfprintf+0x5bc>
    7eaa:	94 fe       	sbrs	r9, 4
    7eac:	0a c0       	rjmp	.+20     	; 0x7ec2 <vfprintf+0x5c0>
    7eae:	92 fc       	sbrc	r9, 2
    7eb0:	08 c0       	rjmp	.+16     	; 0x7ec2 <vfprintf+0x5c0>
    7eb2:	09 2d       	mov	r16, r9
    7eb4:	0e 7e       	andi	r16, 0xEE	; 238
    7eb6:	05 c0       	rjmp	.+10     	; 0x7ec2 <vfprintf+0x5c0>
    7eb8:	dc 2c       	mov	r13, r12
    7eba:	09 2d       	mov	r16, r9
    7ebc:	03 c0       	rjmp	.+6      	; 0x7ec4 <vfprintf+0x5c2>
    7ebe:	dc 2c       	mov	r13, r12
    7ec0:	01 c0       	rjmp	.+2      	; 0x7ec4 <vfprintf+0x5c2>
    7ec2:	d1 2e       	mov	r13, r17
    7ec4:	04 ff       	sbrs	r16, 4
    7ec6:	0d c0       	rjmp	.+26     	; 0x7ee2 <vfprintf+0x5e0>
    7ec8:	fe 01       	movw	r30, r28
    7eca:	ec 0d       	add	r30, r12
    7ecc:	f1 1d       	adc	r31, r1
    7ece:	80 81       	ld	r24, Z
    7ed0:	80 33       	cpi	r24, 0x30	; 48
    7ed2:	11 f4       	brne	.+4      	; 0x7ed8 <vfprintf+0x5d6>
    7ed4:	09 7e       	andi	r16, 0xE9	; 233
    7ed6:	09 c0       	rjmp	.+18     	; 0x7eea <vfprintf+0x5e8>
    7ed8:	02 ff       	sbrs	r16, 2
    7eda:	06 c0       	rjmp	.+12     	; 0x7ee8 <vfprintf+0x5e6>
    7edc:	d3 94       	inc	r13
    7ede:	d3 94       	inc	r13
    7ee0:	04 c0       	rjmp	.+8      	; 0x7eea <vfprintf+0x5e8>
    7ee2:	80 2f       	mov	r24, r16
    7ee4:	86 78       	andi	r24, 0x86	; 134
    7ee6:	09 f0       	breq	.+2      	; 0x7eea <vfprintf+0x5e8>
    7ee8:	d3 94       	inc	r13
    7eea:	03 fd       	sbrc	r16, 3
    7eec:	11 c0       	rjmp	.+34     	; 0x7f10 <vfprintf+0x60e>
    7eee:	00 ff       	sbrs	r16, 0
    7ef0:	06 c0       	rjmp	.+12     	; 0x7efe <vfprintf+0x5fc>
    7ef2:	1c 2d       	mov	r17, r12
    7ef4:	d5 14       	cp	r13, r5
    7ef6:	80 f4       	brcc	.+32     	; 0x7f18 <vfprintf+0x616>
    7ef8:	15 0d       	add	r17, r5
    7efa:	1d 19       	sub	r17, r13
    7efc:	0d c0       	rjmp	.+26     	; 0x7f18 <vfprintf+0x616>
    7efe:	d5 14       	cp	r13, r5
    7f00:	58 f4       	brcc	.+22     	; 0x7f18 <vfprintf+0x616>
    7f02:	b7 01       	movw	r22, r14
    7f04:	80 e2       	ldi	r24, 0x20	; 32
    7f06:	90 e0       	ldi	r25, 0x00	; 0
    7f08:	0e 94 8a 41 	call	0x8314	; 0x8314 <fputc>
    7f0c:	d3 94       	inc	r13
    7f0e:	f7 cf       	rjmp	.-18     	; 0x7efe <vfprintf+0x5fc>
    7f10:	d5 14       	cp	r13, r5
    7f12:	10 f4       	brcc	.+4      	; 0x7f18 <vfprintf+0x616>
    7f14:	5d 18       	sub	r5, r13
    7f16:	01 c0       	rjmp	.+2      	; 0x7f1a <vfprintf+0x618>
    7f18:	51 2c       	mov	r5, r1
    7f1a:	04 ff       	sbrs	r16, 4
    7f1c:	10 c0       	rjmp	.+32     	; 0x7f3e <vfprintf+0x63c>
    7f1e:	b7 01       	movw	r22, r14
    7f20:	80 e3       	ldi	r24, 0x30	; 48
    7f22:	90 e0       	ldi	r25, 0x00	; 0
    7f24:	0e 94 8a 41 	call	0x8314	; 0x8314 <fputc>
    7f28:	02 ff       	sbrs	r16, 2
    7f2a:	17 c0       	rjmp	.+46     	; 0x7f5a <vfprintf+0x658>
    7f2c:	01 fd       	sbrc	r16, 1
    7f2e:	03 c0       	rjmp	.+6      	; 0x7f36 <vfprintf+0x634>
    7f30:	88 e7       	ldi	r24, 0x78	; 120
    7f32:	90 e0       	ldi	r25, 0x00	; 0
    7f34:	02 c0       	rjmp	.+4      	; 0x7f3a <vfprintf+0x638>
    7f36:	88 e5       	ldi	r24, 0x58	; 88
    7f38:	90 e0       	ldi	r25, 0x00	; 0
    7f3a:	b7 01       	movw	r22, r14
    7f3c:	0c c0       	rjmp	.+24     	; 0x7f56 <vfprintf+0x654>
    7f3e:	80 2f       	mov	r24, r16
    7f40:	86 78       	andi	r24, 0x86	; 134
    7f42:	59 f0       	breq	.+22     	; 0x7f5a <vfprintf+0x658>
    7f44:	01 ff       	sbrs	r16, 1
    7f46:	02 c0       	rjmp	.+4      	; 0x7f4c <vfprintf+0x64a>
    7f48:	8b e2       	ldi	r24, 0x2B	; 43
    7f4a:	01 c0       	rjmp	.+2      	; 0x7f4e <vfprintf+0x64c>
    7f4c:	80 e2       	ldi	r24, 0x20	; 32
    7f4e:	07 fd       	sbrc	r16, 7
    7f50:	8d e2       	ldi	r24, 0x2D	; 45
    7f52:	b7 01       	movw	r22, r14
    7f54:	90 e0       	ldi	r25, 0x00	; 0
    7f56:	0e 94 8a 41 	call	0x8314	; 0x8314 <fputc>
    7f5a:	c1 16       	cp	r12, r17
    7f5c:	38 f4       	brcc	.+14     	; 0x7f6c <vfprintf+0x66a>
    7f5e:	b7 01       	movw	r22, r14
    7f60:	80 e3       	ldi	r24, 0x30	; 48
    7f62:	90 e0       	ldi	r25, 0x00	; 0
    7f64:	0e 94 8a 41 	call	0x8314	; 0x8314 <fputc>
    7f68:	11 50       	subi	r17, 0x01	; 1
    7f6a:	f7 cf       	rjmp	.-18     	; 0x7f5a <vfprintf+0x658>
    7f6c:	ca 94       	dec	r12
    7f6e:	f3 01       	movw	r30, r6
    7f70:	ec 0d       	add	r30, r12
    7f72:	f1 1d       	adc	r31, r1
    7f74:	80 81       	ld	r24, Z
    7f76:	b7 01       	movw	r22, r14
    7f78:	90 e0       	ldi	r25, 0x00	; 0
    7f7a:	0e 94 8a 41 	call	0x8314	; 0x8314 <fputc>
    7f7e:	c1 10       	cpse	r12, r1
    7f80:	f5 cf       	rjmp	.-22     	; 0x7f6c <vfprintf+0x66a>
    7f82:	15 c0       	rjmp	.+42     	; 0x7fae <vfprintf+0x6ac>
    7f84:	f4 e0       	ldi	r31, 0x04	; 4
    7f86:	f5 15       	cp	r31, r5
    7f88:	60 f5       	brcc	.+88     	; 0x7fe2 <vfprintf+0x6e0>
    7f8a:	84 e0       	ldi	r24, 0x04	; 4
    7f8c:	58 1a       	sub	r5, r24
    7f8e:	93 fe       	sbrs	r9, 3
    7f90:	1f c0       	rjmp	.+62     	; 0x7fd0 <vfprintf+0x6ce>
    7f92:	01 11       	cpse	r16, r1
    7f94:	27 c0       	rjmp	.+78     	; 0x7fe4 <vfprintf+0x6e2>
    7f96:	2c 85       	ldd	r18, Y+12	; 0x0c
    7f98:	23 ff       	sbrs	r18, 3
    7f9a:	2a c0       	rjmp	.+84     	; 0x7ff0 <vfprintf+0x6ee>
    7f9c:	00 e4       	ldi	r16, 0x40	; 64
    7f9e:	12 e0       	ldi	r17, 0x02	; 2
    7fa0:	39 2d       	mov	r19, r9
    7fa2:	30 71       	andi	r19, 0x10	; 16
    7fa4:	93 2e       	mov	r9, r19
    7fa6:	f8 01       	movw	r30, r16
    7fa8:	84 91       	lpm	r24, Z
    7faa:	81 11       	cpse	r24, r1
    7fac:	24 c0       	rjmp	.+72     	; 0x7ff6 <vfprintf+0x6f4>
    7fae:	55 20       	and	r5, r5
    7fb0:	09 f4       	brne	.+2      	; 0x7fb4 <vfprintf+0x6b2>
    7fb2:	e4 cc       	rjmp	.-1592   	; 0x797c <vfprintf+0x7a>
    7fb4:	b7 01       	movw	r22, r14
    7fb6:	80 e2       	ldi	r24, 0x20	; 32
    7fb8:	90 e0       	ldi	r25, 0x00	; 0
    7fba:	0e 94 8a 41 	call	0x8314	; 0x8314 <fputc>
    7fbe:	5a 94       	dec	r5
    7fc0:	f6 cf       	rjmp	.-20     	; 0x7fae <vfprintf+0x6ac>
    7fc2:	f7 01       	movw	r30, r14
    7fc4:	86 81       	ldd	r24, Z+6	; 0x06
    7fc6:	97 81       	ldd	r25, Z+7	; 0x07
    7fc8:	26 c0       	rjmp	.+76     	; 0x8016 <vfprintf+0x714>
    7fca:	8f ef       	ldi	r24, 0xFF	; 255
    7fcc:	9f ef       	ldi	r25, 0xFF	; 255
    7fce:	23 c0       	rjmp	.+70     	; 0x8016 <vfprintf+0x714>
    7fd0:	b7 01       	movw	r22, r14
    7fd2:	80 e2       	ldi	r24, 0x20	; 32
    7fd4:	90 e0       	ldi	r25, 0x00	; 0
    7fd6:	0e 94 8a 41 	call	0x8314	; 0x8314 <fputc>
    7fda:	5a 94       	dec	r5
    7fdc:	51 10       	cpse	r5, r1
    7fde:	f8 cf       	rjmp	.-16     	; 0x7fd0 <vfprintf+0x6ce>
    7fe0:	d8 cf       	rjmp	.-80     	; 0x7f92 <vfprintf+0x690>
    7fe2:	51 2c       	mov	r5, r1
    7fe4:	b7 01       	movw	r22, r14
    7fe6:	80 2f       	mov	r24, r16
    7fe8:	90 e0       	ldi	r25, 0x00	; 0
    7fea:	0e 94 8a 41 	call	0x8314	; 0x8314 <fputc>
    7fee:	d3 cf       	rjmp	.-90     	; 0x7f96 <vfprintf+0x694>
    7ff0:	04 e4       	ldi	r16, 0x44	; 68
    7ff2:	12 e0       	ldi	r17, 0x02	; 2
    7ff4:	d5 cf       	rjmp	.-86     	; 0x7fa0 <vfprintf+0x69e>
    7ff6:	91 10       	cpse	r9, r1
    7ff8:	80 52       	subi	r24, 0x20	; 32
    7ffa:	b7 01       	movw	r22, r14
    7ffc:	90 e0       	ldi	r25, 0x00	; 0
    7ffe:	0e 94 8a 41 	call	0x8314	; 0x8314 <fputc>
    8002:	0f 5f       	subi	r16, 0xFF	; 255
    8004:	1f 4f       	sbci	r17, 0xFF	; 255
    8006:	cf cf       	rjmp	.-98     	; 0x7fa6 <vfprintf+0x6a4>
    8008:	23 e0       	ldi	r18, 0x03	; 3
    800a:	25 15       	cp	r18, r5
    800c:	10 f4       	brcc	.+4      	; 0x8012 <vfprintf+0x710>
    800e:	83 e0       	ldi	r24, 0x03	; 3
    8010:	bd cf       	rjmp	.-134    	; 0x7f8c <vfprintf+0x68a>
    8012:	51 2c       	mov	r5, r1
    8014:	c0 cf       	rjmp	.-128    	; 0x7f96 <vfprintf+0x694>
    8016:	60 96       	adiw	r28, 0x10	; 16
    8018:	cd bf       	out	0x3d, r28	; 61
    801a:	de bf       	out	0x3e, r29	; 62
    801c:	df 91       	pop	r29
    801e:	cf 91       	pop	r28
    8020:	1f 91       	pop	r17
    8022:	0f 91       	pop	r16
    8024:	ff 90       	pop	r15
    8026:	ef 90       	pop	r14
    8028:	df 90       	pop	r13
    802a:	cf 90       	pop	r12
    802c:	bf 90       	pop	r11
    802e:	af 90       	pop	r10
    8030:	9f 90       	pop	r9
    8032:	8f 90       	pop	r8
    8034:	7f 90       	pop	r7
    8036:	6f 90       	pop	r6
    8038:	5f 90       	pop	r5
    803a:	4f 90       	pop	r4
    803c:	3f 90       	pop	r3
    803e:	2f 90       	pop	r2
    8040:	08 95       	ret

00008042 <__mulsi3>:
    8042:	db 01       	movw	r26, r22
    8044:	8f 93       	push	r24
    8046:	9f 93       	push	r25
    8048:	0e 94 39 40 	call	0x8072	; 0x8072 <__muluhisi3>
    804c:	bf 91       	pop	r27
    804e:	af 91       	pop	r26
    8050:	a2 9f       	mul	r26, r18
    8052:	80 0d       	add	r24, r0
    8054:	91 1d       	adc	r25, r1
    8056:	a3 9f       	mul	r26, r19
    8058:	90 0d       	add	r25, r0
    805a:	b2 9f       	mul	r27, r18
    805c:	90 0d       	add	r25, r0
    805e:	11 24       	eor	r1, r1
    8060:	08 95       	ret

00008062 <__tablejump2__>:
    8062:	ee 0f       	add	r30, r30
    8064:	ff 1f       	adc	r31, r31
    8066:	88 1f       	adc	r24, r24
    8068:	8b bf       	out	0x3b, r24	; 59
    806a:	07 90       	elpm	r0, Z+
    806c:	f6 91       	elpm	r31, Z
    806e:	e0 2d       	mov	r30, r0
    8070:	19 94       	eijmp

00008072 <__muluhisi3>:
    8072:	0e 94 44 40 	call	0x8088	; 0x8088 <__umulhisi3>
    8076:	a5 9f       	mul	r26, r21
    8078:	90 0d       	add	r25, r0
    807a:	b4 9f       	mul	r27, r20
    807c:	90 0d       	add	r25, r0
    807e:	a4 9f       	mul	r26, r20
    8080:	80 0d       	add	r24, r0
    8082:	91 1d       	adc	r25, r1
    8084:	11 24       	eor	r1, r1
    8086:	08 95       	ret

00008088 <__umulhisi3>:
    8088:	a2 9f       	mul	r26, r18
    808a:	b0 01       	movw	r22, r0
    808c:	b3 9f       	mul	r27, r19
    808e:	c0 01       	movw	r24, r0
    8090:	a3 9f       	mul	r26, r19
    8092:	70 0d       	add	r23, r0
    8094:	81 1d       	adc	r24, r1
    8096:	11 24       	eor	r1, r1
    8098:	91 1d       	adc	r25, r1
    809a:	b2 9f       	mul	r27, r18
    809c:	70 0d       	add	r23, r0
    809e:	81 1d       	adc	r24, r1
    80a0:	11 24       	eor	r1, r1
    80a2:	91 1d       	adc	r25, r1
    80a4:	08 95       	ret

000080a6 <__ftoa_engine>:
    80a6:	28 30       	cpi	r18, 0x08	; 8
    80a8:	08 f0       	brcs	.+2      	; 0x80ac <__ftoa_engine+0x6>
    80aa:	27 e0       	ldi	r18, 0x07	; 7
    80ac:	33 27       	eor	r19, r19
    80ae:	da 01       	movw	r26, r20
    80b0:	99 0f       	add	r25, r25
    80b2:	31 1d       	adc	r19, r1
    80b4:	87 fd       	sbrc	r24, 7
    80b6:	91 60       	ori	r25, 0x01	; 1
    80b8:	00 96       	adiw	r24, 0x00	; 0
    80ba:	61 05       	cpc	r22, r1
    80bc:	71 05       	cpc	r23, r1
    80be:	39 f4       	brne	.+14     	; 0x80ce <__ftoa_engine+0x28>
    80c0:	32 60       	ori	r19, 0x02	; 2
    80c2:	2e 5f       	subi	r18, 0xFE	; 254
    80c4:	3d 93       	st	X+, r19
    80c6:	30 e3       	ldi	r19, 0x30	; 48
    80c8:	2a 95       	dec	r18
    80ca:	e1 f7       	brne	.-8      	; 0x80c4 <__ftoa_engine+0x1e>
    80cc:	08 95       	ret
    80ce:	9f 3f       	cpi	r25, 0xFF	; 255
    80d0:	30 f0       	brcs	.+12     	; 0x80de <__ftoa_engine+0x38>
    80d2:	80 38       	cpi	r24, 0x80	; 128
    80d4:	71 05       	cpc	r23, r1
    80d6:	61 05       	cpc	r22, r1
    80d8:	09 f0       	breq	.+2      	; 0x80dc <__ftoa_engine+0x36>
    80da:	3c 5f       	subi	r19, 0xFC	; 252
    80dc:	3c 5f       	subi	r19, 0xFC	; 252
    80de:	3d 93       	st	X+, r19
    80e0:	91 30       	cpi	r25, 0x01	; 1
    80e2:	08 f0       	brcs	.+2      	; 0x80e6 <__ftoa_engine+0x40>
    80e4:	80 68       	ori	r24, 0x80	; 128
    80e6:	91 1d       	adc	r25, r1
    80e8:	df 93       	push	r29
    80ea:	cf 93       	push	r28
    80ec:	1f 93       	push	r17
    80ee:	0f 93       	push	r16
    80f0:	ff 92       	push	r15
    80f2:	ef 92       	push	r14
    80f4:	19 2f       	mov	r17, r25
    80f6:	98 7f       	andi	r25, 0xF8	; 248
    80f8:	96 95       	lsr	r25
    80fa:	e9 2f       	mov	r30, r25
    80fc:	96 95       	lsr	r25
    80fe:	96 95       	lsr	r25
    8100:	e9 0f       	add	r30, r25
    8102:	ff 27       	eor	r31, r31
    8104:	ee 55       	subi	r30, 0x5E	; 94
    8106:	fd 4f       	sbci	r31, 0xFD	; 253
    8108:	99 27       	eor	r25, r25
    810a:	33 27       	eor	r19, r19
    810c:	ee 24       	eor	r14, r14
    810e:	ff 24       	eor	r15, r15
    8110:	a7 01       	movw	r20, r14
    8112:	e7 01       	movw	r28, r14
    8114:	05 90       	lpm	r0, Z+
    8116:	08 94       	sec
    8118:	07 94       	ror	r0
    811a:	28 f4       	brcc	.+10     	; 0x8126 <__ftoa_engine+0x80>
    811c:	36 0f       	add	r19, r22
    811e:	e7 1e       	adc	r14, r23
    8120:	f8 1e       	adc	r15, r24
    8122:	49 1f       	adc	r20, r25
    8124:	51 1d       	adc	r21, r1
    8126:	66 0f       	add	r22, r22
    8128:	77 1f       	adc	r23, r23
    812a:	88 1f       	adc	r24, r24
    812c:	99 1f       	adc	r25, r25
    812e:	06 94       	lsr	r0
    8130:	a1 f7       	brne	.-24     	; 0x811a <__ftoa_engine+0x74>
    8132:	05 90       	lpm	r0, Z+
    8134:	07 94       	ror	r0
    8136:	28 f4       	brcc	.+10     	; 0x8142 <__ftoa_engine+0x9c>
    8138:	e7 0e       	add	r14, r23
    813a:	f8 1e       	adc	r15, r24
    813c:	49 1f       	adc	r20, r25
    813e:	56 1f       	adc	r21, r22
    8140:	c1 1d       	adc	r28, r1
    8142:	77 0f       	add	r23, r23
    8144:	88 1f       	adc	r24, r24
    8146:	99 1f       	adc	r25, r25
    8148:	66 1f       	adc	r22, r22
    814a:	06 94       	lsr	r0
    814c:	a1 f7       	brne	.-24     	; 0x8136 <__ftoa_engine+0x90>
    814e:	05 90       	lpm	r0, Z+
    8150:	07 94       	ror	r0
    8152:	28 f4       	brcc	.+10     	; 0x815e <__ftoa_engine+0xb8>
    8154:	f8 0e       	add	r15, r24
    8156:	49 1f       	adc	r20, r25
    8158:	56 1f       	adc	r21, r22
    815a:	c7 1f       	adc	r28, r23
    815c:	d1 1d       	adc	r29, r1
    815e:	88 0f       	add	r24, r24
    8160:	99 1f       	adc	r25, r25
    8162:	66 1f       	adc	r22, r22
    8164:	77 1f       	adc	r23, r23
    8166:	06 94       	lsr	r0
    8168:	a1 f7       	brne	.-24     	; 0x8152 <__ftoa_engine+0xac>
    816a:	05 90       	lpm	r0, Z+
    816c:	07 94       	ror	r0
    816e:	20 f4       	brcc	.+8      	; 0x8178 <__ftoa_engine+0xd2>
    8170:	49 0f       	add	r20, r25
    8172:	56 1f       	adc	r21, r22
    8174:	c7 1f       	adc	r28, r23
    8176:	d8 1f       	adc	r29, r24
    8178:	99 0f       	add	r25, r25
    817a:	66 1f       	adc	r22, r22
    817c:	77 1f       	adc	r23, r23
    817e:	88 1f       	adc	r24, r24
    8180:	06 94       	lsr	r0
    8182:	a9 f7       	brne	.-22     	; 0x816e <__ftoa_engine+0xc8>
    8184:	84 91       	lpm	r24, Z
    8186:	10 95       	com	r17
    8188:	17 70       	andi	r17, 0x07	; 7
    818a:	41 f0       	breq	.+16     	; 0x819c <__ftoa_engine+0xf6>
    818c:	d6 95       	lsr	r29
    818e:	c7 95       	ror	r28
    8190:	57 95       	ror	r21
    8192:	47 95       	ror	r20
    8194:	f7 94       	ror	r15
    8196:	e7 94       	ror	r14
    8198:	1a 95       	dec	r17
    819a:	c1 f7       	brne	.-16     	; 0x818c <__ftoa_engine+0xe6>
    819c:	e8 e4       	ldi	r30, 0x48	; 72
    819e:	f2 e0       	ldi	r31, 0x02	; 2
    81a0:	68 94       	set
    81a2:	15 90       	lpm	r1, Z+
    81a4:	15 91       	lpm	r17, Z+
    81a6:	35 91       	lpm	r19, Z+
    81a8:	65 91       	lpm	r22, Z+
    81aa:	95 91       	lpm	r25, Z+
    81ac:	05 90       	lpm	r0, Z+
    81ae:	7f e2       	ldi	r23, 0x2F	; 47
    81b0:	73 95       	inc	r23
    81b2:	e1 18       	sub	r14, r1
    81b4:	f1 0a       	sbc	r15, r17
    81b6:	43 0b       	sbc	r20, r19
    81b8:	56 0b       	sbc	r21, r22
    81ba:	c9 0b       	sbc	r28, r25
    81bc:	d0 09       	sbc	r29, r0
    81be:	c0 f7       	brcc	.-16     	; 0x81b0 <__ftoa_engine+0x10a>
    81c0:	e1 0c       	add	r14, r1
    81c2:	f1 1e       	adc	r15, r17
    81c4:	43 1f       	adc	r20, r19
    81c6:	56 1f       	adc	r21, r22
    81c8:	c9 1f       	adc	r28, r25
    81ca:	d0 1d       	adc	r29, r0
    81cc:	7e f4       	brtc	.+30     	; 0x81ec <__ftoa_engine+0x146>
    81ce:	70 33       	cpi	r23, 0x30	; 48
    81d0:	11 f4       	brne	.+4      	; 0x81d6 <__ftoa_engine+0x130>
    81d2:	8a 95       	dec	r24
    81d4:	e6 cf       	rjmp	.-52     	; 0x81a2 <__ftoa_engine+0xfc>
    81d6:	e8 94       	clt
    81d8:	01 50       	subi	r16, 0x01	; 1
    81da:	30 f0       	brcs	.+12     	; 0x81e8 <__ftoa_engine+0x142>
    81dc:	08 0f       	add	r16, r24
    81de:	0a f4       	brpl	.+2      	; 0x81e2 <__ftoa_engine+0x13c>
    81e0:	00 27       	eor	r16, r16
    81e2:	02 17       	cp	r16, r18
    81e4:	08 f4       	brcc	.+2      	; 0x81e8 <__ftoa_engine+0x142>
    81e6:	20 2f       	mov	r18, r16
    81e8:	23 95       	inc	r18
    81ea:	02 2f       	mov	r16, r18
    81ec:	7a 33       	cpi	r23, 0x3A	; 58
    81ee:	28 f0       	brcs	.+10     	; 0x81fa <__ftoa_engine+0x154>
    81f0:	79 e3       	ldi	r23, 0x39	; 57
    81f2:	7d 93       	st	X+, r23
    81f4:	2a 95       	dec	r18
    81f6:	e9 f7       	brne	.-6      	; 0x81f2 <__ftoa_engine+0x14c>
    81f8:	10 c0       	rjmp	.+32     	; 0x821a <__ftoa_engine+0x174>
    81fa:	7d 93       	st	X+, r23
    81fc:	2a 95       	dec	r18
    81fe:	89 f6       	brne	.-94     	; 0x81a2 <__ftoa_engine+0xfc>
    8200:	06 94       	lsr	r0
    8202:	97 95       	ror	r25
    8204:	67 95       	ror	r22
    8206:	37 95       	ror	r19
    8208:	17 95       	ror	r17
    820a:	17 94       	ror	r1
    820c:	e1 18       	sub	r14, r1
    820e:	f1 0a       	sbc	r15, r17
    8210:	43 0b       	sbc	r20, r19
    8212:	56 0b       	sbc	r21, r22
    8214:	c9 0b       	sbc	r28, r25
    8216:	d0 09       	sbc	r29, r0
    8218:	98 f0       	brcs	.+38     	; 0x8240 <__ftoa_engine+0x19a>
    821a:	23 95       	inc	r18
    821c:	7e 91       	ld	r23, -X
    821e:	73 95       	inc	r23
    8220:	7a 33       	cpi	r23, 0x3A	; 58
    8222:	08 f0       	brcs	.+2      	; 0x8226 <__ftoa_engine+0x180>
    8224:	70 e3       	ldi	r23, 0x30	; 48
    8226:	7c 93       	st	X, r23
    8228:	20 13       	cpse	r18, r16
    822a:	b8 f7       	brcc	.-18     	; 0x821a <__ftoa_engine+0x174>
    822c:	7e 91       	ld	r23, -X
    822e:	70 61       	ori	r23, 0x10	; 16
    8230:	7d 93       	st	X+, r23
    8232:	30 f0       	brcs	.+12     	; 0x8240 <__ftoa_engine+0x19a>
    8234:	83 95       	inc	r24
    8236:	71 e3       	ldi	r23, 0x31	; 49
    8238:	7d 93       	st	X+, r23
    823a:	70 e3       	ldi	r23, 0x30	; 48
    823c:	2a 95       	dec	r18
    823e:	e1 f7       	brne	.-8      	; 0x8238 <__ftoa_engine+0x192>
    8240:	11 24       	eor	r1, r1
    8242:	ef 90       	pop	r14
    8244:	ff 90       	pop	r15
    8246:	0f 91       	pop	r16
    8248:	1f 91       	pop	r17
    824a:	cf 91       	pop	r28
    824c:	df 91       	pop	r29
    824e:	99 27       	eor	r25, r25
    8250:	87 fd       	sbrc	r24, 7
    8252:	90 95       	com	r25
    8254:	08 95       	ret

00008256 <strnlen_P>:
    8256:	fc 01       	movw	r30, r24
    8258:	05 90       	lpm	r0, Z+
    825a:	61 50       	subi	r22, 0x01	; 1
    825c:	70 40       	sbci	r23, 0x00	; 0
    825e:	01 10       	cpse	r0, r1
    8260:	d8 f7       	brcc	.-10     	; 0x8258 <strnlen_P+0x2>
    8262:	80 95       	com	r24
    8264:	90 95       	com	r25
    8266:	8e 0f       	add	r24, r30
    8268:	9f 1f       	adc	r25, r31
    826a:	08 95       	ret

0000826c <memcpy>:
    826c:	fb 01       	movw	r30, r22
    826e:	dc 01       	movw	r26, r24
    8270:	02 c0       	rjmp	.+4      	; 0x8276 <memcpy+0xa>
    8272:	01 90       	ld	r0, Z+
    8274:	0d 92       	st	X+, r0
    8276:	41 50       	subi	r20, 0x01	; 1
    8278:	50 40       	sbci	r21, 0x00	; 0
    827a:	d8 f7       	brcc	.-10     	; 0x8272 <memcpy+0x6>
    827c:	08 95       	ret

0000827e <memset>:
    827e:	dc 01       	movw	r26, r24
    8280:	01 c0       	rjmp	.+2      	; 0x8284 <memset+0x6>
    8282:	6d 93       	st	X+, r22
    8284:	41 50       	subi	r20, 0x01	; 1
    8286:	50 40       	sbci	r21, 0x00	; 0
    8288:	e0 f7       	brcc	.-8      	; 0x8282 <memset+0x4>
    828a:	08 95       	ret

0000828c <strlen>:
    828c:	fc 01       	movw	r30, r24
    828e:	01 90       	ld	r0, Z+
    8290:	00 20       	and	r0, r0
    8292:	e9 f7       	brne	.-6      	; 0x828e <strlen+0x2>
    8294:	80 95       	com	r24
    8296:	90 95       	com	r25
    8298:	8e 0f       	add	r24, r30
    829a:	9f 1f       	adc	r25, r31
    829c:	08 95       	ret

0000829e <strnlen>:
    829e:	fc 01       	movw	r30, r24
    82a0:	61 50       	subi	r22, 0x01	; 1
    82a2:	70 40       	sbci	r23, 0x00	; 0
    82a4:	01 90       	ld	r0, Z+
    82a6:	01 10       	cpse	r0, r1
    82a8:	d8 f7       	brcc	.-10     	; 0x82a0 <strnlen+0x2>
    82aa:	80 95       	com	r24
    82ac:	90 95       	com	r25
    82ae:	8e 0f       	add	r24, r30
    82b0:	9f 1f       	adc	r25, r31
    82b2:	08 95       	ret

000082b4 <itoa>:
    82b4:	45 32       	cpi	r20, 0x25	; 37
    82b6:	51 05       	cpc	r21, r1
    82b8:	20 f4       	brcc	.+8      	; 0x82c2 <itoa+0xe>
    82ba:	42 30       	cpi	r20, 0x02	; 2
    82bc:	10 f0       	brcs	.+4      	; 0x82c2 <itoa+0xe>
    82be:	0c 94 65 41 	jmp	0x82ca	; 0x82ca <__itoa_ncheck>
    82c2:	fb 01       	movw	r30, r22
    82c4:	10 82       	st	Z, r1
    82c6:	cb 01       	movw	r24, r22
    82c8:	08 95       	ret

000082ca <__itoa_ncheck>:
    82ca:	bb 27       	eor	r27, r27
    82cc:	4a 30       	cpi	r20, 0x0A	; 10
    82ce:	31 f4       	brne	.+12     	; 0x82dc <__itoa_ncheck+0x12>
    82d0:	99 23       	and	r25, r25
    82d2:	22 f4       	brpl	.+8      	; 0x82dc <__itoa_ncheck+0x12>
    82d4:	bd e2       	ldi	r27, 0x2D	; 45
    82d6:	90 95       	com	r25
    82d8:	81 95       	neg	r24
    82da:	9f 4f       	sbci	r25, 0xFF	; 255
    82dc:	0c 94 71 41 	jmp	0x82e2	; 0x82e2 <__utoa_common>

000082e0 <__utoa_ncheck>:
    82e0:	bb 27       	eor	r27, r27

000082e2 <__utoa_common>:
    82e2:	fb 01       	movw	r30, r22
    82e4:	55 27       	eor	r21, r21
    82e6:	aa 27       	eor	r26, r26
    82e8:	88 0f       	add	r24, r24
    82ea:	99 1f       	adc	r25, r25
    82ec:	aa 1f       	adc	r26, r26
    82ee:	a4 17       	cp	r26, r20
    82f0:	10 f0       	brcs	.+4      	; 0x82f6 <__utoa_common+0x14>
    82f2:	a4 1b       	sub	r26, r20
    82f4:	83 95       	inc	r24
    82f6:	50 51       	subi	r21, 0x10	; 16
    82f8:	b9 f7       	brne	.-18     	; 0x82e8 <__utoa_common+0x6>
    82fa:	a0 5d       	subi	r26, 0xD0	; 208
    82fc:	aa 33       	cpi	r26, 0x3A	; 58
    82fe:	08 f0       	brcs	.+2      	; 0x8302 <__utoa_common+0x20>
    8300:	a9 5d       	subi	r26, 0xD9	; 217
    8302:	a1 93       	st	Z+, r26
    8304:	00 97       	sbiw	r24, 0x00	; 0
    8306:	79 f7       	brne	.-34     	; 0x82e6 <__utoa_common+0x4>
    8308:	b1 11       	cpse	r27, r1
    830a:	b1 93       	st	Z+, r27
    830c:	11 92       	st	Z+, r1
    830e:	cb 01       	movw	r24, r22
    8310:	0c 94 4d 42 	jmp	0x849a	; 0x849a <strrev>

00008314 <fputc>:
    8314:	0f 93       	push	r16
    8316:	1f 93       	push	r17
    8318:	cf 93       	push	r28
    831a:	df 93       	push	r29
    831c:	fb 01       	movw	r30, r22
    831e:	23 81       	ldd	r18, Z+3	; 0x03
    8320:	21 fd       	sbrc	r18, 1
    8322:	03 c0       	rjmp	.+6      	; 0x832a <fputc+0x16>
    8324:	8f ef       	ldi	r24, 0xFF	; 255
    8326:	9f ef       	ldi	r25, 0xFF	; 255
    8328:	2c c0       	rjmp	.+88     	; 0x8382 <fputc+0x6e>
    832a:	22 ff       	sbrs	r18, 2
    832c:	16 c0       	rjmp	.+44     	; 0x835a <fputc+0x46>
    832e:	46 81       	ldd	r20, Z+6	; 0x06
    8330:	57 81       	ldd	r21, Z+7	; 0x07
    8332:	24 81       	ldd	r18, Z+4	; 0x04
    8334:	35 81       	ldd	r19, Z+5	; 0x05
    8336:	42 17       	cp	r20, r18
    8338:	53 07       	cpc	r21, r19
    833a:	44 f4       	brge	.+16     	; 0x834c <fputc+0x38>
    833c:	a0 81       	ld	r26, Z
    833e:	b1 81       	ldd	r27, Z+1	; 0x01
    8340:	9d 01       	movw	r18, r26
    8342:	2f 5f       	subi	r18, 0xFF	; 255
    8344:	3f 4f       	sbci	r19, 0xFF	; 255
    8346:	20 83       	st	Z, r18
    8348:	31 83       	std	Z+1, r19	; 0x01
    834a:	8c 93       	st	X, r24
    834c:	26 81       	ldd	r18, Z+6	; 0x06
    834e:	37 81       	ldd	r19, Z+7	; 0x07
    8350:	2f 5f       	subi	r18, 0xFF	; 255
    8352:	3f 4f       	sbci	r19, 0xFF	; 255
    8354:	26 83       	std	Z+6, r18	; 0x06
    8356:	37 83       	std	Z+7, r19	; 0x07
    8358:	14 c0       	rjmp	.+40     	; 0x8382 <fputc+0x6e>
    835a:	8b 01       	movw	r16, r22
    835c:	ec 01       	movw	r28, r24
    835e:	fb 01       	movw	r30, r22
    8360:	00 84       	ldd	r0, Z+8	; 0x08
    8362:	f1 85       	ldd	r31, Z+9	; 0x09
    8364:	e0 2d       	mov	r30, r0
    8366:	19 95       	eicall
    8368:	89 2b       	or	r24, r25
    836a:	e1 f6       	brne	.-72     	; 0x8324 <fputc+0x10>
    836c:	d8 01       	movw	r26, r16
    836e:	16 96       	adiw	r26, 0x06	; 6
    8370:	8d 91       	ld	r24, X+
    8372:	9c 91       	ld	r25, X
    8374:	17 97       	sbiw	r26, 0x07	; 7
    8376:	01 96       	adiw	r24, 0x01	; 1
    8378:	16 96       	adiw	r26, 0x06	; 6
    837a:	8d 93       	st	X+, r24
    837c:	9c 93       	st	X, r25
    837e:	17 97       	sbiw	r26, 0x07	; 7
    8380:	ce 01       	movw	r24, r28
    8382:	df 91       	pop	r29
    8384:	cf 91       	pop	r28
    8386:	1f 91       	pop	r17
    8388:	0f 91       	pop	r16
    838a:	08 95       	ret

0000838c <sprintf>:
    838c:	0f 93       	push	r16
    838e:	1f 93       	push	r17
    8390:	cf 93       	push	r28
    8392:	df 93       	push	r29
    8394:	cd b7       	in	r28, 0x3d	; 61
    8396:	de b7       	in	r29, 0x3e	; 62
    8398:	2e 97       	sbiw	r28, 0x0e	; 14
    839a:	cd bf       	out	0x3d, r28	; 61
    839c:	de bf       	out	0x3e, r29	; 62
    839e:	0e 89       	ldd	r16, Y+22	; 0x16
    83a0:	1f 89       	ldd	r17, Y+23	; 0x17
    83a2:	86 e0       	ldi	r24, 0x06	; 6
    83a4:	8c 83       	std	Y+4, r24	; 0x04
    83a6:	09 83       	std	Y+1, r16	; 0x01
    83a8:	1a 83       	std	Y+2, r17	; 0x02
    83aa:	8f ef       	ldi	r24, 0xFF	; 255
    83ac:	9f e7       	ldi	r25, 0x7F	; 127
    83ae:	8d 83       	std	Y+5, r24	; 0x05
    83b0:	9e 83       	std	Y+6, r25	; 0x06
    83b2:	ae 01       	movw	r20, r28
    83b4:	46 5e       	subi	r20, 0xE6	; 230
    83b6:	5f 4f       	sbci	r21, 0xFF	; 255
    83b8:	68 8d       	ldd	r22, Y+24	; 0x18
    83ba:	79 8d       	ldd	r23, Y+25	; 0x19
    83bc:	ce 01       	movw	r24, r28
    83be:	01 96       	adiw	r24, 0x01	; 1
    83c0:	0e 94 81 3c 	call	0x7902	; 0x7902 <vfprintf>
    83c4:	ef 81       	ldd	r30, Y+7	; 0x07
    83c6:	f8 85       	ldd	r31, Y+8	; 0x08
    83c8:	e0 0f       	add	r30, r16
    83ca:	f1 1f       	adc	r31, r17
    83cc:	10 82       	st	Z, r1
    83ce:	2e 96       	adiw	r28, 0x0e	; 14
    83d0:	cd bf       	out	0x3d, r28	; 61
    83d2:	de bf       	out	0x3e, r29	; 62
    83d4:	df 91       	pop	r29
    83d6:	cf 91       	pop	r28
    83d8:	1f 91       	pop	r17
    83da:	0f 91       	pop	r16
    83dc:	08 95       	ret

000083de <__ultoa_invert>:
    83de:	fa 01       	movw	r30, r20
    83e0:	aa 27       	eor	r26, r26
    83e2:	28 30       	cpi	r18, 0x08	; 8
    83e4:	51 f1       	breq	.+84     	; 0x843a <__ultoa_invert+0x5c>
    83e6:	20 31       	cpi	r18, 0x10	; 16
    83e8:	81 f1       	breq	.+96     	; 0x844a <__ultoa_invert+0x6c>
    83ea:	e8 94       	clt
    83ec:	6f 93       	push	r22
    83ee:	6e 7f       	andi	r22, 0xFE	; 254
    83f0:	6e 5f       	subi	r22, 0xFE	; 254
    83f2:	7f 4f       	sbci	r23, 0xFF	; 255
    83f4:	8f 4f       	sbci	r24, 0xFF	; 255
    83f6:	9f 4f       	sbci	r25, 0xFF	; 255
    83f8:	af 4f       	sbci	r26, 0xFF	; 255
    83fa:	b1 e0       	ldi	r27, 0x01	; 1
    83fc:	3e d0       	rcall	.+124    	; 0x847a <__ultoa_invert+0x9c>
    83fe:	b4 e0       	ldi	r27, 0x04	; 4
    8400:	3c d0       	rcall	.+120    	; 0x847a <__ultoa_invert+0x9c>
    8402:	67 0f       	add	r22, r23
    8404:	78 1f       	adc	r23, r24
    8406:	89 1f       	adc	r24, r25
    8408:	9a 1f       	adc	r25, r26
    840a:	a1 1d       	adc	r26, r1
    840c:	68 0f       	add	r22, r24
    840e:	79 1f       	adc	r23, r25
    8410:	8a 1f       	adc	r24, r26
    8412:	91 1d       	adc	r25, r1
    8414:	a1 1d       	adc	r26, r1
    8416:	6a 0f       	add	r22, r26
    8418:	71 1d       	adc	r23, r1
    841a:	81 1d       	adc	r24, r1
    841c:	91 1d       	adc	r25, r1
    841e:	a1 1d       	adc	r26, r1
    8420:	20 d0       	rcall	.+64     	; 0x8462 <__ultoa_invert+0x84>
    8422:	09 f4       	brne	.+2      	; 0x8426 <__ultoa_invert+0x48>
    8424:	68 94       	set
    8426:	3f 91       	pop	r19
    8428:	2a e0       	ldi	r18, 0x0A	; 10
    842a:	26 9f       	mul	r18, r22
    842c:	11 24       	eor	r1, r1
    842e:	30 19       	sub	r19, r0
    8430:	30 5d       	subi	r19, 0xD0	; 208
    8432:	31 93       	st	Z+, r19
    8434:	de f6       	brtc	.-74     	; 0x83ec <__ultoa_invert+0xe>
    8436:	cf 01       	movw	r24, r30
    8438:	08 95       	ret
    843a:	46 2f       	mov	r20, r22
    843c:	47 70       	andi	r20, 0x07	; 7
    843e:	40 5d       	subi	r20, 0xD0	; 208
    8440:	41 93       	st	Z+, r20
    8442:	b3 e0       	ldi	r27, 0x03	; 3
    8444:	0f d0       	rcall	.+30     	; 0x8464 <__ultoa_invert+0x86>
    8446:	c9 f7       	brne	.-14     	; 0x843a <__ultoa_invert+0x5c>
    8448:	f6 cf       	rjmp	.-20     	; 0x8436 <__ultoa_invert+0x58>
    844a:	46 2f       	mov	r20, r22
    844c:	4f 70       	andi	r20, 0x0F	; 15
    844e:	40 5d       	subi	r20, 0xD0	; 208
    8450:	4a 33       	cpi	r20, 0x3A	; 58
    8452:	18 f0       	brcs	.+6      	; 0x845a <__ultoa_invert+0x7c>
    8454:	49 5d       	subi	r20, 0xD9	; 217
    8456:	31 fd       	sbrc	r19, 1
    8458:	40 52       	subi	r20, 0x20	; 32
    845a:	41 93       	st	Z+, r20
    845c:	02 d0       	rcall	.+4      	; 0x8462 <__ultoa_invert+0x84>
    845e:	a9 f7       	brne	.-22     	; 0x844a <__ultoa_invert+0x6c>
    8460:	ea cf       	rjmp	.-44     	; 0x8436 <__ultoa_invert+0x58>
    8462:	b4 e0       	ldi	r27, 0x04	; 4
    8464:	a6 95       	lsr	r26
    8466:	97 95       	ror	r25
    8468:	87 95       	ror	r24
    846a:	77 95       	ror	r23
    846c:	67 95       	ror	r22
    846e:	ba 95       	dec	r27
    8470:	c9 f7       	brne	.-14     	; 0x8464 <__ultoa_invert+0x86>
    8472:	00 97       	sbiw	r24, 0x00	; 0
    8474:	61 05       	cpc	r22, r1
    8476:	71 05       	cpc	r23, r1
    8478:	08 95       	ret
    847a:	9b 01       	movw	r18, r22
    847c:	ac 01       	movw	r20, r24
    847e:	0a 2e       	mov	r0, r26
    8480:	06 94       	lsr	r0
    8482:	57 95       	ror	r21
    8484:	47 95       	ror	r20
    8486:	37 95       	ror	r19
    8488:	27 95       	ror	r18
    848a:	ba 95       	dec	r27
    848c:	c9 f7       	brne	.-14     	; 0x8480 <__ultoa_invert+0xa2>
    848e:	62 0f       	add	r22, r18
    8490:	73 1f       	adc	r23, r19
    8492:	84 1f       	adc	r24, r20
    8494:	95 1f       	adc	r25, r21
    8496:	a0 1d       	adc	r26, r0
    8498:	08 95       	ret

0000849a <strrev>:
    849a:	dc 01       	movw	r26, r24
    849c:	fc 01       	movw	r30, r24
    849e:	67 2f       	mov	r22, r23
    84a0:	71 91       	ld	r23, Z+
    84a2:	77 23       	and	r23, r23
    84a4:	e1 f7       	brne	.-8      	; 0x849e <strrev+0x4>
    84a6:	32 97       	sbiw	r30, 0x02	; 2
    84a8:	04 c0       	rjmp	.+8      	; 0x84b2 <strrev+0x18>
    84aa:	7c 91       	ld	r23, X
    84ac:	6d 93       	st	X+, r22
    84ae:	70 83       	st	Z, r23
    84b0:	62 91       	ld	r22, -Z
    84b2:	ae 17       	cp	r26, r30
    84b4:	bf 07       	cpc	r27, r31
    84b6:	c8 f3       	brcs	.-14     	; 0x84aa <strrev+0x10>
    84b8:	08 95       	ret

000084ba <_exit>:
    84ba:	f8 94       	cli

000084bc <__stop_program>:
    84bc:	ff cf       	rjmp	.-2      	; 0x84bc <__stop_program>
