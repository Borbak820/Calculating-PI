
Calculating-PI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000060e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00802000  000060e8  0000617c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c83  0080204c  0080204c  000061c8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000061c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007b0  00000000  00000000  00006264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ad4e  00000000  00000000  00006a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004534  00000000  00000000  00011762  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005247  00000000  00000000  00015c96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001df8  00000000  00000000  0001aee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000543e  00000000  00000000  0001ccd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003fb5  00000000  00000000  00022116  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006e8  00000000  00000000  000260cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__ctors_end>
       4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
       8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
       c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      10:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      14:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      18:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      1c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      20:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      24:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      28:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      2c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      30:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      34:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      38:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__vector_14>
      3c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      40:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      44:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      48:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      4c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      50:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      54:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      58:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      5c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      60:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      64:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      68:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      6c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      70:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      74:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      78:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      7c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      80:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      84:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      88:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      8c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      90:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      94:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      98:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      9c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      a0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      a4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      a8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      ac:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      b0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      b4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      b8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      bc:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      c0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      c4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      c8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      cc:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      d0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      d4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      d8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      dc:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      e0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      e4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      e8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      ec:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      f0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      f4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      f8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      fc:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     100:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     104:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     108:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     10c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     110:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     114:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     118:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     11c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     120:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     124:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     128:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     12c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     130:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     134:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     138:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     13c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     140:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     144:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     148:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     14c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     150:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     154:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     158:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     15c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     160:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     164:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     168:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     16c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     170:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     174:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     178:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     17c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     180:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     184:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     188:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     18c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     190:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     194:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     198:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     19c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1a0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1a4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1a8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1ac:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1b0:	0c 94 38 20 	jmp	0x4070	; 0x4070 <__vector_108>
     1b4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1b8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1bc:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1c0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1c4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1c8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1cc:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1d0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1d4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1d8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1dc:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1e0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1e4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1e8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1ec:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1f0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1f4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1f8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1fc:	fd 1c       	adc	r15, r13
     1fe:	fd 1c       	adc	r15, r13
     200:	fd 1c       	adc	r15, r13
     202:	84 1d       	adc	r24, r4
     204:	50 1d       	adc	r21, r0
     206:	7e 1d       	adc	r23, r14
     208:	fd 1c       	adc	r15, r13
     20a:	fd 1c       	adc	r15, r13
     20c:	84 1d       	adc	r24, r4
     20e:	50 1d       	adc	r21, r0
     210:	07 63       	ori	r16, 0x37	; 55
     212:	42 36       	cpi	r20, 0x62	; 98
     214:	b7 9b       	sbis	0x16, 7	; 22
     216:	d8 a7       	std	Y+40, r29	; 0x28
     218:	1a 39       	cpi	r17, 0x9A	; 154
     21a:	68 56       	subi	r22, 0x68	; 104
     21c:	18 ae       	std	Y+56, r1	; 0x38
     21e:	ba ab       	std	Y+50, r27	; 0x32
     220:	55 8c       	ldd	r5, Z+29	; 0x1d
     222:	1d 3c       	cpi	r17, 0xCD	; 205
     224:	b7 cc       	rjmp	.-1682   	; 0xfffffb94 <__eeprom_end+0xff7efb94>
     226:	57 63       	ori	r21, 0x37	; 55
     228:	bd 6d       	ori	r27, 0xDD	; 221
     22a:	ed fd       	.word	0xfded	; ????
     22c:	75 3e       	cpi	r23, 0xE5	; 229
     22e:	f6 17       	cp	r31, r22
     230:	72 31       	cpi	r23, 0x12	; 18
     232:	bf 00       	.word	0x00bf	; ????
     234:	00 00       	nop
     236:	80 3f       	cpi	r24, 0xF0	; 240
     238:	08 00       	.word	0x0008	; ????
     23a:	00 00       	nop
     23c:	be 92       	st	-X, r11
     23e:	24 49       	sbci	r18, 0x94	; 148
     240:	12 3e       	cpi	r17, 0xE2	; 226
     242:	ab aa       	std	Y+51, r10	; 0x33
     244:	aa 2a       	or	r10, r26
     246:	be cd       	rjmp	.-1156   	; 0xfffffdc4 <__eeprom_end+0xff7efdc4>
     248:	cc cc       	rjmp	.-1640   	; 0xfffffbe2 <__eeprom_end+0xff7efbe2>
     24a:	4c 3e       	cpi	r20, 0xEC	; 236
     24c:	00 00       	nop
     24e:	00 80       	ld	r0, Z
     250:	be ab       	std	Y+54, r27	; 0x36
     252:	aa aa       	std	Y+50, r10	; 0x32
     254:	aa 3e       	cpi	r26, 0xEA	; 234
     256:	00 00       	nop
     258:	00 00       	nop
     25a:	bf 00       	.word	0x00bf	; ????
     25c:	00 00       	nop
     25e:	80 3f       	cpi	r24, 0xF0	; 240
     260:	00 00       	nop
     262:	00 00       	nop
     264:	00 08       	sbc	r0, r0
     266:	41 78       	andi	r20, 0x81	; 129
     268:	d3 bb       	out	0x13, r29	; 19
     26a:	43 87       	std	Z+11, r20	; 0x0b
     26c:	d1 13       	cpse	r29, r17
     26e:	3d 19       	sub	r19, r13
     270:	0e 3c       	cpi	r16, 0xCE	; 206
     272:	c3 bd       	out	0x23, r28	; 35
     274:	42 82       	std	Z+2, r4	; 0x02
     276:	ad 2b       	or	r26, r29
     278:	3e 68       	ori	r19, 0x8E	; 142
     27a:	ec 82       	std	Y+4, r14	; 0x04
     27c:	76 be       	out	0x36, r7	; 54
     27e:	d9 8f       	std	Y+25, r29	; 0x19
     280:	e1 a9       	ldd	r30, Z+49	; 0x31
     282:	3e 4c       	sbci	r19, 0xCE	; 206
     284:	80 ef       	ldi	r24, 0xF0	; 240
     286:	ff be       	out	0x3f, r15	; 63
     288:	01 c4       	rjmp	.+2050   	; 0xa8c <xEventGroupSetBits+0x17e>
     28a:	ff 7f       	andi	r31, 0xFF	; 255
     28c:	3f 00       	.word	0x003f	; ????
     28e:	00 00       	nop
	...

00000292 <__trampolines_start>:
     292:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <prvProcessReceivedCommands+0x1d0>
     296:	0c 94 38 18 	jmp	0x3070	; 0x3070 <prvIdleTask>
     29a:	0c 94 fd 1c 	jmp	0x39fa	; 0x39fa <prvProcessReceivedCommands+0xce>
     29e:	0c 94 df 1a 	jmp	0x35be	; 0x35be <prvTimerTask>
     2a2:	0c 94 84 1d 	jmp	0x3b08	; 0x3b08 <prvProcessReceivedCommands+0x1dc>
     2a6:	0c 94 cb 22 	jmp	0x4596	; 0x4596 <vDisplayUpdateTask>
     2aa:	0c 94 64 1f 	jmp	0x3ec8	; 0x3ec8 <vInterface>
     2ae:	0c 94 b5 1f 	jmp	0x3f6a	; 0x3f6a <vLeibniz>
     2b2:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <vEventGroupSetBitsCallback>
     2b6:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <prvProcessReceivedCommands+0x174>

000002ba <__ctors_end>:
     2ba:	11 24       	eor	r1, r1
     2bc:	1f be       	out	0x3f, r1	; 63
     2be:	cf ef       	ldi	r28, 0xFF	; 255
     2c0:	cd bf       	out	0x3d, r28	; 61
     2c2:	df e3       	ldi	r29, 0x3F	; 63
     2c4:	de bf       	out	0x3e, r29	; 62
     2c6:	00 e0       	ldi	r16, 0x00	; 0
     2c8:	0c bf       	out	0x3c, r16	; 60

000002ca <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     2ca:	ef ec       	ldi	r30, 0xCF	; 207
     2cc:	fc e2       	ldi	r31, 0x2C	; 44
     2ce:	8a ea       	ldi	r24, 0xAA	; 170
     2d0:	90 e4       	ldi	r25, 0x40	; 64
     2d2:	81 93       	st	Z+, r24
     2d4:	e0 30       	cpi	r30, 0x00	; 0
     2d6:	f9 07       	cpc	r31, r25
     2d8:	e0 f3       	brcs	.-8      	; 0x2d2 <init_mem+0x8>
	...

000002dc <__do_copy_data>:
     2dc:	10 e2       	ldi	r17, 0x20	; 32
     2de:	a0 e0       	ldi	r26, 0x00	; 0
     2e0:	b0 e2       	ldi	r27, 0x20	; 32
     2e2:	e8 ee       	ldi	r30, 0xE8	; 232
     2e4:	f0 e6       	ldi	r31, 0x60	; 96
     2e6:	00 e0       	ldi	r16, 0x00	; 0
     2e8:	0b bf       	out	0x3b, r16	; 59
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <__do_copy_data+0x14>
     2ec:	07 90       	elpm	r0, Z+
     2ee:	0d 92       	st	X+, r0
     2f0:	ac 34       	cpi	r26, 0x4C	; 76
     2f2:	b1 07       	cpc	r27, r17
     2f4:	d9 f7       	brne	.-10     	; 0x2ec <__do_copy_data+0x10>

000002f6 <__do_clear_bss>:
     2f6:	2c e2       	ldi	r18, 0x2C	; 44
     2f8:	ac e4       	ldi	r26, 0x4C	; 76
     2fa:	b0 e2       	ldi	r27, 0x20	; 32
     2fc:	01 c0       	rjmp	.+2      	; 0x300 <.do_clear_bss_start>

000002fe <.do_clear_bss_loop>:
     2fe:	1d 92       	st	X+, r1

00000300 <.do_clear_bss_start>:
     300:	af 3c       	cpi	r26, 0xCF	; 207
     302:	b2 07       	cpc	r27, r18
     304:	e1 f7       	brne	.-8      	; 0x2fe <.do_clear_bss_loop>
     306:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <main>
     30a:	0c 94 72 30 	jmp	0x60e4	; 0x60e4 <_exit>

0000030e <__bad_interrupt>:
     30e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000312 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     312:	0f 93       	push	r16
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	00 d0       	rcall	.+0      	; 0x31a <CCPWrite+0x8>
     31a:	00 d0       	rcall	.+0      	; 0x31c <CCPWrite+0xa>
     31c:	cd b7       	in	r28, 0x3d	; 61
     31e:	de b7       	in	r29, 0x3e	; 62
     320:	8c 83       	std	Y+4, r24	; 0x04
     322:	9d 83       	std	Y+5, r25	; 0x05
     324:	6e 83       	std	Y+6, r22	; 0x06

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     326:	8f e3       	ldi	r24, 0x3F	; 63
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	fc 01       	movw	r30, r24
     32c:	80 81       	ld	r24, Z
     32e:	8b 83       	std	Y+3, r24	; 0x03
     330:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
     332:	8c 81       	ldd	r24, Y+4	; 0x04
     334:	9d 81       	ldd	r25, Y+5	; 0x05
     336:	89 83       	std	Y+1, r24	; 0x01
     338:	9a 83       	std	Y+2, r25	; 0x02
#ifdef RAMPZ
	RAMPZ = 0;
     33a:	8b e3       	ldi	r24, 0x3B	; 59
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	fc 01       	movw	r30, r24
     340:	10 82       	st	Z, r1
#endif
	asm volatile(
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	9a 81       	ldd	r25, Y+2	; 0x02
     346:	2e 81       	ldd	r18, Y+6	; 0x06
     348:	fc 01       	movw	r30, r24
     34a:	08 ed       	ldi	r16, 0xD8	; 216
     34c:	04 bf       	out	0x34, r16	; 52
     34e:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     350:	8f e3       	ldi	r24, 0x3F	; 63
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	2b 81       	ldd	r18, Y+3	; 0x03
     356:	fc 01       	movw	r30, r24
     358:	20 83       	st	Z, r18
#endif
}
     35a:	00 00       	nop
     35c:	26 96       	adiw	r28, 0x06	; 6
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	de bf       	out	0x3e, r29	; 62
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	0f 91       	pop	r16
     368:	08 95       	ret

0000036a <CLKSYS_XOSC_Config>:
 *                             external clock) and startup times.
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	00 d0       	rcall	.+0      	; 0x370 <CLKSYS_XOSC_Config+0x6>
     370:	cd b7       	in	r28, 0x3d	; 61
     372:	de b7       	in	r29, 0x3e	; 62
     374:	89 83       	std	Y+1, r24	; 0x01
     376:	6a 83       	std	Y+2, r22	; 0x02
     378:	4b 83       	std	Y+3, r20	; 0x03
	OSC.XOSCCTRL = (uint8_t) freqRange |
     37a:	80 e5       	ldi	r24, 0x50	; 80
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	2a 81       	ldd	r18, Y+2	; 0x02
     380:	22 23       	and	r18, r18
     382:	11 f0       	breq	.+4      	; 0x388 <CLKSYS_XOSC_Config+0x1e>
     384:	20 e2       	ldi	r18, 0x20	; 32
     386:	01 c0       	rjmp	.+2      	; 0x38a <CLKSYS_XOSC_Config+0x20>
     388:	20 e0       	ldi	r18, 0x00	; 0
     38a:	39 81       	ldd	r19, Y+1	; 0x01
     38c:	32 2b       	or	r19, r18
     38e:	2b 81       	ldd	r18, Y+3	; 0x03
     390:	23 2b       	or	r18, r19
     392:	fc 01       	movw	r30, r24
     394:	22 83       	std	Z+2, r18	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
     396:	00 00       	nop
     398:	23 96       	adiw	r28, 0x03	; 3
     39a:	cd bf       	out	0x3d, r28	; 61
     39c:	de bf       	out	0x3e, r29	; 62
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	08 95       	ret

000003a4 <CLKSYS_PLL_Config>:
 *                      must be above 0.4MHz.
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	1f 92       	push	r1
     3aa:	1f 92       	push	r1
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
     3b0:	89 83       	std	Y+1, r24	; 0x01
     3b2:	6a 83       	std	Y+2, r22	; 0x02
	factor &= OSC_PLLFAC_gm;
     3b4:	8a 81       	ldd	r24, Y+2	; 0x02
     3b6:	8f 71       	andi	r24, 0x1F	; 31
     3b8:	8a 83       	std	Y+2, r24	; 0x02
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     3ba:	80 e5       	ldi	r24, 0x50	; 80
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	39 81       	ldd	r19, Y+1	; 0x01
     3c0:	2a 81       	ldd	r18, Y+2	; 0x02
     3c2:	23 2b       	or	r18, r19
     3c4:	fc 01       	movw	r30, r24
     3c6:	25 83       	std	Z+5, r18	; 0x05
}
     3c8:	00 00       	nop
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	08 95       	ret

000003d4 <CLKSYS_Disable>:
 *                 OSC_XOSCEN_bm, OSC_PLLEN_bm.
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	1f 92       	push	r1
     3da:	1f 92       	push	r1
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
     3e0:	8a 83       	std	Y+2, r24	; 0x02
	OSC.CTRL &= ~oscSel;
     3e2:	80 e5       	ldi	r24, 0x50	; 80
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	20 e5       	ldi	r18, 0x50	; 80
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	f9 01       	movw	r30, r18
     3ec:	20 81       	ld	r18, Z
     3ee:	32 2f       	mov	r19, r18
     3f0:	2a 81       	ldd	r18, Y+2	; 0x02
     3f2:	20 95       	com	r18
     3f4:	23 23       	and	r18, r19
     3f6:	fc 01       	movw	r30, r24
     3f8:	20 83       	st	Z, r18
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     3fa:	80 e5       	ldi	r24, 0x50	; 80
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	fc 01       	movw	r30, r24
     400:	90 81       	ld	r25, Z
     402:	8a 81       	ldd	r24, Y+2	; 0x02
     404:	89 23       	and	r24, r25
     406:	89 83       	std	Y+1, r24	; 0x01
	return clkEnabled;
     408:	89 81       	ldd	r24, Y+1	; 0x01
}
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	08 95       	ret

00000414 <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	00 d0       	rcall	.+0      	; 0x41a <CLKSYS_Prescalers_Config+0x6>
     41a:	cd b7       	in	r28, 0x3d	; 61
     41c:	de b7       	in	r29, 0x3e	; 62
     41e:	8a 83       	std	Y+2, r24	; 0x02
     420:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     422:	9a 81       	ldd	r25, Y+2	; 0x02
     424:	8b 81       	ldd	r24, Y+3	; 0x03
     426:	89 2b       	or	r24, r25
     428:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.PSCTRL, PSconfig );
     42a:	69 81       	ldd	r22, Y+1	; 0x01
     42c:	81 e4       	ldi	r24, 0x41	; 65
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 89 01 	call	0x312	; 0x312 <CCPWrite>
}
     434:	00 00       	nop
     436:	23 96       	adiw	r28, 0x03	; 3
     438:	cd bf       	out	0x3d, r28	; 61
     43a:	de bf       	out	0x3e, r29	; 62
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	08 95       	ret

00000442 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	1f 92       	push	r1
     448:	1f 92       	push	r1
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
     44e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     450:	80 e4       	ldi	r24, 0x40	; 64
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	fc 01       	movw	r30, r24
     456:	80 81       	ld	r24, Z
     458:	98 2f       	mov	r25, r24
     45a:	98 7f       	andi	r25, 0xF8	; 248
     45c:	8a 81       	ldd	r24, Y+2	; 0x02
     45e:	89 2b       	or	r24, r25
     460:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.CTRL, clkCtrl );
     462:	69 81       	ldd	r22, Y+1	; 0x01
     464:	80 e4       	ldi	r24, 0x40	; 64
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 89 01 	call	0x312	; 0x312 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     46c:	80 e4       	ldi	r24, 0x40	; 64
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	fc 01       	movw	r30, r24
     472:	90 81       	ld	r25, Z
     474:	8a 81       	ldd	r24, Y+2	; 0x02
     476:	89 23       	and	r24, r25
     478:	89 83       	std	Y+1, r24	; 0x01
	return clkCtrl;
     47a:	89 81       	ldd	r24, Y+1	; 0x01
}
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <TC0_ConfigClockSource>:
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
}
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	00 d0       	rcall	.+0      	; 0x48c <TC0_ConfigClockSource+0x6>
     48c:	cd b7       	in	r28, 0x3d	; 61
     48e:	de b7       	in	r29, 0x3e	; 62
     490:	89 83       	std	Y+1, r24	; 0x01
     492:	9a 83       	std	Y+2, r25	; 0x02
     494:	6b 83       	std	Y+3, r22	; 0x03
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	9a 81       	ldd	r25, Y+2	; 0x02
     49a:	fc 01       	movw	r30, r24
     49c:	80 81       	ld	r24, Z
     49e:	98 2f       	mov	r25, r24
     4a0:	90 7f       	andi	r25, 0xF0	; 240
     4a2:	8b 81       	ldd	r24, Y+3	; 0x03
     4a4:	89 2b       	or	r24, r25
     4a6:	28 2f       	mov	r18, r24
     4a8:	89 81       	ldd	r24, Y+1	; 0x01
     4aa:	9a 81       	ldd	r25, Y+2	; 0x02
     4ac:	fc 01       	movw	r30, r24
     4ae:	20 83       	st	Z, r18
     4b0:	00 00       	nop
     4b2:	23 96       	adiw	r28, 0x03	; 3
     4b4:	cd bf       	out	0x3d, r28	; 61
     4b6:	de bf       	out	0x3e, r29	; 62
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	08 95       	ret

000004be <TC0_ConfigWGM>:
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	00 d0       	rcall	.+0      	; 0x4c4 <TC0_ConfigWGM+0x6>
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	89 83       	std	Y+1, r24	; 0x01
     4ca:	9a 83       	std	Y+2, r25	; 0x02
     4cc:	6b 83       	std	Y+3, r22	; 0x03
     4ce:	89 81       	ldd	r24, Y+1	; 0x01
     4d0:	9a 81       	ldd	r25, Y+2	; 0x02
     4d2:	fc 01       	movw	r30, r24
     4d4:	81 81       	ldd	r24, Z+1	; 0x01
     4d6:	98 2f       	mov	r25, r24
     4d8:	98 7f       	andi	r25, 0xF8	; 248
     4da:	8b 81       	ldd	r24, Y+3	; 0x03
     4dc:	89 2b       	or	r24, r25
     4de:	28 2f       	mov	r18, r24
     4e0:	89 81       	ldd	r24, Y+1	; 0x01
     4e2:	9a 81       	ldd	r25, Y+2	; 0x02
     4e4:	fc 01       	movw	r30, r24
     4e6:	21 83       	std	Z+1, r18	; 0x01
     4e8:	00 00       	nop
     4ea:	23 96       	adiw	r28, 0x03	; 3
     4ec:	cd bf       	out	0x3d, r28	; 61
     4ee:	de bf       	out	0x3e, r29	; 62
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	00 d0       	rcall	.+0      	; 0x4fc <TC0_SetOverflowIntLevel+0x6>
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
     500:	89 83       	std	Y+1, r24	; 0x01
     502:	9a 83       	std	Y+2, r25	; 0x02
     504:	6b 83       	std	Y+3, r22	; 0x03
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     506:	89 81       	ldd	r24, Y+1	; 0x01
     508:	9a 81       	ldd	r25, Y+2	; 0x02
     50a:	fc 01       	movw	r30, r24
     50c:	86 81       	ldd	r24, Z+6	; 0x06
     50e:	98 2f       	mov	r25, r24
     510:	9c 7f       	andi	r25, 0xFC	; 252
     512:	8b 81       	ldd	r24, Y+3	; 0x03
     514:	89 2b       	or	r24, r25
     516:	28 2f       	mov	r18, r24
     518:	89 81       	ldd	r24, Y+1	; 0x01
     51a:	9a 81       	ldd	r25, Y+2	; 0x02
     51c:	fc 01       	movw	r30, r24
     51e:	26 83       	std	Z+6, r18	; 0x06
}
     520:	00 00       	nop
     522:	23 96       	adiw	r28, 0x03	; 3
     524:	cd bf       	out	0x3d, r28	; 61
     526:	de bf       	out	0x3e, r29	; 62
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	08 95       	ret

0000052e <vApplicationStackOverflowHook>:
 {
	 (void)errCode;

	 uint8_t a=42; (void)a;

 }
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	00 d0       	rcall	.+0      	; 0x534 <vApplicationStackOverflowHook+0x6>
     534:	1f 92       	push	r1
     536:	cd b7       	in	r28, 0x3d	; 61
     538:	de b7       	in	r29, 0x3e	; 62
     53a:	89 83       	std	Y+1, r24	; 0x01
     53c:	9a 83       	std	Y+2, r25	; 0x02
     53e:	6b 83       	std	Y+3, r22	; 0x03
     540:	7c 83       	std	Y+4, r23	; 0x04
     542:	8b e2       	ldi	r24, 0x2B	; 43
     544:	0e 94 ab 02 	call	0x556	; 0x556 <error>
     548:	00 00       	nop
     54a:	24 96       	adiw	r28, 0x04	; 4
     54c:	cd bf       	out	0x3d, r28	; 61
     54e:	de bf       	out	0x3e, r29	; 62
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	08 95       	ret

00000556 <error>:

 //----------------------------------------------
 //
 void error(uint8_t errCode)
 {
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	1f 92       	push	r1
     55c:	1f 92       	push	r1
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
     562:	8a 83       	std	Y+2, r24	; 0x02
	 uint8_t a;

	 if(errCode==ERR_STACK_OVERFLOW)
     564:	8a 81       	ldd	r24, Y+2	; 0x02
     566:	8b 32       	cpi	r24, 0x2B	; 43
     568:	19 f4       	brne	.+6      	; 0x570 <error+0x1a>
	 a = 1;
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	89 83       	std	Y+1, r24	; 0x01
     56e:	0e c0       	rjmp	.+28     	; 0x58c <error+0x36>
	 else if(errCode==ERR_QUEUE_SEND_FAILED)
     570:	8a 81       	ldd	r24, Y+2	; 0x02
     572:	8c 32       	cpi	r24, 0x2C	; 44
     574:	19 f4       	brne	.+6      	; 0x57c <error+0x26>
	 a = 2;
     576:	82 e0       	ldi	r24, 0x02	; 2
     578:	89 83       	std	Y+1, r24	; 0x01
     57a:	08 c0       	rjmp	.+16     	; 0x58c <error+0x36>
	 else if(errCode==ERR_BYTES_SHOULD_BE_AVAILABLE)
     57c:	8a 81       	ldd	r24, Y+2	; 0x02
     57e:	8f 32       	cpi	r24, 0x2F	; 47
     580:	19 f4       	brne	.+6      	; 0x588 <error+0x32>
	 a = 3;
     582:	83 e0       	ldi	r24, 0x03	; 3
     584:	89 83       	std	Y+1, r24	; 0x01
     586:	02 c0       	rjmp	.+4      	; 0x58c <error+0x36>
	 else
	 a = 4;
     588:	84 e0       	ldi	r24, 0x04	; 4
     58a:	89 83       	std	Y+1, r24	; 0x01
	 // TODO from here:
	 //
	 // - log the occurance of any error in flash mem (inc counter)
	 // - print a message

	 software_reset();
     58c:	0e 94 ce 02 	call	0x59c	; 0x59c <software_reset>
 }
     590:	00 00       	nop
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	08 95       	ret

0000059c <software_reset>:

 //----------------------------------------------
 //
 void software_reset(void)
 {	 
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	cd b7       	in	r28, 0x3d	; 61
     5a2:	de b7       	in	r29, 0x3e	; 62
	 asm("nop");
     5a4:	00 00       	nop
	 CPU_CCP  = CCP_IOREG_gc;
     5a6:	84 e3       	ldi	r24, 0x34	; 52
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	28 ed       	ldi	r18, 0xD8	; 216
     5ac:	fc 01       	movw	r30, r24
     5ae:	20 83       	st	Z, r18
	 RST.CTRL = RST_SWRST_bm ;	 
     5b0:	88 e7       	ldi	r24, 0x78	; 120
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	21 e0       	ldi	r18, 0x01	; 1
     5b6:	fc 01       	movw	r30, r24
     5b8:	21 83       	std	Z+1, r18	; 0x01
     5ba:	00 00       	nop
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	08 95       	ret

000005c2 <xEventGroupCreate>:
/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	1f 92       	push	r1
     5c8:	1f 92       	push	r1
     5ca:	cd b7       	in	r28, 0x3d	; 61
     5cc:	de b7       	in	r29, 0x3e	; 62
     5ce:	80 e1       	ldi	r24, 0x10	; 16
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 1e 06 	call	0xc3c	; 0xc3c <pvPortMalloc>
     5d6:	89 83       	std	Y+1, r24	; 0x01
     5d8:	9a 83       	std	Y+2, r25	; 0x02
     5da:	89 81       	ldd	r24, Y+1	; 0x01
     5dc:	9a 81       	ldd	r25, Y+2	; 0x02
     5de:	89 2b       	or	r24, r25
     5e0:	61 f0       	breq	.+24     	; 0x5fa <xEventGroupCreate+0x38>
     5e2:	89 81       	ldd	r24, Y+1	; 0x01
     5e4:	9a 81       	ldd	r25, Y+2	; 0x02
     5e6:	fc 01       	movw	r30, r24
     5e8:	10 82       	st	Z, r1
     5ea:	11 82       	std	Z+1, r1	; 0x01
     5ec:	12 82       	std	Z+2, r1	; 0x02
     5ee:	13 82       	std	Z+3, r1	; 0x03
     5f0:	89 81       	ldd	r24, Y+1	; 0x01
     5f2:	9a 81       	ldd	r25, Y+2	; 0x02
     5f4:	04 96       	adiw	r24, 0x04	; 4
     5f6:	0e 94 70 06 	call	0xce0	; 0xce0 <vListInitialise>
     5fa:	89 81       	ldd	r24, Y+1	; 0x01
     5fc:	9a 81       	ldd	r25, Y+2	; 0x02
     5fe:	0f 90       	pop	r0
     600:	0f 90       	pop	r0
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	08 95       	ret

00000608 <xEventGroupWaitBits>:
     608:	cf 92       	push	r12
     60a:	df 92       	push	r13
     60c:	ef 92       	push	r14
     60e:	ff 92       	push	r15
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
     61c:	6d 97       	sbiw	r28, 0x1d	; 29
     61e:	cd bf       	out	0x3d, r28	; 61
     620:	de bf       	out	0x3e, r29	; 62
     622:	8a 8b       	std	Y+18, r24	; 0x12
     624:	9b 8b       	std	Y+19, r25	; 0x13
     626:	4c 8b       	std	Y+20, r20	; 0x14
     628:	5d 8b       	std	Y+21, r21	; 0x15
     62a:	6e 8b       	std	Y+22, r22	; 0x16
     62c:	7f 8b       	std	Y+23, r23	; 0x17
     62e:	28 8f       	std	Y+24, r18	; 0x18
     630:	09 8f       	std	Y+25, r16	; 0x19
     632:	ca 8e       	std	Y+26, r12	; 0x1a
     634:	db 8e       	std	Y+27, r13	; 0x1b
     636:	ec 8e       	std	Y+28, r14	; 0x1c
     638:	fd 8e       	std	Y+29, r15	; 0x1d
     63a:	8a 89       	ldd	r24, Y+18	; 0x12
     63c:	9b 89       	ldd	r25, Y+19	; 0x13
     63e:	89 87       	std	Y+9, r24	; 0x09
     640:	9a 87       	std	Y+10, r25	; 0x0a
     642:	1d 82       	std	Y+5, r1	; 0x05
     644:	1e 82       	std	Y+6, r1	; 0x06
     646:	1f 82       	std	Y+7, r1	; 0x07
     648:	18 86       	std	Y+8, r1	; 0x08
     64a:	1b 86       	std	Y+11, r1	; 0x0b
     64c:	0e 94 51 13 	call	0x26a2	; 0x26a2 <vTaskSuspendAll>
     650:	89 85       	ldd	r24, Y+9	; 0x09
     652:	9a 85       	ldd	r25, Y+10	; 0x0a
     654:	fc 01       	movw	r30, r24
     656:	80 81       	ld	r24, Z
     658:	91 81       	ldd	r25, Z+1	; 0x01
     65a:	a2 81       	ldd	r26, Z+2	; 0x02
     65c:	b3 81       	ldd	r27, Z+3	; 0x03
     65e:	8c 87       	std	Y+12, r24	; 0x0c
     660:	9d 87       	std	Y+13, r25	; 0x0d
     662:	ae 87       	std	Y+14, r26	; 0x0e
     664:	bf 87       	std	Y+15, r27	; 0x0f
     666:	2c 89       	ldd	r18, Y+20	; 0x14
     668:	3d 89       	ldd	r19, Y+21	; 0x15
     66a:	4e 89       	ldd	r20, Y+22	; 0x16
     66c:	5f 89       	ldd	r21, Y+23	; 0x17
     66e:	8c 85       	ldd	r24, Y+12	; 0x0c
     670:	9d 85       	ldd	r25, Y+13	; 0x0d
     672:	ae 85       	ldd	r26, Y+14	; 0x0e
     674:	bf 85       	ldd	r27, Y+15	; 0x0f
     676:	09 8d       	ldd	r16, Y+25	; 0x19
     678:	bc 01       	movw	r22, r24
     67a:	cd 01       	movw	r24, r26
     67c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <prvTestWaitCondition>
     680:	88 8b       	std	Y+16, r24	; 0x10
     682:	88 89       	ldd	r24, Y+16	; 0x10
     684:	88 23       	and	r24, r24
     686:	59 f1       	breq	.+86     	; 0x6de <xEventGroupWaitBits+0xd6>
     688:	8c 85       	ldd	r24, Y+12	; 0x0c
     68a:	9d 85       	ldd	r25, Y+13	; 0x0d
     68c:	ae 85       	ldd	r26, Y+14	; 0x0e
     68e:	bf 85       	ldd	r27, Y+15	; 0x0f
     690:	89 83       	std	Y+1, r24	; 0x01
     692:	9a 83       	std	Y+2, r25	; 0x02
     694:	ab 83       	std	Y+3, r26	; 0x03
     696:	bc 83       	std	Y+4, r27	; 0x04
     698:	1a 8e       	std	Y+26, r1	; 0x1a
     69a:	1b 8e       	std	Y+27, r1	; 0x1b
     69c:	1c 8e       	std	Y+28, r1	; 0x1c
     69e:	1d 8e       	std	Y+29, r1	; 0x1d
     6a0:	88 8d       	ldd	r24, Y+24	; 0x18
     6a2:	88 23       	and	r24, r24
     6a4:	09 f4       	brne	.+2      	; 0x6a8 <xEventGroupWaitBits+0xa0>
     6a6:	65 c0       	rjmp	.+202    	; 0x772 <xEventGroupWaitBits+0x16a>
     6a8:	89 85       	ldd	r24, Y+9	; 0x09
     6aa:	9a 85       	ldd	r25, Y+10	; 0x0a
     6ac:	fc 01       	movw	r30, r24
     6ae:	20 81       	ld	r18, Z
     6b0:	31 81       	ldd	r19, Z+1	; 0x01
     6b2:	42 81       	ldd	r20, Z+2	; 0x02
     6b4:	53 81       	ldd	r21, Z+3	; 0x03
     6b6:	8c 89       	ldd	r24, Y+20	; 0x14
     6b8:	9d 89       	ldd	r25, Y+21	; 0x15
     6ba:	ae 89       	ldd	r26, Y+22	; 0x16
     6bc:	bf 89       	ldd	r27, Y+23	; 0x17
     6be:	80 95       	com	r24
     6c0:	90 95       	com	r25
     6c2:	a0 95       	com	r26
     6c4:	b0 95       	com	r27
     6c6:	82 23       	and	r24, r18
     6c8:	93 23       	and	r25, r19
     6ca:	a4 23       	and	r26, r20
     6cc:	b5 23       	and	r27, r21
     6ce:	29 85       	ldd	r18, Y+9	; 0x09
     6d0:	3a 85       	ldd	r19, Y+10	; 0x0a
     6d2:	f9 01       	movw	r30, r18
     6d4:	80 83       	st	Z, r24
     6d6:	91 83       	std	Z+1, r25	; 0x01
     6d8:	a2 83       	std	Z+2, r26	; 0x02
     6da:	b3 83       	std	Z+3, r27	; 0x03
     6dc:	4a c0       	rjmp	.+148    	; 0x772 <xEventGroupWaitBits+0x16a>
     6de:	8a 8d       	ldd	r24, Y+26	; 0x1a
     6e0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     6e2:	ac 8d       	ldd	r26, Y+28	; 0x1c
     6e4:	bd 8d       	ldd	r27, Y+29	; 0x1d
     6e6:	89 2b       	or	r24, r25
     6e8:	8a 2b       	or	r24, r26
     6ea:	8b 2b       	or	r24, r27
     6ec:	59 f4       	brne	.+22     	; 0x704 <xEventGroupWaitBits+0xfc>
     6ee:	8c 85       	ldd	r24, Y+12	; 0x0c
     6f0:	9d 85       	ldd	r25, Y+13	; 0x0d
     6f2:	ae 85       	ldd	r26, Y+14	; 0x0e
     6f4:	bf 85       	ldd	r27, Y+15	; 0x0f
     6f6:	89 83       	std	Y+1, r24	; 0x01
     6f8:	9a 83       	std	Y+2, r25	; 0x02
     6fa:	ab 83       	std	Y+3, r26	; 0x03
     6fc:	bc 83       	std	Y+4, r27	; 0x04
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	8b 87       	std	Y+11, r24	; 0x0b
     702:	37 c0       	rjmp	.+110    	; 0x772 <xEventGroupWaitBits+0x16a>
     704:	88 8d       	ldd	r24, Y+24	; 0x18
     706:	88 23       	and	r24, r24
     708:	49 f0       	breq	.+18     	; 0x71c <xEventGroupWaitBits+0x114>
     70a:	8d 81       	ldd	r24, Y+5	; 0x05
     70c:	9e 81       	ldd	r25, Y+6	; 0x06
     70e:	af 81       	ldd	r26, Y+7	; 0x07
     710:	b8 85       	ldd	r27, Y+8	; 0x08
     712:	b1 60       	ori	r27, 0x01	; 1
     714:	8d 83       	std	Y+5, r24	; 0x05
     716:	9e 83       	std	Y+6, r25	; 0x06
     718:	af 83       	std	Y+7, r26	; 0x07
     71a:	b8 87       	std	Y+8, r27	; 0x08
     71c:	89 8d       	ldd	r24, Y+25	; 0x19
     71e:	88 23       	and	r24, r24
     720:	49 f0       	breq	.+18     	; 0x734 <xEventGroupWaitBits+0x12c>
     722:	8d 81       	ldd	r24, Y+5	; 0x05
     724:	9e 81       	ldd	r25, Y+6	; 0x06
     726:	af 81       	ldd	r26, Y+7	; 0x07
     728:	b8 85       	ldd	r27, Y+8	; 0x08
     72a:	b4 60       	ori	r27, 0x04	; 4
     72c:	8d 83       	std	Y+5, r24	; 0x05
     72e:	9e 83       	std	Y+6, r25	; 0x06
     730:	af 83       	std	Y+7, r26	; 0x07
     732:	b8 87       	std	Y+8, r27	; 0x08
     734:	2c 89       	ldd	r18, Y+20	; 0x14
     736:	3d 89       	ldd	r19, Y+21	; 0x15
     738:	4e 89       	ldd	r20, Y+22	; 0x16
     73a:	5f 89       	ldd	r21, Y+23	; 0x17
     73c:	8d 81       	ldd	r24, Y+5	; 0x05
     73e:	9e 81       	ldd	r25, Y+6	; 0x06
     740:	af 81       	ldd	r26, Y+7	; 0x07
     742:	b8 85       	ldd	r27, Y+8	; 0x08
     744:	82 2b       	or	r24, r18
     746:	93 2b       	or	r25, r19
     748:	a4 2b       	or	r26, r20
     74a:	b5 2b       	or	r27, r21
     74c:	29 85       	ldd	r18, Y+9	; 0x09
     74e:	3a 85       	ldd	r19, Y+10	; 0x0a
     750:	f9 01       	movw	r30, r18
     752:	34 96       	adiw	r30, 0x04	; 4
     754:	2a 8d       	ldd	r18, Y+26	; 0x1a
     756:	3b 8d       	ldd	r19, Y+27	; 0x1b
     758:	4c 8d       	ldd	r20, Y+28	; 0x1c
     75a:	5d 8d       	ldd	r21, Y+29	; 0x1d
     75c:	89 01       	movw	r16, r18
     75e:	9a 01       	movw	r18, r20
     760:	ac 01       	movw	r20, r24
     762:	bd 01       	movw	r22, r26
     764:	cf 01       	movw	r24, r30
     766:	0e 94 24 16 	call	0x2c48	; 0x2c48 <vTaskPlaceOnUnorderedEventList>
     76a:	19 82       	std	Y+1, r1	; 0x01
     76c:	1a 82       	std	Y+2, r1	; 0x02
     76e:	1b 82       	std	Y+3, r1	; 0x03
     770:	1c 82       	std	Y+4, r1	; 0x04
     772:	0e 94 5e 13 	call	0x26bc	; 0x26bc <xTaskResumeAll>
     776:	89 8b       	std	Y+17, r24	; 0x11
     778:	8a 8d       	ldd	r24, Y+26	; 0x1a
     77a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     77c:	ac 8d       	ldd	r26, Y+28	; 0x1c
     77e:	bd 8d       	ldd	r27, Y+29	; 0x1d
     780:	89 2b       	or	r24, r25
     782:	8a 2b       	or	r24, r26
     784:	8b 2b       	or	r24, r27
     786:	09 f4       	brne	.+2      	; 0x78a <xEventGroupWaitBits+0x182>
     788:	65 c0       	rjmp	.+202    	; 0x854 <__EEPROM_REGION_LENGTH__+0x54>
     78a:	89 89       	ldd	r24, Y+17	; 0x11
     78c:	88 23       	and	r24, r24
     78e:	11 f4       	brne	.+4      	; 0x794 <xEventGroupWaitBits+0x18c>
     790:	0e 94 07 0a 	call	0x140e	; 0x140e <vPortYield>
     794:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <uxTaskResetEventItemValue>
     798:	dc 01       	movw	r26, r24
     79a:	cb 01       	movw	r24, r22
     79c:	89 83       	std	Y+1, r24	; 0x01
     79e:	9a 83       	std	Y+2, r25	; 0x02
     7a0:	ab 83       	std	Y+3, r26	; 0x03
     7a2:	bc 83       	std	Y+4, r27	; 0x04
     7a4:	89 81       	ldd	r24, Y+1	; 0x01
     7a6:	9a 81       	ldd	r25, Y+2	; 0x02
     7a8:	ab 81       	ldd	r26, Y+3	; 0x03
     7aa:	bc 81       	ldd	r27, Y+4	; 0x04
     7ac:	88 27       	eor	r24, r24
     7ae:	99 27       	eor	r25, r25
     7b0:	aa 27       	eor	r26, r26
     7b2:	b2 70       	andi	r27, 0x02	; 2
     7b4:	89 2b       	or	r24, r25
     7b6:	8a 2b       	or	r24, r26
     7b8:	8b 2b       	or	r24, r27
     7ba:	09 f0       	breq	.+2      	; 0x7be <xEventGroupWaitBits+0x1b6>
     7bc:	42 c0       	rjmp	.+132    	; 0x842 <__EEPROM_REGION_LENGTH__+0x42>
     7be:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     7c2:	ff 93       	push	r31
     7c4:	f8 7f       	andi	r31, 0xF8	; 248
     7c6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	9a 85       	ldd	r25, Y+10	; 0x0a
     7ce:	fc 01       	movw	r30, r24
     7d0:	80 81       	ld	r24, Z
     7d2:	91 81       	ldd	r25, Z+1	; 0x01
     7d4:	a2 81       	ldd	r26, Z+2	; 0x02
     7d6:	b3 81       	ldd	r27, Z+3	; 0x03
     7d8:	89 83       	std	Y+1, r24	; 0x01
     7da:	9a 83       	std	Y+2, r25	; 0x02
     7dc:	ab 83       	std	Y+3, r26	; 0x03
     7de:	bc 83       	std	Y+4, r27	; 0x04
     7e0:	2c 89       	ldd	r18, Y+20	; 0x14
     7e2:	3d 89       	ldd	r19, Y+21	; 0x15
     7e4:	4e 89       	ldd	r20, Y+22	; 0x16
     7e6:	5f 89       	ldd	r21, Y+23	; 0x17
     7e8:	89 81       	ldd	r24, Y+1	; 0x01
     7ea:	9a 81       	ldd	r25, Y+2	; 0x02
     7ec:	ab 81       	ldd	r26, Y+3	; 0x03
     7ee:	bc 81       	ldd	r27, Y+4	; 0x04
     7f0:	09 8d       	ldd	r16, Y+25	; 0x19
     7f2:	bc 01       	movw	r22, r24
     7f4:	cd 01       	movw	r24, r26
     7f6:	0e 94 ad 05 	call	0xb5a	; 0xb5a <prvTestWaitCondition>
     7fa:	88 23       	and	r24, r24
     7fc:	e9 f0       	breq	.+58     	; 0x838 <__EEPROM_REGION_LENGTH__+0x38>
     7fe:	88 8d       	ldd	r24, Y+24	; 0x18
     800:	88 23       	and	r24, r24
     802:	d1 f0       	breq	.+52     	; 0x838 <__EEPROM_REGION_LENGTH__+0x38>
     804:	89 85       	ldd	r24, Y+9	; 0x09
     806:	9a 85       	ldd	r25, Y+10	; 0x0a
     808:	fc 01       	movw	r30, r24
     80a:	20 81       	ld	r18, Z
     80c:	31 81       	ldd	r19, Z+1	; 0x01
     80e:	42 81       	ldd	r20, Z+2	; 0x02
     810:	53 81       	ldd	r21, Z+3	; 0x03
     812:	8c 89       	ldd	r24, Y+20	; 0x14
     814:	9d 89       	ldd	r25, Y+21	; 0x15
     816:	ae 89       	ldd	r26, Y+22	; 0x16
     818:	bf 89       	ldd	r27, Y+23	; 0x17
     81a:	80 95       	com	r24
     81c:	90 95       	com	r25
     81e:	a0 95       	com	r26
     820:	b0 95       	com	r27
     822:	82 23       	and	r24, r18
     824:	93 23       	and	r25, r19
     826:	a4 23       	and	r26, r20
     828:	b5 23       	and	r27, r21
     82a:	29 85       	ldd	r18, Y+9	; 0x09
     82c:	3a 85       	ldd	r19, Y+10	; 0x0a
     82e:	f9 01       	movw	r30, r18
     830:	80 83       	st	Z, r24
     832:	91 83       	std	Z+1, r25	; 0x01
     834:	a2 83       	std	Z+2, r26	; 0x02
     836:	b3 83       	std	Z+3, r27	; 0x03
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	8b 87       	std	Y+11, r24	; 0x0b
     83c:	ff 91       	pop	r31
     83e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     842:	89 81       	ldd	r24, Y+1	; 0x01
     844:	9a 81       	ldd	r25, Y+2	; 0x02
     846:	ab 81       	ldd	r26, Y+3	; 0x03
     848:	bc 81       	ldd	r27, Y+4	; 0x04
     84a:	bb 27       	eor	r27, r27
     84c:	89 83       	std	Y+1, r24	; 0x01
     84e:	9a 83       	std	Y+2, r25	; 0x02
     850:	ab 83       	std	Y+3, r26	; 0x03
     852:	bc 83       	std	Y+4, r27	; 0x04
     854:	89 81       	ldd	r24, Y+1	; 0x01
     856:	9a 81       	ldd	r25, Y+2	; 0x02
     858:	ab 81       	ldd	r26, Y+3	; 0x03
     85a:	bc 81       	ldd	r27, Y+4	; 0x04
     85c:	bc 01       	movw	r22, r24
     85e:	cd 01       	movw	r24, r26
     860:	6d 96       	adiw	r28, 0x1d	; 29
     862:	cd bf       	out	0x3d, r28	; 61
     864:	de bf       	out	0x3e, r29	; 62
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	1f 91       	pop	r17
     86c:	0f 91       	pop	r16
     86e:	ff 90       	pop	r15
     870:	ef 90       	pop	r14
     872:	df 90       	pop	r13
     874:	cf 90       	pop	r12
     876:	08 95       	ret

00000878 <xEventGroupClearBits>:
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	cd b7       	in	r28, 0x3d	; 61
     87e:	de b7       	in	r29, 0x3e	; 62
     880:	2c 97       	sbiw	r28, 0x0c	; 12
     882:	cd bf       	out	0x3d, r28	; 61
     884:	de bf       	out	0x3e, r29	; 62
     886:	8f 83       	std	Y+7, r24	; 0x07
     888:	98 87       	std	Y+8, r25	; 0x08
     88a:	49 87       	std	Y+9, r20	; 0x09
     88c:	5a 87       	std	Y+10, r21	; 0x0a
     88e:	6b 87       	std	Y+11, r22	; 0x0b
     890:	7c 87       	std	Y+12, r23	; 0x0c
     892:	8f 81       	ldd	r24, Y+7	; 0x07
     894:	98 85       	ldd	r25, Y+8	; 0x08
     896:	89 83       	std	Y+1, r24	; 0x01
     898:	9a 83       	std	Y+2, r25	; 0x02
     89a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     89e:	ff 93       	push	r31
     8a0:	f8 7f       	andi	r31, 0xF8	; 248
     8a2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     8a6:	89 81       	ldd	r24, Y+1	; 0x01
     8a8:	9a 81       	ldd	r25, Y+2	; 0x02
     8aa:	fc 01       	movw	r30, r24
     8ac:	80 81       	ld	r24, Z
     8ae:	91 81       	ldd	r25, Z+1	; 0x01
     8b0:	a2 81       	ldd	r26, Z+2	; 0x02
     8b2:	b3 81       	ldd	r27, Z+3	; 0x03
     8b4:	8b 83       	std	Y+3, r24	; 0x03
     8b6:	9c 83       	std	Y+4, r25	; 0x04
     8b8:	ad 83       	std	Y+5, r26	; 0x05
     8ba:	be 83       	std	Y+6, r27	; 0x06
     8bc:	89 81       	ldd	r24, Y+1	; 0x01
     8be:	9a 81       	ldd	r25, Y+2	; 0x02
     8c0:	fc 01       	movw	r30, r24
     8c2:	20 81       	ld	r18, Z
     8c4:	31 81       	ldd	r19, Z+1	; 0x01
     8c6:	42 81       	ldd	r20, Z+2	; 0x02
     8c8:	53 81       	ldd	r21, Z+3	; 0x03
     8ca:	89 85       	ldd	r24, Y+9	; 0x09
     8cc:	9a 85       	ldd	r25, Y+10	; 0x0a
     8ce:	ab 85       	ldd	r26, Y+11	; 0x0b
     8d0:	bc 85       	ldd	r27, Y+12	; 0x0c
     8d2:	80 95       	com	r24
     8d4:	90 95       	com	r25
     8d6:	a0 95       	com	r26
     8d8:	b0 95       	com	r27
     8da:	82 23       	and	r24, r18
     8dc:	93 23       	and	r25, r19
     8de:	a4 23       	and	r26, r20
     8e0:	b5 23       	and	r27, r21
     8e2:	29 81       	ldd	r18, Y+1	; 0x01
     8e4:	3a 81       	ldd	r19, Y+2	; 0x02
     8e6:	f9 01       	movw	r30, r18
     8e8:	80 83       	st	Z, r24
     8ea:	91 83       	std	Z+1, r25	; 0x01
     8ec:	a2 83       	std	Z+2, r26	; 0x02
     8ee:	b3 83       	std	Z+3, r27	; 0x03
     8f0:	ff 91       	pop	r31
     8f2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     8f6:	8b 81       	ldd	r24, Y+3	; 0x03
     8f8:	9c 81       	ldd	r25, Y+4	; 0x04
     8fa:	ad 81       	ldd	r26, Y+5	; 0x05
     8fc:	be 81       	ldd	r27, Y+6	; 0x06
     8fe:	bc 01       	movw	r22, r24
     900:	cd 01       	movw	r24, r26
     902:	2c 96       	adiw	r28, 0x0c	; 12
     904:	cd bf       	out	0x3d, r28	; 61
     906:	de bf       	out	0x3e, r29	; 62
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	08 95       	ret

0000090e <xEventGroupSetBits>:
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	cd b7       	in	r28, 0x3d	; 61
     914:	de b7       	in	r29, 0x3e	; 62
     916:	6d 97       	sbiw	r28, 0x1d	; 29
     918:	cd bf       	out	0x3d, r28	; 61
     91a:	de bf       	out	0x3e, r29	; 62
     91c:	88 8f       	std	Y+24, r24	; 0x18
     91e:	99 8f       	std	Y+25, r25	; 0x19
     920:	4a 8f       	std	Y+26, r20	; 0x1a
     922:	5b 8f       	std	Y+27, r21	; 0x1b
     924:	6c 8f       	std	Y+28, r22	; 0x1c
     926:	7d 8f       	std	Y+29, r23	; 0x1d
     928:	1b 82       	std	Y+3, r1	; 0x03
     92a:	1c 82       	std	Y+4, r1	; 0x04
     92c:	1d 82       	std	Y+5, r1	; 0x05
     92e:	1e 82       	std	Y+6, r1	; 0x06
     930:	88 8d       	ldd	r24, Y+24	; 0x18
     932:	99 8d       	ldd	r25, Y+25	; 0x19
     934:	88 87       	std	Y+8, r24	; 0x08
     936:	99 87       	std	Y+9, r25	; 0x09
     938:	1f 82       	std	Y+7, r1	; 0x07
     93a:	88 85       	ldd	r24, Y+8	; 0x08
     93c:	99 85       	ldd	r25, Y+9	; 0x09
     93e:	04 96       	adiw	r24, 0x04	; 4
     940:	8a 87       	std	Y+10, r24	; 0x0a
     942:	9b 87       	std	Y+11, r25	; 0x0b
     944:	8a 85       	ldd	r24, Y+10	; 0x0a
     946:	9b 85       	ldd	r25, Y+11	; 0x0b
     948:	03 96       	adiw	r24, 0x03	; 3
     94a:	8c 87       	std	Y+12, r24	; 0x0c
     94c:	9d 87       	std	Y+13, r25	; 0x0d
     94e:	0e 94 51 13 	call	0x26a2	; 0x26a2 <vTaskSuspendAll>
     952:	8a 85       	ldd	r24, Y+10	; 0x0a
     954:	9b 85       	ldd	r25, Y+11	; 0x0b
     956:	fc 01       	movw	r30, r24
     958:	87 81       	ldd	r24, Z+7	; 0x07
     95a:	90 85       	ldd	r25, Z+8	; 0x08
     95c:	89 83       	std	Y+1, r24	; 0x01
     95e:	9a 83       	std	Y+2, r25	; 0x02
     960:	88 85       	ldd	r24, Y+8	; 0x08
     962:	99 85       	ldd	r25, Y+9	; 0x09
     964:	fc 01       	movw	r30, r24
     966:	20 81       	ld	r18, Z
     968:	31 81       	ldd	r19, Z+1	; 0x01
     96a:	42 81       	ldd	r20, Z+2	; 0x02
     96c:	53 81       	ldd	r21, Z+3	; 0x03
     96e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     970:	9b 8d       	ldd	r25, Y+27	; 0x1b
     972:	ac 8d       	ldd	r26, Y+28	; 0x1c
     974:	bd 8d       	ldd	r27, Y+29	; 0x1d
     976:	82 2b       	or	r24, r18
     978:	93 2b       	or	r25, r19
     97a:	a4 2b       	or	r26, r20
     97c:	b5 2b       	or	r27, r21
     97e:	28 85       	ldd	r18, Y+8	; 0x08
     980:	39 85       	ldd	r19, Y+9	; 0x09
     982:	f9 01       	movw	r30, r18
     984:	80 83       	st	Z, r24
     986:	91 83       	std	Z+1, r25	; 0x01
     988:	a2 83       	std	Z+2, r26	; 0x02
     98a:	b3 83       	std	Z+3, r27	; 0x03
     98c:	95 c0       	rjmp	.+298    	; 0xab8 <xEventGroupSetBits+0x1aa>
     98e:	89 81       	ldd	r24, Y+1	; 0x01
     990:	9a 81       	ldd	r25, Y+2	; 0x02
     992:	fc 01       	movw	r30, r24
     994:	84 81       	ldd	r24, Z+4	; 0x04
     996:	95 81       	ldd	r25, Z+5	; 0x05
     998:	8e 87       	std	Y+14, r24	; 0x0e
     99a:	9f 87       	std	Y+15, r25	; 0x0f
     99c:	89 81       	ldd	r24, Y+1	; 0x01
     99e:	9a 81       	ldd	r25, Y+2	; 0x02
     9a0:	fc 01       	movw	r30, r24
     9a2:	80 81       	ld	r24, Z
     9a4:	91 81       	ldd	r25, Z+1	; 0x01
     9a6:	a2 81       	ldd	r26, Z+2	; 0x02
     9a8:	b3 81       	ldd	r27, Z+3	; 0x03
     9aa:	88 8b       	std	Y+16, r24	; 0x10
     9ac:	99 8b       	std	Y+17, r25	; 0x11
     9ae:	aa 8b       	std	Y+18, r26	; 0x12
     9b0:	bb 8b       	std	Y+19, r27	; 0x13
     9b2:	1f 82       	std	Y+7, r1	; 0x07
     9b4:	88 89       	ldd	r24, Y+16	; 0x10
     9b6:	99 89       	ldd	r25, Y+17	; 0x11
     9b8:	aa 89       	ldd	r26, Y+18	; 0x12
     9ba:	bb 89       	ldd	r27, Y+19	; 0x13
     9bc:	88 27       	eor	r24, r24
     9be:	99 27       	eor	r25, r25
     9c0:	aa 27       	eor	r26, r26
     9c2:	8c 8b       	std	Y+20, r24	; 0x14
     9c4:	9d 8b       	std	Y+21, r25	; 0x15
     9c6:	ae 8b       	std	Y+22, r26	; 0x16
     9c8:	bf 8b       	std	Y+23, r27	; 0x17
     9ca:	88 89       	ldd	r24, Y+16	; 0x10
     9cc:	99 89       	ldd	r25, Y+17	; 0x11
     9ce:	aa 89       	ldd	r26, Y+18	; 0x12
     9d0:	bb 89       	ldd	r27, Y+19	; 0x13
     9d2:	bb 27       	eor	r27, r27
     9d4:	88 8b       	std	Y+16, r24	; 0x10
     9d6:	99 8b       	std	Y+17, r25	; 0x11
     9d8:	aa 8b       	std	Y+18, r26	; 0x12
     9da:	bb 8b       	std	Y+19, r27	; 0x13
     9dc:	8c 89       	ldd	r24, Y+20	; 0x14
     9de:	9d 89       	ldd	r25, Y+21	; 0x15
     9e0:	ae 89       	ldd	r26, Y+22	; 0x16
     9e2:	bf 89       	ldd	r27, Y+23	; 0x17
     9e4:	88 27       	eor	r24, r24
     9e6:	99 27       	eor	r25, r25
     9e8:	aa 27       	eor	r26, r26
     9ea:	b4 70       	andi	r27, 0x04	; 4
     9ec:	89 2b       	or	r24, r25
     9ee:	8a 2b       	or	r24, r26
     9f0:	8b 2b       	or	r24, r27
     9f2:	b1 f4       	brne	.+44     	; 0xa20 <xEventGroupSetBits+0x112>
     9f4:	88 85       	ldd	r24, Y+8	; 0x08
     9f6:	99 85       	ldd	r25, Y+9	; 0x09
     9f8:	fc 01       	movw	r30, r24
     9fa:	20 81       	ld	r18, Z
     9fc:	31 81       	ldd	r19, Z+1	; 0x01
     9fe:	42 81       	ldd	r20, Z+2	; 0x02
     a00:	53 81       	ldd	r21, Z+3	; 0x03
     a02:	88 89       	ldd	r24, Y+16	; 0x10
     a04:	99 89       	ldd	r25, Y+17	; 0x11
     a06:	aa 89       	ldd	r26, Y+18	; 0x12
     a08:	bb 89       	ldd	r27, Y+19	; 0x13
     a0a:	82 23       	and	r24, r18
     a0c:	93 23       	and	r25, r19
     a0e:	a4 23       	and	r26, r20
     a10:	b5 23       	and	r27, r21
     a12:	89 2b       	or	r24, r25
     a14:	8a 2b       	or	r24, r26
     a16:	8b 2b       	or	r24, r27
     a18:	e9 f0       	breq	.+58     	; 0xa54 <xEventGroupSetBits+0x146>
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	8f 83       	std	Y+7, r24	; 0x07
     a1e:	1a c0       	rjmp	.+52     	; 0xa54 <xEventGroupSetBits+0x146>
     a20:	88 85       	ldd	r24, Y+8	; 0x08
     a22:	99 85       	ldd	r25, Y+9	; 0x09
     a24:	fc 01       	movw	r30, r24
     a26:	20 81       	ld	r18, Z
     a28:	31 81       	ldd	r19, Z+1	; 0x01
     a2a:	42 81       	ldd	r20, Z+2	; 0x02
     a2c:	53 81       	ldd	r21, Z+3	; 0x03
     a2e:	88 89       	ldd	r24, Y+16	; 0x10
     a30:	99 89       	ldd	r25, Y+17	; 0x11
     a32:	aa 89       	ldd	r26, Y+18	; 0x12
     a34:	bb 89       	ldd	r27, Y+19	; 0x13
     a36:	28 23       	and	r18, r24
     a38:	39 23       	and	r19, r25
     a3a:	4a 23       	and	r20, r26
     a3c:	5b 23       	and	r21, r27
     a3e:	88 89       	ldd	r24, Y+16	; 0x10
     a40:	99 89       	ldd	r25, Y+17	; 0x11
     a42:	aa 89       	ldd	r26, Y+18	; 0x12
     a44:	bb 89       	ldd	r27, Y+19	; 0x13
     a46:	28 17       	cp	r18, r24
     a48:	39 07       	cpc	r19, r25
     a4a:	4a 07       	cpc	r20, r26
     a4c:	5b 07       	cpc	r21, r27
     a4e:	11 f4       	brne	.+4      	; 0xa54 <xEventGroupSetBits+0x146>
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	8f 83       	std	Y+7, r24	; 0x07
     a54:	8f 81       	ldd	r24, Y+7	; 0x07
     a56:	88 23       	and	r24, r24
     a58:	59 f1       	breq	.+86     	; 0xab0 <xEventGroupSetBits+0x1a2>
     a5a:	8c 89       	ldd	r24, Y+20	; 0x14
     a5c:	9d 89       	ldd	r25, Y+21	; 0x15
     a5e:	ae 89       	ldd	r26, Y+22	; 0x16
     a60:	bf 89       	ldd	r27, Y+23	; 0x17
     a62:	88 27       	eor	r24, r24
     a64:	99 27       	eor	r25, r25
     a66:	aa 27       	eor	r26, r26
     a68:	b1 70       	andi	r27, 0x01	; 1
     a6a:	89 2b       	or	r24, r25
     a6c:	8a 2b       	or	r24, r26
     a6e:	8b 2b       	or	r24, r27
     a70:	81 f0       	breq	.+32     	; 0xa92 <xEventGroupSetBits+0x184>
     a72:	2b 81       	ldd	r18, Y+3	; 0x03
     a74:	3c 81       	ldd	r19, Y+4	; 0x04
     a76:	4d 81       	ldd	r20, Y+5	; 0x05
     a78:	5e 81       	ldd	r21, Y+6	; 0x06
     a7a:	88 89       	ldd	r24, Y+16	; 0x10
     a7c:	99 89       	ldd	r25, Y+17	; 0x11
     a7e:	aa 89       	ldd	r26, Y+18	; 0x12
     a80:	bb 89       	ldd	r27, Y+19	; 0x13
     a82:	82 2b       	or	r24, r18
     a84:	93 2b       	or	r25, r19
     a86:	a4 2b       	or	r26, r20
     a88:	b5 2b       	or	r27, r21
     a8a:	8b 83       	std	Y+3, r24	; 0x03
     a8c:	9c 83       	std	Y+4, r25	; 0x04
     a8e:	ad 83       	std	Y+5, r26	; 0x05
     a90:	be 83       	std	Y+6, r27	; 0x06
     a92:	88 85       	ldd	r24, Y+8	; 0x08
     a94:	99 85       	ldd	r25, Y+9	; 0x09
     a96:	fc 01       	movw	r30, r24
     a98:	80 81       	ld	r24, Z
     a9a:	91 81       	ldd	r25, Z+1	; 0x01
     a9c:	a2 81       	ldd	r26, Z+2	; 0x02
     a9e:	b3 81       	ldd	r27, Z+3	; 0x03
     aa0:	b2 60       	ori	r27, 0x02	; 2
     aa2:	29 81       	ldd	r18, Y+1	; 0x01
     aa4:	3a 81       	ldd	r19, Y+2	; 0x02
     aa6:	ac 01       	movw	r20, r24
     aa8:	bd 01       	movw	r22, r26
     aaa:	c9 01       	movw	r24, r18
     aac:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <vTaskRemoveFromUnorderedEventList>
     ab0:	8e 85       	ldd	r24, Y+14	; 0x0e
     ab2:	9f 85       	ldd	r25, Y+15	; 0x0f
     ab4:	89 83       	std	Y+1, r24	; 0x01
     ab6:	9a 83       	std	Y+2, r25	; 0x02
     ab8:	29 81       	ldd	r18, Y+1	; 0x01
     aba:	3a 81       	ldd	r19, Y+2	; 0x02
     abc:	8c 85       	ldd	r24, Y+12	; 0x0c
     abe:	9d 85       	ldd	r25, Y+13	; 0x0d
     ac0:	28 17       	cp	r18, r24
     ac2:	39 07       	cpc	r19, r25
     ac4:	09 f0       	breq	.+2      	; 0xac8 <xEventGroupSetBits+0x1ba>
     ac6:	63 cf       	rjmp	.-314    	; 0x98e <xEventGroupSetBits+0x80>
     ac8:	88 85       	ldd	r24, Y+8	; 0x08
     aca:	99 85       	ldd	r25, Y+9	; 0x09
     acc:	fc 01       	movw	r30, r24
     ace:	20 81       	ld	r18, Z
     ad0:	31 81       	ldd	r19, Z+1	; 0x01
     ad2:	42 81       	ldd	r20, Z+2	; 0x02
     ad4:	53 81       	ldd	r21, Z+3	; 0x03
     ad6:	8b 81       	ldd	r24, Y+3	; 0x03
     ad8:	9c 81       	ldd	r25, Y+4	; 0x04
     ada:	ad 81       	ldd	r26, Y+5	; 0x05
     adc:	be 81       	ldd	r27, Y+6	; 0x06
     ade:	80 95       	com	r24
     ae0:	90 95       	com	r25
     ae2:	a0 95       	com	r26
     ae4:	b0 95       	com	r27
     ae6:	82 23       	and	r24, r18
     ae8:	93 23       	and	r25, r19
     aea:	a4 23       	and	r26, r20
     aec:	b5 23       	and	r27, r21
     aee:	28 85       	ldd	r18, Y+8	; 0x08
     af0:	39 85       	ldd	r19, Y+9	; 0x09
     af2:	f9 01       	movw	r30, r18
     af4:	80 83       	st	Z, r24
     af6:	91 83       	std	Z+1, r25	; 0x01
     af8:	a2 83       	std	Z+2, r26	; 0x02
     afa:	b3 83       	std	Z+3, r27	; 0x03
     afc:	0e 94 5e 13 	call	0x26bc	; 0x26bc <xTaskResumeAll>
     b00:	88 85       	ldd	r24, Y+8	; 0x08
     b02:	99 85       	ldd	r25, Y+9	; 0x09
     b04:	fc 01       	movw	r30, r24
     b06:	80 81       	ld	r24, Z
     b08:	91 81       	ldd	r25, Z+1	; 0x01
     b0a:	a2 81       	ldd	r26, Z+2	; 0x02
     b0c:	b3 81       	ldd	r27, Z+3	; 0x03
     b0e:	bc 01       	movw	r22, r24
     b10:	cd 01       	movw	r24, r26
     b12:	6d 96       	adiw	r28, 0x1d	; 29
     b14:	cd bf       	out	0x3d, r28	; 61
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	08 95       	ret

00000b1e <vEventGroupSetBitsCallback>:
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	00 d0       	rcall	.+0      	; 0xb24 <vEventGroupSetBitsCallback+0x6>
     b24:	00 d0       	rcall	.+0      	; 0xb26 <vEventGroupSetBitsCallback+0x8>
     b26:	cd b7       	in	r28, 0x3d	; 61
     b28:	de b7       	in	r29, 0x3e	; 62
     b2a:	89 83       	std	Y+1, r24	; 0x01
     b2c:	9a 83       	std	Y+2, r25	; 0x02
     b2e:	4b 83       	std	Y+3, r20	; 0x03
     b30:	5c 83       	std	Y+4, r21	; 0x04
     b32:	6d 83       	std	Y+5, r22	; 0x05
     b34:	7e 83       	std	Y+6, r23	; 0x06
     b36:	8b 81       	ldd	r24, Y+3	; 0x03
     b38:	9c 81       	ldd	r25, Y+4	; 0x04
     b3a:	ad 81       	ldd	r26, Y+5	; 0x05
     b3c:	be 81       	ldd	r27, Y+6	; 0x06
     b3e:	29 81       	ldd	r18, Y+1	; 0x01
     b40:	3a 81       	ldd	r19, Y+2	; 0x02
     b42:	ac 01       	movw	r20, r24
     b44:	bd 01       	movw	r22, r26
     b46:	c9 01       	movw	r24, r18
     b48:	0e 94 87 04 	call	0x90e	; 0x90e <xEventGroupSetBits>
     b4c:	00 00       	nop
     b4e:	26 96       	adiw	r28, 0x06	; 6
     b50:	cd bf       	out	0x3d, r28	; 61
     b52:	de bf       	out	0x3e, r29	; 62
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	08 95       	ret

00000b5a <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
     b5a:	0f 93       	push	r16
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
     b64:	2a 97       	sbiw	r28, 0x0a	; 10
     b66:	cd bf       	out	0x3d, r28	; 61
     b68:	de bf       	out	0x3e, r29	; 62
     b6a:	6a 83       	std	Y+2, r22	; 0x02
     b6c:	7b 83       	std	Y+3, r23	; 0x03
     b6e:	8c 83       	std	Y+4, r24	; 0x04
     b70:	9d 83       	std	Y+5, r25	; 0x05
     b72:	2e 83       	std	Y+6, r18	; 0x06
     b74:	3f 83       	std	Y+7, r19	; 0x07
     b76:	48 87       	std	Y+8, r20	; 0x08
     b78:	59 87       	std	Y+9, r21	; 0x09
     b7a:	0a 87       	std	Y+10, r16	; 0x0a
BaseType_t xWaitConditionMet = pdFALSE;
     b7c:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
     b7e:	8a 85       	ldd	r24, Y+10	; 0x0a
     b80:	88 23       	and	r24, r24
     b82:	99 f4       	brne	.+38     	; 0xbaa <prvTestWaitCondition+0x50>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     b84:	2a 81       	ldd	r18, Y+2	; 0x02
     b86:	3b 81       	ldd	r19, Y+3	; 0x03
     b88:	4c 81       	ldd	r20, Y+4	; 0x04
     b8a:	5d 81       	ldd	r21, Y+5	; 0x05
     b8c:	8e 81       	ldd	r24, Y+6	; 0x06
     b8e:	9f 81       	ldd	r25, Y+7	; 0x07
     b90:	a8 85       	ldd	r26, Y+8	; 0x08
     b92:	b9 85       	ldd	r27, Y+9	; 0x09
     b94:	82 23       	and	r24, r18
     b96:	93 23       	and	r25, r19
     b98:	a4 23       	and	r26, r20
     b9a:	b5 23       	and	r27, r21
     b9c:	89 2b       	or	r24, r25
     b9e:	8a 2b       	or	r24, r26
     ba0:	8b 2b       	or	r24, r27
     ba2:	d1 f0       	breq	.+52     	; 0xbd8 <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	89 83       	std	Y+1, r24	; 0x01
     ba8:	17 c0       	rjmp	.+46     	; 0xbd8 <prvTestWaitCondition+0x7e>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     baa:	2a 81       	ldd	r18, Y+2	; 0x02
     bac:	3b 81       	ldd	r19, Y+3	; 0x03
     bae:	4c 81       	ldd	r20, Y+4	; 0x04
     bb0:	5d 81       	ldd	r21, Y+5	; 0x05
     bb2:	8e 81       	ldd	r24, Y+6	; 0x06
     bb4:	9f 81       	ldd	r25, Y+7	; 0x07
     bb6:	a8 85       	ldd	r26, Y+8	; 0x08
     bb8:	b9 85       	ldd	r27, Y+9	; 0x09
     bba:	28 23       	and	r18, r24
     bbc:	39 23       	and	r19, r25
     bbe:	4a 23       	and	r20, r26
     bc0:	5b 23       	and	r21, r27
     bc2:	8e 81       	ldd	r24, Y+6	; 0x06
     bc4:	9f 81       	ldd	r25, Y+7	; 0x07
     bc6:	a8 85       	ldd	r26, Y+8	; 0x08
     bc8:	b9 85       	ldd	r27, Y+9	; 0x09
     bca:	28 17       	cp	r18, r24
     bcc:	39 07       	cpc	r19, r25
     bce:	4a 07       	cpc	r20, r26
     bd0:	5b 07       	cpc	r21, r27
     bd2:	11 f4       	brne	.+4      	; 0xbd8 <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
}
     bda:	2a 96       	adiw	r28, 0x0a	; 10
     bdc:	cd bf       	out	0x3d, r28	; 61
     bde:	de bf       	out	0x3e, r29	; 62
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	0f 91       	pop	r16
     be6:	08 95       	ret

00000be8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     be8:	0f 93       	push	r16
     bea:	1f 93       	push	r17
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	29 97       	sbiw	r28, 0x09	; 9
     bf6:	cd bf       	out	0x3d, r28	; 61
     bf8:	de bf       	out	0x3e, r29	; 62
     bfa:	8a 83       	std	Y+2, r24	; 0x02
     bfc:	9b 83       	std	Y+3, r25	; 0x03
     bfe:	4c 83       	std	Y+4, r20	; 0x04
     c00:	5d 83       	std	Y+5, r21	; 0x05
     c02:	6e 83       	std	Y+6, r22	; 0x06
     c04:	7f 83       	std	Y+7, r23	; 0x07
     c06:	28 87       	std	Y+8, r18	; 0x08
     c08:	39 87       	std	Y+9, r19	; 0x09
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     c0a:	28 85       	ldd	r18, Y+8	; 0x08
     c0c:	39 85       	ldd	r19, Y+9	; 0x09
     c0e:	8c 81       	ldd	r24, Y+4	; 0x04
     c10:	9d 81       	ldd	r25, Y+5	; 0x05
     c12:	ae 81       	ldd	r26, Y+6	; 0x06
     c14:	bf 81       	ldd	r27, Y+7	; 0x07
     c16:	6a 81       	ldd	r22, Y+2	; 0x02
     c18:	7b 81       	ldd	r23, Y+3	; 0x03
     c1a:	89 01       	movw	r16, r18
     c1c:	9c 01       	movw	r18, r24
     c1e:	ad 01       	movw	r20, r26
     c20:	8f e8       	ldi	r24, 0x8F	; 143
     c22:	95 e0       	ldi	r25, 0x05	; 5
     c24:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <xTimerPendFunctionCallFromISR>
     c28:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
	}
     c2c:	29 96       	adiw	r28, 0x09	; 9
     c2e:	cd bf       	out	0x3d, r28	; 61
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	08 95       	ret

00000c3c <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	00 d0       	rcall	.+0      	; 0xc42 <pvPortMalloc+0x6>
     c42:	1f 92       	push	r1
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	8b 83       	std	Y+3, r24	; 0x03
     c4a:	9c 83       	std	Y+4, r25	; 0x04
void *pvReturn = NULL; 
     c4c:	19 82       	std	Y+1, r1	; 0x01
     c4e:	1a 82       	std	Y+2, r1	; 0x02
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     c50:	0e 94 51 13 	call	0x26a2	; 0x26a2 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     c54:	20 91 04 2c 	lds	r18, 0x2C04	; 0x802c04 <xNextFreeByte>
     c58:	30 91 05 2c 	lds	r19, 0x2C05	; 0x802c05 <xNextFreeByte+0x1>
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	9c 81       	ldd	r25, Y+4	; 0x04
     c60:	82 0f       	add	r24, r18
     c62:	93 1f       	adc	r25, r19
     c64:	88 3b       	cpi	r24, 0xB8	; 184
     c66:	9b 40       	sbci	r25, 0x0B	; 11
     c68:	18 f5       	brcc	.+70     	; 0xcb0 <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     c6a:	20 91 04 2c 	lds	r18, 0x2C04	; 0x802c04 <xNextFreeByte>
     c6e:	30 91 05 2c 	lds	r19, 0x2C05	; 0x802c05 <xNextFreeByte+0x1>
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	9c 81       	ldd	r25, Y+4	; 0x04
     c76:	28 0f       	add	r18, r24
     c78:	39 1f       	adc	r19, r25
     c7a:	80 91 04 2c 	lds	r24, 0x2C04	; 0x802c04 <xNextFreeByte>
     c7e:	90 91 05 2c 	lds	r25, 0x2C05	; 0x802c05 <xNextFreeByte+0x1>
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	a0 f4       	brcc	.+40     	; 0xcb0 <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     c88:	80 91 04 2c 	lds	r24, 0x2C04	; 0x802c04 <xNextFreeByte>
     c8c:	90 91 05 2c 	lds	r25, 0x2C05	; 0x802c05 <xNextFreeByte+0x1>
     c90:	84 5b       	subi	r24, 0xB4	; 180
     c92:	9f 4d       	sbci	r25, 0xDF	; 223
     c94:	89 83       	std	Y+1, r24	; 0x01
     c96:	9a 83       	std	Y+2, r25	; 0x02
			xNextFreeByte += xWantedSize;			
     c98:	20 91 04 2c 	lds	r18, 0x2C04	; 0x802c04 <xNextFreeByte>
     c9c:	30 91 05 2c 	lds	r19, 0x2C05	; 0x802c05 <xNextFreeByte+0x1>
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	9c 81       	ldd	r25, Y+4	; 0x04
     ca4:	82 0f       	add	r24, r18
     ca6:	93 1f       	adc	r25, r19
     ca8:	80 93 04 2c 	sts	0x2C04, r24	; 0x802c04 <xNextFreeByte>
     cac:	90 93 05 2c 	sts	0x2C05, r25	; 0x802c05 <xNextFreeByte+0x1>
		}	
	}
	xTaskResumeAll();
     cb0:	0e 94 5e 13 	call	0x26bc	; 0x26bc <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	9a 81       	ldd	r25, Y+2	; 0x02
}
     cb8:	24 96       	adiw	r28, 0x04	; 4
     cba:	cd bf       	out	0x3d, r28	; 61
     cbc:	de bf       	out	0x3e, r29	; 62
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	08 95       	ret

00000cc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	1f 92       	push	r1
     cca:	1f 92       	push	r1
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	89 83       	std	Y+1, r24	; 0x01
     cd2:	9a 83       	std	Y+2, r25	; 0x02
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
	
	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
     cd4:	00 00       	nop
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	08 95       	ret

00000ce0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
     ce4:	1f 92       	push	r1
     ce6:	1f 92       	push	r1
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	89 83       	std	Y+1, r24	; 0x01
     cee:	9a 83       	std	Y+2, r25	; 0x02
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	9a 81       	ldd	r25, Y+2	; 0x02
     cf4:	9c 01       	movw	r18, r24
     cf6:	2d 5f       	subi	r18, 0xFD	; 253
     cf8:	3f 4f       	sbci	r19, 0xFF	; 255
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	9a 81       	ldd	r25, Y+2	; 0x02
     cfe:	fc 01       	movw	r30, r24
     d00:	21 83       	std	Z+1, r18	; 0x01
     d02:	32 83       	std	Z+2, r19	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     d04:	29 81       	ldd	r18, Y+1	; 0x01
     d06:	3a 81       	ldd	r19, Y+2	; 0x02
     d08:	8f ef       	ldi	r24, 0xFF	; 255
     d0a:	9f ef       	ldi	r25, 0xFF	; 255
     d0c:	dc 01       	movw	r26, r24
     d0e:	f9 01       	movw	r30, r18
     d10:	83 83       	std	Z+3, r24	; 0x03
     d12:	94 83       	std	Z+4, r25	; 0x04
     d14:	a5 83       	std	Z+5, r26	; 0x05
     d16:	b6 83       	std	Z+6, r27	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	9a 81       	ldd	r25, Y+2	; 0x02
     d1c:	9c 01       	movw	r18, r24
     d1e:	2d 5f       	subi	r18, 0xFD	; 253
     d20:	3f 4f       	sbci	r19, 0xFF	; 255
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	9a 81       	ldd	r25, Y+2	; 0x02
     d26:	fc 01       	movw	r30, r24
     d28:	27 83       	std	Z+7, r18	; 0x07
     d2a:	30 87       	std	Z+8, r19	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	9a 81       	ldd	r25, Y+2	; 0x02
     d30:	9c 01       	movw	r18, r24
     d32:	2d 5f       	subi	r18, 0xFD	; 253
     d34:	3f 4f       	sbci	r19, 0xFF	; 255
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	9a 81       	ldd	r25, Y+2	; 0x02
     d3a:	fc 01       	movw	r30, r24
     d3c:	21 87       	std	Z+9, r18	; 0x09
     d3e:	32 87       	std	Z+10, r19	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	9a 81       	ldd	r25, Y+2	; 0x02
     d44:	fc 01       	movw	r30, r24
     d46:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     d48:	00 00       	nop
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	08 95       	ret

00000d54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	1f 92       	push	r1
     d5a:	1f 92       	push	r1
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	89 83       	std	Y+1, r24	; 0x01
     d62:	9a 83       	std	Y+2, r25	; 0x02
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	9a 81       	ldd	r25, Y+2	; 0x02
     d68:	fc 01       	movw	r30, r24
     d6a:	12 86       	std	Z+10, r1	; 0x0a
     d6c:	13 86       	std	Z+11, r1	; 0x0b

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     d6e:	00 00       	nop
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	08 95       	ret

00000d7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <vListInsertEnd+0x6>
     d80:	00 d0       	rcall	.+0      	; 0xd82 <vListInsertEnd+0x8>
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	8b 83       	std	Y+3, r24	; 0x03
     d88:	9c 83       	std	Y+4, r25	; 0x04
     d8a:	6d 83       	std	Y+5, r22	; 0x05
     d8c:	7e 83       	std	Y+6, r23	; 0x06
ListItem_t * const pxIndex = pxList->pxIndex;
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	9c 81       	ldd	r25, Y+4	; 0x04
     d92:	fc 01       	movw	r30, r24
     d94:	81 81       	ldd	r24, Z+1	; 0x01
     d96:	92 81       	ldd	r25, Z+2	; 0x02
     d98:	89 83       	std	Y+1, r24	; 0x01
     d9a:	9a 83       	std	Y+2, r25	; 0x02
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     d9c:	8d 81       	ldd	r24, Y+5	; 0x05
     d9e:	9e 81       	ldd	r25, Y+6	; 0x06
     da0:	29 81       	ldd	r18, Y+1	; 0x01
     da2:	3a 81       	ldd	r19, Y+2	; 0x02
     da4:	fc 01       	movw	r30, r24
     da6:	24 83       	std	Z+4, r18	; 0x04
     da8:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	9a 81       	ldd	r25, Y+2	; 0x02
     dae:	fc 01       	movw	r30, r24
     db0:	26 81       	ldd	r18, Z+6	; 0x06
     db2:	37 81       	ldd	r19, Z+7	; 0x07
     db4:	8d 81       	ldd	r24, Y+5	; 0x05
     db6:	9e 81       	ldd	r25, Y+6	; 0x06
     db8:	fc 01       	movw	r30, r24
     dba:	26 83       	std	Z+6, r18	; 0x06
     dbc:	37 83       	std	Z+7, r19	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	9a 81       	ldd	r25, Y+2	; 0x02
     dc2:	fc 01       	movw	r30, r24
     dc4:	86 81       	ldd	r24, Z+6	; 0x06
     dc6:	97 81       	ldd	r25, Z+7	; 0x07
     dc8:	2d 81       	ldd	r18, Y+5	; 0x05
     dca:	3e 81       	ldd	r19, Y+6	; 0x06
     dcc:	fc 01       	movw	r30, r24
     dce:	24 83       	std	Z+4, r18	; 0x04
     dd0:	35 83       	std	Z+5, r19	; 0x05
	pxIndex->pxPrevious = pxNewListItem;
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	9a 81       	ldd	r25, Y+2	; 0x02
     dd6:	2d 81       	ldd	r18, Y+5	; 0x05
     dd8:	3e 81       	ldd	r19, Y+6	; 0x06
     dda:	fc 01       	movw	r30, r24
     ddc:	26 83       	std	Z+6, r18	; 0x06
     dde:	37 83       	std	Z+7, r19	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     de0:	8d 81       	ldd	r24, Y+5	; 0x05
     de2:	9e 81       	ldd	r25, Y+6	; 0x06
     de4:	2b 81       	ldd	r18, Y+3	; 0x03
     de6:	3c 81       	ldd	r19, Y+4	; 0x04
     de8:	fc 01       	movw	r30, r24
     dea:	22 87       	std	Z+10, r18	; 0x0a
     dec:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	9c 81       	ldd	r25, Y+4	; 0x04
     df2:	fc 01       	movw	r30, r24
     df4:	80 81       	ld	r24, Z
     df6:	21 e0       	ldi	r18, 0x01	; 1
     df8:	28 0f       	add	r18, r24
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	9c 81       	ldd	r25, Y+4	; 0x04
     dfe:	fc 01       	movw	r30, r24
     e00:	20 83       	st	Z, r18
}
     e02:	00 00       	nop
     e04:	26 96       	adiw	r28, 0x06	; 6
     e06:	cd bf       	out	0x3d, r28	; 61
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	08 95       	ret

00000e10 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	2a 97       	sbiw	r28, 0x0a	; 10
     e1a:	cd bf       	out	0x3d, r28	; 61
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	8f 83       	std	Y+7, r24	; 0x07
     e20:	98 87       	std	Y+8, r25	; 0x08
     e22:	69 87       	std	Y+9, r22	; 0x09
     e24:	7a 87       	std	Y+10, r23	; 0x0a
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     e26:	89 85       	ldd	r24, Y+9	; 0x09
     e28:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2a:	fc 01       	movw	r30, r24
     e2c:	80 81       	ld	r24, Z
     e2e:	91 81       	ldd	r25, Z+1	; 0x01
     e30:	a2 81       	ldd	r26, Z+2	; 0x02
     e32:	b3 81       	ldd	r27, Z+3	; 0x03
     e34:	8b 83       	std	Y+3, r24	; 0x03
     e36:	9c 83       	std	Y+4, r25	; 0x04
     e38:	ad 83       	std	Y+5, r26	; 0x05
     e3a:	be 83       	std	Y+6, r27	; 0x06
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	9c 81       	ldd	r25, Y+4	; 0x04
     e40:	ad 81       	ldd	r26, Y+5	; 0x05
     e42:	be 81       	ldd	r27, Y+6	; 0x06
     e44:	8f 3f       	cpi	r24, 0xFF	; 255
     e46:	9f 4f       	sbci	r25, 0xFF	; 255
     e48:	af 4f       	sbci	r26, 0xFF	; 255
     e4a:	bf 4f       	sbci	r27, 0xFF	; 255
     e4c:	41 f4       	brne	.+16     	; 0xe5e <vListInsert+0x4e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     e4e:	8f 81       	ldd	r24, Y+7	; 0x07
     e50:	98 85       	ldd	r25, Y+8	; 0x08
     e52:	fc 01       	movw	r30, r24
     e54:	81 85       	ldd	r24, Z+9	; 0x09
     e56:	92 85       	ldd	r25, Z+10	; 0x0a
     e58:	89 83       	std	Y+1, r24	; 0x01
     e5a:	9a 83       	std	Y+2, r25	; 0x02
     e5c:	20 c0       	rjmp	.+64     	; 0xe9e <vListInsert+0x8e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     e5e:	8f 81       	ldd	r24, Y+7	; 0x07
     e60:	98 85       	ldd	r25, Y+8	; 0x08
     e62:	03 96       	adiw	r24, 0x03	; 3
     e64:	89 83       	std	Y+1, r24	; 0x01
     e66:	9a 83       	std	Y+2, r25	; 0x02
     e68:	07 c0       	rjmp	.+14     	; 0xe78 <vListInsert+0x68>
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	9a 81       	ldd	r25, Y+2	; 0x02
     e6e:	fc 01       	movw	r30, r24
     e70:	84 81       	ldd	r24, Z+4	; 0x04
     e72:	95 81       	ldd	r25, Z+5	; 0x05
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	9a 83       	std	Y+2, r25	; 0x02
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	9a 81       	ldd	r25, Y+2	; 0x02
     e7c:	fc 01       	movw	r30, r24
     e7e:	84 81       	ldd	r24, Z+4	; 0x04
     e80:	95 81       	ldd	r25, Z+5	; 0x05
     e82:	fc 01       	movw	r30, r24
     e84:	20 81       	ld	r18, Z
     e86:	31 81       	ldd	r19, Z+1	; 0x01
     e88:	42 81       	ldd	r20, Z+2	; 0x02
     e8a:	53 81       	ldd	r21, Z+3	; 0x03
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	9c 81       	ldd	r25, Y+4	; 0x04
     e90:	ad 81       	ldd	r26, Y+5	; 0x05
     e92:	be 81       	ldd	r27, Y+6	; 0x06
     e94:	82 17       	cp	r24, r18
     e96:	93 07       	cpc	r25, r19
     e98:	a4 07       	cpc	r26, r20
     e9a:	b5 07       	cpc	r27, r21
     e9c:	30 f7       	brcc	.-52     	; 0xe6a <vListInsert+0x5a>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	9a 81       	ldd	r25, Y+2	; 0x02
     ea2:	fc 01       	movw	r30, r24
     ea4:	24 81       	ldd	r18, Z+4	; 0x04
     ea6:	35 81       	ldd	r19, Z+5	; 0x05
     ea8:	89 85       	ldd	r24, Y+9	; 0x09
     eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
     eac:	fc 01       	movw	r30, r24
     eae:	24 83       	std	Z+4, r18	; 0x04
     eb0:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     eb2:	89 85       	ldd	r24, Y+9	; 0x09
     eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb6:	fc 01       	movw	r30, r24
     eb8:	84 81       	ldd	r24, Z+4	; 0x04
     eba:	95 81       	ldd	r25, Z+5	; 0x05
     ebc:	29 85       	ldd	r18, Y+9	; 0x09
     ebe:	3a 85       	ldd	r19, Y+10	; 0x0a
     ec0:	fc 01       	movw	r30, r24
     ec2:	26 83       	std	Z+6, r18	; 0x06
     ec4:	37 83       	std	Z+7, r19	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
     ec6:	89 85       	ldd	r24, Y+9	; 0x09
     ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eca:	29 81       	ldd	r18, Y+1	; 0x01
     ecc:	3a 81       	ldd	r19, Y+2	; 0x02
     ece:	fc 01       	movw	r30, r24
     ed0:	26 83       	std	Z+6, r18	; 0x06
     ed2:	37 83       	std	Z+7, r19	; 0x07
	pxIterator->pxNext = pxNewListItem;
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	9a 81       	ldd	r25, Y+2	; 0x02
     ed8:	29 85       	ldd	r18, Y+9	; 0x09
     eda:	3a 85       	ldd	r19, Y+10	; 0x0a
     edc:	fc 01       	movw	r30, r24
     ede:	24 83       	std	Z+4, r18	; 0x04
     ee0:	35 83       	std	Z+5, r19	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     ee2:	89 85       	ldd	r24, Y+9	; 0x09
     ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee6:	2f 81       	ldd	r18, Y+7	; 0x07
     ee8:	38 85       	ldd	r19, Y+8	; 0x08
     eea:	fc 01       	movw	r30, r24
     eec:	22 87       	std	Z+10, r18	; 0x0a
     eee:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
     ef0:	8f 81       	ldd	r24, Y+7	; 0x07
     ef2:	98 85       	ldd	r25, Y+8	; 0x08
     ef4:	fc 01       	movw	r30, r24
     ef6:	80 81       	ld	r24, Z
     ef8:	21 e0       	ldi	r18, 0x01	; 1
     efa:	28 0f       	add	r18, r24
     efc:	8f 81       	ldd	r24, Y+7	; 0x07
     efe:	98 85       	ldd	r25, Y+8	; 0x08
     f00:	fc 01       	movw	r30, r24
     f02:	20 83       	st	Z, r18
}
     f04:	00 00       	nop
     f06:	2a 96       	adiw	r28, 0x0a	; 10
     f08:	cd bf       	out	0x3d, r28	; 61
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	08 95       	ret

00000f12 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	00 d0       	rcall	.+0      	; 0xf18 <uxListRemove+0x6>
     f18:	1f 92       	push	r1
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	8b 83       	std	Y+3, r24	; 0x03
     f20:	9c 83       	std	Y+4, r25	; 0x04
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	9c 81       	ldd	r25, Y+4	; 0x04
     f26:	fc 01       	movw	r30, r24
     f28:	82 85       	ldd	r24, Z+10	; 0x0a
     f2a:	93 85       	ldd	r25, Z+11	; 0x0b
     f2c:	89 83       	std	Y+1, r24	; 0x01
     f2e:	9a 83       	std	Y+2, r25	; 0x02

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	9c 81       	ldd	r25, Y+4	; 0x04
     f34:	fc 01       	movw	r30, r24
     f36:	84 81       	ldd	r24, Z+4	; 0x04
     f38:	95 81       	ldd	r25, Z+5	; 0x05
     f3a:	2b 81       	ldd	r18, Y+3	; 0x03
     f3c:	3c 81       	ldd	r19, Y+4	; 0x04
     f3e:	f9 01       	movw	r30, r18
     f40:	26 81       	ldd	r18, Z+6	; 0x06
     f42:	37 81       	ldd	r19, Z+7	; 0x07
     f44:	fc 01       	movw	r30, r24
     f46:	26 83       	std	Z+6, r18	; 0x06
     f48:	37 83       	std	Z+7, r19	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	9c 81       	ldd	r25, Y+4	; 0x04
     f4e:	fc 01       	movw	r30, r24
     f50:	86 81       	ldd	r24, Z+6	; 0x06
     f52:	97 81       	ldd	r25, Z+7	; 0x07
     f54:	2b 81       	ldd	r18, Y+3	; 0x03
     f56:	3c 81       	ldd	r19, Y+4	; 0x04
     f58:	f9 01       	movw	r30, r18
     f5a:	24 81       	ldd	r18, Z+4	; 0x04
     f5c:	35 81       	ldd	r19, Z+5	; 0x05
     f5e:	fc 01       	movw	r30, r24
     f60:	24 83       	std	Z+4, r18	; 0x04
     f62:	35 83       	std	Z+5, r19	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	9a 81       	ldd	r25, Y+2	; 0x02
     f68:	fc 01       	movw	r30, r24
     f6a:	21 81       	ldd	r18, Z+1	; 0x01
     f6c:	32 81       	ldd	r19, Z+2	; 0x02
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	9c 81       	ldd	r25, Y+4	; 0x04
     f72:	28 17       	cp	r18, r24
     f74:	39 07       	cpc	r19, r25
     f76:	51 f4       	brne	.+20     	; 0xf8c <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	9c 81       	ldd	r25, Y+4	; 0x04
     f7c:	fc 01       	movw	r30, r24
     f7e:	26 81       	ldd	r18, Z+6	; 0x06
     f80:	37 81       	ldd	r19, Z+7	; 0x07
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	9a 81       	ldd	r25, Y+2	; 0x02
     f86:	fc 01       	movw	r30, r24
     f88:	21 83       	std	Z+1, r18	; 0x01
     f8a:	32 83       	std	Z+2, r19	; 0x02
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	9c 81       	ldd	r25, Y+4	; 0x04
     f90:	fc 01       	movw	r30, r24
     f92:	12 86       	std	Z+10, r1	; 0x0a
     f94:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	9a 81       	ldd	r25, Y+2	; 0x02
     f9a:	fc 01       	movw	r30, r24
     f9c:	80 81       	ld	r24, Z
     f9e:	2f ef       	ldi	r18, 0xFF	; 255
     fa0:	28 0f       	add	r18, r24
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	9a 81       	ldd	r25, Y+2	; 0x02
     fa6:	fc 01       	movw	r30, r24
     fa8:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	fc 01       	movw	r30, r24
     fb0:	80 81       	ld	r24, Z
}
     fb2:	24 96       	adiw	r28, 0x04	; 4
     fb4:	cd bf       	out	0x3d, r28	; 61
     fb6:	de bf       	out	0x3e, r29	; 62
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	08 95       	ret

00000fbe <_portSetInterruptMaskFromIsr>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     fbe:	1f 93       	push	r17
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	80 ea       	ldi	r24, 0xA0	; 160
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	fc 01       	movw	r30, r24
     fce:	12 81       	ldd	r17, Z+2	; 0x02
     fd0:	80 ea       	ldi	r24, 0xA0	; 160
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	20 ea       	ldi	r18, 0xA0	; 160
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	f9 01       	movw	r30, r18
     fda:	22 81       	ldd	r18, Z+2	; 0x02
     fdc:	28 7f       	andi	r18, 0xF8	; 248
     fde:	fc 01       	movw	r30, r24
     fe0:	22 83       	std	Z+2, r18	; 0x02
     fe2:	81 2f       	mov	r24, r17
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	08 95       	ret

00000fec <pxPortInitialiseStack>:
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	2a 97       	sbiw	r28, 0x0a	; 10
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	8d 83       	std	Y+5, r24	; 0x05
     ffc:	9e 83       	std	Y+6, r25	; 0x06
     ffe:	6f 83       	std	Y+7, r22	; 0x07
    1000:	78 87       	std	Y+8, r23	; 0x08
    1002:	49 87       	std	Y+9, r20	; 0x09
    1004:	5a 87       	std	Y+10, r21	; 0x0a
    1006:	8d 81       	ldd	r24, Y+5	; 0x05
    1008:	9e 81       	ldd	r25, Y+6	; 0x06
    100a:	21 e1       	ldi	r18, 0x11	; 17
    100c:	fc 01       	movw	r30, r24
    100e:	20 83       	st	Z, r18
    1010:	8d 81       	ldd	r24, Y+5	; 0x05
    1012:	9e 81       	ldd	r25, Y+6	; 0x06
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	8d 83       	std	Y+5, r24	; 0x05
    1018:	9e 83       	std	Y+6, r25	; 0x06
    101a:	8d 81       	ldd	r24, Y+5	; 0x05
    101c:	9e 81       	ldd	r25, Y+6	; 0x06
    101e:	22 e2       	ldi	r18, 0x22	; 34
    1020:	fc 01       	movw	r30, r24
    1022:	20 83       	st	Z, r18
    1024:	8d 81       	ldd	r24, Y+5	; 0x05
    1026:	9e 81       	ldd	r25, Y+6	; 0x06
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	8d 83       	std	Y+5, r24	; 0x05
    102c:	9e 83       	std	Y+6, r25	; 0x06
    102e:	8d 81       	ldd	r24, Y+5	; 0x05
    1030:	9e 81       	ldd	r25, Y+6	; 0x06
    1032:	23 e3       	ldi	r18, 0x33	; 51
    1034:	fc 01       	movw	r30, r24
    1036:	20 83       	st	Z, r18
    1038:	8d 81       	ldd	r24, Y+5	; 0x05
    103a:	9e 81       	ldd	r25, Y+6	; 0x06
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	8d 83       	std	Y+5, r24	; 0x05
    1040:	9e 83       	std	Y+6, r25	; 0x06
    1042:	8f 81       	ldd	r24, Y+7	; 0x07
    1044:	98 85       	ldd	r25, Y+8	; 0x08
    1046:	cc 01       	movw	r24, r24
    1048:	a0 e0       	ldi	r26, 0x00	; 0
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	89 83       	std	Y+1, r24	; 0x01
    104e:	9a 83       	std	Y+2, r25	; 0x02
    1050:	ab 83       	std	Y+3, r26	; 0x03
    1052:	bc 83       	std	Y+4, r27	; 0x04
    1054:	29 81       	ldd	r18, Y+1	; 0x01
    1056:	8d 81       	ldd	r24, Y+5	; 0x05
    1058:	9e 81       	ldd	r25, Y+6	; 0x06
    105a:	fc 01       	movw	r30, r24
    105c:	20 83       	st	Z, r18
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	9e 81       	ldd	r25, Y+6	; 0x06
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	8d 83       	std	Y+5, r24	; 0x05
    1066:	9e 83       	std	Y+6, r25	; 0x06
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	9a 81       	ldd	r25, Y+2	; 0x02
    106c:	ab 81       	ldd	r26, Y+3	; 0x03
    106e:	bc 81       	ldd	r27, Y+4	; 0x04
    1070:	89 2f       	mov	r24, r25
    1072:	9a 2f       	mov	r25, r26
    1074:	ab 2f       	mov	r26, r27
    1076:	bb 27       	eor	r27, r27
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	9a 83       	std	Y+2, r25	; 0x02
    107c:	ab 83       	std	Y+3, r26	; 0x03
    107e:	bc 83       	std	Y+4, r27	; 0x04
    1080:	29 81       	ldd	r18, Y+1	; 0x01
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	9e 81       	ldd	r25, Y+6	; 0x06
    1086:	fc 01       	movw	r30, r24
    1088:	20 83       	st	Z, r18
    108a:	8d 81       	ldd	r24, Y+5	; 0x05
    108c:	9e 81       	ldd	r25, Y+6	; 0x06
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	8d 83       	std	Y+5, r24	; 0x05
    1092:	9e 83       	std	Y+6, r25	; 0x06
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	9a 81       	ldd	r25, Y+2	; 0x02
    1098:	ab 81       	ldd	r26, Y+3	; 0x03
    109a:	bc 81       	ldd	r27, Y+4	; 0x04
    109c:	89 2f       	mov	r24, r25
    109e:	9a 2f       	mov	r25, r26
    10a0:	ab 2f       	mov	r26, r27
    10a2:	bb 27       	eor	r27, r27
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	9a 83       	std	Y+2, r25	; 0x02
    10a8:	ab 83       	std	Y+3, r26	; 0x03
    10aa:	bc 83       	std	Y+4, r27	; 0x04
    10ac:	29 81       	ldd	r18, Y+1	; 0x01
    10ae:	8d 81       	ldd	r24, Y+5	; 0x05
    10b0:	9e 81       	ldd	r25, Y+6	; 0x06
    10b2:	fc 01       	movw	r30, r24
    10b4:	20 83       	st	Z, r18
    10b6:	8d 81       	ldd	r24, Y+5	; 0x05
    10b8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	8d 83       	std	Y+5, r24	; 0x05
    10be:	9e 83       	std	Y+6, r25	; 0x06
    10c0:	8d 81       	ldd	r24, Y+5	; 0x05
    10c2:	9e 81       	ldd	r25, Y+6	; 0x06
    10c4:	21 e3       	ldi	r18, 0x31	; 49
    10c6:	fc 01       	movw	r30, r24
    10c8:	20 83       	st	Z, r18
    10ca:	8d 81       	ldd	r24, Y+5	; 0x05
    10cc:	9e 81       	ldd	r25, Y+6	; 0x06
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	8d 83       	std	Y+5, r24	; 0x05
    10d2:	9e 83       	std	Y+6, r25	; 0x06
    10d4:	8d 81       	ldd	r24, Y+5	; 0x05
    10d6:	9e 81       	ldd	r25, Y+6	; 0x06
    10d8:	20 e8       	ldi	r18, 0x80	; 128
    10da:	fc 01       	movw	r30, r24
    10dc:	20 83       	st	Z, r18
    10de:	8d 81       	ldd	r24, Y+5	; 0x05
    10e0:	9e 81       	ldd	r25, Y+6	; 0x06
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	8d 83       	std	Y+5, r24	; 0x05
    10e6:	9e 83       	std	Y+6, r25	; 0x06
    10e8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ea:	9e 81       	ldd	r25, Y+6	; 0x06
    10ec:	27 e8       	ldi	r18, 0x87	; 135
    10ee:	fc 01       	movw	r30, r24
    10f0:	20 83       	st	Z, r18
    10f2:	8d 81       	ldd	r24, Y+5	; 0x05
    10f4:	9e 81       	ldd	r25, Y+6	; 0x06
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	8d 83       	std	Y+5, r24	; 0x05
    10fa:	9e 83       	std	Y+6, r25	; 0x06
    10fc:	8d 81       	ldd	r24, Y+5	; 0x05
    10fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1100:	fc 01       	movw	r30, r24
    1102:	10 82       	st	Z, r1
    1104:	8d 81       	ldd	r24, Y+5	; 0x05
    1106:	9e 81       	ldd	r25, Y+6	; 0x06
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	8d 83       	std	Y+5, r24	; 0x05
    110c:	9e 83       	std	Y+6, r25	; 0x06
    110e:	8d 81       	ldd	r24, Y+5	; 0x05
    1110:	9e 81       	ldd	r25, Y+6	; 0x06
    1112:	fc 01       	movw	r30, r24
    1114:	10 82       	st	Z, r1
    1116:	8d 81       	ldd	r24, Y+5	; 0x05
    1118:	9e 81       	ldd	r25, Y+6	; 0x06
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	8d 83       	std	Y+5, r24	; 0x05
    111e:	9e 83       	std	Y+6, r25	; 0x06
    1120:	8d 81       	ldd	r24, Y+5	; 0x05
    1122:	9e 81       	ldd	r25, Y+6	; 0x06
    1124:	22 e0       	ldi	r18, 0x02	; 2
    1126:	fc 01       	movw	r30, r24
    1128:	20 83       	st	Z, r18
    112a:	8d 81       	ldd	r24, Y+5	; 0x05
    112c:	9e 81       	ldd	r25, Y+6	; 0x06
    112e:	01 97       	sbiw	r24, 0x01	; 1
    1130:	8d 83       	std	Y+5, r24	; 0x05
    1132:	9e 83       	std	Y+6, r25	; 0x06
    1134:	8d 81       	ldd	r24, Y+5	; 0x05
    1136:	9e 81       	ldd	r25, Y+6	; 0x06
    1138:	23 e0       	ldi	r18, 0x03	; 3
    113a:	fc 01       	movw	r30, r24
    113c:	20 83       	st	Z, r18
    113e:	8d 81       	ldd	r24, Y+5	; 0x05
    1140:	9e 81       	ldd	r25, Y+6	; 0x06
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	8d 83       	std	Y+5, r24	; 0x05
    1146:	9e 83       	std	Y+6, r25	; 0x06
    1148:	8d 81       	ldd	r24, Y+5	; 0x05
    114a:	9e 81       	ldd	r25, Y+6	; 0x06
    114c:	24 e0       	ldi	r18, 0x04	; 4
    114e:	fc 01       	movw	r30, r24
    1150:	20 83       	st	Z, r18
    1152:	8d 81       	ldd	r24, Y+5	; 0x05
    1154:	9e 81       	ldd	r25, Y+6	; 0x06
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	8d 83       	std	Y+5, r24	; 0x05
    115a:	9e 83       	std	Y+6, r25	; 0x06
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	25 e0       	ldi	r18, 0x05	; 5
    1162:	fc 01       	movw	r30, r24
    1164:	20 83       	st	Z, r18
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	01 97       	sbiw	r24, 0x01	; 1
    116c:	8d 83       	std	Y+5, r24	; 0x05
    116e:	9e 83       	std	Y+6, r25	; 0x06
    1170:	8d 81       	ldd	r24, Y+5	; 0x05
    1172:	9e 81       	ldd	r25, Y+6	; 0x06
    1174:	26 e0       	ldi	r18, 0x06	; 6
    1176:	fc 01       	movw	r30, r24
    1178:	20 83       	st	Z, r18
    117a:	8d 81       	ldd	r24, Y+5	; 0x05
    117c:	9e 81       	ldd	r25, Y+6	; 0x06
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	8d 83       	std	Y+5, r24	; 0x05
    1182:	9e 83       	std	Y+6, r25	; 0x06
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	27 e0       	ldi	r18, 0x07	; 7
    118a:	fc 01       	movw	r30, r24
    118c:	20 83       	st	Z, r18
    118e:	8d 81       	ldd	r24, Y+5	; 0x05
    1190:	9e 81       	ldd	r25, Y+6	; 0x06
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	8d 83       	std	Y+5, r24	; 0x05
    1196:	9e 83       	std	Y+6, r25	; 0x06
    1198:	8d 81       	ldd	r24, Y+5	; 0x05
    119a:	9e 81       	ldd	r25, Y+6	; 0x06
    119c:	28 e0       	ldi	r18, 0x08	; 8
    119e:	fc 01       	movw	r30, r24
    11a0:	20 83       	st	Z, r18
    11a2:	8d 81       	ldd	r24, Y+5	; 0x05
    11a4:	9e 81       	ldd	r25, Y+6	; 0x06
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	8d 83       	std	Y+5, r24	; 0x05
    11aa:	9e 83       	std	Y+6, r25	; 0x06
    11ac:	8d 81       	ldd	r24, Y+5	; 0x05
    11ae:	9e 81       	ldd	r25, Y+6	; 0x06
    11b0:	29 e0       	ldi	r18, 0x09	; 9
    11b2:	fc 01       	movw	r30, r24
    11b4:	20 83       	st	Z, r18
    11b6:	8d 81       	ldd	r24, Y+5	; 0x05
    11b8:	9e 81       	ldd	r25, Y+6	; 0x06
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	8d 83       	std	Y+5, r24	; 0x05
    11be:	9e 83       	std	Y+6, r25	; 0x06
    11c0:	8d 81       	ldd	r24, Y+5	; 0x05
    11c2:	9e 81       	ldd	r25, Y+6	; 0x06
    11c4:	20 e1       	ldi	r18, 0x10	; 16
    11c6:	fc 01       	movw	r30, r24
    11c8:	20 83       	st	Z, r18
    11ca:	8d 81       	ldd	r24, Y+5	; 0x05
    11cc:	9e 81       	ldd	r25, Y+6	; 0x06
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	8d 83       	std	Y+5, r24	; 0x05
    11d2:	9e 83       	std	Y+6, r25	; 0x06
    11d4:	8d 81       	ldd	r24, Y+5	; 0x05
    11d6:	9e 81       	ldd	r25, Y+6	; 0x06
    11d8:	21 e1       	ldi	r18, 0x11	; 17
    11da:	fc 01       	movw	r30, r24
    11dc:	20 83       	st	Z, r18
    11de:	8d 81       	ldd	r24, Y+5	; 0x05
    11e0:	9e 81       	ldd	r25, Y+6	; 0x06
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	8d 83       	std	Y+5, r24	; 0x05
    11e6:	9e 83       	std	Y+6, r25	; 0x06
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	22 e1       	ldi	r18, 0x12	; 18
    11ee:	fc 01       	movw	r30, r24
    11f0:	20 83       	st	Z, r18
    11f2:	8d 81       	ldd	r24, Y+5	; 0x05
    11f4:	9e 81       	ldd	r25, Y+6	; 0x06
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	8d 83       	std	Y+5, r24	; 0x05
    11fa:	9e 83       	std	Y+6, r25	; 0x06
    11fc:	8d 81       	ldd	r24, Y+5	; 0x05
    11fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1200:	23 e1       	ldi	r18, 0x13	; 19
    1202:	fc 01       	movw	r30, r24
    1204:	20 83       	st	Z, r18
    1206:	8d 81       	ldd	r24, Y+5	; 0x05
    1208:	9e 81       	ldd	r25, Y+6	; 0x06
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	8d 83       	std	Y+5, r24	; 0x05
    120e:	9e 83       	std	Y+6, r25	; 0x06
    1210:	8d 81       	ldd	r24, Y+5	; 0x05
    1212:	9e 81       	ldd	r25, Y+6	; 0x06
    1214:	24 e1       	ldi	r18, 0x14	; 20
    1216:	fc 01       	movw	r30, r24
    1218:	20 83       	st	Z, r18
    121a:	8d 81       	ldd	r24, Y+5	; 0x05
    121c:	9e 81       	ldd	r25, Y+6	; 0x06
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	8d 83       	std	Y+5, r24	; 0x05
    1222:	9e 83       	std	Y+6, r25	; 0x06
    1224:	8d 81       	ldd	r24, Y+5	; 0x05
    1226:	9e 81       	ldd	r25, Y+6	; 0x06
    1228:	25 e1       	ldi	r18, 0x15	; 21
    122a:	fc 01       	movw	r30, r24
    122c:	20 83       	st	Z, r18
    122e:	8d 81       	ldd	r24, Y+5	; 0x05
    1230:	9e 81       	ldd	r25, Y+6	; 0x06
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	8d 83       	std	Y+5, r24	; 0x05
    1236:	9e 83       	std	Y+6, r25	; 0x06
    1238:	8d 81       	ldd	r24, Y+5	; 0x05
    123a:	9e 81       	ldd	r25, Y+6	; 0x06
    123c:	26 e1       	ldi	r18, 0x16	; 22
    123e:	fc 01       	movw	r30, r24
    1240:	20 83       	st	Z, r18
    1242:	8d 81       	ldd	r24, Y+5	; 0x05
    1244:	9e 81       	ldd	r25, Y+6	; 0x06
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	8d 83       	std	Y+5, r24	; 0x05
    124a:	9e 83       	std	Y+6, r25	; 0x06
    124c:	8d 81       	ldd	r24, Y+5	; 0x05
    124e:	9e 81       	ldd	r25, Y+6	; 0x06
    1250:	27 e1       	ldi	r18, 0x17	; 23
    1252:	fc 01       	movw	r30, r24
    1254:	20 83       	st	Z, r18
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	9e 81       	ldd	r25, Y+6	; 0x06
    125a:	01 97       	sbiw	r24, 0x01	; 1
    125c:	8d 83       	std	Y+5, r24	; 0x05
    125e:	9e 83       	std	Y+6, r25	; 0x06
    1260:	8d 81       	ldd	r24, Y+5	; 0x05
    1262:	9e 81       	ldd	r25, Y+6	; 0x06
    1264:	28 e1       	ldi	r18, 0x18	; 24
    1266:	fc 01       	movw	r30, r24
    1268:	20 83       	st	Z, r18
    126a:	8d 81       	ldd	r24, Y+5	; 0x05
    126c:	9e 81       	ldd	r25, Y+6	; 0x06
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	8d 83       	std	Y+5, r24	; 0x05
    1272:	9e 83       	std	Y+6, r25	; 0x06
    1274:	8d 81       	ldd	r24, Y+5	; 0x05
    1276:	9e 81       	ldd	r25, Y+6	; 0x06
    1278:	29 e1       	ldi	r18, 0x19	; 25
    127a:	fc 01       	movw	r30, r24
    127c:	20 83       	st	Z, r18
    127e:	8d 81       	ldd	r24, Y+5	; 0x05
    1280:	9e 81       	ldd	r25, Y+6	; 0x06
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	8d 83       	std	Y+5, r24	; 0x05
    1286:	9e 83       	std	Y+6, r25	; 0x06
    1288:	8d 81       	ldd	r24, Y+5	; 0x05
    128a:	9e 81       	ldd	r25, Y+6	; 0x06
    128c:	20 e2       	ldi	r18, 0x20	; 32
    128e:	fc 01       	movw	r30, r24
    1290:	20 83       	st	Z, r18
    1292:	8d 81       	ldd	r24, Y+5	; 0x05
    1294:	9e 81       	ldd	r25, Y+6	; 0x06
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	8d 83       	std	Y+5, r24	; 0x05
    129a:	9e 83       	std	Y+6, r25	; 0x06
    129c:	8d 81       	ldd	r24, Y+5	; 0x05
    129e:	9e 81       	ldd	r25, Y+6	; 0x06
    12a0:	21 e2       	ldi	r18, 0x21	; 33
    12a2:	fc 01       	movw	r30, r24
    12a4:	20 83       	st	Z, r18
    12a6:	8d 81       	ldd	r24, Y+5	; 0x05
    12a8:	9e 81       	ldd	r25, Y+6	; 0x06
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	8d 83       	std	Y+5, r24	; 0x05
    12ae:	9e 83       	std	Y+6, r25	; 0x06
    12b0:	8d 81       	ldd	r24, Y+5	; 0x05
    12b2:	9e 81       	ldd	r25, Y+6	; 0x06
    12b4:	22 e2       	ldi	r18, 0x22	; 34
    12b6:	fc 01       	movw	r30, r24
    12b8:	20 83       	st	Z, r18
    12ba:	8d 81       	ldd	r24, Y+5	; 0x05
    12bc:	9e 81       	ldd	r25, Y+6	; 0x06
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	8d 83       	std	Y+5, r24	; 0x05
    12c2:	9e 83       	std	Y+6, r25	; 0x06
    12c4:	8d 81       	ldd	r24, Y+5	; 0x05
    12c6:	9e 81       	ldd	r25, Y+6	; 0x06
    12c8:	23 e2       	ldi	r18, 0x23	; 35
    12ca:	fc 01       	movw	r30, r24
    12cc:	20 83       	st	Z, r18
    12ce:	8d 81       	ldd	r24, Y+5	; 0x05
    12d0:	9e 81       	ldd	r25, Y+6	; 0x06
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	8d 83       	std	Y+5, r24	; 0x05
    12d6:	9e 83       	std	Y+6, r25	; 0x06
    12d8:	89 85       	ldd	r24, Y+9	; 0x09
    12da:	9a 85       	ldd	r25, Y+10	; 0x0a
    12dc:	cc 01       	movw	r24, r24
    12de:	a0 e0       	ldi	r26, 0x00	; 0
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	89 83       	std	Y+1, r24	; 0x01
    12e4:	9a 83       	std	Y+2, r25	; 0x02
    12e6:	ab 83       	std	Y+3, r26	; 0x03
    12e8:	bc 83       	std	Y+4, r27	; 0x04
    12ea:	29 81       	ldd	r18, Y+1	; 0x01
    12ec:	8d 81       	ldd	r24, Y+5	; 0x05
    12ee:	9e 81       	ldd	r25, Y+6	; 0x06
    12f0:	fc 01       	movw	r30, r24
    12f2:	20 83       	st	Z, r18
    12f4:	8d 81       	ldd	r24, Y+5	; 0x05
    12f6:	9e 81       	ldd	r25, Y+6	; 0x06
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	8d 83       	std	Y+5, r24	; 0x05
    12fc:	9e 83       	std	Y+6, r25	; 0x06
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	9a 81       	ldd	r25, Y+2	; 0x02
    1302:	ab 81       	ldd	r26, Y+3	; 0x03
    1304:	bc 81       	ldd	r27, Y+4	; 0x04
    1306:	89 2f       	mov	r24, r25
    1308:	9a 2f       	mov	r25, r26
    130a:	ab 2f       	mov	r26, r27
    130c:	bb 27       	eor	r27, r27
    130e:	89 83       	std	Y+1, r24	; 0x01
    1310:	9a 83       	std	Y+2, r25	; 0x02
    1312:	ab 83       	std	Y+3, r26	; 0x03
    1314:	bc 83       	std	Y+4, r27	; 0x04
    1316:	29 81       	ldd	r18, Y+1	; 0x01
    1318:	8d 81       	ldd	r24, Y+5	; 0x05
    131a:	9e 81       	ldd	r25, Y+6	; 0x06
    131c:	fc 01       	movw	r30, r24
    131e:	20 83       	st	Z, r18
    1320:	8d 81       	ldd	r24, Y+5	; 0x05
    1322:	9e 81       	ldd	r25, Y+6	; 0x06
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	8d 83       	std	Y+5, r24	; 0x05
    1328:	9e 83       	std	Y+6, r25	; 0x06
    132a:	8d 81       	ldd	r24, Y+5	; 0x05
    132c:	9e 81       	ldd	r25, Y+6	; 0x06
    132e:	26 e2       	ldi	r18, 0x26	; 38
    1330:	fc 01       	movw	r30, r24
    1332:	20 83       	st	Z, r18
    1334:	8d 81       	ldd	r24, Y+5	; 0x05
    1336:	9e 81       	ldd	r25, Y+6	; 0x06
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	8d 83       	std	Y+5, r24	; 0x05
    133c:	9e 83       	std	Y+6, r25	; 0x06
    133e:	8d 81       	ldd	r24, Y+5	; 0x05
    1340:	9e 81       	ldd	r25, Y+6	; 0x06
    1342:	27 e2       	ldi	r18, 0x27	; 39
    1344:	fc 01       	movw	r30, r24
    1346:	20 83       	st	Z, r18
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	8d 83       	std	Y+5, r24	; 0x05
    1350:	9e 83       	std	Y+6, r25	; 0x06
    1352:	8d 81       	ldd	r24, Y+5	; 0x05
    1354:	9e 81       	ldd	r25, Y+6	; 0x06
    1356:	28 e2       	ldi	r18, 0x28	; 40
    1358:	fc 01       	movw	r30, r24
    135a:	20 83       	st	Z, r18
    135c:	8d 81       	ldd	r24, Y+5	; 0x05
    135e:	9e 81       	ldd	r25, Y+6	; 0x06
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	8d 83       	std	Y+5, r24	; 0x05
    1364:	9e 83       	std	Y+6, r25	; 0x06
    1366:	8d 81       	ldd	r24, Y+5	; 0x05
    1368:	9e 81       	ldd	r25, Y+6	; 0x06
    136a:	29 e2       	ldi	r18, 0x29	; 41
    136c:	fc 01       	movw	r30, r24
    136e:	20 83       	st	Z, r18
    1370:	8d 81       	ldd	r24, Y+5	; 0x05
    1372:	9e 81       	ldd	r25, Y+6	; 0x06
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	8d 83       	std	Y+5, r24	; 0x05
    1378:	9e 83       	std	Y+6, r25	; 0x06
    137a:	8d 81       	ldd	r24, Y+5	; 0x05
    137c:	9e 81       	ldd	r25, Y+6	; 0x06
    137e:	20 e3       	ldi	r18, 0x30	; 48
    1380:	fc 01       	movw	r30, r24
    1382:	20 83       	st	Z, r18
    1384:	8d 81       	ldd	r24, Y+5	; 0x05
    1386:	9e 81       	ldd	r25, Y+6	; 0x06
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	8d 83       	std	Y+5, r24	; 0x05
    138c:	9e 83       	std	Y+6, r25	; 0x06
    138e:	8d 81       	ldd	r24, Y+5	; 0x05
    1390:	9e 81       	ldd	r25, Y+6	; 0x06
    1392:	2a 96       	adiw	r28, 0x0a	; 10
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	08 95       	ret

0000139e <xPortStartScheduler>:
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	0e 94 16 0b 	call	0x162c	; 0x162c <prvSetupTimerInterrupt>
    13aa:	a0 91 06 2c 	lds	r26, 0x2C06	; 0x802c06 <pxCurrentTCB>
    13ae:	b0 91 07 2c 	lds	r27, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    13b2:	0d 90       	ld	r0, X+
    13b4:	0d be       	out	0x3d, r0	; 61
    13b6:	0d 90       	ld	r0, X+
    13b8:	0e be       	out	0x3e, r0	; 62
    13ba:	ef 91       	pop	r30
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	bf 91       	pop	r27
    13c2:	af 91       	pop	r26
    13c4:	9f 91       	pop	r25
    13c6:	8f 91       	pop	r24
    13c8:	7f 91       	pop	r23
    13ca:	6f 91       	pop	r22
    13cc:	5f 91       	pop	r21
    13ce:	4f 91       	pop	r20
    13d0:	3f 91       	pop	r19
    13d2:	2f 91       	pop	r18
    13d4:	1f 91       	pop	r17
    13d6:	0f 91       	pop	r16
    13d8:	ff 90       	pop	r15
    13da:	ef 90       	pop	r14
    13dc:	df 90       	pop	r13
    13de:	cf 90       	pop	r12
    13e0:	bf 90       	pop	r11
    13e2:	af 90       	pop	r10
    13e4:	9f 90       	pop	r9
    13e6:	8f 90       	pop	r8
    13e8:	7f 90       	pop	r7
    13ea:	6f 90       	pop	r6
    13ec:	5f 90       	pop	r5
    13ee:	4f 90       	pop	r4
    13f0:	3f 90       	pop	r3
    13f2:	2f 90       	pop	r2
    13f4:	1f 90       	pop	r1
    13f6:	0f 90       	pop	r0
    13f8:	ff 91       	pop	r31
    13fa:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    13fe:	ff 91       	pop	r31
    1400:	ff bf       	out	0x3f, r31	; 63
    1402:	ff 91       	pop	r31
    1404:	08 95       	ret
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	08 95       	ret

0000140e <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    140e:	ff 93       	push	r31
    1410:	ff b7       	in	r31, 0x3f	; 63
    1412:	ff 93       	push	r31
    1414:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1418:	ff 93       	push	r31
    141a:	f8 7f       	andi	r31, 0xF8	; 248
    141c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1420:	0f 92       	push	r0
    1422:	1f 92       	push	r1
    1424:	11 24       	eor	r1, r1
    1426:	2f 92       	push	r2
    1428:	3f 92       	push	r3
    142a:	4f 92       	push	r4
    142c:	5f 92       	push	r5
    142e:	6f 92       	push	r6
    1430:	7f 92       	push	r7
    1432:	8f 92       	push	r8
    1434:	9f 92       	push	r9
    1436:	af 92       	push	r10
    1438:	bf 92       	push	r11
    143a:	cf 92       	push	r12
    143c:	df 92       	push	r13
    143e:	ef 92       	push	r14
    1440:	ff 92       	push	r15
    1442:	0f 93       	push	r16
    1444:	1f 93       	push	r17
    1446:	2f 93       	push	r18
    1448:	3f 93       	push	r19
    144a:	4f 93       	push	r20
    144c:	5f 93       	push	r21
    144e:	6f 93       	push	r22
    1450:	7f 93       	push	r23
    1452:	8f 93       	push	r24
    1454:	9f 93       	push	r25
    1456:	af 93       	push	r26
    1458:	bf 93       	push	r27
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	ef 93       	push	r30
    1460:	a0 91 06 2c 	lds	r26, 0x2C06	; 0x802c06 <pxCurrentTCB>
    1464:	b0 91 07 2c 	lds	r27, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    1468:	0d b6       	in	r0, 0x3d	; 61
    146a:	0d 92       	st	X+, r0
    146c:	0e b6       	in	r0, 0x3e	; 62
    146e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1470:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1474:	a0 91 06 2c 	lds	r26, 0x2C06	; 0x802c06 <pxCurrentTCB>
    1478:	b0 91 07 2c 	lds	r27, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    147c:	0d 90       	ld	r0, X+
    147e:	0d be       	out	0x3d, r0	; 61
    1480:	0d 90       	ld	r0, X+
    1482:	0e be       	out	0x3e, r0	; 62
    1484:	ef 91       	pop	r30
    1486:	df 91       	pop	r29
    1488:	cf 91       	pop	r28
    148a:	bf 91       	pop	r27
    148c:	af 91       	pop	r26
    148e:	9f 91       	pop	r25
    1490:	8f 91       	pop	r24
    1492:	7f 91       	pop	r23
    1494:	6f 91       	pop	r22
    1496:	5f 91       	pop	r21
    1498:	4f 91       	pop	r20
    149a:	3f 91       	pop	r19
    149c:	2f 91       	pop	r18
    149e:	1f 91       	pop	r17
    14a0:	0f 91       	pop	r16
    14a2:	ff 90       	pop	r15
    14a4:	ef 90       	pop	r14
    14a6:	df 90       	pop	r13
    14a8:	cf 90       	pop	r12
    14aa:	bf 90       	pop	r11
    14ac:	af 90       	pop	r10
    14ae:	9f 90       	pop	r9
    14b0:	8f 90       	pop	r8
    14b2:	7f 90       	pop	r7
    14b4:	6f 90       	pop	r6
    14b6:	5f 90       	pop	r5
    14b8:	4f 90       	pop	r4
    14ba:	3f 90       	pop	r3
    14bc:	2f 90       	pop	r2
    14be:	1f 90       	pop	r1
    14c0:	0f 90       	pop	r0
    14c2:	ff 91       	pop	r31
    14c4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    14c8:	ff 91       	pop	r31
    14ca:	ff bf       	out	0x3f, r31	; 63
    14cc:	ff 91       	pop	r31
	asm volatile ( "ret" );
    14ce:	08 95       	ret
	...

000014d2 <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
    14d2:	1f 93       	push	r17
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	1f 92       	push	r1
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	89 83       	std	Y+1, r24	; 0x01
		intTaskSwitchPending |= xSwitchRequired;					
    14e0:	80 91 c0 2c 	lds	r24, 0x2CC0	; 0x802cc0 <intTaskSwitchPending>
    14e4:	98 2f       	mov	r25, r24
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	89 2b       	or	r24, r25
    14ea:	80 93 c0 2c 	sts	0x2CC0, r24	; 0x802cc0 <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
    14ee:	80 ea       	ldi	r24, 0xA0	; 160
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	fc 01       	movw	r30, r24
    14f4:	80 81       	ld	r24, Z
    14f6:	81 30       	cpi	r24, 0x01	; 1
    14f8:	61 f0       	breq	.+24     	; 0x1512 <portTaskSwitchContext+0x40>
    14fa:	80 ea       	ldi	r24, 0xA0	; 160
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	fc 01       	movw	r30, r24
    1500:	80 81       	ld	r24, Z
    1502:	82 30       	cpi	r24, 0x02	; 2
    1504:	31 f0       	breq	.+12     	; 0x1512 <portTaskSwitchContext+0x40>
    1506:	80 ea       	ldi	r24, 0xA0	; 160
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	fc 01       	movw	r30, r24
    150c:	80 81       	ld	r24, Z
    150e:	84 30       	cpi	r24, 0x04	; 4
    1510:	79 f4       	brne	.+30     	; 0x1530 <portTaskSwitchContext+0x5e>
    1512:	80 91 c0 2c 	lds	r24, 0x2CC0	; 0x802cc0 <intTaskSwitchPending>
    1516:	88 23       	and	r24, r24
    1518:	59 f0       	breq	.+22     	; 0x1530 <portTaskSwitchContext+0x5e>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
    151a:	0e 94 df 07 	call	0xfbe	; 0xfbe <_portSetInterruptMaskFromIsr>
    151e:	18 2f       	mov	r17, r24
			intTaskSwitchPending = 0;								
    1520:	10 92 c0 2c 	sts	0x2CC0, r1	; 0x802cc0 <intTaskSwitchPending>
			vTaskSwitchContext();                   				
    1524:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
    1528:	80 ea       	ldi	r24, 0xA0	; 160
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	fc 01       	movw	r30, r24
    152e:	12 83       	std	Z+2, r17	; 0x02
		}                                          					
	}
    1530:	00 00       	nop
    1532:	0f 90       	pop	r0
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	1f 91       	pop	r17
    153a:	08 95       	ret

0000153c <portTaskIncrementTick>:
	// This routine is only an indirect call to vTaskIncrementTick because
	// a local variable is necessary. Local variables cannot be used directly
	// in a naked isr because of the lack of the frame pointer.
	//
	static void portTaskIncrementTick( void )
	{
    153c:	1f 93       	push	r17
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
		register unsigned portBASE_TYPE uxSavedPmicCtrlReg;

 		uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR();
    1546:	0e 94 df 07 	call	0xfbe	; 0xfbe <_portSetInterruptMaskFromIsr>
    154a:	18 2f       	mov	r17, r24
		xTaskIncrementTick();
    154c:	0e 94 1c 14 	call	0x2838	; 0x2838 <xTaskIncrementTick>
 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedPmicCtrlReg );
    1550:	80 ea       	ldi	r24, 0xA0	; 160
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	fc 01       	movw	r30, r24
    1556:	12 83       	std	Z+2, r17	; 0x02
	}
    1558:	00 00       	nop
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	1f 91       	pop	r17
    1560:	08 95       	ret

00001562 <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
    1562:	ff 93       	push	r31
    1564:	ff b7       	in	r31, 0x3f	; 63
    1566:	ff 93       	push	r31
    1568:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    156c:	ff 93       	push	r31
    156e:	f8 7f       	andi	r31, 0xF8	; 248
    1570:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1574:	0f 92       	push	r0
    1576:	1f 92       	push	r1
    1578:	11 24       	eor	r1, r1
    157a:	2f 92       	push	r2
    157c:	3f 92       	push	r3
    157e:	4f 92       	push	r4
    1580:	5f 92       	push	r5
    1582:	6f 92       	push	r6
    1584:	7f 92       	push	r7
    1586:	8f 92       	push	r8
    1588:	9f 92       	push	r9
    158a:	af 92       	push	r10
    158c:	bf 92       	push	r11
    158e:	cf 92       	push	r12
    1590:	df 92       	push	r13
    1592:	ef 92       	push	r14
    1594:	ff 92       	push	r15
    1596:	0f 93       	push	r16
    1598:	1f 93       	push	r17
    159a:	2f 93       	push	r18
    159c:	3f 93       	push	r19
    159e:	4f 93       	push	r20
    15a0:	5f 93       	push	r21
    15a2:	6f 93       	push	r22
    15a4:	7f 93       	push	r23
    15a6:	8f 93       	push	r24
    15a8:	9f 93       	push	r25
    15aa:	af 93       	push	r26
    15ac:	bf 93       	push	r27
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    15b2:	ef 93       	push	r30
    15b4:	a0 91 06 2c 	lds	r26, 0x2C06	; 0x802c06 <pxCurrentTCB>
    15b8:	b0 91 07 2c 	lds	r27, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    15bc:	0d b6       	in	r0, 0x3d	; 61
    15be:	0d 92       	st	X+, r0
    15c0:	0e b6       	in	r0, 0x3e	; 62
    15c2:	0d 92       	st	X+, r0
		portTaskIncrementTick();
    15c4:	0e 94 9e 0a 	call	0x153c	; 0x153c <portTaskIncrementTick>
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <portTaskSwitchContext>
    15ce:	a0 91 06 2c 	lds	r26, 0x2C06	; 0x802c06 <pxCurrentTCB>
    15d2:	b0 91 07 2c 	lds	r27, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    15d6:	0d 90       	ld	r0, X+
    15d8:	0d be       	out	0x3d, r0	; 61
    15da:	0d 90       	ld	r0, X+
    15dc:	0e be       	out	0x3e, r0	; 62
    15de:	ef 91       	pop	r30
    15e0:	df 91       	pop	r29
    15e2:	cf 91       	pop	r28
    15e4:	bf 91       	pop	r27
    15e6:	af 91       	pop	r26
    15e8:	9f 91       	pop	r25
    15ea:	8f 91       	pop	r24
    15ec:	7f 91       	pop	r23
    15ee:	6f 91       	pop	r22
    15f0:	5f 91       	pop	r21
    15f2:	4f 91       	pop	r20
    15f4:	3f 91       	pop	r19
    15f6:	2f 91       	pop	r18
    15f8:	1f 91       	pop	r17
    15fa:	0f 91       	pop	r16
    15fc:	ff 90       	pop	r15
    15fe:	ef 90       	pop	r14
    1600:	df 90       	pop	r13
    1602:	cf 90       	pop	r12
    1604:	bf 90       	pop	r11
    1606:	af 90       	pop	r10
    1608:	9f 90       	pop	r9
    160a:	8f 90       	pop	r8
    160c:	7f 90       	pop	r7
    160e:	6f 90       	pop	r6
    1610:	5f 90       	pop	r5
    1612:	4f 90       	pop	r4
    1614:	3f 90       	pop	r3
    1616:	2f 90       	pop	r2
    1618:	1f 90       	pop	r1
    161a:	0f 90       	pop	r0
    161c:	ff 91       	pop	r31
    161e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1622:	ff 91       	pop	r31
    1624:	ff bf       	out	0x3f, r31	; 63
    1626:	ff 91       	pop	r31
    1628:	18 95       	reti
	...

0000162c <prvSetupTimerInterrupt>:
//-----------------------------------------------------------
//
// Setup of 16bit timer C0 to generate a tick interrupt in case of overflow.
//
static void prvSetupTimerInterrupt( void )
{
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	00 d0       	rcall	.+0      	; 0x1632 <prvSetupTimerInterrupt+0x6>
    1632:	1f 92       	push	r1
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62

	unsigned portLONG ulOvfMatch;

	ulOvfMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	9d e7       	ldi	r25, 0x7D	; 125
    163c:	a0 e0       	ldi	r26, 0x00	; 0
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	9a 83       	std	Y+2, r25	; 0x02
    1644:	ab 83       	std	Y+3, r26	; 0x03
    1646:	bc 83       	std	Y+4, r27	; 0x04

	// We only have 16bits so have to scale to get our required tick rate.
	ulOvfMatch /= portCLOCK_PRESCALER_TIMER0;
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	9a 81       	ldd	r25, Y+2	; 0x02
    164c:	ab 81       	ldd	r26, Y+3	; 0x03
    164e:	bc 81       	ldd	r27, Y+4	; 0x04
    1650:	68 94       	set
    1652:	15 f8       	bld	r1, 5
    1654:	b6 95       	lsr	r27
    1656:	a7 95       	ror	r26
    1658:	97 95       	ror	r25
    165a:	87 95       	ror	r24
    165c:	16 94       	lsr	r1
    165e:	d1 f7       	brne	.-12     	; 0x1654 <prvSetupTimerInterrupt+0x28>
    1660:	89 83       	std	Y+1, r24	; 0x01
    1662:	9a 83       	std	Y+2, r25	; 0x02
    1664:	ab 83       	std	Y+3, r26	; 0x03
    1666:	bc 83       	std	Y+4, r27	; 0x04

	// Adjust for correct value. (because overflow clear if CNT > PER)
	ulOvfMatch -= ( unsigned portLONG ) 1;
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	9a 81       	ldd	r25, Y+2	; 0x02
    166c:	ab 81       	ldd	r26, Y+3	; 0x03
    166e:	bc 81       	ldd	r27, Y+4	; 0x04
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	a1 09       	sbc	r26, r1
    1674:	b1 09       	sbc	r27, r1
    1676:	89 83       	std	Y+1, r24	; 0x01
    1678:	9a 83       	std	Y+2, r25	; 0x02
    167a:	ab 83       	std	Y+3, r26	; 0x03
    167c:	bc 83       	std	Y+4, r27	; 0x04

	// Setup overflow value
	TC_SetPeriod( &TCC0, ulOvfMatch);
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	98 e0       	ldi	r25, 0x08	; 8
    1682:	29 81       	ldd	r18, Y+1	; 0x01
    1684:	3a 81       	ldd	r19, Y+2	; 0x02
    1686:	fc 01       	movw	r30, r24
    1688:	26 a3       	std	Z+38, r18	; 0x26
    168a:	37 a3       	std	Z+39, r19	; 0x27
		
	// Setup clock source and compare match behaviour.
	TC0_ConfigClockSource( &TCC0, TC_CLKSEL_DIV64_gc);
    168c:	65 e0       	ldi	r22, 0x05	; 5
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	98 e0       	ldi	r25, 0x08	; 8
    1692:	0e 94 43 02 	call	0x486	; 0x486 <TC0_ConfigClockSource>

	// Enable the interrupt - this is okay as interrupts are currently globally disabled.
	// The tick interrupt may run in one of the three levels.
#if   configKERNEL_INTERRUPT_PRIORITY == 0
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_LO_gc);	//low interrupt priority
    1696:	61 e0       	ldi	r22, 0x01	; 1
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	98 e0       	ldi	r25, 0x08	; 8
    169c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <TC0_SetOverflowIntLevel>
#elif configKERNEL_INTERRUPT_PRIORITY == 1
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_MED_gc);	//medium interrupt priority
#elif configKERNEL_INTERRUPT_PRIORITY == 2
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_HI_gc);	//high interrupt priority
#endif
}
    16a0:	00 00       	nop
    16a2:	24 96       	adiw	r28, 0x04	; 4
    16a4:	cd bf       	out	0x3d, r28	; 61
    16a6:	de bf       	out	0x3e, r29	; 62
    16a8:	df 91       	pop	r29
    16aa:	cf 91       	pop	r28
    16ac:	08 95       	ret

000016ae <xQueueGenericReset>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	25 97       	sbiw	r28, 0x05	; 5
    16b8:	cd bf       	out	0x3d, r28	; 61
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	8b 83       	std	Y+3, r24	; 0x03
    16be:	9c 83       	std	Y+4, r25	; 0x04
    16c0:	6d 83       	std	Y+5, r22	; 0x05
    16c2:	8b 81       	ldd	r24, Y+3	; 0x03
    16c4:	9c 81       	ldd	r25, Y+4	; 0x04
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	9a 83       	std	Y+2, r25	; 0x02
    16ca:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    16ce:	ff 93       	push	r31
    16d0:	f8 7f       	andi	r31, 0xF8	; 248
    16d2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	9a 81       	ldd	r25, Y+2	; 0x02
    16da:	fc 01       	movw	r30, r24
    16dc:	80 81       	ld	r24, Z
    16de:	91 81       	ldd	r25, Z+1	; 0x01
    16e0:	29 81       	ldd	r18, Y+1	; 0x01
    16e2:	3a 81       	ldd	r19, Y+2	; 0x02
    16e4:	f9 01       	movw	r30, r18
    16e6:	27 8d       	ldd	r18, Z+31	; 0x1f
    16e8:	42 2f       	mov	r20, r18
    16ea:	50 e0       	ldi	r21, 0x00	; 0
    16ec:	29 81       	ldd	r18, Y+1	; 0x01
    16ee:	3a 81       	ldd	r19, Y+2	; 0x02
    16f0:	f9 01       	movw	r30, r18
    16f2:	20 a1       	ldd	r18, Z+32	; 0x20
    16f4:	22 2f       	mov	r18, r18
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	42 9f       	mul	r20, r18
    16fa:	b0 01       	movw	r22, r0
    16fc:	43 9f       	mul	r20, r19
    16fe:	70 0d       	add	r23, r0
    1700:	52 9f       	mul	r21, r18
    1702:	70 0d       	add	r23, r0
    1704:	11 24       	eor	r1, r1
    1706:	9b 01       	movw	r18, r22
    1708:	28 0f       	add	r18, r24
    170a:	39 1f       	adc	r19, r25
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	9a 81       	ldd	r25, Y+2	; 0x02
    1710:	fc 01       	movw	r30, r24
    1712:	22 83       	std	Z+2, r18	; 0x02
    1714:	33 83       	std	Z+3, r19	; 0x03
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	9a 81       	ldd	r25, Y+2	; 0x02
    171a:	fc 01       	movw	r30, r24
    171c:	16 8e       	std	Z+30, r1	; 0x1e
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	9a 81       	ldd	r25, Y+2	; 0x02
    1722:	fc 01       	movw	r30, r24
    1724:	20 81       	ld	r18, Z
    1726:	31 81       	ldd	r19, Z+1	; 0x01
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	9a 81       	ldd	r25, Y+2	; 0x02
    172c:	fc 01       	movw	r30, r24
    172e:	24 83       	std	Z+4, r18	; 0x04
    1730:	35 83       	std	Z+5, r19	; 0x05
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	9a 81       	ldd	r25, Y+2	; 0x02
    1736:	fc 01       	movw	r30, r24
    1738:	80 81       	ld	r24, Z
    173a:	91 81       	ldd	r25, Z+1	; 0x01
    173c:	29 81       	ldd	r18, Y+1	; 0x01
    173e:	3a 81       	ldd	r19, Y+2	; 0x02
    1740:	f9 01       	movw	r30, r18
    1742:	27 8d       	ldd	r18, Z+31	; 0x1f
    1744:	22 2f       	mov	r18, r18
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	a9 01       	movw	r20, r18
    174a:	41 50       	subi	r20, 0x01	; 1
    174c:	51 09       	sbc	r21, r1
    174e:	29 81       	ldd	r18, Y+1	; 0x01
    1750:	3a 81       	ldd	r19, Y+2	; 0x02
    1752:	f9 01       	movw	r30, r18
    1754:	20 a1       	ldd	r18, Z+32	; 0x20
    1756:	22 2f       	mov	r18, r18
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	42 9f       	mul	r20, r18
    175c:	b0 01       	movw	r22, r0
    175e:	43 9f       	mul	r20, r19
    1760:	70 0d       	add	r23, r0
    1762:	52 9f       	mul	r21, r18
    1764:	70 0d       	add	r23, r0
    1766:	11 24       	eor	r1, r1
    1768:	9b 01       	movw	r18, r22
    176a:	28 0f       	add	r18, r24
    176c:	39 1f       	adc	r19, r25
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	9a 81       	ldd	r25, Y+2	; 0x02
    1772:	fc 01       	movw	r30, r24
    1774:	26 83       	std	Z+6, r18	; 0x06
    1776:	37 83       	std	Z+7, r19	; 0x07
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	9a 81       	ldd	r25, Y+2	; 0x02
    177c:	2f ef       	ldi	r18, 0xFF	; 255
    177e:	fc 01       	movw	r30, r24
    1780:	21 a3       	std	Z+33, r18	; 0x21
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	9a 81       	ldd	r25, Y+2	; 0x02
    1786:	2f ef       	ldi	r18, 0xFF	; 255
    1788:	fc 01       	movw	r30, r24
    178a:	22 a3       	std	Z+34, r18	; 0x22
    178c:	8d 81       	ldd	r24, Y+5	; 0x05
    178e:	88 23       	and	r24, r24
    1790:	81 f4       	brne	.+32     	; 0x17b2 <xQueueGenericReset+0x104>
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	9a 81       	ldd	r25, Y+2	; 0x02
    1796:	fc 01       	movw	r30, r24
    1798:	80 85       	ldd	r24, Z+8	; 0x08
    179a:	88 23       	and	r24, r24
    179c:	a1 f0       	breq	.+40     	; 0x17c6 <xQueueGenericReset+0x118>
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	9a 81       	ldd	r25, Y+2	; 0x02
    17a2:	08 96       	adiw	r24, 0x08	; 8
    17a4:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <xTaskRemoveFromEventList>
    17a8:	88 23       	and	r24, r24
    17aa:	69 f0       	breq	.+26     	; 0x17c6 <xQueueGenericReset+0x118>
    17ac:	0e 94 07 0a 	call	0x140e	; 0x140e <vPortYield>
    17b0:	0a c0       	rjmp	.+20     	; 0x17c6 <xQueueGenericReset+0x118>
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	9a 81       	ldd	r25, Y+2	; 0x02
    17b6:	08 96       	adiw	r24, 0x08	; 8
    17b8:	0e 94 70 06 	call	0xce0	; 0xce0 <vListInitialise>
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	9a 81       	ldd	r25, Y+2	; 0x02
    17c0:	43 96       	adiw	r24, 0x13	; 19
    17c2:	0e 94 70 06 	call	0xce0	; 0xce0 <vListInitialise>
    17c6:	ff 91       	pop	r31
    17c8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	25 96       	adiw	r28, 0x05	; 5
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	08 95       	ret

000017da <xQueueGenericCreate>:
    17da:	0f 93       	push	r16
    17dc:	1f 93       	push	r17
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	29 97       	sbiw	r28, 0x09	; 9
    17e8:	cd bf       	out	0x3d, r28	; 61
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	8f 83       	std	Y+7, r24	; 0x07
    17ee:	68 87       	std	Y+8, r22	; 0x08
    17f0:	49 87       	std	Y+9, r20	; 0x09
    17f2:	88 85       	ldd	r24, Y+8	; 0x08
    17f4:	88 23       	and	r24, r24
    17f6:	19 f4       	brne	.+6      	; 0x17fe <xQueueGenericCreate+0x24>
    17f8:	19 82       	std	Y+1, r1	; 0x01
    17fa:	1a 82       	std	Y+2, r1	; 0x02
    17fc:	0f c0       	rjmp	.+30     	; 0x181c <xQueueGenericCreate+0x42>
    17fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1800:	48 2f       	mov	r20, r24
    1802:	50 e0       	ldi	r21, 0x00	; 0
    1804:	88 85       	ldd	r24, Y+8	; 0x08
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	42 9f       	mul	r20, r18
    180c:	c0 01       	movw	r24, r0
    180e:	43 9f       	mul	r20, r19
    1810:	90 0d       	add	r25, r0
    1812:	52 9f       	mul	r21, r18
    1814:	90 0d       	add	r25, r0
    1816:	11 24       	eor	r1, r1
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	9a 83       	std	Y+2, r25	; 0x02
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	9a 81       	ldd	r25, Y+2	; 0x02
    1820:	85 96       	adiw	r24, 0x25	; 37
    1822:	0e 94 1e 06 	call	0xc3c	; 0xc3c <pvPortMalloc>
    1826:	8b 83       	std	Y+3, r24	; 0x03
    1828:	9c 83       	std	Y+4, r25	; 0x04
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	9c 81       	ldd	r25, Y+4	; 0x04
    182e:	89 2b       	or	r24, r25
    1830:	81 f0       	breq	.+32     	; 0x1852 <xQueueGenericCreate+0x78>
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	9c 81       	ldd	r25, Y+4	; 0x04
    1836:	85 96       	adiw	r24, 0x25	; 37
    1838:	8d 83       	std	Y+5, r24	; 0x05
    183a:	9e 83       	std	Y+6, r25	; 0x06
    183c:	2b 81       	ldd	r18, Y+3	; 0x03
    183e:	3c 81       	ldd	r19, Y+4	; 0x04
    1840:	8d 81       	ldd	r24, Y+5	; 0x05
    1842:	9e 81       	ldd	r25, Y+6	; 0x06
    1844:	89 01       	movw	r16, r18
    1846:	29 85       	ldd	r18, Y+9	; 0x09
    1848:	ac 01       	movw	r20, r24
    184a:	68 85       	ldd	r22, Y+8	; 0x08
    184c:	8f 81       	ldd	r24, Y+7	; 0x07
    184e:	0e 94 33 0c 	call	0x1866	; 0x1866 <prvInitialiseNewQueue>
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	9c 81       	ldd	r25, Y+4	; 0x04
    1856:	29 96       	adiw	r28, 0x09	; 9
    1858:	cd bf       	out	0x3d, r28	; 61
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	1f 91       	pop	r17
    1862:	0f 91       	pop	r16
    1864:	08 95       	ret

00001866 <prvInitialiseNewQueue>:
    1866:	0f 93       	push	r16
    1868:	1f 93       	push	r17
    186a:	cf 93       	push	r28
    186c:	df 93       	push	r29
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    1872:	27 97       	sbiw	r28, 0x07	; 7
    1874:	cd bf       	out	0x3d, r28	; 61
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	89 83       	std	Y+1, r24	; 0x01
    187a:	6a 83       	std	Y+2, r22	; 0x02
    187c:	4b 83       	std	Y+3, r20	; 0x03
    187e:	5c 83       	std	Y+4, r21	; 0x04
    1880:	2d 83       	std	Y+5, r18	; 0x05
    1882:	0e 83       	std	Y+6, r16	; 0x06
    1884:	1f 83       	std	Y+7, r17	; 0x07
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	88 23       	and	r24, r24
    188a:	41 f4       	brne	.+16     	; 0x189c <prvInitialiseNewQueue+0x36>
    188c:	8e 81       	ldd	r24, Y+6	; 0x06
    188e:	9f 81       	ldd	r25, Y+7	; 0x07
    1890:	2e 81       	ldd	r18, Y+6	; 0x06
    1892:	3f 81       	ldd	r19, Y+7	; 0x07
    1894:	fc 01       	movw	r30, r24
    1896:	20 83       	st	Z, r18
    1898:	31 83       	std	Z+1, r19	; 0x01
    189a:	07 c0       	rjmp	.+14     	; 0x18aa <prvInitialiseNewQueue+0x44>
    189c:	8e 81       	ldd	r24, Y+6	; 0x06
    189e:	9f 81       	ldd	r25, Y+7	; 0x07
    18a0:	2b 81       	ldd	r18, Y+3	; 0x03
    18a2:	3c 81       	ldd	r19, Y+4	; 0x04
    18a4:	fc 01       	movw	r30, r24
    18a6:	20 83       	st	Z, r18
    18a8:	31 83       	std	Z+1, r19	; 0x01
    18aa:	8e 81       	ldd	r24, Y+6	; 0x06
    18ac:	9f 81       	ldd	r25, Y+7	; 0x07
    18ae:	29 81       	ldd	r18, Y+1	; 0x01
    18b0:	fc 01       	movw	r30, r24
    18b2:	27 8f       	std	Z+31, r18	; 0x1f
    18b4:	8e 81       	ldd	r24, Y+6	; 0x06
    18b6:	9f 81       	ldd	r25, Y+7	; 0x07
    18b8:	2a 81       	ldd	r18, Y+2	; 0x02
    18ba:	fc 01       	movw	r30, r24
    18bc:	20 a3       	std	Z+32, r18	; 0x20
    18be:	8e 81       	ldd	r24, Y+6	; 0x06
    18c0:	9f 81       	ldd	r25, Y+7	; 0x07
    18c2:	61 e0       	ldi	r22, 0x01	; 1
    18c4:	0e 94 57 0b 	call	0x16ae	; 0x16ae <xQueueGenericReset>
    18c8:	8e 81       	ldd	r24, Y+6	; 0x06
    18ca:	9f 81       	ldd	r25, Y+7	; 0x07
    18cc:	2d 81       	ldd	r18, Y+5	; 0x05
    18ce:	fc 01       	movw	r30, r24
    18d0:	24 a3       	std	Z+36, r18	; 0x24
    18d2:	00 00       	nop
    18d4:	27 96       	adiw	r28, 0x07	; 7
    18d6:	cd bf       	out	0x3d, r28	; 61
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	df 91       	pop	r29
    18dc:	cf 91       	pop	r28
    18de:	1f 91       	pop	r17
    18e0:	0f 91       	pop	r16
    18e2:	08 95       	ret

000018e4 <xQueueGenericSend>:
    18e4:	0f 93       	push	r16
    18e6:	cf 93       	push	r28
    18e8:	df 93       	push	r29
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
    18ee:	62 97       	sbiw	r28, 0x12	; 18
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	8a 87       	std	Y+10, r24	; 0x0a
    18f6:	9b 87       	std	Y+11, r25	; 0x0b
    18f8:	6c 87       	std	Y+12, r22	; 0x0c
    18fa:	7d 87       	std	Y+13, r23	; 0x0d
    18fc:	2e 87       	std	Y+14, r18	; 0x0e
    18fe:	3f 87       	std	Y+15, r19	; 0x0f
    1900:	48 8b       	std	Y+16, r20	; 0x10
    1902:	59 8b       	std	Y+17, r21	; 0x11
    1904:	0a 8b       	std	Y+18, r16	; 0x12
    1906:	19 82       	std	Y+1, r1	; 0x01
    1908:	8a 85       	ldd	r24, Y+10	; 0x0a
    190a:	9b 85       	ldd	r25, Y+11	; 0x0b
    190c:	8a 83       	std	Y+2, r24	; 0x02
    190e:	9b 83       	std	Y+3, r25	; 0x03
    1910:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1914:	ff 93       	push	r31
    1916:	f8 7f       	andi	r31, 0xF8	; 248
    1918:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	9b 81       	ldd	r25, Y+3	; 0x03
    1920:	fc 01       	movw	r30, r24
    1922:	26 8d       	ldd	r18, Z+30	; 0x1e
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	9b 81       	ldd	r25, Y+3	; 0x03
    1928:	fc 01       	movw	r30, r24
    192a:	87 8d       	ldd	r24, Z+31	; 0x1f
    192c:	28 17       	cp	r18, r24
    192e:	18 f0       	brcs	.+6      	; 0x1936 <xQueueGenericSend+0x52>
    1930:	8a 89       	ldd	r24, Y+18	; 0x12
    1932:	82 30       	cpi	r24, 0x02	; 2
    1934:	19 f5       	brne	.+70     	; 0x197c <xQueueGenericSend+0x98>
    1936:	2c 85       	ldd	r18, Y+12	; 0x0c
    1938:	3d 85       	ldd	r19, Y+13	; 0x0d
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	9b 81       	ldd	r25, Y+3	; 0x03
    193e:	4a 89       	ldd	r20, Y+18	; 0x12
    1940:	b9 01       	movw	r22, r18
    1942:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <prvCopyDataToQueue>
    1946:	8c 83       	std	Y+4, r24	; 0x04
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	9b 81       	ldd	r25, Y+3	; 0x03
    194c:	fc 01       	movw	r30, r24
    194e:	83 89       	ldd	r24, Z+19	; 0x13
    1950:	88 23       	and	r24, r24
    1952:	51 f0       	breq	.+20     	; 0x1968 <xQueueGenericSend+0x84>
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	9b 81       	ldd	r25, Y+3	; 0x03
    1958:	43 96       	adiw	r24, 0x13	; 19
    195a:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <xTaskRemoveFromEventList>
    195e:	88 23       	and	r24, r24
    1960:	41 f0       	breq	.+16     	; 0x1972 <xQueueGenericSend+0x8e>
    1962:	0e 94 07 0a 	call	0x140e	; 0x140e <vPortYield>
    1966:	05 c0       	rjmp	.+10     	; 0x1972 <xQueueGenericSend+0x8e>
    1968:	8c 81       	ldd	r24, Y+4	; 0x04
    196a:	88 23       	and	r24, r24
    196c:	11 f0       	breq	.+4      	; 0x1972 <xQueueGenericSend+0x8e>
    196e:	0e 94 07 0a 	call	0x140e	; 0x140e <vPortYield>
    1972:	ff 91       	pop	r31
    1974:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	6f c0       	rjmp	.+222    	; 0x1a5a <xQueueGenericSend+0x176>
    197c:	8e 85       	ldd	r24, Y+14	; 0x0e
    197e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1980:	a8 89       	ldd	r26, Y+16	; 0x10
    1982:	b9 89       	ldd	r27, Y+17	; 0x11
    1984:	89 2b       	or	r24, r25
    1986:	8a 2b       	or	r24, r26
    1988:	8b 2b       	or	r24, r27
    198a:	29 f4       	brne	.+10     	; 0x1996 <xQueueGenericSend+0xb2>
    198c:	ff 91       	pop	r31
    198e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	62 c0       	rjmp	.+196    	; 0x1a5a <xQueueGenericSend+0x176>
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	88 23       	and	r24, r24
    199a:	31 f4       	brne	.+12     	; 0x19a8 <xQueueGenericSend+0xc4>
    199c:	ce 01       	movw	r24, r28
    199e:	05 96       	adiw	r24, 0x05	; 5
    19a0:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <vTaskInternalSetTimeOutState>
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	89 83       	std	Y+1, r24	; 0x01
    19a8:	ff 91       	pop	r31
    19aa:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    19ae:	0e 94 51 13 	call	0x26a2	; 0x26a2 <vTaskSuspendAll>
    19b2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    19b6:	ff 93       	push	r31
    19b8:	f8 7f       	andi	r31, 0xF8	; 248
    19ba:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	9b 81       	ldd	r25, Y+3	; 0x03
    19c2:	fc 01       	movw	r30, r24
    19c4:	81 a1       	ldd	r24, Z+33	; 0x21
    19c6:	8f 3f       	cpi	r24, 0xFF	; 255
    19c8:	21 f4       	brne	.+8      	; 0x19d2 <xQueueGenericSend+0xee>
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	9b 81       	ldd	r25, Y+3	; 0x03
    19ce:	fc 01       	movw	r30, r24
    19d0:	11 a2       	std	Z+33, r1	; 0x21
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	9b 81       	ldd	r25, Y+3	; 0x03
    19d6:	fc 01       	movw	r30, r24
    19d8:	82 a1       	ldd	r24, Z+34	; 0x22
    19da:	8f 3f       	cpi	r24, 0xFF	; 255
    19dc:	21 f4       	brne	.+8      	; 0x19e6 <xQueueGenericSend+0x102>
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	9b 81       	ldd	r25, Y+3	; 0x03
    19e2:	fc 01       	movw	r30, r24
    19e4:	12 a2       	std	Z+34, r1	; 0x22
    19e6:	ff 91       	pop	r31
    19e8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    19ec:	9e 01       	movw	r18, r28
    19ee:	22 5f       	subi	r18, 0xF2	; 242
    19f0:	3f 4f       	sbci	r19, 0xFF	; 255
    19f2:	ce 01       	movw	r24, r28
    19f4:	05 96       	adiw	r24, 0x05	; 5
    19f6:	b9 01       	movw	r22, r18
    19f8:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <xTaskCheckForTimeOut>
    19fc:	88 23       	and	r24, r24
    19fe:	31 f5       	brne	.+76     	; 0x1a4c <xQueueGenericSend+0x168>
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	9b 81       	ldd	r25, Y+3	; 0x03
    1a04:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <prvIsQueueFull>
    1a08:	88 23       	and	r24, r24
    1a0a:	c9 f0       	breq	.+50     	; 0x1a3e <xQueueGenericSend+0x15a>
    1a0c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a0e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a10:	a8 89       	ldd	r26, Y+16	; 0x10
    1a12:	b9 89       	ldd	r27, Y+17	; 0x11
    1a14:	2a 81       	ldd	r18, Y+2	; 0x02
    1a16:	3b 81       	ldd	r19, Y+3	; 0x03
    1a18:	28 5f       	subi	r18, 0xF8	; 248
    1a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1c:	ac 01       	movw	r20, r24
    1a1e:	bd 01       	movw	r22, r26
    1a20:	c9 01       	movw	r24, r18
    1a22:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <vTaskPlaceOnEventList>
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	9b 81       	ldd	r25, Y+3	; 0x03
    1a2a:	0e 94 75 0f 	call	0x1eea	; 0x1eea <prvUnlockQueue>
    1a2e:	0e 94 5e 13 	call	0x26bc	; 0x26bc <xTaskResumeAll>
    1a32:	88 23       	and	r24, r24
    1a34:	09 f0       	breq	.+2      	; 0x1a38 <xQueueGenericSend+0x154>
    1a36:	6c cf       	rjmp	.-296    	; 0x1910 <xQueueGenericSend+0x2c>
    1a38:	0e 94 07 0a 	call	0x140e	; 0x140e <vPortYield>
    1a3c:	69 cf       	rjmp	.-302    	; 0x1910 <xQueueGenericSend+0x2c>
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	9b 81       	ldd	r25, Y+3	; 0x03
    1a42:	0e 94 75 0f 	call	0x1eea	; 0x1eea <prvUnlockQueue>
    1a46:	0e 94 5e 13 	call	0x26bc	; 0x26bc <xTaskResumeAll>
    1a4a:	62 cf       	rjmp	.-316    	; 0x1910 <xQueueGenericSend+0x2c>
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a50:	0e 94 75 0f 	call	0x1eea	; 0x1eea <prvUnlockQueue>
    1a54:	0e 94 5e 13 	call	0x26bc	; 0x26bc <xTaskResumeAll>
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	62 96       	adiw	r28, 0x12	; 18
    1a5c:	cd bf       	out	0x3d, r28	; 61
    1a5e:	de bf       	out	0x3e, r29	; 62
    1a60:	df 91       	pop	r29
    1a62:	cf 91       	pop	r28
    1a64:	0f 91       	pop	r16
    1a66:	08 95       	ret

00001a68 <xQueueGenericSendFromISR>:
    1a68:	cf 93       	push	r28
    1a6a:	df 93       	push	r29
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
    1a70:	2c 97       	sbiw	r28, 0x0c	; 12
    1a72:	cd bf       	out	0x3d, r28	; 61
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	8e 83       	std	Y+6, r24	; 0x06
    1a78:	9f 83       	std	Y+7, r25	; 0x07
    1a7a:	68 87       	std	Y+8, r22	; 0x08
    1a7c:	79 87       	std	Y+9, r23	; 0x09
    1a7e:	4a 87       	std	Y+10, r20	; 0x0a
    1a80:	5b 87       	std	Y+11, r21	; 0x0b
    1a82:	2c 87       	std	Y+12, r18	; 0x0c
    1a84:	8e 81       	ldd	r24, Y+6	; 0x06
    1a86:	9f 81       	ldd	r25, Y+7	; 0x07
    1a88:	8a 83       	std	Y+2, r24	; 0x02
    1a8a:	9b 83       	std	Y+3, r25	; 0x03
    1a8c:	0e 94 df 07 	call	0xfbe	; 0xfbe <_portSetInterruptMaskFromIsr>
    1a90:	8c 83       	std	Y+4, r24	; 0x04
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	9b 81       	ldd	r25, Y+3	; 0x03
    1a96:	fc 01       	movw	r30, r24
    1a98:	26 8d       	ldd	r18, Z+30	; 0x1e
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	87 8d       	ldd	r24, Z+31	; 0x1f
    1aa2:	28 17       	cp	r18, r24
    1aa4:	18 f0       	brcs	.+6      	; 0x1aac <xQueueGenericSendFromISR+0x44>
    1aa6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1aa8:	82 30       	cpi	r24, 0x02	; 2
    1aaa:	89 f5       	brne	.+98     	; 0x1b0e <xQueueGenericSendFromISR+0xa6>
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab0:	fc 01       	movw	r30, r24
    1ab2:	82 a1       	ldd	r24, Z+34	; 0x22
    1ab4:	8d 83       	std	Y+5, r24	; 0x05
    1ab6:	28 85       	ldd	r18, Y+8	; 0x08
    1ab8:	39 85       	ldd	r19, Y+9	; 0x09
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	9b 81       	ldd	r25, Y+3	; 0x03
    1abe:	4c 85       	ldd	r20, Y+12	; 0x0c
    1ac0:	b9 01       	movw	r22, r18
    1ac2:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <prvCopyDataToQueue>
    1ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac8:	8f 3f       	cpi	r24, 0xFF	; 255
    1aca:	b9 f4       	brne	.+46     	; 0x1afa <xQueueGenericSendFromISR+0x92>
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	83 89       	ldd	r24, Z+19	; 0x13
    1ad4:	88 23       	and	r24, r24
    1ad6:	c1 f0       	breq	.+48     	; 0x1b08 <xQueueGenericSendFromISR+0xa0>
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	9b 81       	ldd	r25, Y+3	; 0x03
    1adc:	43 96       	adiw	r24, 0x13	; 19
    1ade:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <xTaskRemoveFromEventList>
    1ae2:	88 23       	and	r24, r24
    1ae4:	89 f0       	breq	.+34     	; 0x1b08 <xQueueGenericSendFromISR+0xa0>
    1ae6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ae8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1aea:	89 2b       	or	r24, r25
    1aec:	69 f0       	breq	.+26     	; 0x1b08 <xQueueGenericSendFromISR+0xa0>
    1aee:	8a 85       	ldd	r24, Y+10	; 0x0a
    1af0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1af2:	21 e0       	ldi	r18, 0x01	; 1
    1af4:	fc 01       	movw	r30, r24
    1af6:	20 83       	st	Z, r18
    1af8:	07 c0       	rjmp	.+14     	; 0x1b08 <xQueueGenericSendFromISR+0xa0>
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	8f 5f       	subi	r24, 0xFF	; 255
    1afe:	28 2f       	mov	r18, r24
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	9b 81       	ldd	r25, Y+3	; 0x03
    1b04:	fc 01       	movw	r30, r24
    1b06:	22 a3       	std	Z+34, r18	; 0x22
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	89 83       	std	Y+1, r24	; 0x01
    1b0c:	01 c0       	rjmp	.+2      	; 0x1b10 <xQueueGenericSendFromISR+0xa8>
    1b0e:	19 82       	std	Y+1, r1	; 0x01
    1b10:	80 ea       	ldi	r24, 0xA0	; 160
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	2c 81       	ldd	r18, Y+4	; 0x04
    1b16:	fc 01       	movw	r30, r24
    1b18:	22 83       	std	Z+2, r18	; 0x02
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	2c 96       	adiw	r28, 0x0c	; 12
    1b1e:	cd bf       	out	0x3d, r28	; 61
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	df 91       	pop	r29
    1b24:	cf 91       	pop	r28
    1b26:	08 95       	ret

00001b28 <xQueueReceive>:
    1b28:	cf 93       	push	r28
    1b2a:	df 93       	push	r29
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
    1b30:	61 97       	sbiw	r28, 0x11	; 17
    1b32:	cd bf       	out	0x3d, r28	; 61
    1b34:	de bf       	out	0x3e, r29	; 62
    1b36:	8a 87       	std	Y+10, r24	; 0x0a
    1b38:	9b 87       	std	Y+11, r25	; 0x0b
    1b3a:	6c 87       	std	Y+12, r22	; 0x0c
    1b3c:	7d 87       	std	Y+13, r23	; 0x0d
    1b3e:	2e 87       	std	Y+14, r18	; 0x0e
    1b40:	3f 87       	std	Y+15, r19	; 0x0f
    1b42:	48 8b       	std	Y+16, r20	; 0x10
    1b44:	59 8b       	std	Y+17, r21	; 0x11
    1b46:	19 82       	std	Y+1, r1	; 0x01
    1b48:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b4c:	8a 83       	std	Y+2, r24	; 0x02
    1b4e:	9b 83       	std	Y+3, r25	; 0x03
    1b50:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1b54:	ff 93       	push	r31
    1b56:	f8 7f       	andi	r31, 0xF8	; 248
    1b58:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b60:	fc 01       	movw	r30, r24
    1b62:	86 8d       	ldd	r24, Z+30	; 0x1e
    1b64:	8c 83       	std	Y+4, r24	; 0x04
    1b66:	8c 81       	ldd	r24, Y+4	; 0x04
    1b68:	88 23       	and	r24, r24
    1b6a:	11 f1       	breq	.+68     	; 0x1bb0 <xQueueReceive+0x88>
    1b6c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b6e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	9b 81       	ldd	r25, Y+3	; 0x03
    1b74:	b9 01       	movw	r22, r18
    1b76:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <prvCopyDataFromQueue>
    1b7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7c:	2f ef       	ldi	r18, 0xFF	; 255
    1b7e:	28 0f       	add	r18, r24
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	9b 81       	ldd	r25, Y+3	; 0x03
    1b84:	fc 01       	movw	r30, r24
    1b86:	26 8f       	std	Z+30, r18	; 0x1e
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	80 85       	ldd	r24, Z+8	; 0x08
    1b90:	88 23       	and	r24, r24
    1b92:	49 f0       	breq	.+18     	; 0x1ba6 <xQueueReceive+0x7e>
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	9b 81       	ldd	r25, Y+3	; 0x03
    1b98:	08 96       	adiw	r24, 0x08	; 8
    1b9a:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <xTaskRemoveFromEventList>
    1b9e:	88 23       	and	r24, r24
    1ba0:	11 f0       	breq	.+4      	; 0x1ba6 <xQueueReceive+0x7e>
    1ba2:	0e 94 07 0a 	call	0x140e	; 0x140e <vPortYield>
    1ba6:	ff 91       	pop	r31
    1ba8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	76 c0       	rjmp	.+236    	; 0x1c9c <xQueueReceive+0x174>
    1bb0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bb2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bb4:	a8 89       	ldd	r26, Y+16	; 0x10
    1bb6:	b9 89       	ldd	r27, Y+17	; 0x11
    1bb8:	89 2b       	or	r24, r25
    1bba:	8a 2b       	or	r24, r26
    1bbc:	8b 2b       	or	r24, r27
    1bbe:	29 f4       	brne	.+10     	; 0x1bca <xQueueReceive+0xa2>
    1bc0:	ff 91       	pop	r31
    1bc2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	69 c0       	rjmp	.+210    	; 0x1c9c <xQueueReceive+0x174>
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	88 23       	and	r24, r24
    1bce:	31 f4       	brne	.+12     	; 0x1bdc <xQueueReceive+0xb4>
    1bd0:	ce 01       	movw	r24, r28
    1bd2:	05 96       	adiw	r24, 0x05	; 5
    1bd4:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <vTaskInternalSetTimeOutState>
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	89 83       	std	Y+1, r24	; 0x01
    1bdc:	ff 91       	pop	r31
    1bde:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1be2:	0e 94 51 13 	call	0x26a2	; 0x26a2 <vTaskSuspendAll>
    1be6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1bea:	ff 93       	push	r31
    1bec:	f8 7f       	andi	r31, 0xF8	; 248
    1bee:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	81 a1       	ldd	r24, Z+33	; 0x21
    1bfa:	8f 3f       	cpi	r24, 0xFF	; 255
    1bfc:	21 f4       	brne	.+8      	; 0x1c06 <xQueueReceive+0xde>
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	9b 81       	ldd	r25, Y+3	; 0x03
    1c02:	fc 01       	movw	r30, r24
    1c04:	11 a2       	std	Z+33, r1	; 0x21
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	82 a1       	ldd	r24, Z+34	; 0x22
    1c0e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c10:	21 f4       	brne	.+8      	; 0x1c1a <xQueueReceive+0xf2>
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	9b 81       	ldd	r25, Y+3	; 0x03
    1c16:	fc 01       	movw	r30, r24
    1c18:	12 a2       	std	Z+34, r1	; 0x22
    1c1a:	ff 91       	pop	r31
    1c1c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1c20:	9e 01       	movw	r18, r28
    1c22:	22 5f       	subi	r18, 0xF2	; 242
    1c24:	3f 4f       	sbci	r19, 0xFF	; 255
    1c26:	ce 01       	movw	r24, r28
    1c28:	05 96       	adiw	r24, 0x05	; 5
    1c2a:	b9 01       	movw	r22, r18
    1c2c:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <xTaskCheckForTimeOut>
    1c30:	88 23       	and	r24, r24
    1c32:	31 f5       	brne	.+76     	; 0x1c80 <xQueueReceive+0x158>
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	9b 81       	ldd	r25, Y+3	; 0x03
    1c38:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <prvIsQueueEmpty>
    1c3c:	88 23       	and	r24, r24
    1c3e:	c9 f0       	breq	.+50     	; 0x1c72 <xQueueReceive+0x14a>
    1c40:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c42:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c44:	a8 89       	ldd	r26, Y+16	; 0x10
    1c46:	b9 89       	ldd	r27, Y+17	; 0x11
    1c48:	2a 81       	ldd	r18, Y+2	; 0x02
    1c4a:	3b 81       	ldd	r19, Y+3	; 0x03
    1c4c:	2d 5e       	subi	r18, 0xED	; 237
    1c4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c50:	ac 01       	movw	r20, r24
    1c52:	bd 01       	movw	r22, r26
    1c54:	c9 01       	movw	r24, r18
    1c56:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <vTaskPlaceOnEventList>
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c5e:	0e 94 75 0f 	call	0x1eea	; 0x1eea <prvUnlockQueue>
    1c62:	0e 94 5e 13 	call	0x26bc	; 0x26bc <xTaskResumeAll>
    1c66:	88 23       	and	r24, r24
    1c68:	09 f0       	breq	.+2      	; 0x1c6c <xQueueReceive+0x144>
    1c6a:	72 cf       	rjmp	.-284    	; 0x1b50 <xQueueReceive+0x28>
    1c6c:	0e 94 07 0a 	call	0x140e	; 0x140e <vPortYield>
    1c70:	6f cf       	rjmp	.-290    	; 0x1b50 <xQueueReceive+0x28>
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	9b 81       	ldd	r25, Y+3	; 0x03
    1c76:	0e 94 75 0f 	call	0x1eea	; 0x1eea <prvUnlockQueue>
    1c7a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <xTaskResumeAll>
    1c7e:	68 cf       	rjmp	.-304    	; 0x1b50 <xQueueReceive+0x28>
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	9b 81       	ldd	r25, Y+3	; 0x03
    1c84:	0e 94 75 0f 	call	0x1eea	; 0x1eea <prvUnlockQueue>
    1c88:	0e 94 5e 13 	call	0x26bc	; 0x26bc <xTaskResumeAll>
    1c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c90:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <prvIsQueueEmpty>
    1c94:	88 23       	and	r24, r24
    1c96:	09 f4       	brne	.+2      	; 0x1c9a <xQueueReceive+0x172>
    1c98:	5b cf       	rjmp	.-330    	; 0x1b50 <xQueueReceive+0x28>
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	61 96       	adiw	r28, 0x11	; 17
    1c9e:	cd bf       	out	0x3d, r28	; 61
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	08 95       	ret

00001ca8 <uxQueueMessagesWaiting>:
    1ca8:	cf 93       	push	r28
    1caa:	df 93       	push	r29
    1cac:	00 d0       	rcall	.+0      	; 0x1cae <uxQueueMessagesWaiting+0x6>
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	8a 83       	std	Y+2, r24	; 0x02
    1cb4:	9b 83       	std	Y+3, r25	; 0x03
    1cb6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1cba:	ff 93       	push	r31
    1cbc:	f8 7f       	andi	r31, 0xF8	; 248
    1cbe:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	86 8d       	ldd	r24, Z+30	; 0x1e
    1cca:	89 83       	std	Y+1, r24	; 0x01
    1ccc:	ff 91       	pop	r31
    1cce:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	23 96       	adiw	r28, 0x03	; 3
    1cd6:	cd bf       	out	0x3d, r28	; 61
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	df 91       	pop	r29
    1cdc:	cf 91       	pop	r28
    1cde:	08 95       	ret

00001ce0 <prvCopyDataToQueue>:
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	27 97       	sbiw	r28, 0x07	; 7
    1cea:	cd bf       	out	0x3d, r28	; 61
    1cec:	de bf       	out	0x3e, r29	; 62
    1cee:	8b 83       	std	Y+3, r24	; 0x03
    1cf0:	9c 83       	std	Y+4, r25	; 0x04
    1cf2:	6d 83       	std	Y+5, r22	; 0x05
    1cf4:	7e 83       	std	Y+6, r23	; 0x06
    1cf6:	4f 83       	std	Y+7, r20	; 0x07
    1cf8:	1a 82       	std	Y+2, r1	; 0x02
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfe:	fc 01       	movw	r30, r24
    1d00:	86 8d       	ldd	r24, Z+30	; 0x1e
    1d02:	89 83       	std	Y+1, r24	; 0x01
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	9c 81       	ldd	r25, Y+4	; 0x04
    1d08:	fc 01       	movw	r30, r24
    1d0a:	80 a1       	ldd	r24, Z+32	; 0x20
    1d0c:	88 23       	and	r24, r24
    1d0e:	09 f4       	brne	.+2      	; 0x1d12 <prvCopyDataToQueue+0x32>
    1d10:	8e c0       	rjmp	.+284    	; 0x1e2e <prvCopyDataToQueue+0x14e>
    1d12:	8f 81       	ldd	r24, Y+7	; 0x07
    1d14:	88 23       	and	r24, r24
    1d16:	d9 f5       	brne	.+118    	; 0x1d8e <prvCopyDataToQueue+0xae>
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	80 a1       	ldd	r24, Z+32	; 0x20
    1d20:	48 2f       	mov	r20, r24
    1d22:	50 e0       	ldi	r21, 0x00	; 0
    1d24:	8b 81       	ldd	r24, Y+3	; 0x03
    1d26:	9c 81       	ldd	r25, Y+4	; 0x04
    1d28:	fc 01       	movw	r30, r24
    1d2a:	84 81       	ldd	r24, Z+4	; 0x04
    1d2c:	95 81       	ldd	r25, Z+5	; 0x05
    1d2e:	2d 81       	ldd	r18, Y+5	; 0x05
    1d30:	3e 81       	ldd	r19, Y+6	; 0x06
    1d32:	b9 01       	movw	r22, r18
    1d34:	0e 94 3c 2d 	call	0x5a78	; 0x5a78 <memcpy>
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	24 81       	ldd	r18, Z+4	; 0x04
    1d40:	35 81       	ldd	r19, Z+5	; 0x05
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	9c 81       	ldd	r25, Y+4	; 0x04
    1d46:	fc 01       	movw	r30, r24
    1d48:	80 a1       	ldd	r24, Z+32	; 0x20
    1d4a:	88 2f       	mov	r24, r24
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	28 0f       	add	r18, r24
    1d50:	39 1f       	adc	r19, r25
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	9c 81       	ldd	r25, Y+4	; 0x04
    1d56:	fc 01       	movw	r30, r24
    1d58:	24 83       	std	Z+4, r18	; 0x04
    1d5a:	35 83       	std	Z+5, r19	; 0x05
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d60:	fc 01       	movw	r30, r24
    1d62:	24 81       	ldd	r18, Z+4	; 0x04
    1d64:	35 81       	ldd	r19, Z+5	; 0x05
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	82 81       	ldd	r24, Z+2	; 0x02
    1d6e:	93 81       	ldd	r25, Z+3	; 0x03
    1d70:	28 17       	cp	r18, r24
    1d72:	39 07       	cpc	r19, r25
    1d74:	08 f4       	brcc	.+2      	; 0x1d78 <prvCopyDataToQueue+0x98>
    1d76:	5b c0       	rjmp	.+182    	; 0x1e2e <prvCopyDataToQueue+0x14e>
    1d78:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	20 81       	ld	r18, Z
    1d80:	31 81       	ldd	r19, Z+1	; 0x01
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	9c 81       	ldd	r25, Y+4	; 0x04
    1d86:	fc 01       	movw	r30, r24
    1d88:	24 83       	std	Z+4, r18	; 0x04
    1d8a:	35 83       	std	Z+5, r19	; 0x05
    1d8c:	50 c0       	rjmp	.+160    	; 0x1e2e <prvCopyDataToQueue+0x14e>
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	9c 81       	ldd	r25, Y+4	; 0x04
    1d92:	fc 01       	movw	r30, r24
    1d94:	80 a1       	ldd	r24, Z+32	; 0x20
    1d96:	48 2f       	mov	r20, r24
    1d98:	50 e0       	ldi	r21, 0x00	; 0
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9e:	fc 01       	movw	r30, r24
    1da0:	86 81       	ldd	r24, Z+6	; 0x06
    1da2:	97 81       	ldd	r25, Z+7	; 0x07
    1da4:	2d 81       	ldd	r18, Y+5	; 0x05
    1da6:	3e 81       	ldd	r19, Y+6	; 0x06
    1da8:	b9 01       	movw	r22, r18
    1daa:	0e 94 3c 2d 	call	0x5a78	; 0x5a78 <memcpy>
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	9c 81       	ldd	r25, Y+4	; 0x04
    1db2:	fc 01       	movw	r30, r24
    1db4:	26 81       	ldd	r18, Z+6	; 0x06
    1db6:	37 81       	ldd	r19, Z+7	; 0x07
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	80 a1       	ldd	r24, Z+32	; 0x20
    1dc0:	88 2f       	mov	r24, r24
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	91 95       	neg	r25
    1dc6:	81 95       	neg	r24
    1dc8:	91 09       	sbc	r25, r1
    1dca:	28 0f       	add	r18, r24
    1dcc:	39 1f       	adc	r19, r25
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	26 83       	std	Z+6, r18	; 0x06
    1dd6:	37 83       	std	Z+7, r19	; 0x07
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	9c 81       	ldd	r25, Y+4	; 0x04
    1ddc:	fc 01       	movw	r30, r24
    1dde:	26 81       	ldd	r18, Z+6	; 0x06
    1de0:	37 81       	ldd	r19, Z+7	; 0x07
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	9c 81       	ldd	r25, Y+4	; 0x04
    1de6:	fc 01       	movw	r30, r24
    1de8:	80 81       	ld	r24, Z
    1dea:	91 81       	ldd	r25, Z+1	; 0x01
    1dec:	28 17       	cp	r18, r24
    1dee:	39 07       	cpc	r19, r25
    1df0:	a8 f4       	brcc	.+42     	; 0x1e1c <prvCopyDataToQueue+0x13c>
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	9c 81       	ldd	r25, Y+4	; 0x04
    1df6:	fc 01       	movw	r30, r24
    1df8:	22 81       	ldd	r18, Z+2	; 0x02
    1dfa:	33 81       	ldd	r19, Z+3	; 0x03
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1e00:	fc 01       	movw	r30, r24
    1e02:	80 a1       	ldd	r24, Z+32	; 0x20
    1e04:	88 2f       	mov	r24, r24
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	91 95       	neg	r25
    1e0a:	81 95       	neg	r24
    1e0c:	91 09       	sbc	r25, r1
    1e0e:	28 0f       	add	r18, r24
    1e10:	39 1f       	adc	r19, r25
    1e12:	8b 81       	ldd	r24, Y+3	; 0x03
    1e14:	9c 81       	ldd	r25, Y+4	; 0x04
    1e16:	fc 01       	movw	r30, r24
    1e18:	26 83       	std	Z+6, r18	; 0x06
    1e1a:	37 83       	std	Z+7, r19	; 0x07
    1e1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e1e:	82 30       	cpi	r24, 0x02	; 2
    1e20:	31 f4       	brne	.+12     	; 0x1e2e <prvCopyDataToQueue+0x14e>
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	88 23       	and	r24, r24
    1e26:	19 f0       	breq	.+6      	; 0x1e2e <prvCopyDataToQueue+0x14e>
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	81 50       	subi	r24, 0x01	; 1
    1e2c:	89 83       	std	Y+1, r24	; 0x01
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	21 e0       	ldi	r18, 0x01	; 1
    1e32:	28 0f       	add	r18, r24
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	9c 81       	ldd	r25, Y+4	; 0x04
    1e38:	fc 01       	movw	r30, r24
    1e3a:	26 8f       	std	Z+30, r18	; 0x1e
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	27 96       	adiw	r28, 0x07	; 7
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	de bf       	out	0x3e, r29	; 62
    1e44:	df 91       	pop	r29
    1e46:	cf 91       	pop	r28
    1e48:	08 95       	ret

00001e4a <prvCopyDataFromQueue>:
    1e4a:	cf 93       	push	r28
    1e4c:	df 93       	push	r29
    1e4e:	00 d0       	rcall	.+0      	; 0x1e50 <prvCopyDataFromQueue+0x6>
    1e50:	1f 92       	push	r1
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	89 83       	std	Y+1, r24	; 0x01
    1e58:	9a 83       	std	Y+2, r25	; 0x02
    1e5a:	6b 83       	std	Y+3, r22	; 0x03
    1e5c:	7c 83       	std	Y+4, r23	; 0x04
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	9a 81       	ldd	r25, Y+2	; 0x02
    1e62:	fc 01       	movw	r30, r24
    1e64:	80 a1       	ldd	r24, Z+32	; 0x20
    1e66:	88 23       	and	r24, r24
    1e68:	c9 f1       	breq	.+114    	; 0x1edc <prvCopyDataFromQueue+0x92>
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6e:	fc 01       	movw	r30, r24
    1e70:	26 81       	ldd	r18, Z+6	; 0x06
    1e72:	37 81       	ldd	r19, Z+7	; 0x07
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	9a 81       	ldd	r25, Y+2	; 0x02
    1e78:	fc 01       	movw	r30, r24
    1e7a:	80 a1       	ldd	r24, Z+32	; 0x20
    1e7c:	88 2f       	mov	r24, r24
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	28 0f       	add	r18, r24
    1e82:	39 1f       	adc	r19, r25
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	9a 81       	ldd	r25, Y+2	; 0x02
    1e88:	fc 01       	movw	r30, r24
    1e8a:	26 83       	std	Z+6, r18	; 0x06
    1e8c:	37 83       	std	Z+7, r19	; 0x07
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	9a 81       	ldd	r25, Y+2	; 0x02
    1e92:	fc 01       	movw	r30, r24
    1e94:	26 81       	ldd	r18, Z+6	; 0x06
    1e96:	37 81       	ldd	r19, Z+7	; 0x07
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ea0:	93 81       	ldd	r25, Z+3	; 0x03
    1ea2:	28 17       	cp	r18, r24
    1ea4:	39 07       	cpc	r19, r25
    1ea6:	50 f0       	brcs	.+20     	; 0x1ebc <prvCopyDataFromQueue+0x72>
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1eac:	fc 01       	movw	r30, r24
    1eae:	20 81       	ld	r18, Z
    1eb0:	31 81       	ldd	r19, Z+1	; 0x01
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	26 83       	std	Z+6, r18	; 0x06
    1eba:	37 83       	std	Z+7, r19	; 0x07
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	80 a1       	ldd	r24, Z+32	; 0x20
    1ec4:	48 2f       	mov	r20, r24
    1ec6:	50 e0       	ldi	r21, 0x00	; 0
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ecc:	fc 01       	movw	r30, r24
    1ece:	26 81       	ldd	r18, Z+6	; 0x06
    1ed0:	37 81       	ldd	r19, Z+7	; 0x07
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed6:	b9 01       	movw	r22, r18
    1ed8:	0e 94 3c 2d 	call	0x5a78	; 0x5a78 <memcpy>
    1edc:	00 00       	nop
    1ede:	24 96       	adiw	r28, 0x04	; 4
    1ee0:	cd bf       	out	0x3d, r28	; 61
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	df 91       	pop	r29
    1ee6:	cf 91       	pop	r28
    1ee8:	08 95       	ret

00001eea <prvUnlockQueue>:
    1eea:	cf 93       	push	r28
    1eec:	df 93       	push	r29
    1eee:	00 d0       	rcall	.+0      	; 0x1ef0 <prvUnlockQueue+0x6>
    1ef0:	1f 92       	push	r1
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
    1ef6:	8b 83       	std	Y+3, r24	; 0x03
    1ef8:	9c 83       	std	Y+4, r25	; 0x04
    1efa:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1efe:	ff 93       	push	r31
    1f00:	f8 7f       	andi	r31, 0xF8	; 248
    1f02:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	82 a1       	ldd	r24, Z+34	; 0x22
    1f0e:	89 83       	std	Y+1, r24	; 0x01
    1f10:	12 c0       	rjmp	.+36     	; 0x1f36 <prvUnlockQueue+0x4c>
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	9c 81       	ldd	r25, Y+4	; 0x04
    1f16:	fc 01       	movw	r30, r24
    1f18:	83 89       	ldd	r24, Z+19	; 0x13
    1f1a:	88 23       	and	r24, r24
    1f1c:	81 f0       	breq	.+32     	; 0x1f3e <prvUnlockQueue+0x54>
    1f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f20:	9c 81       	ldd	r25, Y+4	; 0x04
    1f22:	43 96       	adiw	r24, 0x13	; 19
    1f24:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <xTaskRemoveFromEventList>
    1f28:	88 23       	and	r24, r24
    1f2a:	11 f0       	breq	.+4      	; 0x1f30 <prvUnlockQueue+0x46>
    1f2c:	0e 94 2d 18 	call	0x305a	; 0x305a <vTaskMissedYield>
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	81 50       	subi	r24, 0x01	; 1
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	18 16       	cp	r1, r24
    1f3a:	5c f3       	brlt	.-42     	; 0x1f12 <prvUnlockQueue+0x28>
    1f3c:	01 c0       	rjmp	.+2      	; 0x1f40 <prvUnlockQueue+0x56>
    1f3e:	00 00       	nop
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	9c 81       	ldd	r25, Y+4	; 0x04
    1f44:	2f ef       	ldi	r18, 0xFF	; 255
    1f46:	fc 01       	movw	r30, r24
    1f48:	22 a3       	std	Z+34, r18	; 0x22
    1f4a:	ff 91       	pop	r31
    1f4c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1f50:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1f54:	ff 93       	push	r31
    1f56:	f8 7f       	andi	r31, 0xF8	; 248
    1f58:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f60:	fc 01       	movw	r30, r24
    1f62:	81 a1       	ldd	r24, Z+33	; 0x21
    1f64:	8a 83       	std	Y+2, r24	; 0x02
    1f66:	12 c0       	rjmp	.+36     	; 0x1f8c <prvUnlockQueue+0xa2>
    1f68:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	80 85       	ldd	r24, Z+8	; 0x08
    1f70:	88 23       	and	r24, r24
    1f72:	81 f0       	breq	.+32     	; 0x1f94 <prvUnlockQueue+0xaa>
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	9c 81       	ldd	r25, Y+4	; 0x04
    1f78:	08 96       	adiw	r24, 0x08	; 8
    1f7a:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <xTaskRemoveFromEventList>
    1f7e:	88 23       	and	r24, r24
    1f80:	11 f0       	breq	.+4      	; 0x1f86 <prvUnlockQueue+0x9c>
    1f82:	0e 94 2d 18 	call	0x305a	; 0x305a <vTaskMissedYield>
    1f86:	8a 81       	ldd	r24, Y+2	; 0x02
    1f88:	81 50       	subi	r24, 0x01	; 1
    1f8a:	8a 83       	std	Y+2, r24	; 0x02
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	18 16       	cp	r1, r24
    1f90:	5c f3       	brlt	.-42     	; 0x1f68 <prvUnlockQueue+0x7e>
    1f92:	01 c0       	rjmp	.+2      	; 0x1f96 <prvUnlockQueue+0xac>
    1f94:	00 00       	nop
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9a:	2f ef       	ldi	r18, 0xFF	; 255
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	21 a3       	std	Z+33, r18	; 0x21
    1fa0:	ff 91       	pop	r31
    1fa2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1fa6:	00 00       	nop
    1fa8:	24 96       	adiw	r28, 0x04	; 4
    1faa:	cd bf       	out	0x3d, r28	; 61
    1fac:	de bf       	out	0x3e, r29	; 62
    1fae:	df 91       	pop	r29
    1fb0:	cf 91       	pop	r28
    1fb2:	08 95       	ret

00001fb4 <prvIsQueueEmpty>:
    1fb4:	cf 93       	push	r28
    1fb6:	df 93       	push	r29
    1fb8:	00 d0       	rcall	.+0      	; 0x1fba <prvIsQueueEmpty+0x6>
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	8a 83       	std	Y+2, r24	; 0x02
    1fc0:	9b 83       	std	Y+3, r25	; 0x03
    1fc2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1fc6:	ff 93       	push	r31
    1fc8:	f8 7f       	andi	r31, 0xF8	; 248
    1fca:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1fce:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	86 8d       	ldd	r24, Z+30	; 0x1e
    1fd6:	88 23       	and	r24, r24
    1fd8:	19 f4       	brne	.+6      	; 0x1fe0 <prvIsQueueEmpty+0x2c>
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	89 83       	std	Y+1, r24	; 0x01
    1fde:	01 c0       	rjmp	.+2      	; 0x1fe2 <prvIsQueueEmpty+0x2e>
    1fe0:	19 82       	std	Y+1, r1	; 0x01
    1fe2:	ff 91       	pop	r31
    1fe4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	23 96       	adiw	r28, 0x03	; 3
    1fec:	cd bf       	out	0x3d, r28	; 61
    1fee:	de bf       	out	0x3e, r29	; 62
    1ff0:	df 91       	pop	r29
    1ff2:	cf 91       	pop	r28
    1ff4:	08 95       	ret

00001ff6 <prvIsQueueFull>:
    1ff6:	cf 93       	push	r28
    1ff8:	df 93       	push	r29
    1ffa:	00 d0       	rcall	.+0      	; 0x1ffc <prvIsQueueFull+0x6>
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	8a 83       	std	Y+2, r24	; 0x02
    2002:	9b 83       	std	Y+3, r25	; 0x03
    2004:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2008:	ff 93       	push	r31
    200a:	f8 7f       	andi	r31, 0xF8	; 248
    200c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2010:	8a 81       	ldd	r24, Y+2	; 0x02
    2012:	9b 81       	ldd	r25, Y+3	; 0x03
    2014:	fc 01       	movw	r30, r24
    2016:	26 8d       	ldd	r18, Z+30	; 0x1e
    2018:	8a 81       	ldd	r24, Y+2	; 0x02
    201a:	9b 81       	ldd	r25, Y+3	; 0x03
    201c:	fc 01       	movw	r30, r24
    201e:	87 8d       	ldd	r24, Z+31	; 0x1f
    2020:	28 17       	cp	r18, r24
    2022:	19 f4       	brne	.+6      	; 0x202a <__DATA_REGION_LENGTH__+0x2a>
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	89 83       	std	Y+1, r24	; 0x01
    2028:	01 c0       	rjmp	.+2      	; 0x202c <__DATA_REGION_LENGTH__+0x2c>
    202a:	19 82       	std	Y+1, r1	; 0x01
    202c:	ff 91       	pop	r31
    202e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	23 96       	adiw	r28, 0x03	; 3
    2036:	cd bf       	out	0x3d, r28	; 61
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	df 91       	pop	r29
    203c:	cf 91       	pop	r28
    203e:	08 95       	ret

00002040 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	29 97       	sbiw	r28, 0x09	; 9
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	de bf       	out	0x3e, r29	; 62
    204e:	8b 83       	std	Y+3, r24	; 0x03
    2050:	9c 83       	std	Y+4, r25	; 0x04
    2052:	4d 83       	std	Y+5, r20	; 0x05
    2054:	5e 83       	std	Y+6, r21	; 0x06
    2056:	6f 83       	std	Y+7, r22	; 0x07
    2058:	78 87       	std	Y+8, r23	; 0x08
    205a:	29 87       	std	Y+9, r18	; 0x09
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	9c 81       	ldd	r25, Y+4	; 0x04
    2060:	89 83       	std	Y+1, r24	; 0x01
    2062:	9a 83       	std	Y+2, r25	; 0x02
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    2064:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2068:	ff 93       	push	r31
    206a:	f8 7f       	andi	r31, 0xF8	; 248
    206c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	9a 81       	ldd	r25, Y+2	; 0x02
    2074:	fc 01       	movw	r30, r24
    2076:	81 a1       	ldd	r24, Z+33	; 0x21
    2078:	8f 3f       	cpi	r24, 0xFF	; 255
    207a:	21 f4       	brne	.+8      	; 0x2084 <vQueueWaitForMessageRestricted+0x44>
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	9a 81       	ldd	r25, Y+2	; 0x02
    2080:	fc 01       	movw	r30, r24
    2082:	11 a2       	std	Z+33, r1	; 0x21
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	9a 81       	ldd	r25, Y+2	; 0x02
    2088:	fc 01       	movw	r30, r24
    208a:	82 a1       	ldd	r24, Z+34	; 0x22
    208c:	8f 3f       	cpi	r24, 0xFF	; 255
    208e:	21 f4       	brne	.+8      	; 0x2098 <vQueueWaitForMessageRestricted+0x58>
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	9a 81       	ldd	r25, Y+2	; 0x02
    2094:	fc 01       	movw	r30, r24
    2096:	12 a2       	std	Z+34, r1	; 0x22
    2098:	ff 91       	pop	r31
    209a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	9a 81       	ldd	r25, Y+2	; 0x02
    20a2:	fc 01       	movw	r30, r24
    20a4:	86 8d       	ldd	r24, Z+30	; 0x1e
    20a6:	88 23       	and	r24, r24
    20a8:	71 f4       	brne	.+28     	; 0x20c6 <vQueueWaitForMessageRestricted+0x86>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	9a 81       	ldd	r25, Y+2	; 0x02
    20ae:	fc 01       	movw	r30, r24
    20b0:	73 96       	adiw	r30, 0x13	; 19
    20b2:	8d 81       	ldd	r24, Y+5	; 0x05
    20b4:	9e 81       	ldd	r25, Y+6	; 0x06
    20b6:	af 81       	ldd	r26, Y+7	; 0x07
    20b8:	b8 85       	ldd	r27, Y+8	; 0x08
    20ba:	29 85       	ldd	r18, Y+9	; 0x09
    20bc:	ac 01       	movw	r20, r24
    20be:	bd 01       	movw	r22, r26
    20c0:	cf 01       	movw	r24, r30
    20c2:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ca:	0e 94 75 0f 	call	0x1eea	; 0x1eea <prvUnlockQueue>
	}
    20ce:	00 00       	nop
    20d0:	29 96       	adiw	r28, 0x09	; 9
    20d2:	cd bf       	out	0x3d, r28	; 61
    20d4:	de bf       	out	0x3e, r29	; 62
    20d6:	df 91       	pop	r29
    20d8:	cf 91       	pop	r28
    20da:	08 95       	ret

000020dc <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    20dc:	8f 92       	push	r8
    20de:	9f 92       	push	r9
    20e0:	af 92       	push	r10
    20e2:	bf 92       	push	r11
    20e4:	cf 92       	push	r12
    20e6:	df 92       	push	r13
    20e8:	ef 92       	push	r14
    20ea:	ff 92       	push	r15
    20ec:	0f 93       	push	r16
    20ee:	1f 93       	push	r17
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
    20f8:	60 97       	sbiw	r28, 0x10	; 16
    20fa:	cd bf       	out	0x3d, r28	; 61
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	8e 83       	std	Y+6, r24	; 0x06
    2100:	9f 83       	std	Y+7, r25	; 0x07
    2102:	68 87       	std	Y+8, r22	; 0x08
    2104:	79 87       	std	Y+9, r23	; 0x09
    2106:	4a 87       	std	Y+10, r20	; 0x0a
    2108:	5b 87       	std	Y+11, r21	; 0x0b
    210a:	2c 87       	std	Y+12, r18	; 0x0c
    210c:	3d 87       	std	Y+13, r19	; 0x0d
    210e:	0e 87       	std	Y+14, r16	; 0x0e
    2110:	ef 86       	std	Y+15, r14	; 0x0f
    2112:	f8 8a       	std	Y+16, r15	; 0x10
    2114:	8a 85       	ldd	r24, Y+10	; 0x0a
    2116:	9b 85       	ldd	r25, Y+11	; 0x0b
    2118:	0e 94 1e 06 	call	0xc3c	; 0xc3c <pvPortMalloc>
    211c:	8c 83       	std	Y+4, r24	; 0x04
    211e:	9d 83       	std	Y+5, r25	; 0x05
    2120:	8c 81       	ldd	r24, Y+4	; 0x04
    2122:	9d 81       	ldd	r25, Y+5	; 0x05
    2124:	89 2b       	or	r24, r25
    2126:	b9 f0       	breq	.+46     	; 0x2156 <xTaskCreate+0x7a>
    2128:	8c e2       	ldi	r24, 0x2C	; 44
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	0e 94 1e 06 	call	0xc3c	; 0xc3c <pvPortMalloc>
    2130:	89 83       	std	Y+1, r24	; 0x01
    2132:	9a 83       	std	Y+2, r25	; 0x02
    2134:	89 81       	ldd	r24, Y+1	; 0x01
    2136:	9a 81       	ldd	r25, Y+2	; 0x02
    2138:	89 2b       	or	r24, r25
    213a:	41 f0       	breq	.+16     	; 0x214c <xTaskCreate+0x70>
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	9a 81       	ldd	r25, Y+2	; 0x02
    2140:	2c 81       	ldd	r18, Y+4	; 0x04
    2142:	3d 81       	ldd	r19, Y+5	; 0x05
    2144:	fc 01       	movw	r30, r24
    2146:	23 8f       	std	Z+27, r18	; 0x1b
    2148:	34 8f       	std	Z+28, r19	; 0x1c
    214a:	07 c0       	rjmp	.+14     	; 0x215a <xTaskCreate+0x7e>
    214c:	8c 81       	ldd	r24, Y+4	; 0x04
    214e:	9d 81       	ldd	r25, Y+5	; 0x05
    2150:	0e 94 62 06 	call	0xcc4	; 0xcc4 <vPortFree>
    2154:	02 c0       	rjmp	.+4      	; 0x215a <xTaskCreate+0x7e>
    2156:	19 82       	std	Y+1, r1	; 0x01
    2158:	1a 82       	std	Y+2, r1	; 0x02
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	9a 81       	ldd	r25, Y+2	; 0x02
    215e:	89 2b       	or	r24, r25
    2160:	09 f1       	breq	.+66     	; 0x21a4 <xTaskCreate+0xc8>
    2162:	8a 85       	ldd	r24, Y+10	; 0x0a
    2164:	9b 85       	ldd	r25, Y+11	; 0x0b
    2166:	cc 01       	movw	r24, r24
    2168:	a0 e0       	ldi	r26, 0x00	; 0
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	09 81       	ldd	r16, Y+1	; 0x01
    216e:	1a 81       	ldd	r17, Y+2	; 0x02
    2170:	4f 85       	ldd	r20, Y+15	; 0x0f
    2172:	58 89       	ldd	r21, Y+16	; 0x10
    2174:	2c 85       	ldd	r18, Y+12	; 0x0c
    2176:	3d 85       	ldd	r19, Y+13	; 0x0d
    2178:	68 85       	ldd	r22, Y+8	; 0x08
    217a:	79 85       	ldd	r23, Y+9	; 0x09
    217c:	ee 81       	ldd	r30, Y+6	; 0x06
    217e:	ff 81       	ldd	r31, Y+7	; 0x07
    2180:	81 2c       	mov	r8, r1
    2182:	91 2c       	mov	r9, r1
    2184:	58 01       	movw	r10, r16
    2186:	6a 01       	movw	r12, r20
    2188:	ee 84       	ldd	r14, Y+14	; 0x0e
    218a:	89 01       	movw	r16, r18
    218c:	9c 01       	movw	r18, r24
    218e:	ad 01       	movw	r20, r26
    2190:	cf 01       	movw	r24, r30
    2192:	0e 94 e5 10 	call	0x21ca	; 0x21ca <prvInitialiseNewTask>
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	9a 81       	ldd	r25, Y+2	; 0x02
    219a:	0e 94 bb 11 	call	0x2376	; 0x2376 <prvAddNewTaskToReadyList>
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	8b 83       	std	Y+3, r24	; 0x03
    21a2:	02 c0       	rjmp	.+4      	; 0x21a8 <xTaskCreate+0xcc>
    21a4:	8f ef       	ldi	r24, 0xFF	; 255
    21a6:	8b 83       	std	Y+3, r24	; 0x03
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	60 96       	adiw	r28, 0x10	; 16
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	df 91       	pop	r29
    21b2:	cf 91       	pop	r28
    21b4:	1f 91       	pop	r17
    21b6:	0f 91       	pop	r16
    21b8:	ff 90       	pop	r15
    21ba:	ef 90       	pop	r14
    21bc:	df 90       	pop	r13
    21be:	cf 90       	pop	r12
    21c0:	bf 90       	pop	r11
    21c2:	af 90       	pop	r10
    21c4:	9f 90       	pop	r9
    21c6:	8f 90       	pop	r8
    21c8:	08 95       	ret

000021ca <prvInitialiseNewTask>:
    21ca:	8f 92       	push	r8
    21cc:	9f 92       	push	r9
    21ce:	af 92       	push	r10
    21d0:	bf 92       	push	r11
    21d2:	cf 92       	push	r12
    21d4:	df 92       	push	r13
    21d6:	ef 92       	push	r14
    21d8:	ff 92       	push	r15
    21da:	0f 93       	push	r16
    21dc:	1f 93       	push	r17
    21de:	cf 93       	push	r28
    21e0:	df 93       	push	r29
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
    21e6:	64 97       	sbiw	r28, 0x14	; 20
    21e8:	cd bf       	out	0x3d, r28	; 61
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	8c 83       	std	Y+4, r24	; 0x04
    21ee:	9d 83       	std	Y+5, r25	; 0x05
    21f0:	6e 83       	std	Y+6, r22	; 0x06
    21f2:	7f 83       	std	Y+7, r23	; 0x07
    21f4:	28 87       	std	Y+8, r18	; 0x08
    21f6:	39 87       	std	Y+9, r19	; 0x09
    21f8:	4a 87       	std	Y+10, r20	; 0x0a
    21fa:	5b 87       	std	Y+11, r21	; 0x0b
    21fc:	0c 87       	std	Y+12, r16	; 0x0c
    21fe:	1d 87       	std	Y+13, r17	; 0x0d
    2200:	ee 86       	std	Y+14, r14	; 0x0e
    2202:	cf 86       	std	Y+15, r12	; 0x0f
    2204:	d8 8a       	std	Y+16, r13	; 0x10
    2206:	a9 8a       	std	Y+17, r10	; 0x11
    2208:	ba 8a       	std	Y+18, r11	; 0x12
    220a:	8b 8a       	std	Y+19, r8	; 0x13
    220c:	9c 8a       	std	Y+20, r9	; 0x14
    220e:	28 85       	ldd	r18, Y+8	; 0x08
    2210:	39 85       	ldd	r19, Y+9	; 0x09
    2212:	89 89       	ldd	r24, Y+17	; 0x11
    2214:	9a 89       	ldd	r25, Y+18	; 0x12
    2216:	fc 01       	movw	r30, r24
    2218:	83 8d       	ldd	r24, Z+27	; 0x1b
    221a:	94 8d       	ldd	r25, Z+28	; 0x1c
    221c:	a9 01       	movw	r20, r18
    221e:	65 ea       	ldi	r22, 0xA5	; 165
    2220:	70 e0       	ldi	r23, 0x00	; 0
    2222:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <memset>
    2226:	89 89       	ldd	r24, Y+17	; 0x11
    2228:	9a 89       	ldd	r25, Y+18	; 0x12
    222a:	fc 01       	movw	r30, r24
    222c:	23 8d       	ldd	r18, Z+27	; 0x1b
    222e:	34 8d       	ldd	r19, Z+28	; 0x1c
    2230:	88 85       	ldd	r24, Y+8	; 0x08
    2232:	99 85       	ldd	r25, Y+9	; 0x09
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	82 0f       	add	r24, r18
    2238:	93 1f       	adc	r25, r19
    223a:	8a 83       	std	Y+2, r24	; 0x02
    223c:	9b 83       	std	Y+3, r25	; 0x03
    223e:	19 82       	std	Y+1, r1	; 0x01
    2240:	21 c0       	rjmp	.+66     	; 0x2284 <prvInitialiseNewTask+0xba>
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	88 2f       	mov	r24, r24
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	29 81       	ldd	r18, Y+1	; 0x01
    224a:	22 2f       	mov	r18, r18
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	4e 81       	ldd	r20, Y+6	; 0x06
    2250:	5f 81       	ldd	r21, Y+7	; 0x07
    2252:	24 0f       	add	r18, r20
    2254:	35 1f       	adc	r19, r21
    2256:	f9 01       	movw	r30, r18
    2258:	40 81       	ld	r20, Z
    225a:	29 89       	ldd	r18, Y+17	; 0x11
    225c:	3a 89       	ldd	r19, Y+18	; 0x12
    225e:	82 0f       	add	r24, r18
    2260:	93 1f       	adc	r25, r19
    2262:	4d 96       	adiw	r24, 0x1d	; 29
    2264:	fc 01       	movw	r30, r24
    2266:	40 83       	st	Z, r20
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	88 2f       	mov	r24, r24
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	2e 81       	ldd	r18, Y+6	; 0x06
    2270:	3f 81       	ldd	r19, Y+7	; 0x07
    2272:	82 0f       	add	r24, r18
    2274:	93 1f       	adc	r25, r19
    2276:	fc 01       	movw	r30, r24
    2278:	80 81       	ld	r24, Z
    227a:	88 23       	and	r24, r24
    227c:	39 f0       	breq	.+14     	; 0x228c <prvInitialiseNewTask+0xc2>
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	8f 5f       	subi	r24, 0xFF	; 255
    2282:	89 83       	std	Y+1, r24	; 0x01
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	88 30       	cpi	r24, 0x08	; 8
    2288:	e0 f2       	brcs	.-72     	; 0x2242 <prvInitialiseNewTask+0x78>
    228a:	01 c0       	rjmp	.+2      	; 0x228e <prvInitialiseNewTask+0xc4>
    228c:	00 00       	nop
    228e:	89 89       	ldd	r24, Y+17	; 0x11
    2290:	9a 89       	ldd	r25, Y+18	; 0x12
    2292:	fc 01       	movw	r30, r24
    2294:	14 a2       	std	Z+36, r1	; 0x24
    2296:	8e 85       	ldd	r24, Y+14	; 0x0e
    2298:	84 30       	cpi	r24, 0x04	; 4
    229a:	10 f0       	brcs	.+4      	; 0x22a0 <prvInitialiseNewTask+0xd6>
    229c:	83 e0       	ldi	r24, 0x03	; 3
    229e:	8e 87       	std	Y+14, r24	; 0x0e
    22a0:	89 89       	ldd	r24, Y+17	; 0x11
    22a2:	9a 89       	ldd	r25, Y+18	; 0x12
    22a4:	2e 85       	ldd	r18, Y+14	; 0x0e
    22a6:	fc 01       	movw	r30, r24
    22a8:	22 8f       	std	Z+26, r18	; 0x1a
    22aa:	89 89       	ldd	r24, Y+17	; 0x11
    22ac:	9a 89       	ldd	r25, Y+18	; 0x12
    22ae:	02 96       	adiw	r24, 0x02	; 2
    22b0:	0e 94 aa 06 	call	0xd54	; 0xd54 <vListInitialiseItem>
    22b4:	89 89       	ldd	r24, Y+17	; 0x11
    22b6:	9a 89       	ldd	r25, Y+18	; 0x12
    22b8:	0e 96       	adiw	r24, 0x0e	; 14
    22ba:	0e 94 aa 06 	call	0xd54	; 0xd54 <vListInitialiseItem>
    22be:	89 89       	ldd	r24, Y+17	; 0x11
    22c0:	9a 89       	ldd	r25, Y+18	; 0x12
    22c2:	29 89       	ldd	r18, Y+17	; 0x11
    22c4:	3a 89       	ldd	r19, Y+18	; 0x12
    22c6:	fc 01       	movw	r30, r24
    22c8:	22 87       	std	Z+10, r18	; 0x0a
    22ca:	33 87       	std	Z+11, r19	; 0x0b
    22cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    22ce:	88 2f       	mov	r24, r24
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	a0 e0       	ldi	r26, 0x00	; 0
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	24 e0       	ldi	r18, 0x04	; 4
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e0       	ldi	r20, 0x00	; 0
    22dc:	50 e0       	ldi	r21, 0x00	; 0
    22de:	79 01       	movw	r14, r18
    22e0:	8a 01       	movw	r16, r20
    22e2:	e8 1a       	sub	r14, r24
    22e4:	f9 0a       	sbc	r15, r25
    22e6:	0a 0b       	sbc	r16, r26
    22e8:	1b 0b       	sbc	r17, r27
    22ea:	d8 01       	movw	r26, r16
    22ec:	c7 01       	movw	r24, r14
    22ee:	29 89       	ldd	r18, Y+17	; 0x11
    22f0:	3a 89       	ldd	r19, Y+18	; 0x12
    22f2:	f9 01       	movw	r30, r18
    22f4:	86 87       	std	Z+14, r24	; 0x0e
    22f6:	97 87       	std	Z+15, r25	; 0x0f
    22f8:	a0 8b       	std	Z+16, r26	; 0x10
    22fa:	b1 8b       	std	Z+17, r27	; 0x11
    22fc:	89 89       	ldd	r24, Y+17	; 0x11
    22fe:	9a 89       	ldd	r25, Y+18	; 0x12
    2300:	29 89       	ldd	r18, Y+17	; 0x11
    2302:	3a 89       	ldd	r19, Y+18	; 0x12
    2304:	fc 01       	movw	r30, r24
    2306:	26 8b       	std	Z+22, r18	; 0x16
    2308:	37 8b       	std	Z+23, r19	; 0x17
    230a:	89 89       	ldd	r24, Y+17	; 0x11
    230c:	9a 89       	ldd	r25, Y+18	; 0x12
    230e:	fc 01       	movw	r30, r24
    2310:	17 a2       	std	Z+39, r1	; 0x27
    2312:	10 a6       	std	Z+40, r1	; 0x28
    2314:	11 a6       	std	Z+41, r1	; 0x29
    2316:	12 a6       	std	Z+42, r1	; 0x2a
    2318:	89 89       	ldd	r24, Y+17	; 0x11
    231a:	9a 89       	ldd	r25, Y+18	; 0x12
    231c:	fc 01       	movw	r30, r24
    231e:	13 a6       	std	Z+43, r1	; 0x2b
    2320:	4c 85       	ldd	r20, Y+12	; 0x0c
    2322:	5d 85       	ldd	r21, Y+13	; 0x0d
    2324:	2c 81       	ldd	r18, Y+4	; 0x04
    2326:	3d 81       	ldd	r19, Y+5	; 0x05
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	9b 81       	ldd	r25, Y+3	; 0x03
    232c:	b9 01       	movw	r22, r18
    232e:	0e 94 f6 07 	call	0xfec	; 0xfec <pxPortInitialiseStack>
    2332:	9c 01       	movw	r18, r24
    2334:	89 89       	ldd	r24, Y+17	; 0x11
    2336:	9a 89       	ldd	r25, Y+18	; 0x12
    2338:	fc 01       	movw	r30, r24
    233a:	20 83       	st	Z, r18
    233c:	31 83       	std	Z+1, r19	; 0x01
    233e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2340:	98 89       	ldd	r25, Y+16	; 0x10
    2342:	89 2b       	or	r24, r25
    2344:	39 f0       	breq	.+14     	; 0x2354 <prvInitialiseNewTask+0x18a>
    2346:	8f 85       	ldd	r24, Y+15	; 0x0f
    2348:	98 89       	ldd	r25, Y+16	; 0x10
    234a:	29 89       	ldd	r18, Y+17	; 0x11
    234c:	3a 89       	ldd	r19, Y+18	; 0x12
    234e:	fc 01       	movw	r30, r24
    2350:	20 83       	st	Z, r18
    2352:	31 83       	std	Z+1, r19	; 0x01
    2354:	00 00       	nop
    2356:	64 96       	adiw	r28, 0x14	; 20
    2358:	cd bf       	out	0x3d, r28	; 61
    235a:	de bf       	out	0x3e, r29	; 62
    235c:	df 91       	pop	r29
    235e:	cf 91       	pop	r28
    2360:	1f 91       	pop	r17
    2362:	0f 91       	pop	r16
    2364:	ff 90       	pop	r15
    2366:	ef 90       	pop	r14
    2368:	df 90       	pop	r13
    236a:	cf 90       	pop	r12
    236c:	bf 90       	pop	r11
    236e:	af 90       	pop	r10
    2370:	9f 90       	pop	r9
    2372:	8f 90       	pop	r8
    2374:	08 95       	ret

00002376 <prvAddNewTaskToReadyList>:
    2376:	cf 93       	push	r28
    2378:	df 93       	push	r29
    237a:	1f 92       	push	r1
    237c:	1f 92       	push	r1
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
    2382:	89 83       	std	Y+1, r24	; 0x01
    2384:	9a 83       	std	Y+2, r25	; 0x02
    2386:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    238a:	ff 93       	push	r31
    238c:	f8 7f       	andi	r31, 0xF8	; 248
    238e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2392:	80 91 64 2c 	lds	r24, 0x2C64	; 0x802c64 <uxCurrentNumberOfTasks>
    2396:	8f 5f       	subi	r24, 0xFF	; 255
    2398:	80 93 64 2c 	sts	0x2C64, r24	; 0x802c64 <uxCurrentNumberOfTasks>
    239c:	80 91 06 2c 	lds	r24, 0x2C06	; 0x802c06 <pxCurrentTCB>
    23a0:	90 91 07 2c 	lds	r25, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    23a4:	89 2b       	or	r24, r25
    23a6:	69 f4       	brne	.+26     	; 0x23c2 <prvAddNewTaskToReadyList+0x4c>
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	9a 81       	ldd	r25, Y+2	; 0x02
    23ac:	80 93 06 2c 	sts	0x2C06, r24	; 0x802c06 <pxCurrentTCB>
    23b0:	90 93 07 2c 	sts	0x2C07, r25	; 0x802c07 <pxCurrentTCB+0x1>
    23b4:	80 91 64 2c 	lds	r24, 0x2C64	; 0x802c64 <uxCurrentNumberOfTasks>
    23b8:	81 30       	cpi	r24, 0x01	; 1
    23ba:	c9 f4       	brne	.+50     	; 0x23ee <prvAddNewTaskToReadyList+0x78>
    23bc:	0e 94 4b 18 	call	0x3096	; 0x3096 <prvInitialiseTaskLists>
    23c0:	16 c0       	rjmp	.+44     	; 0x23ee <prvAddNewTaskToReadyList+0x78>
    23c2:	80 91 6a 2c 	lds	r24, 0x2C6A	; 0x802c6a <xSchedulerRunning>
    23c6:	88 23       	and	r24, r24
    23c8:	91 f4       	brne	.+36     	; 0x23ee <prvAddNewTaskToReadyList+0x78>
    23ca:	80 91 06 2c 	lds	r24, 0x2C06	; 0x802c06 <pxCurrentTCB>
    23ce:	90 91 07 2c 	lds	r25, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    23d2:	fc 01       	movw	r30, r24
    23d4:	22 8d       	ldd	r18, Z+26	; 0x1a
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	9a 81       	ldd	r25, Y+2	; 0x02
    23da:	fc 01       	movw	r30, r24
    23dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    23de:	82 17       	cp	r24, r18
    23e0:	30 f0       	brcs	.+12     	; 0x23ee <prvAddNewTaskToReadyList+0x78>
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	9a 81       	ldd	r25, Y+2	; 0x02
    23e6:	80 93 06 2c 	sts	0x2C06, r24	; 0x802c06 <pxCurrentTCB>
    23ea:	90 93 07 2c 	sts	0x2C07, r25	; 0x802c07 <pxCurrentTCB+0x1>
    23ee:	80 91 6e 2c 	lds	r24, 0x2C6E	; 0x802c6e <uxTaskNumber>
    23f2:	8f 5f       	subi	r24, 0xFF	; 255
    23f4:	80 93 6e 2c 	sts	0x2C6E, r24	; 0x802c6e <uxTaskNumber>
    23f8:	20 91 6e 2c 	lds	r18, 0x2C6E	; 0x802c6e <uxTaskNumber>
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2400:	fc 01       	movw	r30, r24
    2402:	25 a3       	std	Z+37, r18	; 0x25
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	9a 81       	ldd	r25, Y+2	; 0x02
    2408:	fc 01       	movw	r30, r24
    240a:	92 8d       	ldd	r25, Z+26	; 0x1a
    240c:	80 91 69 2c 	lds	r24, 0x2C69	; 0x802c69 <uxTopReadyPriority>
    2410:	89 17       	cp	r24, r25
    2412:	30 f4       	brcc	.+12     	; 0x2420 <prvAddNewTaskToReadyList+0xaa>
    2414:	89 81       	ldd	r24, Y+1	; 0x01
    2416:	9a 81       	ldd	r25, Y+2	; 0x02
    2418:	fc 01       	movw	r30, r24
    241a:	82 8d       	ldd	r24, Z+26	; 0x1a
    241c:	80 93 69 2c 	sts	0x2C69, r24	; 0x802c69 <uxTopReadyPriority>
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	9a 81       	ldd	r25, Y+2	; 0x02
    2424:	ac 01       	movw	r20, r24
    2426:	4e 5f       	subi	r20, 0xFE	; 254
    2428:	5f 4f       	sbci	r21, 0xFF	; 255
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	9a 81       	ldd	r25, Y+2	; 0x02
    242e:	fc 01       	movw	r30, r24
    2430:	82 8d       	ldd	r24, Z+26	; 0x1a
    2432:	28 2f       	mov	r18, r24
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	6b e0       	ldi	r22, 0x0B	; 11
    2438:	62 9f       	mul	r22, r18
    243a:	c0 01       	movw	r24, r0
    243c:	63 9f       	mul	r22, r19
    243e:	90 0d       	add	r25, r0
    2440:	11 24       	eor	r1, r1
    2442:	88 5f       	subi	r24, 0xF8	; 248
    2444:	93 4d       	sbci	r25, 0xD3	; 211
    2446:	ba 01       	movw	r22, r20
    2448:	0e 94 bd 06 	call	0xd7a	; 0xd7a <vListInsertEnd>
    244c:	ff 91       	pop	r31
    244e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2452:	80 91 6a 2c 	lds	r24, 0x2C6A	; 0x802c6a <xSchedulerRunning>
    2456:	88 23       	and	r24, r24
    2458:	71 f0       	breq	.+28     	; 0x2476 <prvAddNewTaskToReadyList+0x100>
    245a:	80 91 06 2c 	lds	r24, 0x2C06	; 0x802c06 <pxCurrentTCB>
    245e:	90 91 07 2c 	lds	r25, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    2462:	fc 01       	movw	r30, r24
    2464:	22 8d       	ldd	r18, Z+26	; 0x1a
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	9a 81       	ldd	r25, Y+2	; 0x02
    246a:	fc 01       	movw	r30, r24
    246c:	82 8d       	ldd	r24, Z+26	; 0x1a
    246e:	28 17       	cp	r18, r24
    2470:	10 f4       	brcc	.+4      	; 0x2476 <prvAddNewTaskToReadyList+0x100>
    2472:	0e 94 07 0a 	call	0x140e	; 0x140e <vPortYield>
    2476:	00 00       	nop
    2478:	0f 90       	pop	r0
    247a:	0f 90       	pop	r0
    247c:	df 91       	pop	r29
    247e:	cf 91       	pop	r28
    2480:	08 95       	ret

00002482 <vTaskDelay>:
    2482:	cf 93       	push	r28
    2484:	df 93       	push	r29
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	25 97       	sbiw	r28, 0x05	; 5
    248c:	cd bf       	out	0x3d, r28	; 61
    248e:	de bf       	out	0x3e, r29	; 62
    2490:	6a 83       	std	Y+2, r22	; 0x02
    2492:	7b 83       	std	Y+3, r23	; 0x03
    2494:	8c 83       	std	Y+4, r24	; 0x04
    2496:	9d 83       	std	Y+5, r25	; 0x05
    2498:	19 82       	std	Y+1, r1	; 0x01
    249a:	8a 81       	ldd	r24, Y+2	; 0x02
    249c:	9b 81       	ldd	r25, Y+3	; 0x03
    249e:	ac 81       	ldd	r26, Y+4	; 0x04
    24a0:	bd 81       	ldd	r27, Y+5	; 0x05
    24a2:	89 2b       	or	r24, r25
    24a4:	8a 2b       	or	r24, r26
    24a6:	8b 2b       	or	r24, r27
    24a8:	71 f0       	breq	.+28     	; 0x24c6 <vTaskDelay+0x44>
    24aa:	0e 94 51 13 	call	0x26a2	; 0x26a2 <vTaskSuspendAll>
    24ae:	8a 81       	ldd	r24, Y+2	; 0x02
    24b0:	9b 81       	ldd	r25, Y+3	; 0x03
    24b2:	ac 81       	ldd	r26, Y+4	; 0x04
    24b4:	bd 81       	ldd	r27, Y+5	; 0x05
    24b6:	40 e0       	ldi	r20, 0x00	; 0
    24b8:	bc 01       	movw	r22, r24
    24ba:	cd 01       	movw	r24, r26
    24bc:	0e 94 28 19 	call	0x3250	; 0x3250 <prvAddCurrentTaskToDelayedList>
    24c0:	0e 94 5e 13 	call	0x26bc	; 0x26bc <xTaskResumeAll>
    24c4:	89 83       	std	Y+1, r24	; 0x01
    24c6:	89 81       	ldd	r24, Y+1	; 0x01
    24c8:	88 23       	and	r24, r24
    24ca:	11 f4       	brne	.+4      	; 0x24d0 <vTaskDelay+0x4e>
    24cc:	0e 94 07 0a 	call	0x140e	; 0x140e <vPortYield>
    24d0:	00 00       	nop
    24d2:	25 96       	adiw	r28, 0x05	; 5
    24d4:	cd bf       	out	0x3d, r28	; 61
    24d6:	de bf       	out	0x3e, r29	; 62
    24d8:	df 91       	pop	r29
    24da:	cf 91       	pop	r28
    24dc:	08 95       	ret

000024de <prvTaskIsTaskSuspended>:
    24de:	cf 93       	push	r28
    24e0:	df 93       	push	r29
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	25 97       	sbiw	r28, 0x05	; 5
    24e8:	cd bf       	out	0x3d, r28	; 61
    24ea:	de bf       	out	0x3e, r29	; 62
    24ec:	8c 83       	std	Y+4, r24	; 0x04
    24ee:	9d 83       	std	Y+5, r25	; 0x05
    24f0:	19 82       	std	Y+1, r1	; 0x01
    24f2:	8c 81       	ldd	r24, Y+4	; 0x04
    24f4:	9d 81       	ldd	r25, Y+5	; 0x05
    24f6:	8a 83       	std	Y+2, r24	; 0x02
    24f8:	9b 83       	std	Y+3, r25	; 0x03
    24fa:	8a 81       	ldd	r24, Y+2	; 0x02
    24fc:	9b 81       	ldd	r25, Y+3	; 0x03
    24fe:	fc 01       	movw	r30, r24
    2500:	84 85       	ldd	r24, Z+12	; 0x0c
    2502:	95 85       	ldd	r25, Z+13	; 0x0d
    2504:	89 55       	subi	r24, 0x59	; 89
    2506:	9c 42       	sbci	r25, 0x2C	; 44
    2508:	89 f4       	brne	.+34     	; 0x252c <prvTaskIsTaskSuspended+0x4e>
    250a:	8a 81       	ldd	r24, Y+2	; 0x02
    250c:	9b 81       	ldd	r25, Y+3	; 0x03
    250e:	fc 01       	movw	r30, r24
    2510:	80 8d       	ldd	r24, Z+24	; 0x18
    2512:	91 8d       	ldd	r25, Z+25	; 0x19
    2514:	8e 54       	subi	r24, 0x4E	; 78
    2516:	9c 42       	sbci	r25, 0x2C	; 44
    2518:	49 f0       	breq	.+18     	; 0x252c <prvTaskIsTaskSuspended+0x4e>
    251a:	8a 81       	ldd	r24, Y+2	; 0x02
    251c:	9b 81       	ldd	r25, Y+3	; 0x03
    251e:	fc 01       	movw	r30, r24
    2520:	80 8d       	ldd	r24, Z+24	; 0x18
    2522:	91 8d       	ldd	r25, Z+25	; 0x19
    2524:	89 2b       	or	r24, r25
    2526:	11 f4       	brne	.+4      	; 0x252c <prvTaskIsTaskSuspended+0x4e>
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	89 83       	std	Y+1, r24	; 0x01
    252c:	89 81       	ldd	r24, Y+1	; 0x01
    252e:	25 96       	adiw	r28, 0x05	; 5
    2530:	cd bf       	out	0x3d, r28	; 61
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	df 91       	pop	r29
    2536:	cf 91       	pop	r28
    2538:	08 95       	ret

0000253a <vTaskResume>:
    253a:	cf 93       	push	r28
    253c:	df 93       	push	r29
    253e:	00 d0       	rcall	.+0      	; 0x2540 <vTaskResume+0x6>
    2540:	1f 92       	push	r1
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
    2546:	8b 83       	std	Y+3, r24	; 0x03
    2548:	9c 83       	std	Y+4, r25	; 0x04
    254a:	8b 81       	ldd	r24, Y+3	; 0x03
    254c:	9c 81       	ldd	r25, Y+4	; 0x04
    254e:	89 83       	std	Y+1, r24	; 0x01
    2550:	9a 83       	std	Y+2, r25	; 0x02
    2552:	89 81       	ldd	r24, Y+1	; 0x01
    2554:	9a 81       	ldd	r25, Y+2	; 0x02
    2556:	89 2b       	or	r24, r25
    2558:	09 f4       	brne	.+2      	; 0x255c <vTaskResume+0x22>
    255a:	50 c0       	rjmp	.+160    	; 0x25fc <vTaskResume+0xc2>
    255c:	80 91 06 2c 	lds	r24, 0x2C06	; 0x802c06 <pxCurrentTCB>
    2560:	90 91 07 2c 	lds	r25, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    2564:	29 81       	ldd	r18, Y+1	; 0x01
    2566:	3a 81       	ldd	r19, Y+2	; 0x02
    2568:	28 17       	cp	r18, r24
    256a:	39 07       	cpc	r19, r25
    256c:	09 f4       	brne	.+2      	; 0x2570 <vTaskResume+0x36>
    256e:	46 c0       	rjmp	.+140    	; 0x25fc <vTaskResume+0xc2>
    2570:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2574:	ff 93       	push	r31
    2576:	f8 7f       	andi	r31, 0xF8	; 248
    2578:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	9a 81       	ldd	r25, Y+2	; 0x02
    2580:	0e 94 6f 12 	call	0x24de	; 0x24de <prvTaskIsTaskSuspended>
    2584:	88 23       	and	r24, r24
    2586:	b9 f1       	breq	.+110    	; 0x25f6 <vTaskResume+0xbc>
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	9a 81       	ldd	r25, Y+2	; 0x02
    258c:	02 96       	adiw	r24, 0x02	; 2
    258e:	0e 94 89 07 	call	0xf12	; 0xf12 <uxListRemove>
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	9a 81       	ldd	r25, Y+2	; 0x02
    2596:	fc 01       	movw	r30, r24
    2598:	92 8d       	ldd	r25, Z+26	; 0x1a
    259a:	80 91 69 2c 	lds	r24, 0x2C69	; 0x802c69 <uxTopReadyPriority>
    259e:	89 17       	cp	r24, r25
    25a0:	30 f4       	brcc	.+12     	; 0x25ae <vTaskResume+0x74>
    25a2:	89 81       	ldd	r24, Y+1	; 0x01
    25a4:	9a 81       	ldd	r25, Y+2	; 0x02
    25a6:	fc 01       	movw	r30, r24
    25a8:	82 8d       	ldd	r24, Z+26	; 0x1a
    25aa:	80 93 69 2c 	sts	0x2C69, r24	; 0x802c69 <uxTopReadyPriority>
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	9a 81       	ldd	r25, Y+2	; 0x02
    25b2:	ac 01       	movw	r20, r24
    25b4:	4e 5f       	subi	r20, 0xFE	; 254
    25b6:	5f 4f       	sbci	r21, 0xFF	; 255
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	9a 81       	ldd	r25, Y+2	; 0x02
    25bc:	fc 01       	movw	r30, r24
    25be:	82 8d       	ldd	r24, Z+26	; 0x1a
    25c0:	28 2f       	mov	r18, r24
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	6b e0       	ldi	r22, 0x0B	; 11
    25c6:	62 9f       	mul	r22, r18
    25c8:	c0 01       	movw	r24, r0
    25ca:	63 9f       	mul	r22, r19
    25cc:	90 0d       	add	r25, r0
    25ce:	11 24       	eor	r1, r1
    25d0:	88 5f       	subi	r24, 0xF8	; 248
    25d2:	93 4d       	sbci	r25, 0xD3	; 211
    25d4:	ba 01       	movw	r22, r20
    25d6:	0e 94 bd 06 	call	0xd7a	; 0xd7a <vListInsertEnd>
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	9a 81       	ldd	r25, Y+2	; 0x02
    25de:	fc 01       	movw	r30, r24
    25e0:	22 8d       	ldd	r18, Z+26	; 0x1a
    25e2:	80 91 06 2c 	lds	r24, 0x2C06	; 0x802c06 <pxCurrentTCB>
    25e6:	90 91 07 2c 	lds	r25, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    25ea:	fc 01       	movw	r30, r24
    25ec:	82 8d       	ldd	r24, Z+26	; 0x1a
    25ee:	28 17       	cp	r18, r24
    25f0:	10 f0       	brcs	.+4      	; 0x25f6 <vTaskResume+0xbc>
    25f2:	0e 94 07 0a 	call	0x140e	; 0x140e <vPortYield>
    25f6:	ff 91       	pop	r31
    25f8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    25fc:	00 00       	nop
    25fe:	24 96       	adiw	r28, 0x04	; 4
    2600:	cd bf       	out	0x3d, r28	; 61
    2602:	de bf       	out	0x3e, r29	; 62
    2604:	df 91       	pop	r29
    2606:	cf 91       	pop	r28
    2608:	08 95       	ret

0000260a <vTaskStartScheduler>:
    260a:	ef 92       	push	r14
    260c:	ff 92       	push	r15
    260e:	0f 93       	push	r16
    2610:	cf 93       	push	r28
    2612:	df 93       	push	r29
    2614:	1f 92       	push	r1
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	0f 2e       	mov	r0, r31
    261c:	f3 e7       	ldi	r31, 0x73	; 115
    261e:	ef 2e       	mov	r14, r31
    2620:	fc e2       	ldi	r31, 0x2C	; 44
    2622:	ff 2e       	mov	r15, r31
    2624:	f0 2d       	mov	r31, r0
    2626:	00 e0       	ldi	r16, 0x00	; 0
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	48 ec       	ldi	r20, 0xC8	; 200
    262e:	50 e0       	ldi	r21, 0x00	; 0
    2630:	60 e0       	ldi	r22, 0x00	; 0
    2632:	70 e2       	ldi	r23, 0x20	; 32
    2634:	88 e3       	ldi	r24, 0x38	; 56
    2636:	98 e1       	ldi	r25, 0x18	; 24
    2638:	0e 94 6e 10 	call	0x20dc	; 0x20dc <xTaskCreate>
    263c:	89 83       	std	Y+1, r24	; 0x01
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	81 30       	cpi	r24, 0x01	; 1
    2642:	19 f4       	brne	.+6      	; 0x264a <vTaskStartScheduler+0x40>
    2644:	0e 94 c9 19 	call	0x3392	; 0x3392 <xTimerCreateTimerTask>
    2648:	89 83       	std	Y+1, r24	; 0x01
    264a:	89 81       	ldd	r24, Y+1	; 0x01
    264c:	81 30       	cpi	r24, 0x01	; 1
    264e:	09 f5       	brne	.+66     	; 0x2692 <vTaskStartScheduler+0x88>
    2650:	80 ea       	ldi	r24, 0xA0	; 160
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	20 ea       	ldi	r18, 0xA0	; 160
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	f9 01       	movw	r30, r18
    265a:	22 81       	ldd	r18, Z+2	; 0x02
    265c:	28 7f       	andi	r18, 0xF8	; 248
    265e:	fc 01       	movw	r30, r24
    2660:	22 83       	std	Z+2, r18	; 0x02
    2662:	8f ef       	ldi	r24, 0xFF	; 255
    2664:	9f ef       	ldi	r25, 0xFF	; 255
    2666:	dc 01       	movw	r26, r24
    2668:	80 93 6f 2c 	sts	0x2C6F, r24	; 0x802c6f <xNextTaskUnblockTime>
    266c:	90 93 70 2c 	sts	0x2C70, r25	; 0x802c70 <xNextTaskUnblockTime+0x1>
    2670:	a0 93 71 2c 	sts	0x2C71, r26	; 0x802c71 <xNextTaskUnblockTime+0x2>
    2674:	b0 93 72 2c 	sts	0x2C72, r27	; 0x802c72 <xNextTaskUnblockTime+0x3>
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	80 93 6a 2c 	sts	0x2C6A, r24	; 0x802c6a <xSchedulerRunning>
    267e:	10 92 65 2c 	sts	0x2C65, r1	; 0x802c65 <xTickCount>
    2682:	10 92 66 2c 	sts	0x2C66, r1	; 0x802c66 <xTickCount+0x1>
    2686:	10 92 67 2c 	sts	0x2C67, r1	; 0x802c67 <xTickCount+0x2>
    268a:	10 92 68 2c 	sts	0x2C68, r1	; 0x802c68 <xTickCount+0x3>
    268e:	0e 94 cf 09 	call	0x139e	; 0x139e <xPortStartScheduler>
    2692:	00 00       	nop
    2694:	0f 90       	pop	r0
    2696:	df 91       	pop	r29
    2698:	cf 91       	pop	r28
    269a:	0f 91       	pop	r16
    269c:	ff 90       	pop	r15
    269e:	ef 90       	pop	r14
    26a0:	08 95       	ret

000026a2 <vTaskSuspendAll>:
    26a2:	cf 93       	push	r28
    26a4:	df 93       	push	r29
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62
    26aa:	80 91 75 2c 	lds	r24, 0x2C75	; 0x802c75 <uxSchedulerSuspended>
    26ae:	8f 5f       	subi	r24, 0xFF	; 255
    26b0:	80 93 75 2c 	sts	0x2C75, r24	; 0x802c75 <uxSchedulerSuspended>
    26b4:	00 00       	nop
    26b6:	df 91       	pop	r29
    26b8:	cf 91       	pop	r28
    26ba:	08 95       	ret

000026bc <xTaskResumeAll>:
    26bc:	cf 93       	push	r28
    26be:	df 93       	push	r29
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <xTaskResumeAll+0x6>
    26c2:	1f 92       	push	r1
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	19 82       	std	Y+1, r1	; 0x01
    26ca:	1a 82       	std	Y+2, r1	; 0x02
    26cc:	1b 82       	std	Y+3, r1	; 0x03
    26ce:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    26d2:	ff 93       	push	r31
    26d4:	f8 7f       	andi	r31, 0xF8	; 248
    26d6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    26da:	80 91 75 2c 	lds	r24, 0x2C75	; 0x802c75 <uxSchedulerSuspended>
    26de:	81 50       	subi	r24, 0x01	; 1
    26e0:	80 93 75 2c 	sts	0x2C75, r24	; 0x802c75 <uxSchedulerSuspended>
    26e4:	80 91 75 2c 	lds	r24, 0x2C75	; 0x802c75 <uxSchedulerSuspended>
    26e8:	88 23       	and	r24, r24
    26ea:	09 f0       	breq	.+2      	; 0x26ee <xTaskResumeAll+0x32>
    26ec:	74 c0       	rjmp	.+232    	; 0x27d6 <xTaskResumeAll+0x11a>
    26ee:	80 91 64 2c 	lds	r24, 0x2C64	; 0x802c64 <uxCurrentNumberOfTasks>
    26f2:	88 23       	and	r24, r24
    26f4:	09 f4       	brne	.+2      	; 0x26f8 <xTaskResumeAll+0x3c>
    26f6:	6f c0       	rjmp	.+222    	; 0x27d6 <xTaskResumeAll+0x11a>
    26f8:	46 c0       	rjmp	.+140    	; 0x2786 <xTaskResumeAll+0xca>
    26fa:	80 91 55 2c 	lds	r24, 0x2C55	; 0x802c55 <xPendingReadyList+0x7>
    26fe:	90 91 56 2c 	lds	r25, 0x2C56	; 0x802c56 <xPendingReadyList+0x8>
    2702:	fc 01       	movw	r30, r24
    2704:	80 85       	ldd	r24, Z+8	; 0x08
    2706:	91 85       	ldd	r25, Z+9	; 0x09
    2708:	89 83       	std	Y+1, r24	; 0x01
    270a:	9a 83       	std	Y+2, r25	; 0x02
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	9a 81       	ldd	r25, Y+2	; 0x02
    2710:	0e 96       	adiw	r24, 0x0e	; 14
    2712:	0e 94 89 07 	call	0xf12	; 0xf12 <uxListRemove>
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	9a 81       	ldd	r25, Y+2	; 0x02
    271a:	02 96       	adiw	r24, 0x02	; 2
    271c:	0e 94 89 07 	call	0xf12	; 0xf12 <uxListRemove>
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	9a 81       	ldd	r25, Y+2	; 0x02
    2724:	fc 01       	movw	r30, r24
    2726:	92 8d       	ldd	r25, Z+26	; 0x1a
    2728:	80 91 69 2c 	lds	r24, 0x2C69	; 0x802c69 <uxTopReadyPriority>
    272c:	89 17       	cp	r24, r25
    272e:	30 f4       	brcc	.+12     	; 0x273c <xTaskResumeAll+0x80>
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	9a 81       	ldd	r25, Y+2	; 0x02
    2734:	fc 01       	movw	r30, r24
    2736:	82 8d       	ldd	r24, Z+26	; 0x1a
    2738:	80 93 69 2c 	sts	0x2C69, r24	; 0x802c69 <uxTopReadyPriority>
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	9a 81       	ldd	r25, Y+2	; 0x02
    2740:	ac 01       	movw	r20, r24
    2742:	4e 5f       	subi	r20, 0xFE	; 254
    2744:	5f 4f       	sbci	r21, 0xFF	; 255
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	9a 81       	ldd	r25, Y+2	; 0x02
    274a:	fc 01       	movw	r30, r24
    274c:	82 8d       	ldd	r24, Z+26	; 0x1a
    274e:	28 2f       	mov	r18, r24
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	6b e0       	ldi	r22, 0x0B	; 11
    2754:	62 9f       	mul	r22, r18
    2756:	c0 01       	movw	r24, r0
    2758:	63 9f       	mul	r22, r19
    275a:	90 0d       	add	r25, r0
    275c:	11 24       	eor	r1, r1
    275e:	88 5f       	subi	r24, 0xF8	; 248
    2760:	93 4d       	sbci	r25, 0xD3	; 211
    2762:	ba 01       	movw	r22, r20
    2764:	0e 94 bd 06 	call	0xd7a	; 0xd7a <vListInsertEnd>
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	9a 81       	ldd	r25, Y+2	; 0x02
    276c:	fc 01       	movw	r30, r24
    276e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2770:	80 91 06 2c 	lds	r24, 0x2C06	; 0x802c06 <pxCurrentTCB>
    2774:	90 91 07 2c 	lds	r25, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    2778:	fc 01       	movw	r30, r24
    277a:	82 8d       	ldd	r24, Z+26	; 0x1a
    277c:	28 17       	cp	r18, r24
    277e:	18 f0       	brcs	.+6      	; 0x2786 <xTaskResumeAll+0xca>
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	80 93 6c 2c 	sts	0x2C6C, r24	; 0x802c6c <xYieldPending>
    2786:	80 91 4e 2c 	lds	r24, 0x2C4E	; 0x802c4e <xPendingReadyList>
    278a:	88 23       	and	r24, r24
    278c:	09 f0       	breq	.+2      	; 0x2790 <xTaskResumeAll+0xd4>
    278e:	b5 cf       	rjmp	.-150    	; 0x26fa <xTaskResumeAll+0x3e>
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	9a 81       	ldd	r25, Y+2	; 0x02
    2794:	89 2b       	or	r24, r25
    2796:	11 f0       	breq	.+4      	; 0x279c <xTaskResumeAll+0xe0>
    2798:	0e 94 8e 18 	call	0x311c	; 0x311c <prvResetNextTaskUnblockTime>
    279c:	80 91 6b 2c 	lds	r24, 0x2C6B	; 0x802c6b <uxPendedTicks>
    27a0:	8c 83       	std	Y+4, r24	; 0x04
    27a2:	8c 81       	ldd	r24, Y+4	; 0x04
    27a4:	88 23       	and	r24, r24
    27a6:	79 f0       	breq	.+30     	; 0x27c6 <xTaskResumeAll+0x10a>
    27a8:	0e 94 1c 14 	call	0x2838	; 0x2838 <xTaskIncrementTick>
    27ac:	88 23       	and	r24, r24
    27ae:	19 f0       	breq	.+6      	; 0x27b6 <xTaskResumeAll+0xfa>
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	80 93 6c 2c 	sts	0x2C6C, r24	; 0x802c6c <xYieldPending>
    27b6:	8c 81       	ldd	r24, Y+4	; 0x04
    27b8:	81 50       	subi	r24, 0x01	; 1
    27ba:	8c 83       	std	Y+4, r24	; 0x04
    27bc:	8c 81       	ldd	r24, Y+4	; 0x04
    27be:	88 23       	and	r24, r24
    27c0:	99 f7       	brne	.-26     	; 0x27a8 <xTaskResumeAll+0xec>
    27c2:	10 92 6b 2c 	sts	0x2C6B, r1	; 0x802c6b <uxPendedTicks>
    27c6:	80 91 6c 2c 	lds	r24, 0x2C6C	; 0x802c6c <xYieldPending>
    27ca:	88 23       	and	r24, r24
    27cc:	21 f0       	breq	.+8      	; 0x27d6 <xTaskResumeAll+0x11a>
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	8b 83       	std	Y+3, r24	; 0x03
    27d2:	0e 94 07 0a 	call	0x140e	; 0x140e <vPortYield>
    27d6:	ff 91       	pop	r31
    27d8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    27dc:	8b 81       	ldd	r24, Y+3	; 0x03
    27de:	24 96       	adiw	r28, 0x04	; 4
    27e0:	cd bf       	out	0x3d, r28	; 61
    27e2:	de bf       	out	0x3e, r29	; 62
    27e4:	df 91       	pop	r29
    27e6:	cf 91       	pop	r28
    27e8:	08 95       	ret

000027ea <xTaskGetTickCount>:
    27ea:	cf 93       	push	r28
    27ec:	df 93       	push	r29
    27ee:	00 d0       	rcall	.+0      	; 0x27f0 <xTaskGetTickCount+0x6>
    27f0:	1f 92       	push	r1
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
    27f6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    27fa:	ff 93       	push	r31
    27fc:	f8 7f       	andi	r31, 0xF8	; 248
    27fe:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2802:	80 91 65 2c 	lds	r24, 0x2C65	; 0x802c65 <xTickCount>
    2806:	90 91 66 2c 	lds	r25, 0x2C66	; 0x802c66 <xTickCount+0x1>
    280a:	a0 91 67 2c 	lds	r26, 0x2C67	; 0x802c67 <xTickCount+0x2>
    280e:	b0 91 68 2c 	lds	r27, 0x2C68	; 0x802c68 <xTickCount+0x3>
    2812:	89 83       	std	Y+1, r24	; 0x01
    2814:	9a 83       	std	Y+2, r25	; 0x02
    2816:	ab 83       	std	Y+3, r26	; 0x03
    2818:	bc 83       	std	Y+4, r27	; 0x04
    281a:	ff 91       	pop	r31
    281c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	9a 81       	ldd	r25, Y+2	; 0x02
    2824:	ab 81       	ldd	r26, Y+3	; 0x03
    2826:	bc 81       	ldd	r27, Y+4	; 0x04
    2828:	bc 01       	movw	r22, r24
    282a:	cd 01       	movw	r24, r26
    282c:	24 96       	adiw	r28, 0x04	; 4
    282e:	cd bf       	out	0x3d, r28	; 61
    2830:	de bf       	out	0x3e, r29	; 62
    2832:	df 91       	pop	r29
    2834:	cf 91       	pop	r28
    2836:	08 95       	ret

00002838 <xTaskIncrementTick>:
    2838:	cf 93       	push	r28
    283a:	df 93       	push	r29
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
    2840:	2d 97       	sbiw	r28, 0x0d	; 13
    2842:	cd bf       	out	0x3d, r28	; 61
    2844:	de bf       	out	0x3e, r29	; 62
    2846:	19 82       	std	Y+1, r1	; 0x01
    2848:	80 91 75 2c 	lds	r24, 0x2C75	; 0x802c75 <uxSchedulerSuspended>
    284c:	88 23       	and	r24, r24
    284e:	09 f0       	breq	.+2      	; 0x2852 <xTaskIncrementTick+0x1a>
    2850:	f1 c0       	rjmp	.+482    	; 0x2a34 <xTaskIncrementTick+0x1fc>
    2852:	80 91 65 2c 	lds	r24, 0x2C65	; 0x802c65 <xTickCount>
    2856:	90 91 66 2c 	lds	r25, 0x2C66	; 0x802c66 <xTickCount+0x1>
    285a:	a0 91 67 2c 	lds	r26, 0x2C67	; 0x802c67 <xTickCount+0x2>
    285e:	b0 91 68 2c 	lds	r27, 0x2C68	; 0x802c68 <xTickCount+0x3>
    2862:	01 96       	adiw	r24, 0x01	; 1
    2864:	a1 1d       	adc	r26, r1
    2866:	b1 1d       	adc	r27, r1
    2868:	8a 83       	std	Y+2, r24	; 0x02
    286a:	9b 83       	std	Y+3, r25	; 0x03
    286c:	ac 83       	std	Y+4, r26	; 0x04
    286e:	bd 83       	std	Y+5, r27	; 0x05
    2870:	8a 81       	ldd	r24, Y+2	; 0x02
    2872:	9b 81       	ldd	r25, Y+3	; 0x03
    2874:	ac 81       	ldd	r26, Y+4	; 0x04
    2876:	bd 81       	ldd	r27, Y+5	; 0x05
    2878:	80 93 65 2c 	sts	0x2C65, r24	; 0x802c65 <xTickCount>
    287c:	90 93 66 2c 	sts	0x2C66, r25	; 0x802c66 <xTickCount+0x1>
    2880:	a0 93 67 2c 	sts	0x2C67, r26	; 0x802c67 <xTickCount+0x2>
    2884:	b0 93 68 2c 	sts	0x2C68, r27	; 0x802c68 <xTickCount+0x3>
    2888:	8a 81       	ldd	r24, Y+2	; 0x02
    288a:	9b 81       	ldd	r25, Y+3	; 0x03
    288c:	ac 81       	ldd	r26, Y+4	; 0x04
    288e:	bd 81       	ldd	r27, Y+5	; 0x05
    2890:	89 2b       	or	r24, r25
    2892:	8a 2b       	or	r24, r26
    2894:	8b 2b       	or	r24, r27
    2896:	d9 f4       	brne	.+54     	; 0x28ce <xTaskIncrementTick+0x96>
    2898:	80 91 4a 2c 	lds	r24, 0x2C4A	; 0x802c4a <pxDelayedTaskList>
    289c:	90 91 4b 2c 	lds	r25, 0x2C4B	; 0x802c4b <pxDelayedTaskList+0x1>
    28a0:	8e 83       	std	Y+6, r24	; 0x06
    28a2:	9f 83       	std	Y+7, r25	; 0x07
    28a4:	80 91 4c 2c 	lds	r24, 0x2C4C	; 0x802c4c <pxOverflowDelayedTaskList>
    28a8:	90 91 4d 2c 	lds	r25, 0x2C4D	; 0x802c4d <pxOverflowDelayedTaskList+0x1>
    28ac:	80 93 4a 2c 	sts	0x2C4A, r24	; 0x802c4a <pxDelayedTaskList>
    28b0:	90 93 4b 2c 	sts	0x2C4B, r25	; 0x802c4b <pxDelayedTaskList+0x1>
    28b4:	8e 81       	ldd	r24, Y+6	; 0x06
    28b6:	9f 81       	ldd	r25, Y+7	; 0x07
    28b8:	80 93 4c 2c 	sts	0x2C4C, r24	; 0x802c4c <pxOverflowDelayedTaskList>
    28bc:	90 93 4d 2c 	sts	0x2C4D, r25	; 0x802c4d <pxOverflowDelayedTaskList+0x1>
    28c0:	80 91 6d 2c 	lds	r24, 0x2C6D	; 0x802c6d <xNumOfOverflows>
    28c4:	8f 5f       	subi	r24, 0xFF	; 255
    28c6:	80 93 6d 2c 	sts	0x2C6D, r24	; 0x802c6d <xNumOfOverflows>
    28ca:	0e 94 8e 18 	call	0x311c	; 0x311c <prvResetNextTaskUnblockTime>
    28ce:	80 91 6f 2c 	lds	r24, 0x2C6F	; 0x802c6f <xNextTaskUnblockTime>
    28d2:	90 91 70 2c 	lds	r25, 0x2C70	; 0x802c70 <xNextTaskUnblockTime+0x1>
    28d6:	a0 91 71 2c 	lds	r26, 0x2C71	; 0x802c71 <xNextTaskUnblockTime+0x2>
    28da:	b0 91 72 2c 	lds	r27, 0x2C72	; 0x802c72 <xNextTaskUnblockTime+0x3>
    28de:	2a 81       	ldd	r18, Y+2	; 0x02
    28e0:	3b 81       	ldd	r19, Y+3	; 0x03
    28e2:	4c 81       	ldd	r20, Y+4	; 0x04
    28e4:	5d 81       	ldd	r21, Y+5	; 0x05
    28e6:	28 17       	cp	r18, r24
    28e8:	39 07       	cpc	r19, r25
    28ea:	4a 07       	cpc	r20, r26
    28ec:	5b 07       	cpc	r21, r27
    28ee:	08 f4       	brcc	.+2      	; 0x28f2 <xTaskIncrementTick+0xba>
    28f0:	8a c0       	rjmp	.+276    	; 0x2a06 <xTaskIncrementTick+0x1ce>
    28f2:	80 91 4a 2c 	lds	r24, 0x2C4A	; 0x802c4a <pxDelayedTaskList>
    28f6:	90 91 4b 2c 	lds	r25, 0x2C4B	; 0x802c4b <pxDelayedTaskList+0x1>
    28fa:	fc 01       	movw	r30, r24
    28fc:	80 81       	ld	r24, Z
    28fe:	88 23       	and	r24, r24
    2900:	61 f4       	brne	.+24     	; 0x291a <xTaskIncrementTick+0xe2>
    2902:	8f ef       	ldi	r24, 0xFF	; 255
    2904:	9f ef       	ldi	r25, 0xFF	; 255
    2906:	dc 01       	movw	r26, r24
    2908:	80 93 6f 2c 	sts	0x2C6F, r24	; 0x802c6f <xNextTaskUnblockTime>
    290c:	90 93 70 2c 	sts	0x2C70, r25	; 0x802c70 <xNextTaskUnblockTime+0x1>
    2910:	a0 93 71 2c 	sts	0x2C71, r26	; 0x802c71 <xNextTaskUnblockTime+0x2>
    2914:	b0 93 72 2c 	sts	0x2C72, r27	; 0x802c72 <xNextTaskUnblockTime+0x3>
    2918:	76 c0       	rjmp	.+236    	; 0x2a06 <xTaskIncrementTick+0x1ce>
    291a:	80 91 4a 2c 	lds	r24, 0x2C4A	; 0x802c4a <pxDelayedTaskList>
    291e:	90 91 4b 2c 	lds	r25, 0x2C4B	; 0x802c4b <pxDelayedTaskList+0x1>
    2922:	fc 01       	movw	r30, r24
    2924:	87 81       	ldd	r24, Z+7	; 0x07
    2926:	90 85       	ldd	r25, Z+8	; 0x08
    2928:	fc 01       	movw	r30, r24
    292a:	80 85       	ldd	r24, Z+8	; 0x08
    292c:	91 85       	ldd	r25, Z+9	; 0x09
    292e:	88 87       	std	Y+8, r24	; 0x08
    2930:	99 87       	std	Y+9, r25	; 0x09
    2932:	88 85       	ldd	r24, Y+8	; 0x08
    2934:	99 85       	ldd	r25, Y+9	; 0x09
    2936:	fc 01       	movw	r30, r24
    2938:	82 81       	ldd	r24, Z+2	; 0x02
    293a:	93 81       	ldd	r25, Z+3	; 0x03
    293c:	a4 81       	ldd	r26, Z+4	; 0x04
    293e:	b5 81       	ldd	r27, Z+5	; 0x05
    2940:	8a 87       	std	Y+10, r24	; 0x0a
    2942:	9b 87       	std	Y+11, r25	; 0x0b
    2944:	ac 87       	std	Y+12, r26	; 0x0c
    2946:	bd 87       	std	Y+13, r27	; 0x0d
    2948:	2a 81       	ldd	r18, Y+2	; 0x02
    294a:	3b 81       	ldd	r19, Y+3	; 0x03
    294c:	4c 81       	ldd	r20, Y+4	; 0x04
    294e:	5d 81       	ldd	r21, Y+5	; 0x05
    2950:	8a 85       	ldd	r24, Y+10	; 0x0a
    2952:	9b 85       	ldd	r25, Y+11	; 0x0b
    2954:	ac 85       	ldd	r26, Y+12	; 0x0c
    2956:	bd 85       	ldd	r27, Y+13	; 0x0d
    2958:	28 17       	cp	r18, r24
    295a:	39 07       	cpc	r19, r25
    295c:	4a 07       	cpc	r20, r26
    295e:	5b 07       	cpc	r21, r27
    2960:	68 f4       	brcc	.+26     	; 0x297c <xTaskIncrementTick+0x144>
    2962:	8a 85       	ldd	r24, Y+10	; 0x0a
    2964:	9b 85       	ldd	r25, Y+11	; 0x0b
    2966:	ac 85       	ldd	r26, Y+12	; 0x0c
    2968:	bd 85       	ldd	r27, Y+13	; 0x0d
    296a:	80 93 6f 2c 	sts	0x2C6F, r24	; 0x802c6f <xNextTaskUnblockTime>
    296e:	90 93 70 2c 	sts	0x2C70, r25	; 0x802c70 <xNextTaskUnblockTime+0x1>
    2972:	a0 93 71 2c 	sts	0x2C71, r26	; 0x802c71 <xNextTaskUnblockTime+0x2>
    2976:	b0 93 72 2c 	sts	0x2C72, r27	; 0x802c72 <xNextTaskUnblockTime+0x3>
    297a:	45 c0       	rjmp	.+138    	; 0x2a06 <xTaskIncrementTick+0x1ce>
    297c:	88 85       	ldd	r24, Y+8	; 0x08
    297e:	99 85       	ldd	r25, Y+9	; 0x09
    2980:	02 96       	adiw	r24, 0x02	; 2
    2982:	0e 94 89 07 	call	0xf12	; 0xf12 <uxListRemove>
    2986:	88 85       	ldd	r24, Y+8	; 0x08
    2988:	99 85       	ldd	r25, Y+9	; 0x09
    298a:	fc 01       	movw	r30, r24
    298c:	80 8d       	ldd	r24, Z+24	; 0x18
    298e:	91 8d       	ldd	r25, Z+25	; 0x19
    2990:	89 2b       	or	r24, r25
    2992:	29 f0       	breq	.+10     	; 0x299e <xTaskIncrementTick+0x166>
    2994:	88 85       	ldd	r24, Y+8	; 0x08
    2996:	99 85       	ldd	r25, Y+9	; 0x09
    2998:	0e 96       	adiw	r24, 0x0e	; 14
    299a:	0e 94 89 07 	call	0xf12	; 0xf12 <uxListRemove>
    299e:	88 85       	ldd	r24, Y+8	; 0x08
    29a0:	99 85       	ldd	r25, Y+9	; 0x09
    29a2:	fc 01       	movw	r30, r24
    29a4:	92 8d       	ldd	r25, Z+26	; 0x1a
    29a6:	80 91 69 2c 	lds	r24, 0x2C69	; 0x802c69 <uxTopReadyPriority>
    29aa:	89 17       	cp	r24, r25
    29ac:	30 f4       	brcc	.+12     	; 0x29ba <xTaskIncrementTick+0x182>
    29ae:	88 85       	ldd	r24, Y+8	; 0x08
    29b0:	99 85       	ldd	r25, Y+9	; 0x09
    29b2:	fc 01       	movw	r30, r24
    29b4:	82 8d       	ldd	r24, Z+26	; 0x1a
    29b6:	80 93 69 2c 	sts	0x2C69, r24	; 0x802c69 <uxTopReadyPriority>
    29ba:	88 85       	ldd	r24, Y+8	; 0x08
    29bc:	99 85       	ldd	r25, Y+9	; 0x09
    29be:	ac 01       	movw	r20, r24
    29c0:	4e 5f       	subi	r20, 0xFE	; 254
    29c2:	5f 4f       	sbci	r21, 0xFF	; 255
    29c4:	88 85       	ldd	r24, Y+8	; 0x08
    29c6:	99 85       	ldd	r25, Y+9	; 0x09
    29c8:	fc 01       	movw	r30, r24
    29ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    29cc:	28 2f       	mov	r18, r24
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	6b e0       	ldi	r22, 0x0B	; 11
    29d2:	62 9f       	mul	r22, r18
    29d4:	c0 01       	movw	r24, r0
    29d6:	63 9f       	mul	r22, r19
    29d8:	90 0d       	add	r25, r0
    29da:	11 24       	eor	r1, r1
    29dc:	88 5f       	subi	r24, 0xF8	; 248
    29de:	93 4d       	sbci	r25, 0xD3	; 211
    29e0:	ba 01       	movw	r22, r20
    29e2:	0e 94 bd 06 	call	0xd7a	; 0xd7a <vListInsertEnd>
    29e6:	88 85       	ldd	r24, Y+8	; 0x08
    29e8:	99 85       	ldd	r25, Y+9	; 0x09
    29ea:	fc 01       	movw	r30, r24
    29ec:	22 8d       	ldd	r18, Z+26	; 0x1a
    29ee:	80 91 06 2c 	lds	r24, 0x2C06	; 0x802c06 <pxCurrentTCB>
    29f2:	90 91 07 2c 	lds	r25, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    29f6:	fc 01       	movw	r30, r24
    29f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    29fa:	28 17       	cp	r18, r24
    29fc:	08 f4       	brcc	.+2      	; 0x2a00 <xTaskIncrementTick+0x1c8>
    29fe:	79 cf       	rjmp	.-270    	; 0x28f2 <xTaskIncrementTick+0xba>
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	89 83       	std	Y+1, r24	; 0x01
    2a04:	76 cf       	rjmp	.-276    	; 0x28f2 <xTaskIncrementTick+0xba>
    2a06:	80 91 06 2c 	lds	r24, 0x2C06	; 0x802c06 <pxCurrentTCB>
    2a0a:	90 91 07 2c 	lds	r25, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    2a0e:	fc 01       	movw	r30, r24
    2a10:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a12:	28 2f       	mov	r18, r24
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	4b e0       	ldi	r20, 0x0B	; 11
    2a18:	42 9f       	mul	r20, r18
    2a1a:	c0 01       	movw	r24, r0
    2a1c:	43 9f       	mul	r20, r19
    2a1e:	90 0d       	add	r25, r0
    2a20:	11 24       	eor	r1, r1
    2a22:	88 5f       	subi	r24, 0xF8	; 248
    2a24:	93 4d       	sbci	r25, 0xD3	; 211
    2a26:	fc 01       	movw	r30, r24
    2a28:	80 81       	ld	r24, Z
    2a2a:	82 30       	cpi	r24, 0x02	; 2
    2a2c:	40 f0       	brcs	.+16     	; 0x2a3e <xTaskIncrementTick+0x206>
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	89 83       	std	Y+1, r24	; 0x01
    2a32:	05 c0       	rjmp	.+10     	; 0x2a3e <xTaskIncrementTick+0x206>
    2a34:	80 91 6b 2c 	lds	r24, 0x2C6B	; 0x802c6b <uxPendedTicks>
    2a38:	8f 5f       	subi	r24, 0xFF	; 255
    2a3a:	80 93 6b 2c 	sts	0x2C6B, r24	; 0x802c6b <uxPendedTicks>
    2a3e:	80 91 6c 2c 	lds	r24, 0x2C6C	; 0x802c6c <xYieldPending>
    2a42:	88 23       	and	r24, r24
    2a44:	11 f0       	breq	.+4      	; 0x2a4a <xTaskIncrementTick+0x212>
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	89 83       	std	Y+1, r24	; 0x01
    2a4a:	89 81       	ldd	r24, Y+1	; 0x01
    2a4c:	2d 96       	adiw	r28, 0x0d	; 13
    2a4e:	cd bf       	out	0x3d, r28	; 61
    2a50:	de bf       	out	0x3e, r29	; 62
    2a52:	df 91       	pop	r29
    2a54:	cf 91       	pop	r28
    2a56:	08 95       	ret

00002a58 <vTaskSwitchContext>:
    2a58:	cf 93       	push	r28
    2a5a:	df 93       	push	r29
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
    2a60:	29 97       	sbiw	r28, 0x09	; 9
    2a62:	cd bf       	out	0x3d, r28	; 61
    2a64:	de bf       	out	0x3e, r29	; 62
    2a66:	80 91 75 2c 	lds	r24, 0x2C75	; 0x802c75 <uxSchedulerSuspended>
    2a6a:	88 23       	and	r24, r24
    2a6c:	21 f0       	breq	.+8      	; 0x2a76 <vTaskSwitchContext+0x1e>
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	80 93 6c 2c 	sts	0x2C6C, r24	; 0x802c6c <xYieldPending>
    2a74:	ba c0       	rjmp	.+372    	; 0x2bea <vTaskSwitchContext+0x192>
    2a76:	10 92 6c 2c 	sts	0x2C6C, r1	; 0x802c6c <xYieldPending>
    2a7a:	80 91 06 2c 	lds	r24, 0x2C06	; 0x802c06 <pxCurrentTCB>
    2a7e:	90 91 07 2c 	lds	r25, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    2a82:	fc 01       	movw	r30, r24
    2a84:	83 8d       	ldd	r24, Z+27	; 0x1b
    2a86:	94 8d       	ldd	r25, Z+28	; 0x1c
    2a88:	8a 83       	std	Y+2, r24	; 0x02
    2a8a:	9b 83       	std	Y+3, r25	; 0x03
    2a8c:	85 ea       	ldi	r24, 0xA5	; 165
    2a8e:	95 ea       	ldi	r25, 0xA5	; 165
    2a90:	dc 01       	movw	r26, r24
    2a92:	8c 83       	std	Y+4, r24	; 0x04
    2a94:	9d 83       	std	Y+5, r25	; 0x05
    2a96:	ae 83       	std	Y+6, r26	; 0x06
    2a98:	bf 83       	std	Y+7, r27	; 0x07
    2a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a9e:	fc 01       	movw	r30, r24
    2aa0:	20 81       	ld	r18, Z
    2aa2:	31 81       	ldd	r19, Z+1	; 0x01
    2aa4:	42 81       	ldd	r20, Z+2	; 0x02
    2aa6:	53 81       	ldd	r21, Z+3	; 0x03
    2aa8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aaa:	9d 81       	ldd	r25, Y+5	; 0x05
    2aac:	ae 81       	ldd	r26, Y+6	; 0x06
    2aae:	bf 81       	ldd	r27, Y+7	; 0x07
    2ab0:	28 17       	cp	r18, r24
    2ab2:	39 07       	cpc	r19, r25
    2ab4:	4a 07       	cpc	r20, r26
    2ab6:	5b 07       	cpc	r21, r27
    2ab8:	99 f5       	brne	.+102    	; 0x2b20 <vTaskSwitchContext+0xc8>
    2aba:	8a 81       	ldd	r24, Y+2	; 0x02
    2abc:	9b 81       	ldd	r25, Y+3	; 0x03
    2abe:	04 96       	adiw	r24, 0x04	; 4
    2ac0:	fc 01       	movw	r30, r24
    2ac2:	20 81       	ld	r18, Z
    2ac4:	31 81       	ldd	r19, Z+1	; 0x01
    2ac6:	42 81       	ldd	r20, Z+2	; 0x02
    2ac8:	53 81       	ldd	r21, Z+3	; 0x03
    2aca:	8c 81       	ldd	r24, Y+4	; 0x04
    2acc:	9d 81       	ldd	r25, Y+5	; 0x05
    2ace:	ae 81       	ldd	r26, Y+6	; 0x06
    2ad0:	bf 81       	ldd	r27, Y+7	; 0x07
    2ad2:	28 17       	cp	r18, r24
    2ad4:	39 07       	cpc	r19, r25
    2ad6:	4a 07       	cpc	r20, r26
    2ad8:	5b 07       	cpc	r21, r27
    2ada:	11 f5       	brne	.+68     	; 0x2b20 <vTaskSwitchContext+0xc8>
    2adc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ade:	9b 81       	ldd	r25, Y+3	; 0x03
    2ae0:	08 96       	adiw	r24, 0x08	; 8
    2ae2:	fc 01       	movw	r30, r24
    2ae4:	20 81       	ld	r18, Z
    2ae6:	31 81       	ldd	r19, Z+1	; 0x01
    2ae8:	42 81       	ldd	r20, Z+2	; 0x02
    2aea:	53 81       	ldd	r21, Z+3	; 0x03
    2aec:	8c 81       	ldd	r24, Y+4	; 0x04
    2aee:	9d 81       	ldd	r25, Y+5	; 0x05
    2af0:	ae 81       	ldd	r26, Y+6	; 0x06
    2af2:	bf 81       	ldd	r27, Y+7	; 0x07
    2af4:	28 17       	cp	r18, r24
    2af6:	39 07       	cpc	r19, r25
    2af8:	4a 07       	cpc	r20, r26
    2afa:	5b 07       	cpc	r21, r27
    2afc:	89 f4       	brne	.+34     	; 0x2b20 <vTaskSwitchContext+0xc8>
    2afe:	8a 81       	ldd	r24, Y+2	; 0x02
    2b00:	9b 81       	ldd	r25, Y+3	; 0x03
    2b02:	0c 96       	adiw	r24, 0x0c	; 12
    2b04:	fc 01       	movw	r30, r24
    2b06:	20 81       	ld	r18, Z
    2b08:	31 81       	ldd	r19, Z+1	; 0x01
    2b0a:	42 81       	ldd	r20, Z+2	; 0x02
    2b0c:	53 81       	ldd	r21, Z+3	; 0x03
    2b0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b10:	9d 81       	ldd	r25, Y+5	; 0x05
    2b12:	ae 81       	ldd	r26, Y+6	; 0x06
    2b14:	bf 81       	ldd	r27, Y+7	; 0x07
    2b16:	28 17       	cp	r18, r24
    2b18:	39 07       	cpc	r19, r25
    2b1a:	4a 07       	cpc	r20, r26
    2b1c:	5b 07       	cpc	r21, r27
    2b1e:	71 f0       	breq	.+28     	; 0x2b3c <vTaskSwitchContext+0xe4>
    2b20:	80 91 06 2c 	lds	r24, 0x2C06	; 0x802c06 <pxCurrentTCB>
    2b24:	90 91 07 2c 	lds	r25, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    2b28:	9c 01       	movw	r18, r24
    2b2a:	23 5e       	subi	r18, 0xE3	; 227
    2b2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b2e:	80 91 06 2c 	lds	r24, 0x2C06	; 0x802c06 <pxCurrentTCB>
    2b32:	90 91 07 2c 	lds	r25, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    2b36:	b9 01       	movw	r22, r18
    2b38:	0e 94 97 02 	call	0x52e	; 0x52e <vApplicationStackOverflowHook>
    2b3c:	80 91 69 2c 	lds	r24, 0x2C69	; 0x802c69 <uxTopReadyPriority>
    2b40:	89 83       	std	Y+1, r24	; 0x01
    2b42:	03 c0       	rjmp	.+6      	; 0x2b4a <vTaskSwitchContext+0xf2>
    2b44:	89 81       	ldd	r24, Y+1	; 0x01
    2b46:	81 50       	subi	r24, 0x01	; 1
    2b48:	89 83       	std	Y+1, r24	; 0x01
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	28 2f       	mov	r18, r24
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	4b e0       	ldi	r20, 0x0B	; 11
    2b52:	42 9f       	mul	r20, r18
    2b54:	c0 01       	movw	r24, r0
    2b56:	43 9f       	mul	r20, r19
    2b58:	90 0d       	add	r25, r0
    2b5a:	11 24       	eor	r1, r1
    2b5c:	88 5f       	subi	r24, 0xF8	; 248
    2b5e:	93 4d       	sbci	r25, 0xD3	; 211
    2b60:	fc 01       	movw	r30, r24
    2b62:	80 81       	ld	r24, Z
    2b64:	88 23       	and	r24, r24
    2b66:	71 f3       	breq	.-36     	; 0x2b44 <vTaskSwitchContext+0xec>
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	28 2f       	mov	r18, r24
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	4b e0       	ldi	r20, 0x0B	; 11
    2b70:	42 9f       	mul	r20, r18
    2b72:	c0 01       	movw	r24, r0
    2b74:	43 9f       	mul	r20, r19
    2b76:	90 0d       	add	r25, r0
    2b78:	11 24       	eor	r1, r1
    2b7a:	88 5f       	subi	r24, 0xF8	; 248
    2b7c:	93 4d       	sbci	r25, 0xD3	; 211
    2b7e:	88 87       	std	Y+8, r24	; 0x08
    2b80:	99 87       	std	Y+9, r25	; 0x09
    2b82:	88 85       	ldd	r24, Y+8	; 0x08
    2b84:	99 85       	ldd	r25, Y+9	; 0x09
    2b86:	fc 01       	movw	r30, r24
    2b88:	81 81       	ldd	r24, Z+1	; 0x01
    2b8a:	92 81       	ldd	r25, Z+2	; 0x02
    2b8c:	fc 01       	movw	r30, r24
    2b8e:	24 81       	ldd	r18, Z+4	; 0x04
    2b90:	35 81       	ldd	r19, Z+5	; 0x05
    2b92:	88 85       	ldd	r24, Y+8	; 0x08
    2b94:	99 85       	ldd	r25, Y+9	; 0x09
    2b96:	fc 01       	movw	r30, r24
    2b98:	21 83       	std	Z+1, r18	; 0x01
    2b9a:	32 83       	std	Z+2, r19	; 0x02
    2b9c:	88 85       	ldd	r24, Y+8	; 0x08
    2b9e:	99 85       	ldd	r25, Y+9	; 0x09
    2ba0:	fc 01       	movw	r30, r24
    2ba2:	21 81       	ldd	r18, Z+1	; 0x01
    2ba4:	32 81       	ldd	r19, Z+2	; 0x02
    2ba6:	88 85       	ldd	r24, Y+8	; 0x08
    2ba8:	99 85       	ldd	r25, Y+9	; 0x09
    2baa:	03 96       	adiw	r24, 0x03	; 3
    2bac:	28 17       	cp	r18, r24
    2bae:	39 07       	cpc	r19, r25
    2bb0:	69 f4       	brne	.+26     	; 0x2bcc <vTaskSwitchContext+0x174>
    2bb2:	88 85       	ldd	r24, Y+8	; 0x08
    2bb4:	99 85       	ldd	r25, Y+9	; 0x09
    2bb6:	fc 01       	movw	r30, r24
    2bb8:	81 81       	ldd	r24, Z+1	; 0x01
    2bba:	92 81       	ldd	r25, Z+2	; 0x02
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	24 81       	ldd	r18, Z+4	; 0x04
    2bc0:	35 81       	ldd	r19, Z+5	; 0x05
    2bc2:	88 85       	ldd	r24, Y+8	; 0x08
    2bc4:	99 85       	ldd	r25, Y+9	; 0x09
    2bc6:	fc 01       	movw	r30, r24
    2bc8:	21 83       	std	Z+1, r18	; 0x01
    2bca:	32 83       	std	Z+2, r19	; 0x02
    2bcc:	88 85       	ldd	r24, Y+8	; 0x08
    2bce:	99 85       	ldd	r25, Y+9	; 0x09
    2bd0:	fc 01       	movw	r30, r24
    2bd2:	81 81       	ldd	r24, Z+1	; 0x01
    2bd4:	92 81       	ldd	r25, Z+2	; 0x02
    2bd6:	fc 01       	movw	r30, r24
    2bd8:	80 85       	ldd	r24, Z+8	; 0x08
    2bda:	91 85       	ldd	r25, Z+9	; 0x09
    2bdc:	80 93 06 2c 	sts	0x2C06, r24	; 0x802c06 <pxCurrentTCB>
    2be0:	90 93 07 2c 	sts	0x2C07, r25	; 0x802c07 <pxCurrentTCB+0x1>
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
    2be6:	80 93 69 2c 	sts	0x2C69, r24	; 0x802c69 <uxTopReadyPriority>
    2bea:	00 00       	nop
    2bec:	29 96       	adiw	r28, 0x09	; 9
    2bee:	cd bf       	out	0x3d, r28	; 61
    2bf0:	de bf       	out	0x3e, r29	; 62
    2bf2:	df 91       	pop	r29
    2bf4:	cf 91       	pop	r28
    2bf6:	08 95       	ret

00002bf8 <vTaskPlaceOnEventList>:
    2bf8:	cf 93       	push	r28
    2bfa:	df 93       	push	r29
    2bfc:	00 d0       	rcall	.+0      	; 0x2bfe <vTaskPlaceOnEventList+0x6>
    2bfe:	00 d0       	rcall	.+0      	; 0x2c00 <vTaskPlaceOnEventList+0x8>
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
    2c04:	89 83       	std	Y+1, r24	; 0x01
    2c06:	9a 83       	std	Y+2, r25	; 0x02
    2c08:	4b 83       	std	Y+3, r20	; 0x03
    2c0a:	5c 83       	std	Y+4, r21	; 0x04
    2c0c:	6d 83       	std	Y+5, r22	; 0x05
    2c0e:	7e 83       	std	Y+6, r23	; 0x06
    2c10:	80 91 06 2c 	lds	r24, 0x2C06	; 0x802c06 <pxCurrentTCB>
    2c14:	90 91 07 2c 	lds	r25, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    2c18:	9c 01       	movw	r18, r24
    2c1a:	22 5f       	subi	r18, 0xF2	; 242
    2c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	9a 81       	ldd	r25, Y+2	; 0x02
    2c22:	b9 01       	movw	r22, r18
    2c24:	0e 94 08 07 	call	0xe10	; 0xe10 <vListInsert>
    2c28:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c2c:	ad 81       	ldd	r26, Y+5	; 0x05
    2c2e:	be 81       	ldd	r27, Y+6	; 0x06
    2c30:	41 e0       	ldi	r20, 0x01	; 1
    2c32:	bc 01       	movw	r22, r24
    2c34:	cd 01       	movw	r24, r26
    2c36:	0e 94 28 19 	call	0x3250	; 0x3250 <prvAddCurrentTaskToDelayedList>
    2c3a:	00 00       	nop
    2c3c:	26 96       	adiw	r28, 0x06	; 6
    2c3e:	cd bf       	out	0x3d, r28	; 61
    2c40:	de bf       	out	0x3e, r29	; 62
    2c42:	df 91       	pop	r29
    2c44:	cf 91       	pop	r28
    2c46:	08 95       	ret

00002c48 <vTaskPlaceOnUnorderedEventList>:
    2c48:	0f 93       	push	r16
    2c4a:	1f 93       	push	r17
    2c4c:	cf 93       	push	r28
    2c4e:	df 93       	push	r29
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
    2c54:	2a 97       	sbiw	r28, 0x0a	; 10
    2c56:	cd bf       	out	0x3d, r28	; 61
    2c58:	de bf       	out	0x3e, r29	; 62
    2c5a:	89 83       	std	Y+1, r24	; 0x01
    2c5c:	9a 83       	std	Y+2, r25	; 0x02
    2c5e:	4b 83       	std	Y+3, r20	; 0x03
    2c60:	5c 83       	std	Y+4, r21	; 0x04
    2c62:	6d 83       	std	Y+5, r22	; 0x05
    2c64:	7e 83       	std	Y+6, r23	; 0x06
    2c66:	0f 83       	std	Y+7, r16	; 0x07
    2c68:	18 87       	std	Y+8, r17	; 0x08
    2c6a:	29 87       	std	Y+9, r18	; 0x09
    2c6c:	3a 87       	std	Y+10, r19	; 0x0a
    2c6e:	20 91 06 2c 	lds	r18, 0x2C06	; 0x802c06 <pxCurrentTCB>
    2c72:	30 91 07 2c 	lds	r19, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    2c76:	8b 81       	ldd	r24, Y+3	; 0x03
    2c78:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7a:	ad 81       	ldd	r26, Y+5	; 0x05
    2c7c:	be 81       	ldd	r27, Y+6	; 0x06
    2c7e:	b0 68       	ori	r27, 0x80	; 128
    2c80:	f9 01       	movw	r30, r18
    2c82:	86 87       	std	Z+14, r24	; 0x0e
    2c84:	97 87       	std	Z+15, r25	; 0x0f
    2c86:	a0 8b       	std	Z+16, r26	; 0x10
    2c88:	b1 8b       	std	Z+17, r27	; 0x11
    2c8a:	80 91 06 2c 	lds	r24, 0x2C06	; 0x802c06 <pxCurrentTCB>
    2c8e:	90 91 07 2c 	lds	r25, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    2c92:	9c 01       	movw	r18, r24
    2c94:	22 5f       	subi	r18, 0xF2	; 242
    2c96:	3f 4f       	sbci	r19, 0xFF	; 255
    2c98:	89 81       	ldd	r24, Y+1	; 0x01
    2c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9c:	b9 01       	movw	r22, r18
    2c9e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <vListInsertEnd>
    2ca2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ca4:	98 85       	ldd	r25, Y+8	; 0x08
    2ca6:	a9 85       	ldd	r26, Y+9	; 0x09
    2ca8:	ba 85       	ldd	r27, Y+10	; 0x0a
    2caa:	41 e0       	ldi	r20, 0x01	; 1
    2cac:	bc 01       	movw	r22, r24
    2cae:	cd 01       	movw	r24, r26
    2cb0:	0e 94 28 19 	call	0x3250	; 0x3250 <prvAddCurrentTaskToDelayedList>
    2cb4:	00 00       	nop
    2cb6:	2a 96       	adiw	r28, 0x0a	; 10
    2cb8:	cd bf       	out	0x3d, r28	; 61
    2cba:	de bf       	out	0x3e, r29	; 62
    2cbc:	df 91       	pop	r29
    2cbe:	cf 91       	pop	r28
    2cc0:	1f 91       	pop	r17
    2cc2:	0f 91       	pop	r16
    2cc4:	08 95       	ret

00002cc6 <vTaskPlaceOnEventListRestricted>:
    2cc6:	cf 93       	push	r28
    2cc8:	df 93       	push	r29
    2cca:	cd b7       	in	r28, 0x3d	; 61
    2ccc:	de b7       	in	r29, 0x3e	; 62
    2cce:	27 97       	sbiw	r28, 0x07	; 7
    2cd0:	cd bf       	out	0x3d, r28	; 61
    2cd2:	de bf       	out	0x3e, r29	; 62
    2cd4:	89 83       	std	Y+1, r24	; 0x01
    2cd6:	9a 83       	std	Y+2, r25	; 0x02
    2cd8:	4b 83       	std	Y+3, r20	; 0x03
    2cda:	5c 83       	std	Y+4, r21	; 0x04
    2cdc:	6d 83       	std	Y+5, r22	; 0x05
    2cde:	7e 83       	std	Y+6, r23	; 0x06
    2ce0:	2f 83       	std	Y+7, r18	; 0x07
    2ce2:	80 91 06 2c 	lds	r24, 0x2C06	; 0x802c06 <pxCurrentTCB>
    2ce6:	90 91 07 2c 	lds	r25, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    2cea:	9c 01       	movw	r18, r24
    2cec:	22 5f       	subi	r18, 0xF2	; 242
    2cee:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf0:	89 81       	ldd	r24, Y+1	; 0x01
    2cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf4:	b9 01       	movw	r22, r18
    2cf6:	0e 94 bd 06 	call	0xd7a	; 0xd7a <vListInsertEnd>
    2cfa:	8f 81       	ldd	r24, Y+7	; 0x07
    2cfc:	88 23       	and	r24, r24
    2cfe:	39 f0       	breq	.+14     	; 0x2d0e <vTaskPlaceOnEventListRestricted+0x48>
    2d00:	8f ef       	ldi	r24, 0xFF	; 255
    2d02:	9f ef       	ldi	r25, 0xFF	; 255
    2d04:	dc 01       	movw	r26, r24
    2d06:	8b 83       	std	Y+3, r24	; 0x03
    2d08:	9c 83       	std	Y+4, r25	; 0x04
    2d0a:	ad 83       	std	Y+5, r26	; 0x05
    2d0c:	be 83       	std	Y+6, r27	; 0x06
    2d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d10:	9c 81       	ldd	r25, Y+4	; 0x04
    2d12:	ad 81       	ldd	r26, Y+5	; 0x05
    2d14:	be 81       	ldd	r27, Y+6	; 0x06
    2d16:	4f 81       	ldd	r20, Y+7	; 0x07
    2d18:	bc 01       	movw	r22, r24
    2d1a:	cd 01       	movw	r24, r26
    2d1c:	0e 94 28 19 	call	0x3250	; 0x3250 <prvAddCurrentTaskToDelayedList>
    2d20:	00 00       	nop
    2d22:	27 96       	adiw	r28, 0x07	; 7
    2d24:	cd bf       	out	0x3d, r28	; 61
    2d26:	de bf       	out	0x3e, r29	; 62
    2d28:	df 91       	pop	r29
    2d2a:	cf 91       	pop	r28
    2d2c:	08 95       	ret

00002d2e <xTaskRemoveFromEventList>:
    2d2e:	cf 93       	push	r28
    2d30:	df 93       	push	r29
    2d32:	cd b7       	in	r28, 0x3d	; 61
    2d34:	de b7       	in	r29, 0x3e	; 62
    2d36:	25 97       	sbiw	r28, 0x05	; 5
    2d38:	cd bf       	out	0x3d, r28	; 61
    2d3a:	de bf       	out	0x3e, r29	; 62
    2d3c:	8c 83       	std	Y+4, r24	; 0x04
    2d3e:	9d 83       	std	Y+5, r25	; 0x05
    2d40:	8c 81       	ldd	r24, Y+4	; 0x04
    2d42:	9d 81       	ldd	r25, Y+5	; 0x05
    2d44:	fc 01       	movw	r30, r24
    2d46:	87 81       	ldd	r24, Z+7	; 0x07
    2d48:	90 85       	ldd	r25, Z+8	; 0x08
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	80 85       	ldd	r24, Z+8	; 0x08
    2d4e:	91 85       	ldd	r25, Z+9	; 0x09
    2d50:	8a 83       	std	Y+2, r24	; 0x02
    2d52:	9b 83       	std	Y+3, r25	; 0x03
    2d54:	8a 81       	ldd	r24, Y+2	; 0x02
    2d56:	9b 81       	ldd	r25, Y+3	; 0x03
    2d58:	0e 96       	adiw	r24, 0x0e	; 14
    2d5a:	0e 94 89 07 	call	0xf12	; 0xf12 <uxListRemove>
    2d5e:	80 91 75 2c 	lds	r24, 0x2C75	; 0x802c75 <uxSchedulerSuspended>
    2d62:	88 23       	and	r24, r24
    2d64:	51 f5       	brne	.+84     	; 0x2dba <xTaskRemoveFromEventList+0x8c>
    2d66:	8a 81       	ldd	r24, Y+2	; 0x02
    2d68:	9b 81       	ldd	r25, Y+3	; 0x03
    2d6a:	02 96       	adiw	r24, 0x02	; 2
    2d6c:	0e 94 89 07 	call	0xf12	; 0xf12 <uxListRemove>
    2d70:	8a 81       	ldd	r24, Y+2	; 0x02
    2d72:	9b 81       	ldd	r25, Y+3	; 0x03
    2d74:	fc 01       	movw	r30, r24
    2d76:	92 8d       	ldd	r25, Z+26	; 0x1a
    2d78:	80 91 69 2c 	lds	r24, 0x2C69	; 0x802c69 <uxTopReadyPriority>
    2d7c:	89 17       	cp	r24, r25
    2d7e:	30 f4       	brcc	.+12     	; 0x2d8c <xTaskRemoveFromEventList+0x5e>
    2d80:	8a 81       	ldd	r24, Y+2	; 0x02
    2d82:	9b 81       	ldd	r25, Y+3	; 0x03
    2d84:	fc 01       	movw	r30, r24
    2d86:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d88:	80 93 69 2c 	sts	0x2C69, r24	; 0x802c69 <uxTopReadyPriority>
    2d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d90:	ac 01       	movw	r20, r24
    2d92:	4e 5f       	subi	r20, 0xFE	; 254
    2d94:	5f 4f       	sbci	r21, 0xFF	; 255
    2d96:	8a 81       	ldd	r24, Y+2	; 0x02
    2d98:	9b 81       	ldd	r25, Y+3	; 0x03
    2d9a:	fc 01       	movw	r30, r24
    2d9c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d9e:	28 2f       	mov	r18, r24
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	6b e0       	ldi	r22, 0x0B	; 11
    2da4:	62 9f       	mul	r22, r18
    2da6:	c0 01       	movw	r24, r0
    2da8:	63 9f       	mul	r22, r19
    2daa:	90 0d       	add	r25, r0
    2dac:	11 24       	eor	r1, r1
    2dae:	88 5f       	subi	r24, 0xF8	; 248
    2db0:	93 4d       	sbci	r25, 0xD3	; 211
    2db2:	ba 01       	movw	r22, r20
    2db4:	0e 94 bd 06 	call	0xd7a	; 0xd7a <vListInsertEnd>
    2db8:	08 c0       	rjmp	.+16     	; 0x2dca <xTaskRemoveFromEventList+0x9c>
    2dba:	8a 81       	ldd	r24, Y+2	; 0x02
    2dbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2dbe:	0e 96       	adiw	r24, 0x0e	; 14
    2dc0:	bc 01       	movw	r22, r24
    2dc2:	8e e4       	ldi	r24, 0x4E	; 78
    2dc4:	9c e2       	ldi	r25, 0x2C	; 44
    2dc6:	0e 94 bd 06 	call	0xd7a	; 0xd7a <vListInsertEnd>
    2dca:	8a 81       	ldd	r24, Y+2	; 0x02
    2dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    2dce:	fc 01       	movw	r30, r24
    2dd0:	22 8d       	ldd	r18, Z+26	; 0x1a
    2dd2:	80 91 06 2c 	lds	r24, 0x2C06	; 0x802c06 <pxCurrentTCB>
    2dd6:	90 91 07 2c 	lds	r25, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    2dda:	fc 01       	movw	r30, r24
    2ddc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2dde:	82 17       	cp	r24, r18
    2de0:	30 f4       	brcc	.+12     	; 0x2dee <xTaskRemoveFromEventList+0xc0>
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	89 83       	std	Y+1, r24	; 0x01
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	80 93 6c 2c 	sts	0x2C6C, r24	; 0x802c6c <xYieldPending>
    2dec:	01 c0       	rjmp	.+2      	; 0x2df0 <xTaskRemoveFromEventList+0xc2>
    2dee:	19 82       	std	Y+1, r1	; 0x01
    2df0:	89 81       	ldd	r24, Y+1	; 0x01
    2df2:	25 96       	adiw	r28, 0x05	; 5
    2df4:	cd bf       	out	0x3d, r28	; 61
    2df6:	de bf       	out	0x3e, r29	; 62
    2df8:	df 91       	pop	r29
    2dfa:	cf 91       	pop	r28
    2dfc:	08 95       	ret

00002dfe <vTaskRemoveFromUnorderedEventList>:
    2dfe:	cf 93       	push	r28
    2e00:	df 93       	push	r29
    2e02:	cd b7       	in	r28, 0x3d	; 61
    2e04:	de b7       	in	r29, 0x3e	; 62
    2e06:	28 97       	sbiw	r28, 0x08	; 8
    2e08:	cd bf       	out	0x3d, r28	; 61
    2e0a:	de bf       	out	0x3e, r29	; 62
    2e0c:	8b 83       	std	Y+3, r24	; 0x03
    2e0e:	9c 83       	std	Y+4, r25	; 0x04
    2e10:	4d 83       	std	Y+5, r20	; 0x05
    2e12:	5e 83       	std	Y+6, r21	; 0x06
    2e14:	6f 83       	std	Y+7, r22	; 0x07
    2e16:	78 87       	std	Y+8, r23	; 0x08
    2e18:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1c:	af 81       	ldd	r26, Y+7	; 0x07
    2e1e:	b8 85       	ldd	r27, Y+8	; 0x08
    2e20:	b0 68       	ori	r27, 0x80	; 128
    2e22:	2b 81       	ldd	r18, Y+3	; 0x03
    2e24:	3c 81       	ldd	r19, Y+4	; 0x04
    2e26:	f9 01       	movw	r30, r18
    2e28:	80 83       	st	Z, r24
    2e2a:	91 83       	std	Z+1, r25	; 0x01
    2e2c:	a2 83       	std	Z+2, r26	; 0x02
    2e2e:	b3 83       	std	Z+3, r27	; 0x03
    2e30:	8b 81       	ldd	r24, Y+3	; 0x03
    2e32:	9c 81       	ldd	r25, Y+4	; 0x04
    2e34:	fc 01       	movw	r30, r24
    2e36:	80 85       	ldd	r24, Z+8	; 0x08
    2e38:	91 85       	ldd	r25, Z+9	; 0x09
    2e3a:	89 83       	std	Y+1, r24	; 0x01
    2e3c:	9a 83       	std	Y+2, r25	; 0x02
    2e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e40:	9c 81       	ldd	r25, Y+4	; 0x04
    2e42:	0e 94 89 07 	call	0xf12	; 0xf12 <uxListRemove>
    2e46:	89 81       	ldd	r24, Y+1	; 0x01
    2e48:	9a 81       	ldd	r25, Y+2	; 0x02
    2e4a:	02 96       	adiw	r24, 0x02	; 2
    2e4c:	0e 94 89 07 	call	0xf12	; 0xf12 <uxListRemove>
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
    2e52:	9a 81       	ldd	r25, Y+2	; 0x02
    2e54:	fc 01       	movw	r30, r24
    2e56:	92 8d       	ldd	r25, Z+26	; 0x1a
    2e58:	80 91 69 2c 	lds	r24, 0x2C69	; 0x802c69 <uxTopReadyPriority>
    2e5c:	89 17       	cp	r24, r25
    2e5e:	30 f4       	brcc	.+12     	; 0x2e6c <vTaskRemoveFromUnorderedEventList+0x6e>
    2e60:	89 81       	ldd	r24, Y+1	; 0x01
    2e62:	9a 81       	ldd	r25, Y+2	; 0x02
    2e64:	fc 01       	movw	r30, r24
    2e66:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e68:	80 93 69 2c 	sts	0x2C69, r24	; 0x802c69 <uxTopReadyPriority>
    2e6c:	89 81       	ldd	r24, Y+1	; 0x01
    2e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e70:	ac 01       	movw	r20, r24
    2e72:	4e 5f       	subi	r20, 0xFE	; 254
    2e74:	5f 4f       	sbci	r21, 0xFF	; 255
    2e76:	89 81       	ldd	r24, Y+1	; 0x01
    2e78:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7a:	fc 01       	movw	r30, r24
    2e7c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e7e:	28 2f       	mov	r18, r24
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	6b e0       	ldi	r22, 0x0B	; 11
    2e84:	62 9f       	mul	r22, r18
    2e86:	c0 01       	movw	r24, r0
    2e88:	63 9f       	mul	r22, r19
    2e8a:	90 0d       	add	r25, r0
    2e8c:	11 24       	eor	r1, r1
    2e8e:	88 5f       	subi	r24, 0xF8	; 248
    2e90:	93 4d       	sbci	r25, 0xD3	; 211
    2e92:	ba 01       	movw	r22, r20
    2e94:	0e 94 bd 06 	call	0xd7a	; 0xd7a <vListInsertEnd>
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e9c:	fc 01       	movw	r30, r24
    2e9e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2ea0:	80 91 06 2c 	lds	r24, 0x2C06	; 0x802c06 <pxCurrentTCB>
    2ea4:	90 91 07 2c 	lds	r25, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    2ea8:	fc 01       	movw	r30, r24
    2eaa:	82 8d       	ldd	r24, Z+26	; 0x1a
    2eac:	82 17       	cp	r24, r18
    2eae:	18 f4       	brcc	.+6      	; 0x2eb6 <vTaskRemoveFromUnorderedEventList+0xb8>
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	80 93 6c 2c 	sts	0x2C6C, r24	; 0x802c6c <xYieldPending>
    2eb6:	00 00       	nop
    2eb8:	28 96       	adiw	r28, 0x08	; 8
    2eba:	cd bf       	out	0x3d, r28	; 61
    2ebc:	de bf       	out	0x3e, r29	; 62
    2ebe:	df 91       	pop	r29
    2ec0:	cf 91       	pop	r28
    2ec2:	08 95       	ret

00002ec4 <vTaskInternalSetTimeOutState>:
    2ec4:	cf 93       	push	r28
    2ec6:	df 93       	push	r29
    2ec8:	1f 92       	push	r1
    2eca:	1f 92       	push	r1
    2ecc:	cd b7       	in	r28, 0x3d	; 61
    2ece:	de b7       	in	r29, 0x3e	; 62
    2ed0:	89 83       	std	Y+1, r24	; 0x01
    2ed2:	9a 83       	std	Y+2, r25	; 0x02
    2ed4:	20 91 6d 2c 	lds	r18, 0x2C6D	; 0x802c6d <xNumOfOverflows>
    2ed8:	89 81       	ldd	r24, Y+1	; 0x01
    2eda:	9a 81       	ldd	r25, Y+2	; 0x02
    2edc:	fc 01       	movw	r30, r24
    2ede:	20 83       	st	Z, r18
    2ee0:	80 91 65 2c 	lds	r24, 0x2C65	; 0x802c65 <xTickCount>
    2ee4:	90 91 66 2c 	lds	r25, 0x2C66	; 0x802c66 <xTickCount+0x1>
    2ee8:	a0 91 67 2c 	lds	r26, 0x2C67	; 0x802c67 <xTickCount+0x2>
    2eec:	b0 91 68 2c 	lds	r27, 0x2C68	; 0x802c68 <xTickCount+0x3>
    2ef0:	29 81       	ldd	r18, Y+1	; 0x01
    2ef2:	3a 81       	ldd	r19, Y+2	; 0x02
    2ef4:	f9 01       	movw	r30, r18
    2ef6:	81 83       	std	Z+1, r24	; 0x01
    2ef8:	92 83       	std	Z+2, r25	; 0x02
    2efa:	a3 83       	std	Z+3, r26	; 0x03
    2efc:	b4 83       	std	Z+4, r27	; 0x04
    2efe:	00 00       	nop
    2f00:	0f 90       	pop	r0
    2f02:	0f 90       	pop	r0
    2f04:	df 91       	pop	r29
    2f06:	cf 91       	pop	r28
    2f08:	08 95       	ret

00002f0a <xTaskCheckForTimeOut>:
    2f0a:	ef 92       	push	r14
    2f0c:	ff 92       	push	r15
    2f0e:	0f 93       	push	r16
    2f10:	1f 93       	push	r17
    2f12:	cf 93       	push	r28
    2f14:	df 93       	push	r29
    2f16:	cd b7       	in	r28, 0x3d	; 61
    2f18:	de b7       	in	r29, 0x3e	; 62
    2f1a:	2d 97       	sbiw	r28, 0x0d	; 13
    2f1c:	cd bf       	out	0x3d, r28	; 61
    2f1e:	de bf       	out	0x3e, r29	; 62
    2f20:	8a 87       	std	Y+10, r24	; 0x0a
    2f22:	9b 87       	std	Y+11, r25	; 0x0b
    2f24:	6c 87       	std	Y+12, r22	; 0x0c
    2f26:	7d 87       	std	Y+13, r23	; 0x0d
    2f28:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2f2c:	ff 93       	push	r31
    2f2e:	f8 7f       	andi	r31, 0xF8	; 248
    2f30:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2f34:	80 91 65 2c 	lds	r24, 0x2C65	; 0x802c65 <xTickCount>
    2f38:	90 91 66 2c 	lds	r25, 0x2C66	; 0x802c66 <xTickCount+0x1>
    2f3c:	a0 91 67 2c 	lds	r26, 0x2C67	; 0x802c67 <xTickCount+0x2>
    2f40:	b0 91 68 2c 	lds	r27, 0x2C68	; 0x802c68 <xTickCount+0x3>
    2f44:	8a 83       	std	Y+2, r24	; 0x02
    2f46:	9b 83       	std	Y+3, r25	; 0x03
    2f48:	ac 83       	std	Y+4, r26	; 0x04
    2f4a:	bd 83       	std	Y+5, r27	; 0x05
    2f4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f50:	fc 01       	movw	r30, r24
    2f52:	81 81       	ldd	r24, Z+1	; 0x01
    2f54:	92 81       	ldd	r25, Z+2	; 0x02
    2f56:	a3 81       	ldd	r26, Z+3	; 0x03
    2f58:	b4 81       	ldd	r27, Z+4	; 0x04
    2f5a:	2a 81       	ldd	r18, Y+2	; 0x02
    2f5c:	3b 81       	ldd	r19, Y+3	; 0x03
    2f5e:	4c 81       	ldd	r20, Y+4	; 0x04
    2f60:	5d 81       	ldd	r21, Y+5	; 0x05
    2f62:	79 01       	movw	r14, r18
    2f64:	8a 01       	movw	r16, r20
    2f66:	e8 1a       	sub	r14, r24
    2f68:	f9 0a       	sbc	r15, r25
    2f6a:	0a 0b       	sbc	r16, r26
    2f6c:	1b 0b       	sbc	r17, r27
    2f6e:	d8 01       	movw	r26, r16
    2f70:	c7 01       	movw	r24, r14
    2f72:	8e 83       	std	Y+6, r24	; 0x06
    2f74:	9f 83       	std	Y+7, r25	; 0x07
    2f76:	a8 87       	std	Y+8, r26	; 0x08
    2f78:	b9 87       	std	Y+9, r27	; 0x09
    2f7a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f7c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f7e:	fc 01       	movw	r30, r24
    2f80:	80 81       	ld	r24, Z
    2f82:	91 81       	ldd	r25, Z+1	; 0x01
    2f84:	a2 81       	ldd	r26, Z+2	; 0x02
    2f86:	b3 81       	ldd	r27, Z+3	; 0x03
    2f88:	8f 3f       	cpi	r24, 0xFF	; 255
    2f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f8c:	af 4f       	sbci	r26, 0xFF	; 255
    2f8e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f90:	11 f4       	brne	.+4      	; 0x2f96 <xTaskCheckForTimeOut+0x8c>
    2f92:	19 82       	std	Y+1, r1	; 0x01
    2f94:	54 c0       	rjmp	.+168    	; 0x303e <xTaskCheckForTimeOut+0x134>
    2f96:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f98:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f9a:	fc 01       	movw	r30, r24
    2f9c:	90 81       	ld	r25, Z
    2f9e:	80 91 6d 2c 	lds	r24, 0x2C6D	; 0x802c6d <xNumOfOverflows>
    2fa2:	98 17       	cp	r25, r24
    2fa4:	99 f0       	breq	.+38     	; 0x2fcc <xTaskCheckForTimeOut+0xc2>
    2fa6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fa8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2faa:	fc 01       	movw	r30, r24
    2fac:	21 81       	ldd	r18, Z+1	; 0x01
    2fae:	32 81       	ldd	r19, Z+2	; 0x02
    2fb0:	43 81       	ldd	r20, Z+3	; 0x03
    2fb2:	54 81       	ldd	r21, Z+4	; 0x04
    2fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fb8:	ac 81       	ldd	r26, Y+4	; 0x04
    2fba:	bd 81       	ldd	r27, Y+5	; 0x05
    2fbc:	82 17       	cp	r24, r18
    2fbe:	93 07       	cpc	r25, r19
    2fc0:	a4 07       	cpc	r26, r20
    2fc2:	b5 07       	cpc	r27, r21
    2fc4:	18 f0       	brcs	.+6      	; 0x2fcc <xTaskCheckForTimeOut+0xc2>
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	89 83       	std	Y+1, r24	; 0x01
    2fca:	39 c0       	rjmp	.+114    	; 0x303e <xTaskCheckForTimeOut+0x134>
    2fcc:	8c 85       	ldd	r24, Y+12	; 0x0c
    2fce:	9d 85       	ldd	r25, Y+13	; 0x0d
    2fd0:	fc 01       	movw	r30, r24
    2fd2:	20 81       	ld	r18, Z
    2fd4:	31 81       	ldd	r19, Z+1	; 0x01
    2fd6:	42 81       	ldd	r20, Z+2	; 0x02
    2fd8:	53 81       	ldd	r21, Z+3	; 0x03
    2fda:	8e 81       	ldd	r24, Y+6	; 0x06
    2fdc:	9f 81       	ldd	r25, Y+7	; 0x07
    2fde:	a8 85       	ldd	r26, Y+8	; 0x08
    2fe0:	b9 85       	ldd	r27, Y+9	; 0x09
    2fe2:	82 17       	cp	r24, r18
    2fe4:	93 07       	cpc	r25, r19
    2fe6:	a4 07       	cpc	r26, r20
    2fe8:	b5 07       	cpc	r27, r21
    2fea:	00 f5       	brcc	.+64     	; 0x302c <xTaskCheckForTimeOut+0x122>
    2fec:	8c 85       	ldd	r24, Y+12	; 0x0c
    2fee:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ff0:	fc 01       	movw	r30, r24
    2ff2:	20 81       	ld	r18, Z
    2ff4:	31 81       	ldd	r19, Z+1	; 0x01
    2ff6:	42 81       	ldd	r20, Z+2	; 0x02
    2ff8:	53 81       	ldd	r21, Z+3	; 0x03
    2ffa:	8e 81       	ldd	r24, Y+6	; 0x06
    2ffc:	9f 81       	ldd	r25, Y+7	; 0x07
    2ffe:	a8 85       	ldd	r26, Y+8	; 0x08
    3000:	b9 85       	ldd	r27, Y+9	; 0x09
    3002:	79 01       	movw	r14, r18
    3004:	8a 01       	movw	r16, r20
    3006:	e8 1a       	sub	r14, r24
    3008:	f9 0a       	sbc	r15, r25
    300a:	0a 0b       	sbc	r16, r26
    300c:	1b 0b       	sbc	r17, r27
    300e:	d8 01       	movw	r26, r16
    3010:	c7 01       	movw	r24, r14
    3012:	2c 85       	ldd	r18, Y+12	; 0x0c
    3014:	3d 85       	ldd	r19, Y+13	; 0x0d
    3016:	f9 01       	movw	r30, r18
    3018:	80 83       	st	Z, r24
    301a:	91 83       	std	Z+1, r25	; 0x01
    301c:	a2 83       	std	Z+2, r26	; 0x02
    301e:	b3 83       	std	Z+3, r27	; 0x03
    3020:	8a 85       	ldd	r24, Y+10	; 0x0a
    3022:	9b 85       	ldd	r25, Y+11	; 0x0b
    3024:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <vTaskInternalSetTimeOutState>
    3028:	19 82       	std	Y+1, r1	; 0x01
    302a:	09 c0       	rjmp	.+18     	; 0x303e <xTaskCheckForTimeOut+0x134>
    302c:	8c 85       	ldd	r24, Y+12	; 0x0c
    302e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3030:	fc 01       	movw	r30, r24
    3032:	10 82       	st	Z, r1
    3034:	11 82       	std	Z+1, r1	; 0x01
    3036:	12 82       	std	Z+2, r1	; 0x02
    3038:	13 82       	std	Z+3, r1	; 0x03
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	89 83       	std	Y+1, r24	; 0x01
    303e:	ff 91       	pop	r31
    3040:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    3044:	89 81       	ldd	r24, Y+1	; 0x01
    3046:	2d 96       	adiw	r28, 0x0d	; 13
    3048:	cd bf       	out	0x3d, r28	; 61
    304a:	de bf       	out	0x3e, r29	; 62
    304c:	df 91       	pop	r29
    304e:	cf 91       	pop	r28
    3050:	1f 91       	pop	r17
    3052:	0f 91       	pop	r16
    3054:	ff 90       	pop	r15
    3056:	ef 90       	pop	r14
    3058:	08 95       	ret

0000305a <vTaskMissedYield>:
    305a:	cf 93       	push	r28
    305c:	df 93       	push	r29
    305e:	cd b7       	in	r28, 0x3d	; 61
    3060:	de b7       	in	r29, 0x3e	; 62
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	80 93 6c 2c 	sts	0x2C6C, r24	; 0x802c6c <xYieldPending>
    3068:	00 00       	nop
    306a:	df 91       	pop	r29
    306c:	cf 91       	pop	r28
    306e:	08 95       	ret

00003070 <prvIdleTask>:
    3070:	cf 93       	push	r28
    3072:	df 93       	push	r29
    3074:	1f 92       	push	r1
    3076:	1f 92       	push	r1
    3078:	cd b7       	in	r28, 0x3d	; 61
    307a:	de b7       	in	r29, 0x3e	; 62
    307c:	89 83       	std	Y+1, r24	; 0x01
    307e:	9a 83       	std	Y+2, r25	; 0x02
    3080:	0e 94 86 18 	call	0x310c	; 0x310c <prvCheckTasksWaitingTermination>
    3084:	80 91 08 2c 	lds	r24, 0x2C08	; 0x802c08 <pxReadyTasksLists>
    3088:	82 30       	cpi	r24, 0x02	; 2
    308a:	10 f0       	brcs	.+4      	; 0x3090 <prvIdleTask+0x20>
    308c:	0e 94 07 0a 	call	0x140e	; 0x140e <vPortYield>
    3090:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <vApplicationIdleHook>
    3094:	f5 cf       	rjmp	.-22     	; 0x3080 <prvIdleTask+0x10>

00003096 <prvInitialiseTaskLists>:
    3096:	cf 93       	push	r28
    3098:	df 93       	push	r29
    309a:	1f 92       	push	r1
    309c:	cd b7       	in	r28, 0x3d	; 61
    309e:	de b7       	in	r29, 0x3e	; 62
    30a0:	19 82       	std	Y+1, r1	; 0x01
    30a2:	10 c0       	rjmp	.+32     	; 0x30c4 <prvInitialiseTaskLists+0x2e>
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	28 2f       	mov	r18, r24
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	4b e0       	ldi	r20, 0x0B	; 11
    30ac:	42 9f       	mul	r20, r18
    30ae:	c0 01       	movw	r24, r0
    30b0:	43 9f       	mul	r20, r19
    30b2:	90 0d       	add	r25, r0
    30b4:	11 24       	eor	r1, r1
    30b6:	88 5f       	subi	r24, 0xF8	; 248
    30b8:	93 4d       	sbci	r25, 0xD3	; 211
    30ba:	0e 94 70 06 	call	0xce0	; 0xce0 <vListInitialise>
    30be:	89 81       	ldd	r24, Y+1	; 0x01
    30c0:	8f 5f       	subi	r24, 0xFF	; 255
    30c2:	89 83       	std	Y+1, r24	; 0x01
    30c4:	89 81       	ldd	r24, Y+1	; 0x01
    30c6:	84 30       	cpi	r24, 0x04	; 4
    30c8:	68 f3       	brcs	.-38     	; 0x30a4 <prvInitialiseTaskLists+0xe>
    30ca:	84 e3       	ldi	r24, 0x34	; 52
    30cc:	9c e2       	ldi	r25, 0x2C	; 44
    30ce:	0e 94 70 06 	call	0xce0	; 0xce0 <vListInitialise>
    30d2:	8f e3       	ldi	r24, 0x3F	; 63
    30d4:	9c e2       	ldi	r25, 0x2C	; 44
    30d6:	0e 94 70 06 	call	0xce0	; 0xce0 <vListInitialise>
    30da:	8e e4       	ldi	r24, 0x4E	; 78
    30dc:	9c e2       	ldi	r25, 0x2C	; 44
    30de:	0e 94 70 06 	call	0xce0	; 0xce0 <vListInitialise>
    30e2:	89 e5       	ldi	r24, 0x59	; 89
    30e4:	9c e2       	ldi	r25, 0x2C	; 44
    30e6:	0e 94 70 06 	call	0xce0	; 0xce0 <vListInitialise>
    30ea:	84 e3       	ldi	r24, 0x34	; 52
    30ec:	9c e2       	ldi	r25, 0x2C	; 44
    30ee:	80 93 4a 2c 	sts	0x2C4A, r24	; 0x802c4a <pxDelayedTaskList>
    30f2:	90 93 4b 2c 	sts	0x2C4B, r25	; 0x802c4b <pxDelayedTaskList+0x1>
    30f6:	8f e3       	ldi	r24, 0x3F	; 63
    30f8:	9c e2       	ldi	r25, 0x2C	; 44
    30fa:	80 93 4c 2c 	sts	0x2C4C, r24	; 0x802c4c <pxOverflowDelayedTaskList>
    30fe:	90 93 4d 2c 	sts	0x2C4D, r25	; 0x802c4d <pxOverflowDelayedTaskList+0x1>
    3102:	00 00       	nop
    3104:	0f 90       	pop	r0
    3106:	df 91       	pop	r29
    3108:	cf 91       	pop	r28
    310a:	08 95       	ret

0000310c <prvCheckTasksWaitingTermination>:
    310c:	cf 93       	push	r28
    310e:	df 93       	push	r29
    3110:	cd b7       	in	r28, 0x3d	; 61
    3112:	de b7       	in	r29, 0x3e	; 62
    3114:	00 00       	nop
    3116:	df 91       	pop	r29
    3118:	cf 91       	pop	r28
    311a:	08 95       	ret

0000311c <prvResetNextTaskUnblockTime>:
    311c:	cf 93       	push	r28
    311e:	df 93       	push	r29
    3120:	1f 92       	push	r1
    3122:	1f 92       	push	r1
    3124:	cd b7       	in	r28, 0x3d	; 61
    3126:	de b7       	in	r29, 0x3e	; 62
    3128:	80 91 4a 2c 	lds	r24, 0x2C4A	; 0x802c4a <pxDelayedTaskList>
    312c:	90 91 4b 2c 	lds	r25, 0x2C4B	; 0x802c4b <pxDelayedTaskList+0x1>
    3130:	fc 01       	movw	r30, r24
    3132:	80 81       	ld	r24, Z
    3134:	88 23       	and	r24, r24
    3136:	61 f4       	brne	.+24     	; 0x3150 <prvResetNextTaskUnblockTime+0x34>
    3138:	8f ef       	ldi	r24, 0xFF	; 255
    313a:	9f ef       	ldi	r25, 0xFF	; 255
    313c:	dc 01       	movw	r26, r24
    313e:	80 93 6f 2c 	sts	0x2C6F, r24	; 0x802c6f <xNextTaskUnblockTime>
    3142:	90 93 70 2c 	sts	0x2C70, r25	; 0x802c70 <xNextTaskUnblockTime+0x1>
    3146:	a0 93 71 2c 	sts	0x2C71, r26	; 0x802c71 <xNextTaskUnblockTime+0x2>
    314a:	b0 93 72 2c 	sts	0x2C72, r27	; 0x802c72 <xNextTaskUnblockTime+0x3>
    314e:	1b c0       	rjmp	.+54     	; 0x3186 <prvResetNextTaskUnblockTime+0x6a>
    3150:	80 91 4a 2c 	lds	r24, 0x2C4A	; 0x802c4a <pxDelayedTaskList>
    3154:	90 91 4b 2c 	lds	r25, 0x2C4B	; 0x802c4b <pxDelayedTaskList+0x1>
    3158:	fc 01       	movw	r30, r24
    315a:	87 81       	ldd	r24, Z+7	; 0x07
    315c:	90 85       	ldd	r25, Z+8	; 0x08
    315e:	fc 01       	movw	r30, r24
    3160:	80 85       	ldd	r24, Z+8	; 0x08
    3162:	91 85       	ldd	r25, Z+9	; 0x09
    3164:	89 83       	std	Y+1, r24	; 0x01
    3166:	9a 83       	std	Y+2, r25	; 0x02
    3168:	89 81       	ldd	r24, Y+1	; 0x01
    316a:	9a 81       	ldd	r25, Y+2	; 0x02
    316c:	fc 01       	movw	r30, r24
    316e:	82 81       	ldd	r24, Z+2	; 0x02
    3170:	93 81       	ldd	r25, Z+3	; 0x03
    3172:	a4 81       	ldd	r26, Z+4	; 0x04
    3174:	b5 81       	ldd	r27, Z+5	; 0x05
    3176:	80 93 6f 2c 	sts	0x2C6F, r24	; 0x802c6f <xNextTaskUnblockTime>
    317a:	90 93 70 2c 	sts	0x2C70, r25	; 0x802c70 <xNextTaskUnblockTime+0x1>
    317e:	a0 93 71 2c 	sts	0x2C71, r26	; 0x802c71 <xNextTaskUnblockTime+0x2>
    3182:	b0 93 72 2c 	sts	0x2C72, r27	; 0x802c72 <xNextTaskUnblockTime+0x3>
    3186:	00 00       	nop
    3188:	0f 90       	pop	r0
    318a:	0f 90       	pop	r0
    318c:	df 91       	pop	r29
    318e:	cf 91       	pop	r28
    3190:	08 95       	ret

00003192 <xTaskGetSchedulerState>:
    3192:	cf 93       	push	r28
    3194:	df 93       	push	r29
    3196:	1f 92       	push	r1
    3198:	cd b7       	in	r28, 0x3d	; 61
    319a:	de b7       	in	r29, 0x3e	; 62
    319c:	80 91 6a 2c 	lds	r24, 0x2C6A	; 0x802c6a <xSchedulerRunning>
    31a0:	88 23       	and	r24, r24
    31a2:	19 f4       	brne	.+6      	; 0x31aa <xTaskGetSchedulerState+0x18>
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	89 83       	std	Y+1, r24	; 0x01
    31a8:	08 c0       	rjmp	.+16     	; 0x31ba <xTaskGetSchedulerState+0x28>
    31aa:	80 91 75 2c 	lds	r24, 0x2C75	; 0x802c75 <uxSchedulerSuspended>
    31ae:	88 23       	and	r24, r24
    31b0:	19 f4       	brne	.+6      	; 0x31b8 <xTaskGetSchedulerState+0x26>
    31b2:	82 e0       	ldi	r24, 0x02	; 2
    31b4:	89 83       	std	Y+1, r24	; 0x01
    31b6:	01 c0       	rjmp	.+2      	; 0x31ba <xTaskGetSchedulerState+0x28>
    31b8:	19 82       	std	Y+1, r1	; 0x01
    31ba:	89 81       	ldd	r24, Y+1	; 0x01
    31bc:	0f 90       	pop	r0
    31be:	df 91       	pop	r29
    31c0:	cf 91       	pop	r28
    31c2:	08 95       	ret

000031c4 <uxTaskResetEventItemValue>:
    31c4:	ef 92       	push	r14
    31c6:	ff 92       	push	r15
    31c8:	0f 93       	push	r16
    31ca:	1f 93       	push	r17
    31cc:	cf 93       	push	r28
    31ce:	df 93       	push	r29
    31d0:	00 d0       	rcall	.+0      	; 0x31d2 <uxTaskResetEventItemValue+0xe>
    31d2:	1f 92       	push	r1
    31d4:	cd b7       	in	r28, 0x3d	; 61
    31d6:	de b7       	in	r29, 0x3e	; 62
    31d8:	80 91 06 2c 	lds	r24, 0x2C06	; 0x802c06 <pxCurrentTCB>
    31dc:	90 91 07 2c 	lds	r25, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    31e0:	fc 01       	movw	r30, r24
    31e2:	86 85       	ldd	r24, Z+14	; 0x0e
    31e4:	97 85       	ldd	r25, Z+15	; 0x0f
    31e6:	a0 89       	ldd	r26, Z+16	; 0x10
    31e8:	b1 89       	ldd	r27, Z+17	; 0x11
    31ea:	89 83       	std	Y+1, r24	; 0x01
    31ec:	9a 83       	std	Y+2, r25	; 0x02
    31ee:	ab 83       	std	Y+3, r26	; 0x03
    31f0:	bc 83       	std	Y+4, r27	; 0x04
    31f2:	60 91 06 2c 	lds	r22, 0x2C06	; 0x802c06 <pxCurrentTCB>
    31f6:	70 91 07 2c 	lds	r23, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    31fa:	80 91 06 2c 	lds	r24, 0x2C06	; 0x802c06 <pxCurrentTCB>
    31fe:	90 91 07 2c 	lds	r25, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    3202:	fc 01       	movw	r30, r24
    3204:	82 8d       	ldd	r24, Z+26	; 0x1a
    3206:	88 2f       	mov	r24, r24
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	a0 e0       	ldi	r26, 0x00	; 0
    320c:	b0 e0       	ldi	r27, 0x00	; 0
    320e:	24 e0       	ldi	r18, 0x04	; 4
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	40 e0       	ldi	r20, 0x00	; 0
    3214:	50 e0       	ldi	r21, 0x00	; 0
    3216:	79 01       	movw	r14, r18
    3218:	8a 01       	movw	r16, r20
    321a:	e8 1a       	sub	r14, r24
    321c:	f9 0a       	sbc	r15, r25
    321e:	0a 0b       	sbc	r16, r26
    3220:	1b 0b       	sbc	r17, r27
    3222:	d8 01       	movw	r26, r16
    3224:	c7 01       	movw	r24, r14
    3226:	fb 01       	movw	r30, r22
    3228:	86 87       	std	Z+14, r24	; 0x0e
    322a:	97 87       	std	Z+15, r25	; 0x0f
    322c:	a0 8b       	std	Z+16, r26	; 0x10
    322e:	b1 8b       	std	Z+17, r27	; 0x11
    3230:	89 81       	ldd	r24, Y+1	; 0x01
    3232:	9a 81       	ldd	r25, Y+2	; 0x02
    3234:	ab 81       	ldd	r26, Y+3	; 0x03
    3236:	bc 81       	ldd	r27, Y+4	; 0x04
    3238:	bc 01       	movw	r22, r24
    323a:	cd 01       	movw	r24, r26
    323c:	24 96       	adiw	r28, 0x04	; 4
    323e:	cd bf       	out	0x3d, r28	; 61
    3240:	de bf       	out	0x3e, r29	; 62
    3242:	df 91       	pop	r29
    3244:	cf 91       	pop	r28
    3246:	1f 91       	pop	r17
    3248:	0f 91       	pop	r16
    324a:	ff 90       	pop	r15
    324c:	ef 90       	pop	r14
    324e:	08 95       	ret

00003250 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    3250:	cf 93       	push	r28
    3252:	df 93       	push	r29
    3254:	cd b7       	in	r28, 0x3d	; 61
    3256:	de b7       	in	r29, 0x3e	; 62
    3258:	2d 97       	sbiw	r28, 0x0d	; 13
    325a:	cd bf       	out	0x3d, r28	; 61
    325c:	de bf       	out	0x3e, r29	; 62
    325e:	69 87       	std	Y+9, r22	; 0x09
    3260:	7a 87       	std	Y+10, r23	; 0x0a
    3262:	8b 87       	std	Y+11, r24	; 0x0b
    3264:	9c 87       	std	Y+12, r25	; 0x0c
    3266:	4d 87       	std	Y+13, r20	; 0x0d
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    3268:	80 91 65 2c 	lds	r24, 0x2C65	; 0x802c65 <xTickCount>
    326c:	90 91 66 2c 	lds	r25, 0x2C66	; 0x802c66 <xTickCount+0x1>
    3270:	a0 91 67 2c 	lds	r26, 0x2C67	; 0x802c67 <xTickCount+0x2>
    3274:	b0 91 68 2c 	lds	r27, 0x2C68	; 0x802c68 <xTickCount+0x3>
    3278:	89 83       	std	Y+1, r24	; 0x01
    327a:	9a 83       	std	Y+2, r25	; 0x02
    327c:	ab 83       	std	Y+3, r26	; 0x03
    327e:	bc 83       	std	Y+4, r27	; 0x04
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3280:	80 91 06 2c 	lds	r24, 0x2C06	; 0x802c06 <pxCurrentTCB>
    3284:	90 91 07 2c 	lds	r25, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    3288:	02 96       	adiw	r24, 0x02	; 2
    328a:	0e 94 89 07 	call	0xf12	; 0xf12 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    328e:	89 85       	ldd	r24, Y+9	; 0x09
    3290:	9a 85       	ldd	r25, Y+10	; 0x0a
    3292:	ab 85       	ldd	r26, Y+11	; 0x0b
    3294:	bc 85       	ldd	r27, Y+12	; 0x0c
    3296:	8f 3f       	cpi	r24, 0xFF	; 255
    3298:	9f 4f       	sbci	r25, 0xFF	; 255
    329a:	af 4f       	sbci	r26, 0xFF	; 255
    329c:	bf 4f       	sbci	r27, 0xFF	; 255
    329e:	71 f4       	brne	.+28     	; 0x32bc <prvAddCurrentTaskToDelayedList+0x6c>
    32a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32a2:	88 23       	and	r24, r24
    32a4:	59 f0       	breq	.+22     	; 0x32bc <prvAddCurrentTaskToDelayedList+0x6c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    32a6:	80 91 06 2c 	lds	r24, 0x2C06	; 0x802c06 <pxCurrentTCB>
    32aa:	90 91 07 2c 	lds	r25, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    32ae:	02 96       	adiw	r24, 0x02	; 2
    32b0:	bc 01       	movw	r22, r24
    32b2:	89 e5       	ldi	r24, 0x59	; 89
    32b4:	9c e2       	ldi	r25, 0x2C	; 44
    32b6:	0e 94 bd 06 	call	0xd7a	; 0xd7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    32ba:	64 c0       	rjmp	.+200    	; 0x3384 <prvAddCurrentTaskToDelayedList+0x134>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    32bc:	29 81       	ldd	r18, Y+1	; 0x01
    32be:	3a 81       	ldd	r19, Y+2	; 0x02
    32c0:	4b 81       	ldd	r20, Y+3	; 0x03
    32c2:	5c 81       	ldd	r21, Y+4	; 0x04
    32c4:	89 85       	ldd	r24, Y+9	; 0x09
    32c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c8:	ab 85       	ldd	r26, Y+11	; 0x0b
    32ca:	bc 85       	ldd	r27, Y+12	; 0x0c
    32cc:	82 0f       	add	r24, r18
    32ce:	93 1f       	adc	r25, r19
    32d0:	a4 1f       	adc	r26, r20
    32d2:	b5 1f       	adc	r27, r21
    32d4:	8d 83       	std	Y+5, r24	; 0x05
    32d6:	9e 83       	std	Y+6, r25	; 0x06
    32d8:	af 83       	std	Y+7, r26	; 0x07
    32da:	b8 87       	std	Y+8, r27	; 0x08

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    32dc:	20 91 06 2c 	lds	r18, 0x2C06	; 0x802c06 <pxCurrentTCB>
    32e0:	30 91 07 2c 	lds	r19, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    32e4:	8d 81       	ldd	r24, Y+5	; 0x05
    32e6:	9e 81       	ldd	r25, Y+6	; 0x06
    32e8:	af 81       	ldd	r26, Y+7	; 0x07
    32ea:	b8 85       	ldd	r27, Y+8	; 0x08
    32ec:	f9 01       	movw	r30, r18
    32ee:	82 83       	std	Z+2, r24	; 0x02
    32f0:	93 83       	std	Z+3, r25	; 0x03
    32f2:	a4 83       	std	Z+4, r26	; 0x04
    32f4:	b5 83       	std	Z+5, r27	; 0x05

			if( xTimeToWake < xConstTickCount )
    32f6:	2d 81       	ldd	r18, Y+5	; 0x05
    32f8:	3e 81       	ldd	r19, Y+6	; 0x06
    32fa:	4f 81       	ldd	r20, Y+7	; 0x07
    32fc:	58 85       	ldd	r21, Y+8	; 0x08
    32fe:	89 81       	ldd	r24, Y+1	; 0x01
    3300:	9a 81       	ldd	r25, Y+2	; 0x02
    3302:	ab 81       	ldd	r26, Y+3	; 0x03
    3304:	bc 81       	ldd	r27, Y+4	; 0x04
    3306:	28 17       	cp	r18, r24
    3308:	39 07       	cpc	r19, r25
    330a:	4a 07       	cpc	r20, r26
    330c:	5b 07       	cpc	r21, r27
    330e:	78 f4       	brcc	.+30     	; 0x332e <prvAddCurrentTaskToDelayedList+0xde>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3310:	80 91 06 2c 	lds	r24, 0x2C06	; 0x802c06 <pxCurrentTCB>
    3314:	90 91 07 2c 	lds	r25, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    3318:	9c 01       	movw	r18, r24
    331a:	2e 5f       	subi	r18, 0xFE	; 254
    331c:	3f 4f       	sbci	r19, 0xFF	; 255
    331e:	80 91 4c 2c 	lds	r24, 0x2C4C	; 0x802c4c <pxOverflowDelayedTaskList>
    3322:	90 91 4d 2c 	lds	r25, 0x2C4D	; 0x802c4d <pxOverflowDelayedTaskList+0x1>
    3326:	b9 01       	movw	r22, r18
    3328:	0e 94 08 07 	call	0xe10	; 0xe10 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    332c:	2b c0       	rjmp	.+86     	; 0x3384 <prvAddCurrentTaskToDelayedList+0x134>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    332e:	80 91 06 2c 	lds	r24, 0x2C06	; 0x802c06 <pxCurrentTCB>
    3332:	90 91 07 2c 	lds	r25, 0x2C07	; 0x802c07 <pxCurrentTCB+0x1>
    3336:	9c 01       	movw	r18, r24
    3338:	2e 5f       	subi	r18, 0xFE	; 254
    333a:	3f 4f       	sbci	r19, 0xFF	; 255
    333c:	80 91 4a 2c 	lds	r24, 0x2C4A	; 0x802c4a <pxDelayedTaskList>
    3340:	90 91 4b 2c 	lds	r25, 0x2C4B	; 0x802c4b <pxDelayedTaskList+0x1>
    3344:	b9 01       	movw	r22, r18
    3346:	0e 94 08 07 	call	0xe10	; 0xe10 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    334a:	80 91 6f 2c 	lds	r24, 0x2C6F	; 0x802c6f <xNextTaskUnblockTime>
    334e:	90 91 70 2c 	lds	r25, 0x2C70	; 0x802c70 <xNextTaskUnblockTime+0x1>
    3352:	a0 91 71 2c 	lds	r26, 0x2C71	; 0x802c71 <xNextTaskUnblockTime+0x2>
    3356:	b0 91 72 2c 	lds	r27, 0x2C72	; 0x802c72 <xNextTaskUnblockTime+0x3>
    335a:	2d 81       	ldd	r18, Y+5	; 0x05
    335c:	3e 81       	ldd	r19, Y+6	; 0x06
    335e:	4f 81       	ldd	r20, Y+7	; 0x07
    3360:	58 85       	ldd	r21, Y+8	; 0x08
    3362:	28 17       	cp	r18, r24
    3364:	39 07       	cpc	r19, r25
    3366:	4a 07       	cpc	r20, r26
    3368:	5b 07       	cpc	r21, r27
    336a:	60 f4       	brcc	.+24     	; 0x3384 <prvAddCurrentTaskToDelayedList+0x134>
				{
					xNextTaskUnblockTime = xTimeToWake;
    336c:	8d 81       	ldd	r24, Y+5	; 0x05
    336e:	9e 81       	ldd	r25, Y+6	; 0x06
    3370:	af 81       	ldd	r26, Y+7	; 0x07
    3372:	b8 85       	ldd	r27, Y+8	; 0x08
    3374:	80 93 6f 2c 	sts	0x2C6F, r24	; 0x802c6f <xNextTaskUnblockTime>
    3378:	90 93 70 2c 	sts	0x2C70, r25	; 0x802c70 <xNextTaskUnblockTime+0x1>
    337c:	a0 93 71 2c 	sts	0x2C71, r26	; 0x802c71 <xNextTaskUnblockTime+0x2>
    3380:	b0 93 72 2c 	sts	0x2C72, r27	; 0x802c72 <xNextTaskUnblockTime+0x3>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3384:	00 00       	nop
    3386:	2d 96       	adiw	r28, 0x0d	; 13
    3388:	cd bf       	out	0x3d, r28	; 61
    338a:	de bf       	out	0x3e, r29	; 62
    338c:	df 91       	pop	r29
    338e:	cf 91       	pop	r28
    3390:	08 95       	ret

00003392 <xTimerCreateTimerTask>:
	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
}
    3392:	ef 92       	push	r14
    3394:	ff 92       	push	r15
    3396:	0f 93       	push	r16
    3398:	cf 93       	push	r28
    339a:	df 93       	push	r29
    339c:	1f 92       	push	r1
    339e:	cd b7       	in	r28, 0x3d	; 61
    33a0:	de b7       	in	r29, 0x3e	; 62
    33a2:	19 82       	std	Y+1, r1	; 0x01
    33a4:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <prvCheckForValidListAndQueue>
    33a8:	80 91 90 2c 	lds	r24, 0x2C90	; 0x802c90 <xTimerQueue>
    33ac:	90 91 91 2c 	lds	r25, 0x2C91	; 0x802c91 <xTimerQueue+0x1>
    33b0:	89 2b       	or	r24, r25
    33b2:	91 f0       	breq	.+36     	; 0x33d8 <xTimerCreateTimerTask+0x46>
    33b4:	0f 2e       	mov	r0, r31
    33b6:	f2 e9       	ldi	r31, 0x92	; 146
    33b8:	ef 2e       	mov	r14, r31
    33ba:	fc e2       	ldi	r31, 0x2C	; 44
    33bc:	ff 2e       	mov	r15, r31
    33be:	f0 2d       	mov	r31, r0
    33c0:	03 e0       	ldi	r16, 0x03	; 3
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	48 ec       	ldi	r20, 0xC8	; 200
    33c8:	50 e0       	ldi	r21, 0x00	; 0
    33ca:	65 e0       	ldi	r22, 0x05	; 5
    33cc:	70 e2       	ldi	r23, 0x20	; 32
    33ce:	8f ed       	ldi	r24, 0xDF	; 223
    33d0:	9a e1       	ldi	r25, 0x1A	; 26
    33d2:	0e 94 6e 10 	call	0x20dc	; 0x20dc <xTaskCreate>
    33d6:	89 83       	std	Y+1, r24	; 0x01
    33d8:	89 81       	ldd	r24, Y+1	; 0x01
    33da:	0f 90       	pop	r0
    33dc:	df 91       	pop	r29
    33de:	cf 91       	pop	r28
    33e0:	0f 91       	pop	r16
    33e2:	ff 90       	pop	r15
    33e4:	ef 90       	pop	r14
    33e6:	08 95       	ret

000033e8 <xTimerGenericCommand>:
    33e8:	cf 92       	push	r12
    33ea:	df 92       	push	r13
    33ec:	ef 92       	push	r14
    33ee:	ff 92       	push	r15
    33f0:	0f 93       	push	r16
    33f2:	1f 93       	push	r17
    33f4:	cf 93       	push	r28
    33f6:	df 93       	push	r29
    33f8:	cd b7       	in	r28, 0x3d	; 61
    33fa:	de b7       	in	r29, 0x3e	; 62
    33fc:	67 97       	sbiw	r28, 0x17	; 23
    33fe:	cd bf       	out	0x3d, r28	; 61
    3400:	de bf       	out	0x3e, r29	; 62
    3402:	8b 87       	std	Y+11, r24	; 0x0b
    3404:	9c 87       	std	Y+12, r25	; 0x0c
    3406:	6d 87       	std	Y+13, r22	; 0x0d
    3408:	2e 87       	std	Y+14, r18	; 0x0e
    340a:	3f 87       	std	Y+15, r19	; 0x0f
    340c:	48 8b       	std	Y+16, r20	; 0x10
    340e:	59 8b       	std	Y+17, r21	; 0x11
    3410:	0a 8b       	std	Y+18, r16	; 0x12
    3412:	1b 8b       	std	Y+19, r17	; 0x13
    3414:	cc 8a       	std	Y+20, r12	; 0x14
    3416:	dd 8a       	std	Y+21, r13	; 0x15
    3418:	ee 8a       	std	Y+22, r14	; 0x16
    341a:	ff 8a       	std	Y+23, r15	; 0x17
    341c:	19 82       	std	Y+1, r1	; 0x01
    341e:	80 91 90 2c 	lds	r24, 0x2C90	; 0x802c90 <xTimerQueue>
    3422:	90 91 91 2c 	lds	r25, 0x2C91	; 0x802c91 <xTimerQueue+0x1>
    3426:	89 2b       	or	r24, r25
    3428:	09 f4       	brne	.+2      	; 0x342c <xTimerGenericCommand+0x44>
    342a:	44 c0       	rjmp	.+136    	; 0x34b4 <xTimerGenericCommand+0xcc>
    342c:	8d 85       	ldd	r24, Y+13	; 0x0d
    342e:	8a 83       	std	Y+2, r24	; 0x02
    3430:	8e 85       	ldd	r24, Y+14	; 0x0e
    3432:	9f 85       	ldd	r25, Y+15	; 0x0f
    3434:	a8 89       	ldd	r26, Y+16	; 0x10
    3436:	b9 89       	ldd	r27, Y+17	; 0x11
    3438:	8b 83       	std	Y+3, r24	; 0x03
    343a:	9c 83       	std	Y+4, r25	; 0x04
    343c:	ad 83       	std	Y+5, r26	; 0x05
    343e:	be 83       	std	Y+6, r27	; 0x06
    3440:	8b 85       	ldd	r24, Y+11	; 0x0b
    3442:	9c 85       	ldd	r25, Y+12	; 0x0c
    3444:	8f 83       	std	Y+7, r24	; 0x07
    3446:	98 87       	std	Y+8, r25	; 0x08
    3448:	8d 85       	ldd	r24, Y+13	; 0x0d
    344a:	86 30       	cpi	r24, 0x06	; 6
    344c:	34 f5       	brge	.+76     	; 0x349a <xTimerGenericCommand+0xb2>
    344e:	0e 94 c9 18 	call	0x3192	; 0x3192 <xTaskGetSchedulerState>
    3452:	82 30       	cpi	r24, 0x02	; 2
    3454:	99 f4       	brne	.+38     	; 0x347c <xTimerGenericCommand+0x94>
    3456:	e0 91 90 2c 	lds	r30, 0x2C90	; 0x802c90 <xTimerQueue>
    345a:	f0 91 91 2c 	lds	r31, 0x2C91	; 0x802c91 <xTimerQueue+0x1>
    345e:	8c 89       	ldd	r24, Y+20	; 0x14
    3460:	9d 89       	ldd	r25, Y+21	; 0x15
    3462:	ae 89       	ldd	r26, Y+22	; 0x16
    3464:	bf 89       	ldd	r27, Y+23	; 0x17
    3466:	be 01       	movw	r22, r28
    3468:	6e 5f       	subi	r22, 0xFE	; 254
    346a:	7f 4f       	sbci	r23, 0xFF	; 255
    346c:	00 e0       	ldi	r16, 0x00	; 0
    346e:	9c 01       	movw	r18, r24
    3470:	ad 01       	movw	r20, r26
    3472:	cf 01       	movw	r24, r30
    3474:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <xQueueGenericSend>
    3478:	89 83       	std	Y+1, r24	; 0x01
    347a:	1c c0       	rjmp	.+56     	; 0x34b4 <xTimerGenericCommand+0xcc>
    347c:	80 91 90 2c 	lds	r24, 0x2C90	; 0x802c90 <xTimerQueue>
    3480:	90 91 91 2c 	lds	r25, 0x2C91	; 0x802c91 <xTimerQueue+0x1>
    3484:	be 01       	movw	r22, r28
    3486:	6e 5f       	subi	r22, 0xFE	; 254
    3488:	7f 4f       	sbci	r23, 0xFF	; 255
    348a:	00 e0       	ldi	r16, 0x00	; 0
    348c:	20 e0       	ldi	r18, 0x00	; 0
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	a9 01       	movw	r20, r18
    3492:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <xQueueGenericSend>
    3496:	89 83       	std	Y+1, r24	; 0x01
    3498:	0d c0       	rjmp	.+26     	; 0x34b4 <xTimerGenericCommand+0xcc>
    349a:	80 91 90 2c 	lds	r24, 0x2C90	; 0x802c90 <xTimerQueue>
    349e:	90 91 91 2c 	lds	r25, 0x2C91	; 0x802c91 <xTimerQueue+0x1>
    34a2:	4a 89       	ldd	r20, Y+18	; 0x12
    34a4:	5b 89       	ldd	r21, Y+19	; 0x13
    34a6:	be 01       	movw	r22, r28
    34a8:	6e 5f       	subi	r22, 0xFE	; 254
    34aa:	7f 4f       	sbci	r23, 0xFF	; 255
    34ac:	20 e0       	ldi	r18, 0x00	; 0
    34ae:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xQueueGenericSendFromISR>
    34b2:	89 83       	std	Y+1, r24	; 0x01
    34b4:	89 81       	ldd	r24, Y+1	; 0x01
    34b6:	67 96       	adiw	r28, 0x17	; 23
    34b8:	cd bf       	out	0x3d, r28	; 61
    34ba:	de bf       	out	0x3e, r29	; 62
    34bc:	df 91       	pop	r29
    34be:	cf 91       	pop	r28
    34c0:	1f 91       	pop	r17
    34c2:	0f 91       	pop	r16
    34c4:	ff 90       	pop	r15
    34c6:	ef 90       	pop	r14
    34c8:	df 90       	pop	r13
    34ca:	cf 90       	pop	r12
    34cc:	08 95       	ret

000034ce <prvProcessExpiredTimer>:
    34ce:	cf 92       	push	r12
    34d0:	df 92       	push	r13
    34d2:	ef 92       	push	r14
    34d4:	ff 92       	push	r15
    34d6:	0f 93       	push	r16
    34d8:	1f 93       	push	r17
    34da:	cf 93       	push	r28
    34dc:	df 93       	push	r29
    34de:	cd b7       	in	r28, 0x3d	; 61
    34e0:	de b7       	in	r29, 0x3e	; 62
    34e2:	2b 97       	sbiw	r28, 0x0b	; 11
    34e4:	cd bf       	out	0x3d, r28	; 61
    34e6:	de bf       	out	0x3e, r29	; 62
    34e8:	6c 83       	std	Y+4, r22	; 0x04
    34ea:	7d 83       	std	Y+5, r23	; 0x05
    34ec:	8e 83       	std	Y+6, r24	; 0x06
    34ee:	9f 83       	std	Y+7, r25	; 0x07
    34f0:	28 87       	std	Y+8, r18	; 0x08
    34f2:	39 87       	std	Y+9, r19	; 0x09
    34f4:	4a 87       	std	Y+10, r20	; 0x0a
    34f6:	5b 87       	std	Y+11, r21	; 0x0b
    34f8:	80 91 8c 2c 	lds	r24, 0x2C8C	; 0x802c8c <pxCurrentTimerList>
    34fc:	90 91 8d 2c 	lds	r25, 0x2C8D	; 0x802c8d <pxCurrentTimerList+0x1>
    3500:	fc 01       	movw	r30, r24
    3502:	87 81       	ldd	r24, Z+7	; 0x07
    3504:	90 85       	ldd	r25, Z+8	; 0x08
    3506:	fc 01       	movw	r30, r24
    3508:	80 85       	ldd	r24, Z+8	; 0x08
    350a:	91 85       	ldd	r25, Z+9	; 0x09
    350c:	89 83       	std	Y+1, r24	; 0x01
    350e:	9a 83       	std	Y+2, r25	; 0x02
    3510:	89 81       	ldd	r24, Y+1	; 0x01
    3512:	9a 81       	ldd	r25, Y+2	; 0x02
    3514:	02 96       	adiw	r24, 0x02	; 2
    3516:	0e 94 89 07 	call	0xf12	; 0xf12 <uxListRemove>
    351a:	89 81       	ldd	r24, Y+1	; 0x01
    351c:	9a 81       	ldd	r25, Y+2	; 0x02
    351e:	fc 01       	movw	r30, r24
    3520:	82 89       	ldd	r24, Z+18	; 0x12
    3522:	81 30       	cpi	r24, 0x01	; 1
    3524:	b1 f5       	brne	.+108    	; 0x3592 <prvProcessExpiredTimer+0xc4>
    3526:	89 81       	ldd	r24, Y+1	; 0x01
    3528:	9a 81       	ldd	r25, Y+2	; 0x02
    352a:	fc 01       	movw	r30, r24
    352c:	26 85       	ldd	r18, Z+14	; 0x0e
    352e:	37 85       	ldd	r19, Z+15	; 0x0f
    3530:	40 89       	ldd	r20, Z+16	; 0x10
    3532:	51 89       	ldd	r21, Z+17	; 0x11
    3534:	8c 81       	ldd	r24, Y+4	; 0x04
    3536:	9d 81       	ldd	r25, Y+5	; 0x05
    3538:	ae 81       	ldd	r26, Y+6	; 0x06
    353a:	bf 81       	ldd	r27, Y+7	; 0x07
    353c:	82 0f       	add	r24, r18
    353e:	93 1f       	adc	r25, r19
    3540:	a4 1f       	adc	r26, r20
    3542:	b5 1f       	adc	r27, r21
    3544:	ec 80       	ldd	r14, Y+4	; 0x04
    3546:	fd 80       	ldd	r15, Y+5	; 0x05
    3548:	0e 81       	ldd	r16, Y+6	; 0x06
    354a:	1f 81       	ldd	r17, Y+7	; 0x07
    354c:	28 85       	ldd	r18, Y+8	; 0x08
    354e:	39 85       	ldd	r19, Y+9	; 0x09
    3550:	4a 85       	ldd	r20, Y+10	; 0x0a
    3552:	5b 85       	ldd	r21, Y+11	; 0x0b
    3554:	e9 81       	ldd	r30, Y+1	; 0x01
    3556:	fa 81       	ldd	r31, Y+2	; 0x02
    3558:	67 01       	movw	r12, r14
    355a:	78 01       	movw	r14, r16
    355c:	89 01       	movw	r16, r18
    355e:	9a 01       	movw	r18, r20
    3560:	ac 01       	movw	r20, r24
    3562:	bd 01       	movw	r22, r26
    3564:	cf 01       	movw	r24, r30
    3566:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <prvInsertTimerInActiveList>
    356a:	88 23       	and	r24, r24
    356c:	91 f0       	breq	.+36     	; 0x3592 <prvProcessExpiredTimer+0xc4>
    356e:	8c 81       	ldd	r24, Y+4	; 0x04
    3570:	9d 81       	ldd	r25, Y+5	; 0x05
    3572:	ae 81       	ldd	r26, Y+6	; 0x06
    3574:	bf 81       	ldd	r27, Y+7	; 0x07
    3576:	e9 81       	ldd	r30, Y+1	; 0x01
    3578:	fa 81       	ldd	r31, Y+2	; 0x02
    357a:	c1 2c       	mov	r12, r1
    357c:	d1 2c       	mov	r13, r1
    357e:	76 01       	movw	r14, r12
    3580:	00 e0       	ldi	r16, 0x00	; 0
    3582:	10 e0       	ldi	r17, 0x00	; 0
    3584:	9c 01       	movw	r18, r24
    3586:	ad 01       	movw	r20, r26
    3588:	60 e0       	ldi	r22, 0x00	; 0
    358a:	cf 01       	movw	r24, r30
    358c:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <xTimerGenericCommand>
    3590:	8b 83       	std	Y+3, r24	; 0x03
    3592:	89 81       	ldd	r24, Y+1	; 0x01
    3594:	9a 81       	ldd	r25, Y+2	; 0x02
    3596:	fc 01       	movw	r30, r24
    3598:	25 89       	ldd	r18, Z+21	; 0x15
    359a:	36 89       	ldd	r19, Z+22	; 0x16
    359c:	89 81       	ldd	r24, Y+1	; 0x01
    359e:	9a 81       	ldd	r25, Y+2	; 0x02
    35a0:	f9 01       	movw	r30, r18
    35a2:	19 95       	eicall
    35a4:	00 00       	nop
    35a6:	2b 96       	adiw	r28, 0x0b	; 11
    35a8:	cd bf       	out	0x3d, r28	; 61
    35aa:	de bf       	out	0x3e, r29	; 62
    35ac:	df 91       	pop	r29
    35ae:	cf 91       	pop	r28
    35b0:	1f 91       	pop	r17
    35b2:	0f 91       	pop	r16
    35b4:	ff 90       	pop	r15
    35b6:	ef 90       	pop	r14
    35b8:	df 90       	pop	r13
    35ba:	cf 90       	pop	r12
    35bc:	08 95       	ret

000035be <prvTimerTask>:
    35be:	cf 93       	push	r28
    35c0:	df 93       	push	r29
    35c2:	cd b7       	in	r28, 0x3d	; 61
    35c4:	de b7       	in	r29, 0x3e	; 62
    35c6:	27 97       	sbiw	r28, 0x07	; 7
    35c8:	cd bf       	out	0x3d, r28	; 61
    35ca:	de bf       	out	0x3e, r29	; 62
    35cc:	8e 83       	std	Y+6, r24	; 0x06
    35ce:	9f 83       	std	Y+7, r25	; 0x07
    35d0:	ce 01       	movw	r24, r28
    35d2:	05 96       	adiw	r24, 0x05	; 5
    35d4:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <prvGetNextExpireTime>
    35d8:	dc 01       	movw	r26, r24
    35da:	cb 01       	movw	r24, r22
    35dc:	89 83       	std	Y+1, r24	; 0x01
    35de:	9a 83       	std	Y+2, r25	; 0x02
    35e0:	ab 83       	std	Y+3, r26	; 0x03
    35e2:	bc 83       	std	Y+4, r27	; 0x04
    35e4:	2d 81       	ldd	r18, Y+5	; 0x05
    35e6:	89 81       	ldd	r24, Y+1	; 0x01
    35e8:	9a 81       	ldd	r25, Y+2	; 0x02
    35ea:	ab 81       	ldd	r26, Y+3	; 0x03
    35ec:	bc 81       	ldd	r27, Y+4	; 0x04
    35ee:	42 2f       	mov	r20, r18
    35f0:	bc 01       	movw	r22, r24
    35f2:	cd 01       	movw	r24, r26
    35f4:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <prvProcessTimerOrBlockTask>
    35f8:	0e 94 96 1c 	call	0x392c	; 0x392c <prvProcessReceivedCommands>
    35fc:	e9 cf       	rjmp	.-46     	; 0x35d0 <prvTimerTask+0x12>

000035fe <prvProcessTimerOrBlockTask>:
    35fe:	ef 92       	push	r14
    3600:	ff 92       	push	r15
    3602:	0f 93       	push	r16
    3604:	1f 93       	push	r17
    3606:	cf 93       	push	r28
    3608:	df 93       	push	r29
    360a:	cd b7       	in	r28, 0x3d	; 61
    360c:	de b7       	in	r29, 0x3e	; 62
    360e:	2a 97       	sbiw	r28, 0x0a	; 10
    3610:	cd bf       	out	0x3d, r28	; 61
    3612:	de bf       	out	0x3e, r29	; 62
    3614:	6e 83       	std	Y+6, r22	; 0x06
    3616:	7f 83       	std	Y+7, r23	; 0x07
    3618:	88 87       	std	Y+8, r24	; 0x08
    361a:	99 87       	std	Y+9, r25	; 0x09
    361c:	4a 87       	std	Y+10, r20	; 0x0a
    361e:	0e 94 51 13 	call	0x26a2	; 0x26a2 <vTaskSuspendAll>
    3622:	ce 01       	movw	r24, r28
    3624:	05 96       	adiw	r24, 0x05	; 5
    3626:	0e 94 b8 1b 	call	0x3770	; 0x3770 <prvSampleTimeNow>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	89 83       	std	Y+1, r24	; 0x01
    3630:	9a 83       	std	Y+2, r25	; 0x02
    3632:	ab 83       	std	Y+3, r26	; 0x03
    3634:	bc 83       	std	Y+4, r27	; 0x04
    3636:	8d 81       	ldd	r24, Y+5	; 0x05
    3638:	88 23       	and	r24, r24
    363a:	09 f0       	breq	.+2      	; 0x363e <prvProcessTimerOrBlockTask+0x40>
    363c:	4e c0       	rjmp	.+156    	; 0x36da <prvProcessTimerOrBlockTask+0xdc>
    363e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3640:	88 23       	and	r24, r24
    3642:	e1 f4       	brne	.+56     	; 0x367c <prvProcessTimerOrBlockTask+0x7e>
    3644:	2e 81       	ldd	r18, Y+6	; 0x06
    3646:	3f 81       	ldd	r19, Y+7	; 0x07
    3648:	48 85       	ldd	r20, Y+8	; 0x08
    364a:	59 85       	ldd	r21, Y+9	; 0x09
    364c:	89 81       	ldd	r24, Y+1	; 0x01
    364e:	9a 81       	ldd	r25, Y+2	; 0x02
    3650:	ab 81       	ldd	r26, Y+3	; 0x03
    3652:	bc 81       	ldd	r27, Y+4	; 0x04
    3654:	82 17       	cp	r24, r18
    3656:	93 07       	cpc	r25, r19
    3658:	a4 07       	cpc	r26, r20
    365a:	b5 07       	cpc	r27, r21
    365c:	78 f0       	brcs	.+30     	; 0x367c <prvProcessTimerOrBlockTask+0x7e>
    365e:	0e 94 5e 13 	call	0x26bc	; 0x26bc <xTaskResumeAll>
    3662:	29 81       	ldd	r18, Y+1	; 0x01
    3664:	3a 81       	ldd	r19, Y+2	; 0x02
    3666:	4b 81       	ldd	r20, Y+3	; 0x03
    3668:	5c 81       	ldd	r21, Y+4	; 0x04
    366a:	8e 81       	ldd	r24, Y+6	; 0x06
    366c:	9f 81       	ldd	r25, Y+7	; 0x07
    366e:	a8 85       	ldd	r26, Y+8	; 0x08
    3670:	b9 85       	ldd	r27, Y+9	; 0x09
    3672:	bc 01       	movw	r22, r24
    3674:	cd 01       	movw	r24, r26
    3676:	0e 94 67 1a 	call	0x34ce	; 0x34ce <prvProcessExpiredTimer>
    367a:	31 c0       	rjmp	.+98     	; 0x36de <prvProcessTimerOrBlockTask+0xe0>
    367c:	8a 85       	ldd	r24, Y+10	; 0x0a
    367e:	88 23       	and	r24, r24
    3680:	59 f0       	breq	.+22     	; 0x3698 <prvProcessTimerOrBlockTask+0x9a>
    3682:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <pxOverflowTimerList>
    3686:	90 91 8f 2c 	lds	r25, 0x2C8F	; 0x802c8f <pxOverflowTimerList+0x1>
    368a:	fc 01       	movw	r30, r24
    368c:	90 81       	ld	r25, Z
    368e:	81 e0       	ldi	r24, 0x01	; 1
    3690:	99 23       	and	r25, r25
    3692:	09 f0       	breq	.+2      	; 0x3696 <prvProcessTimerOrBlockTask+0x98>
    3694:	80 e0       	ldi	r24, 0x00	; 0
    3696:	8a 87       	std	Y+10, r24	; 0x0a
    3698:	2e 81       	ldd	r18, Y+6	; 0x06
    369a:	3f 81       	ldd	r19, Y+7	; 0x07
    369c:	48 85       	ldd	r20, Y+8	; 0x08
    369e:	59 85       	ldd	r21, Y+9	; 0x09
    36a0:	89 81       	ldd	r24, Y+1	; 0x01
    36a2:	9a 81       	ldd	r25, Y+2	; 0x02
    36a4:	ab 81       	ldd	r26, Y+3	; 0x03
    36a6:	bc 81       	ldd	r27, Y+4	; 0x04
    36a8:	79 01       	movw	r14, r18
    36aa:	8a 01       	movw	r16, r20
    36ac:	e8 1a       	sub	r14, r24
    36ae:	f9 0a       	sbc	r15, r25
    36b0:	0a 0b       	sbc	r16, r26
    36b2:	1b 0b       	sbc	r17, r27
    36b4:	d8 01       	movw	r26, r16
    36b6:	c7 01       	movw	r24, r14
    36b8:	e0 91 90 2c 	lds	r30, 0x2C90	; 0x802c90 <xTimerQueue>
    36bc:	f0 91 91 2c 	lds	r31, 0x2C91	; 0x802c91 <xTimerQueue+0x1>
    36c0:	2a 85       	ldd	r18, Y+10	; 0x0a
    36c2:	ac 01       	movw	r20, r24
    36c4:	bd 01       	movw	r22, r26
    36c6:	cf 01       	movw	r24, r30
    36c8:	0e 94 20 10 	call	0x2040	; 0x2040 <vQueueWaitForMessageRestricted>
    36cc:	0e 94 5e 13 	call	0x26bc	; 0x26bc <xTaskResumeAll>
    36d0:	88 23       	and	r24, r24
    36d2:	29 f4       	brne	.+10     	; 0x36de <prvProcessTimerOrBlockTask+0xe0>
    36d4:	0e 94 07 0a 	call	0x140e	; 0x140e <vPortYield>
    36d8:	02 c0       	rjmp	.+4      	; 0x36de <prvProcessTimerOrBlockTask+0xe0>
    36da:	0e 94 5e 13 	call	0x26bc	; 0x26bc <xTaskResumeAll>
    36de:	00 00       	nop
    36e0:	2a 96       	adiw	r28, 0x0a	; 10
    36e2:	cd bf       	out	0x3d, r28	; 61
    36e4:	de bf       	out	0x3e, r29	; 62
    36e6:	df 91       	pop	r29
    36e8:	cf 91       	pop	r28
    36ea:	1f 91       	pop	r17
    36ec:	0f 91       	pop	r16
    36ee:	ff 90       	pop	r15
    36f0:	ef 90       	pop	r14
    36f2:	08 95       	ret

000036f4 <prvGetNextExpireTime>:
    36f4:	cf 93       	push	r28
    36f6:	df 93       	push	r29
    36f8:	00 d0       	rcall	.+0      	; 0x36fa <prvGetNextExpireTime+0x6>
    36fa:	00 d0       	rcall	.+0      	; 0x36fc <prvGetNextExpireTime+0x8>
    36fc:	cd b7       	in	r28, 0x3d	; 61
    36fe:	de b7       	in	r29, 0x3e	; 62
    3700:	8d 83       	std	Y+5, r24	; 0x05
    3702:	9e 83       	std	Y+6, r25	; 0x06
    3704:	80 91 8c 2c 	lds	r24, 0x2C8C	; 0x802c8c <pxCurrentTimerList>
    3708:	90 91 8d 2c 	lds	r25, 0x2C8D	; 0x802c8d <pxCurrentTimerList+0x1>
    370c:	fc 01       	movw	r30, r24
    370e:	90 81       	ld	r25, Z
    3710:	81 e0       	ldi	r24, 0x01	; 1
    3712:	99 23       	and	r25, r25
    3714:	09 f0       	breq	.+2      	; 0x3718 <prvGetNextExpireTime+0x24>
    3716:	80 e0       	ldi	r24, 0x00	; 0
    3718:	28 2f       	mov	r18, r24
    371a:	8d 81       	ldd	r24, Y+5	; 0x05
    371c:	9e 81       	ldd	r25, Y+6	; 0x06
    371e:	fc 01       	movw	r30, r24
    3720:	20 83       	st	Z, r18
    3722:	8d 81       	ldd	r24, Y+5	; 0x05
    3724:	9e 81       	ldd	r25, Y+6	; 0x06
    3726:	fc 01       	movw	r30, r24
    3728:	80 81       	ld	r24, Z
    372a:	88 23       	and	r24, r24
    372c:	89 f4       	brne	.+34     	; 0x3750 <prvGetNextExpireTime+0x5c>
    372e:	80 91 8c 2c 	lds	r24, 0x2C8C	; 0x802c8c <pxCurrentTimerList>
    3732:	90 91 8d 2c 	lds	r25, 0x2C8D	; 0x802c8d <pxCurrentTimerList+0x1>
    3736:	fc 01       	movw	r30, r24
    3738:	87 81       	ldd	r24, Z+7	; 0x07
    373a:	90 85       	ldd	r25, Z+8	; 0x08
    373c:	fc 01       	movw	r30, r24
    373e:	80 81       	ld	r24, Z
    3740:	91 81       	ldd	r25, Z+1	; 0x01
    3742:	a2 81       	ldd	r26, Z+2	; 0x02
    3744:	b3 81       	ldd	r27, Z+3	; 0x03
    3746:	89 83       	std	Y+1, r24	; 0x01
    3748:	9a 83       	std	Y+2, r25	; 0x02
    374a:	ab 83       	std	Y+3, r26	; 0x03
    374c:	bc 83       	std	Y+4, r27	; 0x04
    374e:	04 c0       	rjmp	.+8      	; 0x3758 <prvGetNextExpireTime+0x64>
    3750:	19 82       	std	Y+1, r1	; 0x01
    3752:	1a 82       	std	Y+2, r1	; 0x02
    3754:	1b 82       	std	Y+3, r1	; 0x03
    3756:	1c 82       	std	Y+4, r1	; 0x04
    3758:	89 81       	ldd	r24, Y+1	; 0x01
    375a:	9a 81       	ldd	r25, Y+2	; 0x02
    375c:	ab 81       	ldd	r26, Y+3	; 0x03
    375e:	bc 81       	ldd	r27, Y+4	; 0x04
    3760:	bc 01       	movw	r22, r24
    3762:	cd 01       	movw	r24, r26
    3764:	26 96       	adiw	r28, 0x06	; 6
    3766:	cd bf       	out	0x3d, r28	; 61
    3768:	de bf       	out	0x3e, r29	; 62
    376a:	df 91       	pop	r29
    376c:	cf 91       	pop	r28
    376e:	08 95       	ret

00003770 <prvSampleTimeNow>:
    3770:	cf 93       	push	r28
    3772:	df 93       	push	r29
    3774:	00 d0       	rcall	.+0      	; 0x3776 <prvSampleTimeNow+0x6>
    3776:	00 d0       	rcall	.+0      	; 0x3778 <prvSampleTimeNow+0x8>
    3778:	cd b7       	in	r28, 0x3d	; 61
    377a:	de b7       	in	r29, 0x3e	; 62
    377c:	8d 83       	std	Y+5, r24	; 0x05
    377e:	9e 83       	std	Y+6, r25	; 0x06
    3780:	0e 94 f5 13 	call	0x27ea	; 0x27ea <xTaskGetTickCount>
    3784:	dc 01       	movw	r26, r24
    3786:	cb 01       	movw	r24, r22
    3788:	89 83       	std	Y+1, r24	; 0x01
    378a:	9a 83       	std	Y+2, r25	; 0x02
    378c:	ab 83       	std	Y+3, r26	; 0x03
    378e:	bc 83       	std	Y+4, r27	; 0x04
    3790:	80 91 94 2c 	lds	r24, 0x2C94	; 0x802c94 <xLastTime.4745>
    3794:	90 91 95 2c 	lds	r25, 0x2C95	; 0x802c95 <xLastTime.4745+0x1>
    3798:	a0 91 96 2c 	lds	r26, 0x2C96	; 0x802c96 <xLastTime.4745+0x2>
    379c:	b0 91 97 2c 	lds	r27, 0x2C97	; 0x802c97 <xLastTime.4745+0x3>
    37a0:	29 81       	ldd	r18, Y+1	; 0x01
    37a2:	3a 81       	ldd	r19, Y+2	; 0x02
    37a4:	4b 81       	ldd	r20, Y+3	; 0x03
    37a6:	5c 81       	ldd	r21, Y+4	; 0x04
    37a8:	28 17       	cp	r18, r24
    37aa:	39 07       	cpc	r19, r25
    37ac:	4a 07       	cpc	r20, r26
    37ae:	5b 07       	cpc	r21, r27
    37b0:	40 f4       	brcc	.+16     	; 0x37c2 <prvSampleTimeNow+0x52>
    37b2:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <prvSwitchTimerLists>
    37b6:	8d 81       	ldd	r24, Y+5	; 0x05
    37b8:	9e 81       	ldd	r25, Y+6	; 0x06
    37ba:	21 e0       	ldi	r18, 0x01	; 1
    37bc:	fc 01       	movw	r30, r24
    37be:	20 83       	st	Z, r18
    37c0:	04 c0       	rjmp	.+8      	; 0x37ca <prvSampleTimeNow+0x5a>
    37c2:	8d 81       	ldd	r24, Y+5	; 0x05
    37c4:	9e 81       	ldd	r25, Y+6	; 0x06
    37c6:	fc 01       	movw	r30, r24
    37c8:	10 82       	st	Z, r1
    37ca:	89 81       	ldd	r24, Y+1	; 0x01
    37cc:	9a 81       	ldd	r25, Y+2	; 0x02
    37ce:	ab 81       	ldd	r26, Y+3	; 0x03
    37d0:	bc 81       	ldd	r27, Y+4	; 0x04
    37d2:	80 93 94 2c 	sts	0x2C94, r24	; 0x802c94 <xLastTime.4745>
    37d6:	90 93 95 2c 	sts	0x2C95, r25	; 0x802c95 <xLastTime.4745+0x1>
    37da:	a0 93 96 2c 	sts	0x2C96, r26	; 0x802c96 <xLastTime.4745+0x2>
    37de:	b0 93 97 2c 	sts	0x2C97, r27	; 0x802c97 <xLastTime.4745+0x3>
    37e2:	89 81       	ldd	r24, Y+1	; 0x01
    37e4:	9a 81       	ldd	r25, Y+2	; 0x02
    37e6:	ab 81       	ldd	r26, Y+3	; 0x03
    37e8:	bc 81       	ldd	r27, Y+4	; 0x04
    37ea:	bc 01       	movw	r22, r24
    37ec:	cd 01       	movw	r24, r26
    37ee:	26 96       	adiw	r28, 0x06	; 6
    37f0:	cd bf       	out	0x3d, r28	; 61
    37f2:	de bf       	out	0x3e, r29	; 62
    37f4:	df 91       	pop	r29
    37f6:	cf 91       	pop	r28
    37f8:	08 95       	ret

000037fa <prvInsertTimerInActiveList>:
    37fa:	cf 92       	push	r12
    37fc:	df 92       	push	r13
    37fe:	ef 92       	push	r14
    3800:	ff 92       	push	r15
    3802:	0f 93       	push	r16
    3804:	1f 93       	push	r17
    3806:	cf 93       	push	r28
    3808:	df 93       	push	r29
    380a:	cd b7       	in	r28, 0x3d	; 61
    380c:	de b7       	in	r29, 0x3e	; 62
    380e:	2f 97       	sbiw	r28, 0x0f	; 15
    3810:	cd bf       	out	0x3d, r28	; 61
    3812:	de bf       	out	0x3e, r29	; 62
    3814:	8a 83       	std	Y+2, r24	; 0x02
    3816:	9b 83       	std	Y+3, r25	; 0x03
    3818:	4c 83       	std	Y+4, r20	; 0x04
    381a:	5d 83       	std	Y+5, r21	; 0x05
    381c:	6e 83       	std	Y+6, r22	; 0x06
    381e:	7f 83       	std	Y+7, r23	; 0x07
    3820:	08 87       	std	Y+8, r16	; 0x08
    3822:	19 87       	std	Y+9, r17	; 0x09
    3824:	2a 87       	std	Y+10, r18	; 0x0a
    3826:	3b 87       	std	Y+11, r19	; 0x0b
    3828:	cc 86       	std	Y+12, r12	; 0x0c
    382a:	dd 86       	std	Y+13, r13	; 0x0d
    382c:	ee 86       	std	Y+14, r14	; 0x0e
    382e:	ff 86       	std	Y+15, r15	; 0x0f
    3830:	19 82       	std	Y+1, r1	; 0x01
    3832:	2a 81       	ldd	r18, Y+2	; 0x02
    3834:	3b 81       	ldd	r19, Y+3	; 0x03
    3836:	8c 81       	ldd	r24, Y+4	; 0x04
    3838:	9d 81       	ldd	r25, Y+5	; 0x05
    383a:	ae 81       	ldd	r26, Y+6	; 0x06
    383c:	bf 81       	ldd	r27, Y+7	; 0x07
    383e:	f9 01       	movw	r30, r18
    3840:	82 83       	std	Z+2, r24	; 0x02
    3842:	93 83       	std	Z+3, r25	; 0x03
    3844:	a4 83       	std	Z+4, r26	; 0x04
    3846:	b5 83       	std	Z+5, r27	; 0x05
    3848:	8a 81       	ldd	r24, Y+2	; 0x02
    384a:	9b 81       	ldd	r25, Y+3	; 0x03
    384c:	2a 81       	ldd	r18, Y+2	; 0x02
    384e:	3b 81       	ldd	r19, Y+3	; 0x03
    3850:	fc 01       	movw	r30, r24
    3852:	22 87       	std	Z+10, r18	; 0x0a
    3854:	33 87       	std	Z+11, r19	; 0x0b
    3856:	2c 81       	ldd	r18, Y+4	; 0x04
    3858:	3d 81       	ldd	r19, Y+5	; 0x05
    385a:	4e 81       	ldd	r20, Y+6	; 0x06
    385c:	5f 81       	ldd	r21, Y+7	; 0x07
    385e:	88 85       	ldd	r24, Y+8	; 0x08
    3860:	99 85       	ldd	r25, Y+9	; 0x09
    3862:	aa 85       	ldd	r26, Y+10	; 0x0a
    3864:	bb 85       	ldd	r27, Y+11	; 0x0b
    3866:	82 17       	cp	r24, r18
    3868:	93 07       	cpc	r25, r19
    386a:	a4 07       	cpc	r26, r20
    386c:	b5 07       	cpc	r27, r21
    386e:	40 f1       	brcs	.+80     	; 0x38c0 <prvInsertTimerInActiveList+0xc6>
    3870:	28 85       	ldd	r18, Y+8	; 0x08
    3872:	39 85       	ldd	r19, Y+9	; 0x09
    3874:	4a 85       	ldd	r20, Y+10	; 0x0a
    3876:	5b 85       	ldd	r21, Y+11	; 0x0b
    3878:	8c 85       	ldd	r24, Y+12	; 0x0c
    387a:	9d 85       	ldd	r25, Y+13	; 0x0d
    387c:	ae 85       	ldd	r26, Y+14	; 0x0e
    387e:	bf 85       	ldd	r27, Y+15	; 0x0f
    3880:	28 1b       	sub	r18, r24
    3882:	39 0b       	sbc	r19, r25
    3884:	4a 0b       	sbc	r20, r26
    3886:	5b 0b       	sbc	r21, r27
    3888:	8a 81       	ldd	r24, Y+2	; 0x02
    388a:	9b 81       	ldd	r25, Y+3	; 0x03
    388c:	fc 01       	movw	r30, r24
    388e:	86 85       	ldd	r24, Z+14	; 0x0e
    3890:	97 85       	ldd	r25, Z+15	; 0x0f
    3892:	a0 89       	ldd	r26, Z+16	; 0x10
    3894:	b1 89       	ldd	r27, Z+17	; 0x11
    3896:	28 17       	cp	r18, r24
    3898:	39 07       	cpc	r19, r25
    389a:	4a 07       	cpc	r20, r26
    389c:	5b 07       	cpc	r21, r27
    389e:	18 f0       	brcs	.+6      	; 0x38a6 <prvInsertTimerInActiveList+0xac>
    38a0:	81 e0       	ldi	r24, 0x01	; 1
    38a2:	89 83       	std	Y+1, r24	; 0x01
    38a4:	36 c0       	rjmp	.+108    	; 0x3912 <prvInsertTimerInActiveList+0x118>
    38a6:	8a 81       	ldd	r24, Y+2	; 0x02
    38a8:	9b 81       	ldd	r25, Y+3	; 0x03
    38aa:	9c 01       	movw	r18, r24
    38ac:	2e 5f       	subi	r18, 0xFE	; 254
    38ae:	3f 4f       	sbci	r19, 0xFF	; 255
    38b0:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <pxOverflowTimerList>
    38b4:	90 91 8f 2c 	lds	r25, 0x2C8F	; 0x802c8f <pxOverflowTimerList+0x1>
    38b8:	b9 01       	movw	r22, r18
    38ba:	0e 94 08 07 	call	0xe10	; 0xe10 <vListInsert>
    38be:	29 c0       	rjmp	.+82     	; 0x3912 <prvInsertTimerInActiveList+0x118>
    38c0:	28 85       	ldd	r18, Y+8	; 0x08
    38c2:	39 85       	ldd	r19, Y+9	; 0x09
    38c4:	4a 85       	ldd	r20, Y+10	; 0x0a
    38c6:	5b 85       	ldd	r21, Y+11	; 0x0b
    38c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    38ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    38cc:	ae 85       	ldd	r26, Y+14	; 0x0e
    38ce:	bf 85       	ldd	r27, Y+15	; 0x0f
    38d0:	28 17       	cp	r18, r24
    38d2:	39 07       	cpc	r19, r25
    38d4:	4a 07       	cpc	r20, r26
    38d6:	5b 07       	cpc	r21, r27
    38d8:	80 f4       	brcc	.+32     	; 0x38fa <prvInsertTimerInActiveList+0x100>
    38da:	2c 81       	ldd	r18, Y+4	; 0x04
    38dc:	3d 81       	ldd	r19, Y+5	; 0x05
    38de:	4e 81       	ldd	r20, Y+6	; 0x06
    38e0:	5f 81       	ldd	r21, Y+7	; 0x07
    38e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    38e4:	9d 85       	ldd	r25, Y+13	; 0x0d
    38e6:	ae 85       	ldd	r26, Y+14	; 0x0e
    38e8:	bf 85       	ldd	r27, Y+15	; 0x0f
    38ea:	28 17       	cp	r18, r24
    38ec:	39 07       	cpc	r19, r25
    38ee:	4a 07       	cpc	r20, r26
    38f0:	5b 07       	cpc	r21, r27
    38f2:	18 f0       	brcs	.+6      	; 0x38fa <prvInsertTimerInActiveList+0x100>
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	89 83       	std	Y+1, r24	; 0x01
    38f8:	0c c0       	rjmp	.+24     	; 0x3912 <prvInsertTimerInActiveList+0x118>
    38fa:	8a 81       	ldd	r24, Y+2	; 0x02
    38fc:	9b 81       	ldd	r25, Y+3	; 0x03
    38fe:	9c 01       	movw	r18, r24
    3900:	2e 5f       	subi	r18, 0xFE	; 254
    3902:	3f 4f       	sbci	r19, 0xFF	; 255
    3904:	80 91 8c 2c 	lds	r24, 0x2C8C	; 0x802c8c <pxCurrentTimerList>
    3908:	90 91 8d 2c 	lds	r25, 0x2C8D	; 0x802c8d <pxCurrentTimerList+0x1>
    390c:	b9 01       	movw	r22, r18
    390e:	0e 94 08 07 	call	0xe10	; 0xe10 <vListInsert>
    3912:	89 81       	ldd	r24, Y+1	; 0x01
    3914:	2f 96       	adiw	r28, 0x0f	; 15
    3916:	cd bf       	out	0x3d, r28	; 61
    3918:	de bf       	out	0x3e, r29	; 62
    391a:	df 91       	pop	r29
    391c:	cf 91       	pop	r28
    391e:	1f 91       	pop	r17
    3920:	0f 91       	pop	r16
    3922:	ff 90       	pop	r15
    3924:	ef 90       	pop	r14
    3926:	df 90       	pop	r13
    3928:	cf 90       	pop	r12
    392a:	08 95       	ret

0000392c <prvProcessReceivedCommands>:
    392c:	cf 92       	push	r12
    392e:	df 92       	push	r13
    3930:	ef 92       	push	r14
    3932:	ff 92       	push	r15
    3934:	0f 93       	push	r16
    3936:	1f 93       	push	r17
    3938:	cf 93       	push	r28
    393a:	df 93       	push	r29
    393c:	cd b7       	in	r28, 0x3d	; 61
    393e:	de b7       	in	r29, 0x3e	; 62
    3940:	65 97       	sbiw	r28, 0x15	; 21
    3942:	cd bf       	out	0x3d, r28	; 61
    3944:	de bf       	out	0x3e, r29	; 62
    3946:	e0 c0       	rjmp	.+448    	; 0x3b08 <prvProcessReceivedCommands+0x1dc>
    3948:	8a 85       	ldd	r24, Y+10	; 0x0a
    394a:	88 23       	and	r24, r24
    394c:	fc f4       	brge	.+62     	; 0x398c <prvProcessReceivedCommands+0x60>
    394e:	ce 01       	movw	r24, r28
    3950:	0a 96       	adiw	r24, 0x0a	; 10
    3952:	01 96       	adiw	r24, 0x01	; 1
    3954:	89 83       	std	Y+1, r24	; 0x01
    3956:	9a 83       	std	Y+2, r25	; 0x02
    3958:	89 81       	ldd	r24, Y+1	; 0x01
    395a:	9a 81       	ldd	r25, Y+2	; 0x02
    395c:	fc 01       	movw	r30, r24
    395e:	20 81       	ld	r18, Z
    3960:	31 81       	ldd	r19, Z+1	; 0x01
    3962:	89 81       	ldd	r24, Y+1	; 0x01
    3964:	9a 81       	ldd	r25, Y+2	; 0x02
    3966:	fc 01       	movw	r30, r24
    3968:	84 81       	ldd	r24, Z+4	; 0x04
    396a:	95 81       	ldd	r25, Z+5	; 0x05
    396c:	a6 81       	ldd	r26, Z+6	; 0x06
    396e:	b7 81       	ldd	r27, Z+7	; 0x07
    3970:	49 81       	ldd	r20, Y+1	; 0x01
    3972:	5a 81       	ldd	r21, Y+2	; 0x02
    3974:	fa 01       	movw	r30, r20
    3976:	02 80       	ldd	r0, Z+2	; 0x02
    3978:	f3 81       	ldd	r31, Z+3	; 0x03
    397a:	e0 2d       	mov	r30, r0
    397c:	ec 8b       	std	Y+20, r30	; 0x14
    397e:	fd 8b       	std	Y+21, r31	; 0x15
    3980:	ac 01       	movw	r20, r24
    3982:	bd 01       	movw	r22, r26
    3984:	8c 89       	ldd	r24, Y+20	; 0x14
    3986:	9d 89       	ldd	r25, Y+21	; 0x15
    3988:	f9 01       	movw	r30, r18
    398a:	19 95       	eicall
    398c:	8a 85       	ldd	r24, Y+10	; 0x0a
    398e:	88 23       	and	r24, r24
    3990:	0c f4       	brge	.+2      	; 0x3994 <prvProcessReceivedCommands+0x68>
    3992:	ba c0       	rjmp	.+372    	; 0x3b08 <prvProcessReceivedCommands+0x1dc>
    3994:	8f 85       	ldd	r24, Y+15	; 0x0f
    3996:	98 89       	ldd	r25, Y+16	; 0x10
    3998:	8b 83       	std	Y+3, r24	; 0x03
    399a:	9c 83       	std	Y+4, r25	; 0x04
    399c:	8b 81       	ldd	r24, Y+3	; 0x03
    399e:	9c 81       	ldd	r25, Y+4	; 0x04
    39a0:	fc 01       	movw	r30, r24
    39a2:	84 85       	ldd	r24, Z+12	; 0x0c
    39a4:	95 85       	ldd	r25, Z+13	; 0x0d
    39a6:	89 2b       	or	r24, r25
    39a8:	29 f0       	breq	.+10     	; 0x39b4 <prvProcessReceivedCommands+0x88>
    39aa:	8b 81       	ldd	r24, Y+3	; 0x03
    39ac:	9c 81       	ldd	r25, Y+4	; 0x04
    39ae:	02 96       	adiw	r24, 0x02	; 2
    39b0:	0e 94 89 07 	call	0xf12	; 0xf12 <uxListRemove>
    39b4:	ce 01       	movw	r24, r28
    39b6:	43 96       	adiw	r24, 0x13	; 19
    39b8:	0e 94 b8 1b 	call	0x3770	; 0x3770 <prvSampleTimeNow>
    39bc:	dc 01       	movw	r26, r24
    39be:	cb 01       	movw	r24, r22
    39c0:	8d 83       	std	Y+5, r24	; 0x05
    39c2:	9e 83       	std	Y+6, r25	; 0x06
    39c4:	af 83       	std	Y+7, r26	; 0x07
    39c6:	b8 87       	std	Y+8, r27	; 0x08
    39c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    39ca:	08 2e       	mov	r0, r24
    39cc:	00 0c       	add	r0, r0
    39ce:	99 0b       	sbc	r25, r25
    39d0:	09 2e       	mov	r0, r25
    39d2:	00 0c       	add	r0, r0
    39d4:	aa 0b       	sbc	r26, r26
    39d6:	bb 0b       	sbc	r27, r27
    39d8:	40 e0       	ldi	r20, 0x00	; 0
    39da:	50 e0       	ldi	r21, 0x00	; 0
    39dc:	29 e0       	ldi	r18, 0x09	; 9
    39de:	30 e0       	ldi	r19, 0x00	; 0
    39e0:	84 1b       	sub	r24, r20
    39e2:	95 0b       	sbc	r25, r21
    39e4:	28 17       	cp	r18, r24
    39e6:	39 07       	cpc	r19, r25
    39e8:	08 f4       	brcc	.+2      	; 0x39ec <prvProcessReceivedCommands+0xc0>
    39ea:	8d c0       	rjmp	.+282    	; 0x3b06 <prvProcessReceivedCommands+0x1da>
    39ec:	fc 01       	movw	r30, r24
    39ee:	88 27       	eor	r24, r24
    39f0:	e2 50       	subi	r30, 0x02	; 2
    39f2:	ff 4f       	sbci	r31, 0xFF	; 255
    39f4:	8f 4f       	sbci	r24, 0xFF	; 255
    39f6:	0c 94 34 2d 	jmp	0x5a68	; 0x5a68 <__tablejump2__>
    39fa:	eb 84       	ldd	r14, Y+11	; 0x0b
    39fc:	fc 84       	ldd	r15, Y+12	; 0x0c
    39fe:	0d 85       	ldd	r16, Y+13	; 0x0d
    3a00:	1e 85       	ldd	r17, Y+14	; 0x0e
    3a02:	2b 85       	ldd	r18, Y+11	; 0x0b
    3a04:	3c 85       	ldd	r19, Y+12	; 0x0c
    3a06:	4d 85       	ldd	r20, Y+13	; 0x0d
    3a08:	5e 85       	ldd	r21, Y+14	; 0x0e
    3a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a0e:	fc 01       	movw	r30, r24
    3a10:	86 85       	ldd	r24, Z+14	; 0x0e
    3a12:	97 85       	ldd	r25, Z+15	; 0x0f
    3a14:	a0 89       	ldd	r26, Z+16	; 0x10
    3a16:	b1 89       	ldd	r27, Z+17	; 0x11
    3a18:	82 0f       	add	r24, r18
    3a1a:	93 1f       	adc	r25, r19
    3a1c:	a4 1f       	adc	r26, r20
    3a1e:	b5 1f       	adc	r27, r21
    3a20:	2d 81       	ldd	r18, Y+5	; 0x05
    3a22:	3e 81       	ldd	r19, Y+6	; 0x06
    3a24:	4f 81       	ldd	r20, Y+7	; 0x07
    3a26:	58 85       	ldd	r21, Y+8	; 0x08
    3a28:	eb 81       	ldd	r30, Y+3	; 0x03
    3a2a:	fc 81       	ldd	r31, Y+4	; 0x04
    3a2c:	67 01       	movw	r12, r14
    3a2e:	78 01       	movw	r14, r16
    3a30:	89 01       	movw	r16, r18
    3a32:	9a 01       	movw	r18, r20
    3a34:	ac 01       	movw	r20, r24
    3a36:	bd 01       	movw	r22, r26
    3a38:	cf 01       	movw	r24, r30
    3a3a:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <prvInsertTimerInActiveList>
    3a3e:	88 23       	and	r24, r24
    3a40:	09 f4       	brne	.+2      	; 0x3a44 <prvProcessReceivedCommands+0x118>
    3a42:	62 c0       	rjmp	.+196    	; 0x3b08 <prvProcessReceivedCommands+0x1dc>
    3a44:	8b 81       	ldd	r24, Y+3	; 0x03
    3a46:	9c 81       	ldd	r25, Y+4	; 0x04
    3a48:	fc 01       	movw	r30, r24
    3a4a:	25 89       	ldd	r18, Z+21	; 0x15
    3a4c:	36 89       	ldd	r19, Z+22	; 0x16
    3a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a50:	9c 81       	ldd	r25, Y+4	; 0x04
    3a52:	f9 01       	movw	r30, r18
    3a54:	19 95       	eicall
    3a56:	8b 81       	ldd	r24, Y+3	; 0x03
    3a58:	9c 81       	ldd	r25, Y+4	; 0x04
    3a5a:	fc 01       	movw	r30, r24
    3a5c:	82 89       	ldd	r24, Z+18	; 0x12
    3a5e:	81 30       	cpi	r24, 0x01	; 1
    3a60:	09 f0       	breq	.+2      	; 0x3a64 <prvProcessReceivedCommands+0x138>
    3a62:	52 c0       	rjmp	.+164    	; 0x3b08 <prvProcessReceivedCommands+0x1dc>
    3a64:	2b 85       	ldd	r18, Y+11	; 0x0b
    3a66:	3c 85       	ldd	r19, Y+12	; 0x0c
    3a68:	4d 85       	ldd	r20, Y+13	; 0x0d
    3a6a:	5e 85       	ldd	r21, Y+14	; 0x0e
    3a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a70:	fc 01       	movw	r30, r24
    3a72:	86 85       	ldd	r24, Z+14	; 0x0e
    3a74:	97 85       	ldd	r25, Z+15	; 0x0f
    3a76:	a0 89       	ldd	r26, Z+16	; 0x10
    3a78:	b1 89       	ldd	r27, Z+17	; 0x11
    3a7a:	82 0f       	add	r24, r18
    3a7c:	93 1f       	adc	r25, r19
    3a7e:	a4 1f       	adc	r26, r20
    3a80:	b5 1f       	adc	r27, r21
    3a82:	eb 81       	ldd	r30, Y+3	; 0x03
    3a84:	fc 81       	ldd	r31, Y+4	; 0x04
    3a86:	c1 2c       	mov	r12, r1
    3a88:	d1 2c       	mov	r13, r1
    3a8a:	76 01       	movw	r14, r12
    3a8c:	00 e0       	ldi	r16, 0x00	; 0
    3a8e:	10 e0       	ldi	r17, 0x00	; 0
    3a90:	9c 01       	movw	r18, r24
    3a92:	ad 01       	movw	r20, r26
    3a94:	60 e0       	ldi	r22, 0x00	; 0
    3a96:	cf 01       	movw	r24, r30
    3a98:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <xTimerGenericCommand>
    3a9c:	89 87       	std	Y+9, r24	; 0x09
    3a9e:	34 c0       	rjmp	.+104    	; 0x3b08 <prvProcessReceivedCommands+0x1dc>
    3aa0:	8b 85       	ldd	r24, Y+11	; 0x0b
    3aa2:	9c 85       	ldd	r25, Y+12	; 0x0c
    3aa4:	ad 85       	ldd	r26, Y+13	; 0x0d
    3aa6:	be 85       	ldd	r27, Y+14	; 0x0e
    3aa8:	2b 81       	ldd	r18, Y+3	; 0x03
    3aaa:	3c 81       	ldd	r19, Y+4	; 0x04
    3aac:	f9 01       	movw	r30, r18
    3aae:	86 87       	std	Z+14, r24	; 0x0e
    3ab0:	97 87       	std	Z+15, r25	; 0x0f
    3ab2:	a0 8b       	std	Z+16, r26	; 0x10
    3ab4:	b1 8b       	std	Z+17, r27	; 0x11
    3ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    3aba:	fc 01       	movw	r30, r24
    3abc:	26 85       	ldd	r18, Z+14	; 0x0e
    3abe:	37 85       	ldd	r19, Z+15	; 0x0f
    3ac0:	40 89       	ldd	r20, Z+16	; 0x10
    3ac2:	51 89       	ldd	r21, Z+17	; 0x11
    3ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac8:	af 81       	ldd	r26, Y+7	; 0x07
    3aca:	b8 85       	ldd	r27, Y+8	; 0x08
    3acc:	82 0f       	add	r24, r18
    3ace:	93 1f       	adc	r25, r19
    3ad0:	a4 1f       	adc	r26, r20
    3ad2:	b5 1f       	adc	r27, r21
    3ad4:	ed 80       	ldd	r14, Y+5	; 0x05
    3ad6:	fe 80       	ldd	r15, Y+6	; 0x06
    3ad8:	0f 81       	ldd	r16, Y+7	; 0x07
    3ada:	18 85       	ldd	r17, Y+8	; 0x08
    3adc:	2d 81       	ldd	r18, Y+5	; 0x05
    3ade:	3e 81       	ldd	r19, Y+6	; 0x06
    3ae0:	4f 81       	ldd	r20, Y+7	; 0x07
    3ae2:	58 85       	ldd	r21, Y+8	; 0x08
    3ae4:	eb 81       	ldd	r30, Y+3	; 0x03
    3ae6:	fc 81       	ldd	r31, Y+4	; 0x04
    3ae8:	67 01       	movw	r12, r14
    3aea:	78 01       	movw	r14, r16
    3aec:	89 01       	movw	r16, r18
    3aee:	9a 01       	movw	r18, r20
    3af0:	ac 01       	movw	r20, r24
    3af2:	bd 01       	movw	r22, r26
    3af4:	cf 01       	movw	r24, r30
    3af6:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <prvInsertTimerInActiveList>
    3afa:	06 c0       	rjmp	.+12     	; 0x3b08 <prvProcessReceivedCommands+0x1dc>
    3afc:	8b 81       	ldd	r24, Y+3	; 0x03
    3afe:	9c 81       	ldd	r25, Y+4	; 0x04
    3b00:	0e 94 62 06 	call	0xcc4	; 0xcc4 <vPortFree>
    3b04:	01 c0       	rjmp	.+2      	; 0x3b08 <prvProcessReceivedCommands+0x1dc>
    3b06:	00 00       	nop
    3b08:	80 91 90 2c 	lds	r24, 0x2C90	; 0x802c90 <xTimerQueue>
    3b0c:	90 91 91 2c 	lds	r25, 0x2C91	; 0x802c91 <xTimerQueue+0x1>
    3b10:	be 01       	movw	r22, r28
    3b12:	66 5f       	subi	r22, 0xF6	; 246
    3b14:	7f 4f       	sbci	r23, 0xFF	; 255
    3b16:	20 e0       	ldi	r18, 0x00	; 0
    3b18:	30 e0       	ldi	r19, 0x00	; 0
    3b1a:	a9 01       	movw	r20, r18
    3b1c:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <xQueueReceive>
    3b20:	88 23       	and	r24, r24
    3b22:	09 f0       	breq	.+2      	; 0x3b26 <prvProcessReceivedCommands+0x1fa>
    3b24:	11 cf       	rjmp	.-478    	; 0x3948 <prvProcessReceivedCommands+0x1c>
    3b26:	00 00       	nop
    3b28:	65 96       	adiw	r28, 0x15	; 21
    3b2a:	cd bf       	out	0x3d, r28	; 61
    3b2c:	de bf       	out	0x3e, r29	; 62
    3b2e:	df 91       	pop	r29
    3b30:	cf 91       	pop	r28
    3b32:	1f 91       	pop	r17
    3b34:	0f 91       	pop	r16
    3b36:	ff 90       	pop	r15
    3b38:	ef 90       	pop	r14
    3b3a:	df 90       	pop	r13
    3b3c:	cf 90       	pop	r12
    3b3e:	08 95       	ret

00003b40 <prvSwitchTimerLists>:
    3b40:	cf 92       	push	r12
    3b42:	df 92       	push	r13
    3b44:	ef 92       	push	r14
    3b46:	ff 92       	push	r15
    3b48:	0f 93       	push	r16
    3b4a:	1f 93       	push	r17
    3b4c:	cf 93       	push	r28
    3b4e:	df 93       	push	r29
    3b50:	cd b7       	in	r28, 0x3d	; 61
    3b52:	de b7       	in	r29, 0x3e	; 62
    3b54:	2d 97       	sbiw	r28, 0x0d	; 13
    3b56:	cd bf       	out	0x3d, r28	; 61
    3b58:	de bf       	out	0x3e, r29	; 62
    3b5a:	82 c0       	rjmp	.+260    	; 0x3c60 <prvSwitchTimerLists+0x120>
    3b5c:	80 91 8c 2c 	lds	r24, 0x2C8C	; 0x802c8c <pxCurrentTimerList>
    3b60:	90 91 8d 2c 	lds	r25, 0x2C8D	; 0x802c8d <pxCurrentTimerList+0x1>
    3b64:	fc 01       	movw	r30, r24
    3b66:	87 81       	ldd	r24, Z+7	; 0x07
    3b68:	90 85       	ldd	r25, Z+8	; 0x08
    3b6a:	fc 01       	movw	r30, r24
    3b6c:	80 81       	ld	r24, Z
    3b6e:	91 81       	ldd	r25, Z+1	; 0x01
    3b70:	a2 81       	ldd	r26, Z+2	; 0x02
    3b72:	b3 81       	ldd	r27, Z+3	; 0x03
    3b74:	89 83       	std	Y+1, r24	; 0x01
    3b76:	9a 83       	std	Y+2, r25	; 0x02
    3b78:	ab 83       	std	Y+3, r26	; 0x03
    3b7a:	bc 83       	std	Y+4, r27	; 0x04
    3b7c:	80 91 8c 2c 	lds	r24, 0x2C8C	; 0x802c8c <pxCurrentTimerList>
    3b80:	90 91 8d 2c 	lds	r25, 0x2C8D	; 0x802c8d <pxCurrentTimerList+0x1>
    3b84:	fc 01       	movw	r30, r24
    3b86:	87 81       	ldd	r24, Z+7	; 0x07
    3b88:	90 85       	ldd	r25, Z+8	; 0x08
    3b8a:	fc 01       	movw	r30, r24
    3b8c:	80 85       	ldd	r24, Z+8	; 0x08
    3b8e:	91 85       	ldd	r25, Z+9	; 0x09
    3b90:	8d 83       	std	Y+5, r24	; 0x05
    3b92:	9e 83       	std	Y+6, r25	; 0x06
    3b94:	8d 81       	ldd	r24, Y+5	; 0x05
    3b96:	9e 81       	ldd	r25, Y+6	; 0x06
    3b98:	02 96       	adiw	r24, 0x02	; 2
    3b9a:	0e 94 89 07 	call	0xf12	; 0xf12 <uxListRemove>
    3b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba2:	fc 01       	movw	r30, r24
    3ba4:	25 89       	ldd	r18, Z+21	; 0x15
    3ba6:	36 89       	ldd	r19, Z+22	; 0x16
    3ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    3baa:	9e 81       	ldd	r25, Y+6	; 0x06
    3bac:	f9 01       	movw	r30, r18
    3bae:	19 95       	eicall
    3bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    3bb4:	fc 01       	movw	r30, r24
    3bb6:	82 89       	ldd	r24, Z+18	; 0x12
    3bb8:	81 30       	cpi	r24, 0x01	; 1
    3bba:	09 f0       	breq	.+2      	; 0x3bbe <prvSwitchTimerLists+0x7e>
    3bbc:	51 c0       	rjmp	.+162    	; 0x3c60 <prvSwitchTimerLists+0x120>
    3bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    3bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    3bc2:	fc 01       	movw	r30, r24
    3bc4:	26 85       	ldd	r18, Z+14	; 0x0e
    3bc6:	37 85       	ldd	r19, Z+15	; 0x0f
    3bc8:	40 89       	ldd	r20, Z+16	; 0x10
    3bca:	51 89       	ldd	r21, Z+17	; 0x11
    3bcc:	89 81       	ldd	r24, Y+1	; 0x01
    3bce:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd0:	ab 81       	ldd	r26, Y+3	; 0x03
    3bd2:	bc 81       	ldd	r27, Y+4	; 0x04
    3bd4:	82 0f       	add	r24, r18
    3bd6:	93 1f       	adc	r25, r19
    3bd8:	a4 1f       	adc	r26, r20
    3bda:	b5 1f       	adc	r27, r21
    3bdc:	8f 83       	std	Y+7, r24	; 0x07
    3bde:	98 87       	std	Y+8, r25	; 0x08
    3be0:	a9 87       	std	Y+9, r26	; 0x09
    3be2:	ba 87       	std	Y+10, r27	; 0x0a
    3be4:	2f 81       	ldd	r18, Y+7	; 0x07
    3be6:	38 85       	ldd	r19, Y+8	; 0x08
    3be8:	49 85       	ldd	r20, Y+9	; 0x09
    3bea:	5a 85       	ldd	r21, Y+10	; 0x0a
    3bec:	89 81       	ldd	r24, Y+1	; 0x01
    3bee:	9a 81       	ldd	r25, Y+2	; 0x02
    3bf0:	ab 81       	ldd	r26, Y+3	; 0x03
    3bf2:	bc 81       	ldd	r27, Y+4	; 0x04
    3bf4:	82 17       	cp	r24, r18
    3bf6:	93 07       	cpc	r25, r19
    3bf8:	a4 07       	cpc	r26, r20
    3bfa:	b5 07       	cpc	r27, r21
    3bfc:	f8 f4       	brcc	.+62     	; 0x3c3c <prvSwitchTimerLists+0xfc>
    3bfe:	2d 81       	ldd	r18, Y+5	; 0x05
    3c00:	3e 81       	ldd	r19, Y+6	; 0x06
    3c02:	8f 81       	ldd	r24, Y+7	; 0x07
    3c04:	98 85       	ldd	r25, Y+8	; 0x08
    3c06:	a9 85       	ldd	r26, Y+9	; 0x09
    3c08:	ba 85       	ldd	r27, Y+10	; 0x0a
    3c0a:	f9 01       	movw	r30, r18
    3c0c:	82 83       	std	Z+2, r24	; 0x02
    3c0e:	93 83       	std	Z+3, r25	; 0x03
    3c10:	a4 83       	std	Z+4, r26	; 0x04
    3c12:	b5 83       	std	Z+5, r27	; 0x05
    3c14:	8d 81       	ldd	r24, Y+5	; 0x05
    3c16:	9e 81       	ldd	r25, Y+6	; 0x06
    3c18:	2d 81       	ldd	r18, Y+5	; 0x05
    3c1a:	3e 81       	ldd	r19, Y+6	; 0x06
    3c1c:	fc 01       	movw	r30, r24
    3c1e:	22 87       	std	Z+10, r18	; 0x0a
    3c20:	33 87       	std	Z+11, r19	; 0x0b
    3c22:	8d 81       	ldd	r24, Y+5	; 0x05
    3c24:	9e 81       	ldd	r25, Y+6	; 0x06
    3c26:	9c 01       	movw	r18, r24
    3c28:	2e 5f       	subi	r18, 0xFE	; 254
    3c2a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c2c:	80 91 8c 2c 	lds	r24, 0x2C8C	; 0x802c8c <pxCurrentTimerList>
    3c30:	90 91 8d 2c 	lds	r25, 0x2C8D	; 0x802c8d <pxCurrentTimerList+0x1>
    3c34:	b9 01       	movw	r22, r18
    3c36:	0e 94 08 07 	call	0xe10	; 0xe10 <vListInsert>
    3c3a:	12 c0       	rjmp	.+36     	; 0x3c60 <prvSwitchTimerLists+0x120>
    3c3c:	89 81       	ldd	r24, Y+1	; 0x01
    3c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c40:	ab 81       	ldd	r26, Y+3	; 0x03
    3c42:	bc 81       	ldd	r27, Y+4	; 0x04
    3c44:	ed 81       	ldd	r30, Y+5	; 0x05
    3c46:	fe 81       	ldd	r31, Y+6	; 0x06
    3c48:	c1 2c       	mov	r12, r1
    3c4a:	d1 2c       	mov	r13, r1
    3c4c:	76 01       	movw	r14, r12
    3c4e:	00 e0       	ldi	r16, 0x00	; 0
    3c50:	10 e0       	ldi	r17, 0x00	; 0
    3c52:	9c 01       	movw	r18, r24
    3c54:	ad 01       	movw	r20, r26
    3c56:	60 e0       	ldi	r22, 0x00	; 0
    3c58:	cf 01       	movw	r24, r30
    3c5a:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <xTimerGenericCommand>
    3c5e:	8b 87       	std	Y+11, r24	; 0x0b
    3c60:	80 91 8c 2c 	lds	r24, 0x2C8C	; 0x802c8c <pxCurrentTimerList>
    3c64:	90 91 8d 2c 	lds	r25, 0x2C8D	; 0x802c8d <pxCurrentTimerList+0x1>
    3c68:	fc 01       	movw	r30, r24
    3c6a:	80 81       	ld	r24, Z
    3c6c:	88 23       	and	r24, r24
    3c6e:	09 f0       	breq	.+2      	; 0x3c72 <prvSwitchTimerLists+0x132>
    3c70:	75 cf       	rjmp	.-278    	; 0x3b5c <prvSwitchTimerLists+0x1c>
    3c72:	80 91 8c 2c 	lds	r24, 0x2C8C	; 0x802c8c <pxCurrentTimerList>
    3c76:	90 91 8d 2c 	lds	r25, 0x2C8D	; 0x802c8d <pxCurrentTimerList+0x1>
    3c7a:	8c 87       	std	Y+12, r24	; 0x0c
    3c7c:	9d 87       	std	Y+13, r25	; 0x0d
    3c7e:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <pxOverflowTimerList>
    3c82:	90 91 8f 2c 	lds	r25, 0x2C8F	; 0x802c8f <pxOverflowTimerList+0x1>
    3c86:	80 93 8c 2c 	sts	0x2C8C, r24	; 0x802c8c <pxCurrentTimerList>
    3c8a:	90 93 8d 2c 	sts	0x2C8D, r25	; 0x802c8d <pxCurrentTimerList+0x1>
    3c8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c90:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c92:	80 93 8e 2c 	sts	0x2C8E, r24	; 0x802c8e <pxOverflowTimerList>
    3c96:	90 93 8f 2c 	sts	0x2C8F, r25	; 0x802c8f <pxOverflowTimerList+0x1>
    3c9a:	00 00       	nop
    3c9c:	2d 96       	adiw	r28, 0x0d	; 13
    3c9e:	cd bf       	out	0x3d, r28	; 61
    3ca0:	de bf       	out	0x3e, r29	; 62
    3ca2:	df 91       	pop	r29
    3ca4:	cf 91       	pop	r28
    3ca6:	1f 91       	pop	r17
    3ca8:	0f 91       	pop	r16
    3caa:	ff 90       	pop	r15
    3cac:	ef 90       	pop	r14
    3cae:	df 90       	pop	r13
    3cb0:	cf 90       	pop	r12
    3cb2:	08 95       	ret

00003cb4 <prvCheckForValidListAndQueue>:
    3cb4:	cf 93       	push	r28
    3cb6:	df 93       	push	r29
    3cb8:	cd b7       	in	r28, 0x3d	; 61
    3cba:	de b7       	in	r29, 0x3e	; 62
    3cbc:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    3cc0:	ff 93       	push	r31
    3cc2:	f8 7f       	andi	r31, 0xF8	; 248
    3cc4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    3cc8:	80 91 90 2c 	lds	r24, 0x2C90	; 0x802c90 <xTimerQueue>
    3ccc:	90 91 91 2c 	lds	r25, 0x2C91	; 0x802c91 <xTimerQueue+0x1>
    3cd0:	89 2b       	or	r24, r25
    3cd2:	e9 f4       	brne	.+58     	; 0x3d0e <prvCheckForValidListAndQueue+0x5a>
    3cd4:	86 e7       	ldi	r24, 0x76	; 118
    3cd6:	9c e2       	ldi	r25, 0x2C	; 44
    3cd8:	0e 94 70 06 	call	0xce0	; 0xce0 <vListInitialise>
    3cdc:	81 e8       	ldi	r24, 0x81	; 129
    3cde:	9c e2       	ldi	r25, 0x2C	; 44
    3ce0:	0e 94 70 06 	call	0xce0	; 0xce0 <vListInitialise>
    3ce4:	86 e7       	ldi	r24, 0x76	; 118
    3ce6:	9c e2       	ldi	r25, 0x2C	; 44
    3ce8:	80 93 8c 2c 	sts	0x2C8C, r24	; 0x802c8c <pxCurrentTimerList>
    3cec:	90 93 8d 2c 	sts	0x2C8D, r25	; 0x802c8d <pxCurrentTimerList+0x1>
    3cf0:	81 e8       	ldi	r24, 0x81	; 129
    3cf2:	9c e2       	ldi	r25, 0x2C	; 44
    3cf4:	80 93 8e 2c 	sts	0x2C8E, r24	; 0x802c8e <pxOverflowTimerList>
    3cf8:	90 93 8f 2c 	sts	0x2C8F, r25	; 0x802c8f <pxOverflowTimerList+0x1>
    3cfc:	40 e0       	ldi	r20, 0x00	; 0
    3cfe:	69 e0       	ldi	r22, 0x09	; 9
    3d00:	85 e0       	ldi	r24, 0x05	; 5
    3d02:	0e 94 ed 0b 	call	0x17da	; 0x17da <xQueueGenericCreate>
    3d06:	80 93 90 2c 	sts	0x2C90, r24	; 0x802c90 <xTimerQueue>
    3d0a:	90 93 91 2c 	sts	0x2C91, r25	; 0x802c91 <xTimerQueue+0x1>
    3d0e:	ff 91       	pop	r31
    3d10:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    3d14:	00 00       	nop
    3d16:	df 91       	pop	r29
    3d18:	cf 91       	pop	r28
    3d1a:	08 95       	ret

00003d1c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    3d1c:	0f 93       	push	r16
    3d1e:	1f 93       	push	r17
    3d20:	cf 93       	push	r28
    3d22:	df 93       	push	r29
    3d24:	cd b7       	in	r28, 0x3d	; 61
    3d26:	de b7       	in	r29, 0x3e	; 62
    3d28:	64 97       	sbiw	r28, 0x14	; 20
    3d2a:	cd bf       	out	0x3d, r28	; 61
    3d2c:	de bf       	out	0x3e, r29	; 62
    3d2e:	8b 87       	std	Y+11, r24	; 0x0b
    3d30:	9c 87       	std	Y+12, r25	; 0x0c
    3d32:	6d 87       	std	Y+13, r22	; 0x0d
    3d34:	7e 87       	std	Y+14, r23	; 0x0e
    3d36:	2f 87       	std	Y+15, r18	; 0x0f
    3d38:	38 8b       	std	Y+16, r19	; 0x10
    3d3a:	49 8b       	std	Y+17, r20	; 0x11
    3d3c:	5a 8b       	std	Y+18, r21	; 0x12
    3d3e:	0b 8b       	std	Y+19, r16	; 0x13
    3d40:	1c 8b       	std	Y+20, r17	; 0x14
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    3d42:	8e ef       	ldi	r24, 0xFE	; 254
    3d44:	8a 83       	std	Y+2, r24	; 0x02
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    3d46:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d48:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d4a:	8b 83       	std	Y+3, r24	; 0x03
    3d4c:	9c 83       	std	Y+4, r25	; 0x04
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    3d4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d50:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d52:	8d 83       	std	Y+5, r24	; 0x05
    3d54:	9e 83       	std	Y+6, r25	; 0x06
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    3d56:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d58:	98 89       	ldd	r25, Y+16	; 0x10
    3d5a:	a9 89       	ldd	r26, Y+17	; 0x11
    3d5c:	ba 89       	ldd	r27, Y+18	; 0x12
    3d5e:	8f 83       	std	Y+7, r24	; 0x07
    3d60:	98 87       	std	Y+8, r25	; 0x08
    3d62:	a9 87       	std	Y+9, r26	; 0x09
    3d64:	ba 87       	std	Y+10, r27	; 0x0a

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3d66:	80 91 90 2c 	lds	r24, 0x2C90	; 0x802c90 <xTimerQueue>
    3d6a:	90 91 91 2c 	lds	r25, 0x2C91	; 0x802c91 <xTimerQueue+0x1>
    3d6e:	4b 89       	ldd	r20, Y+19	; 0x13
    3d70:	5c 89       	ldd	r21, Y+20	; 0x14
    3d72:	be 01       	movw	r22, r28
    3d74:	6e 5f       	subi	r22, 0xFE	; 254
    3d76:	7f 4f       	sbci	r23, 0xFF	; 255
    3d78:	20 e0       	ldi	r18, 0x00	; 0
    3d7a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xQueueGenericSendFromISR>
    3d7e:	89 83       	std	Y+1, r24	; 0x01

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
    3d80:	89 81       	ldd	r24, Y+1	; 0x01
	}
    3d82:	64 96       	adiw	r28, 0x14	; 20
    3d84:	cd bf       	out	0x3d, r28	; 61
    3d86:	de bf       	out	0x3e, r29	; 62
    3d88:	df 91       	pop	r29
    3d8a:	cf 91       	pop	r28
    3d8c:	1f 91       	pop	r17
    3d8e:	0f 91       	pop	r16
    3d90:	08 95       	ret

00003d92 <vInitClock>:
#include "init.h"
#include "clksys_driver.h"


void vInitClock(void)
{
    3d92:	cf 93       	push	r28
    3d94:	df 93       	push	r29
    3d96:	cd b7       	in	r28, 0x3d	; 61
    3d98:	de b7       	in	r29, 0x3e	; 62
	CLKSYS_Enable( OSC_RC2MEN_bm );
    3d9a:	80 e5       	ldi	r24, 0x50	; 80
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	20 e5       	ldi	r18, 0x50	; 80
    3da0:	30 e0       	ldi	r19, 0x00	; 0
    3da2:	f9 01       	movw	r30, r18
    3da4:	20 81       	ld	r18, Z
    3da6:	21 60       	ori	r18, 0x01	; 1
    3da8:	fc 01       	movw	r30, r24
    3daa:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    3dac:	80 e5       	ldi	r24, 0x50	; 80
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	fc 01       	movw	r30, r24
    3db2:	81 81       	ldd	r24, Z+1	; 0x01
    3db4:	88 2f       	mov	r24, r24
    3db6:	90 e0       	ldi	r25, 0x00	; 0
    3db8:	81 70       	andi	r24, 0x01	; 1
    3dba:	99 27       	eor	r25, r25
    3dbc:	89 2b       	or	r24, r25
    3dbe:	b1 f3       	breq	.-20     	; 0x3dac <vInitClock+0x1a>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    3dc0:	80 e0       	ldi	r24, 0x00	; 0
    3dc2:	0e 94 21 02 	call	0x442	; 0x442 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    3dc6:	8e e1       	ldi	r24, 0x1E	; 30
    3dc8:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    3dcc:	60 e0       	ldi	r22, 0x00	; 0
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	0e 94 0a 02 	call	0x414	; 0x414 <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    3dd4:	43 e0       	ldi	r20, 0x03	; 3
    3dd6:	60 e0       	ldi	r22, 0x00	; 0
    3dd8:	80 e4       	ldi	r24, 0x40	; 64
    3dda:	0e 94 b5 01 	call	0x36a	; 0x36a <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    3dde:	80 e5       	ldi	r24, 0x50	; 80
    3de0:	90 e0       	ldi	r25, 0x00	; 0
    3de2:	20 e5       	ldi	r18, 0x50	; 80
    3de4:	30 e0       	ldi	r19, 0x00	; 0
    3de6:	f9 01       	movw	r30, r18
    3de8:	20 81       	ld	r18, Z
    3dea:	28 60       	ori	r18, 0x08	; 8
    3dec:	fc 01       	movw	r30, r24
    3dee:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    3df0:	80 e5       	ldi	r24, 0x50	; 80
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	fc 01       	movw	r30, r24
    3df6:	81 81       	ldd	r24, Z+1	; 0x01
    3df8:	88 2f       	mov	r24, r24
    3dfa:	90 e0       	ldi	r25, 0x00	; 0
    3dfc:	88 70       	andi	r24, 0x08	; 8
    3dfe:	99 27       	eor	r25, r25
    3e00:	89 2b       	or	r24, r25
    3e02:	b1 f3       	breq	.-20     	; 0x3df0 <vInitClock+0x5e>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    3e04:	64 e0       	ldi	r22, 0x04	; 4
    3e06:	80 ec       	ldi	r24, 0xC0	; 192
    3e08:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    3e0c:	80 e5       	ldi	r24, 0x50	; 80
    3e0e:	90 e0       	ldi	r25, 0x00	; 0
    3e10:	20 e5       	ldi	r18, 0x50	; 80
    3e12:	30 e0       	ldi	r19, 0x00	; 0
    3e14:	f9 01       	movw	r30, r18
    3e16:	20 81       	ld	r18, Z
    3e18:	20 61       	ori	r18, 0x10	; 16
    3e1a:	fc 01       	movw	r30, r24
    3e1c:	20 83       	st	Z, r18
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    3e1e:	60 e0       	ldi	r22, 0x00	; 0
    3e20:	80 e0       	ldi	r24, 0x00	; 0
    3e22:	0e 94 0a 02 	call	0x414	; 0x414 <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    3e26:	80 e5       	ldi	r24, 0x50	; 80
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	fc 01       	movw	r30, r24
    3e2c:	81 81       	ldd	r24, Z+1	; 0x01
    3e2e:	88 2f       	mov	r24, r24
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	80 71       	andi	r24, 0x10	; 16
    3e34:	99 27       	eor	r25, r25
    3e36:	89 2b       	or	r24, r25
    3e38:	b1 f3       	breq	.-20     	; 0x3e26 <vInitClock+0x94>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    3e3a:	84 e0       	ldi	r24, 0x04	; 4
    3e3c:	0e 94 21 02 	call	0x442	; 0x442 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    3e40:	87 e0       	ldi	r24, 0x07	; 7
    3e42:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <CLKSYS_Disable>
    3e46:	00 00       	nop
    3e48:	df 91       	pop	r29
    3e4a:	cf 91       	pop	r28
    3e4c:	08 95       	ret

00003e4e <vApplicationIdleHook>:

// 3.14159265358979323846264338327950288419716939937510 = PI
//math.h nutzbar zur kontrolle

void vApplicationIdleHook( void )
{	
    3e4e:	cf 93       	push	r28
    3e50:	df 93       	push	r29
    3e52:	cd b7       	in	r28, 0x3d	; 61
    3e54:	de b7       	in	r29, 0x3e	; 62
	
}
    3e56:	00 00       	nop
    3e58:	df 91       	pop	r29
    3e5a:	cf 91       	pop	r28
    3e5c:	08 95       	ret

00003e5e <main>:

int main(void)
{
    3e5e:	ef 92       	push	r14
    3e60:	ff 92       	push	r15
    3e62:	0f 93       	push	r16
    3e64:	cf 93       	push	r28
    3e66:	df 93       	push	r29
    3e68:	cd b7       	in	r28, 0x3d	; 61
    3e6a:	de b7       	in	r29, 0x3e	; 62
	vInitClock();
    3e6c:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <vInitClock>
	vInitDisplay();
    3e70:	0e 94 cd 21 	call	0x439a	; 0x439a <vInitDisplay>

	evButtonEvents = xEventGroupCreate();
    3e74:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <xEventGroupCreate>
    3e78:	80 93 c5 2c 	sts	0x2CC5, r24	; 0x802cc5 <evButtonEvents>
    3e7c:	90 93 c6 2c 	sts	0x2CC6, r25	; 0x802cc6 <evButtonEvents+0x1>
	
	xTaskCreate(vInterface, (const char*) "Interface-Task", configMINIMAL_STACK_SIZE+100, NULL, 2, NULL);
    3e80:	e1 2c       	mov	r14, r1
    3e82:	f1 2c       	mov	r15, r1
    3e84:	02 e0       	ldi	r16, 0x02	; 2
    3e86:	20 e0       	ldi	r18, 0x00	; 0
    3e88:	30 e0       	ldi	r19, 0x00	; 0
    3e8a:	4c e2       	ldi	r20, 0x2C	; 44
    3e8c:	51 e0       	ldi	r21, 0x01	; 1
    3e8e:	6d e0       	ldi	r22, 0x0D	; 13
    3e90:	70 e2       	ldi	r23, 0x20	; 32
    3e92:	84 e6       	ldi	r24, 0x64	; 100
    3e94:	9f e1       	ldi	r25, 0x1F	; 31
    3e96:	0e 94 6e 10 	call	0x20dc	; 0x20dc <xTaskCreate>
	xTaskCreate(vLeibniz, (const char *) "Leibniz-Folge-Task", configMINIMAL_STACK_SIZE+10, NULL, 1, NULL);/*
    3e9a:	e1 2c       	mov	r14, r1
    3e9c:	f1 2c       	mov	r15, r1
    3e9e:	01 e0       	ldi	r16, 0x01	; 1
    3ea0:	20 e0       	ldi	r18, 0x00	; 0
    3ea2:	30 e0       	ldi	r19, 0x00	; 0
    3ea4:	42 ed       	ldi	r20, 0xD2	; 210
    3ea6:	50 e0       	ldi	r21, 0x00	; 0
    3ea8:	6c e1       	ldi	r22, 0x1C	; 28
    3eaa:	70 e2       	ldi	r23, 0x20	; 32
    3eac:	85 eb       	ldi	r24, 0xB5	; 181
    3eae:	9f e1       	ldi	r25, 0x1F	; 31
    3eb0:	0e 94 6e 10 	call	0x20dc	; 0x20dc <xTaskCreate>
	xTaskCreate(vNilakantha, (const char *) "Nilakantha-Folge-Task", configMINIMAL_STACK_SIZE+10, NULL, 1, NULL);*/


	vTaskStartScheduler();
    3eb4:	0e 94 05 13 	call	0x260a	; 0x260a <vTaskStartScheduler>

	return 0;
    3eb8:	80 e0       	ldi	r24, 0x00	; 0
    3eba:	90 e0       	ldi	r25, 0x00	; 0
}
    3ebc:	df 91       	pop	r29
    3ebe:	cf 91       	pop	r28
    3ec0:	0f 91       	pop	r16
    3ec2:	ff 90       	pop	r15
    3ec4:	ef 90       	pop	r14
    3ec6:	08 95       	ret

00003ec8 <vInterface>:

//Interface-Task
void vInterface(void *Parameter){
    3ec8:	cf 93       	push	r28
    3eca:	df 93       	push	r29
    3ecc:	1f 92       	push	r1
    3ece:	1f 92       	push	r1
    3ed0:	cd b7       	in	r28, 0x3d	; 61
    3ed2:	de b7       	in	r29, 0x3e	; 62
    3ed4:	89 83       	std	Y+1, r24	; 0x01
    3ed6:	9a 83       	std	Y+2, r25	; 0x02
			vDisplayWriteStringAtPos(0,0,"Time:");
			vDisplayWriteStringAtPos(0,8,"String");
			vDisplayWriteStringAtPos(1,0,"Alarm:");
			vDisplayWriteStringAtPos(1,8,"Strin2");;
			vTaskDelay(1000);*/
			vTaskResume(vLeibniz);
    3ed8:	85 eb       	ldi	r24, 0xB5	; 181
    3eda:	9f e1       	ldi	r25, 0x1F	; 31
    3edc:	0e 94 9d 12 	call	0x253a	; 0x253a <vTaskResume>
			
				vDisplayWriteStringAtPos(1,0, "PI = %s", PIstring);
    3ee0:	81 ec       	ldi	r24, 0xC1	; 193
    3ee2:	9c e2       	ldi	r25, 0x2C	; 44
    3ee4:	89 2f       	mov	r24, r25
    3ee6:	8f 93       	push	r24
    3ee8:	81 ec       	ldi	r24, 0xC1	; 193
    3eea:	9c e2       	ldi	r25, 0x2C	; 44
    3eec:	8f 93       	push	r24
    3eee:	8f e2       	ldi	r24, 0x2F	; 47
    3ef0:	90 e2       	ldi	r25, 0x20	; 32
    3ef2:	89 2f       	mov	r24, r25
    3ef4:	8f 93       	push	r24
    3ef6:	8f e2       	ldi	r24, 0x2F	; 47
    3ef8:	90 e2       	ldi	r25, 0x20	; 32
    3efa:	8f 93       	push	r24
    3efc:	1f 92       	push	r1
    3efe:	1f 92       	push	r1
    3f00:	1f 92       	push	r1
    3f02:	81 e0       	ldi	r24, 0x01	; 1
    3f04:	8f 93       	push	r24
    3f06:	0e 94 18 24 	call	0x4830	; 0x4830 <vDisplayWriteStringAtPos>
    3f0a:	8d b7       	in	r24, 0x3d	; 61
    3f0c:	9e b7       	in	r25, 0x3e	; 62
    3f0e:	08 96       	adiw	r24, 0x08	; 8
    3f10:	cd bf       	out	0x3d, r28	; 61
    3f12:	de bf       	out	0x3e, r29	; 62
				sprintf(&PIstring[0], "%.6f", pi);	
    3f14:	80 91 c7 2c 	lds	r24, 0x2CC7	; 0x802cc7 <pi>
    3f18:	90 91 c8 2c 	lds	r25, 0x2CC8	; 0x802cc8 <pi+0x1>
    3f1c:	a0 91 c9 2c 	lds	r26, 0x2CC9	; 0x802cc9 <pi+0x2>
    3f20:	b0 91 ca 2c 	lds	r27, 0x2CCA	; 0x802cca <pi+0x3>
    3f24:	2b 2f       	mov	r18, r27
    3f26:	2f 93       	push	r18
    3f28:	2a 2f       	mov	r18, r26
    3f2a:	2f 93       	push	r18
    3f2c:	29 2f       	mov	r18, r25
    3f2e:	2f 93       	push	r18
    3f30:	8f 93       	push	r24
    3f32:	87 e3       	ldi	r24, 0x37	; 55
    3f34:	90 e2       	ldi	r25, 0x20	; 32
    3f36:	89 2f       	mov	r24, r25
    3f38:	8f 93       	push	r24
    3f3a:	87 e3       	ldi	r24, 0x37	; 55
    3f3c:	90 e2       	ldi	r25, 0x20	; 32
    3f3e:	8f 93       	push	r24
    3f40:	81 ec       	ldi	r24, 0xC1	; 193
    3f42:	9c e2       	ldi	r25, 0x2C	; 44
    3f44:	89 2f       	mov	r24, r25
    3f46:	8f 93       	push	r24
    3f48:	81 ec       	ldi	r24, 0xC1	; 193
    3f4a:	9c e2       	ldi	r25, 0x2C	; 44
    3f4c:	8f 93       	push	r24
    3f4e:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <sprintf>
    3f52:	8d b7       	in	r24, 0x3d	; 61
    3f54:	9e b7       	in	r25, 0x3e	; 62
    3f56:	08 96       	adiw	r24, 0x08	; 8
    3f58:	cd bf       	out	0x3d, r28	; 61
    3f5a:	de bf       	out	0x3e, r29	; 62
				vTaskDelay(500);
    3f5c:	64 ef       	ldi	r22, 0xF4	; 244
    3f5e:	71 e0       	ldi	r23, 0x01	; 1
    3f60:	80 e0       	ldi	r24, 0x00	; 0
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	0e 94 41 12 	call	0x2482	; 0x2482 <vTaskDelay>
	}
    3f68:	b7 cf       	rjmp	.-146    	; 0x3ed8 <vInterface+0x10>

00003f6a <vLeibniz>:
	



//Leibniz-Folge-Task
void vLeibniz(void *Parameter){
    3f6a:	cf 92       	push	r12
    3f6c:	df 92       	push	r13
    3f6e:	ef 92       	push	r14
    3f70:	ff 92       	push	r15
    3f72:	cf 93       	push	r28
    3f74:	df 93       	push	r29
    3f76:	cd b7       	in	r28, 0x3d	; 61
    3f78:	de b7       	in	r29, 0x3e	; 62
    3f7a:	62 97       	sbiw	r28, 0x12	; 18
    3f7c:	cd bf       	out	0x3d, r28	; 61
    3f7e:	de bf       	out	0x3e, r29	; 62
    3f80:	89 8b       	std	Y+17, r24	; 0x11
    3f82:	9a 8b       	std	Y+18, r25	; 0x12
	(void) Parameter;
	for(;;){
		long int i;
		long int n;
		double Summe = 0.0;
    3f84:	1d 82       	std	Y+5, r1	; 0x05
    3f86:	1e 82       	std	Y+6, r1	; 0x06
    3f88:	1f 82       	std	Y+7, r1	; 0x07
    3f8a:	18 86       	std	Y+8, r1	; 0x08
		double Term;
		/* Applying Leibniz Formula */
		for(i=0;i< n;i++)
    3f8c:	19 82       	std	Y+1, r1	; 0x01
    3f8e:	1a 82       	std	Y+2, r1	; 0x02
    3f90:	1b 82       	std	Y+3, r1	; 0x03
    3f92:	1c 82       	std	Y+4, r1	; 0x04
    3f94:	5e c0       	rjmp	.+188    	; 0x4052 <__stack+0x53>
		{
			Term = pow(-1, i) / (2*i+1);
    3f96:	69 81       	ldd	r22, Y+1	; 0x01
    3f98:	7a 81       	ldd	r23, Y+2	; 0x02
    3f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f9e:	0e 94 8d 2a 	call	0x551a	; 0x551a <__floatsisf>
    3fa2:	dc 01       	movw	r26, r24
    3fa4:	cb 01       	movw	r24, r22
    3fa6:	9c 01       	movw	r18, r24
    3fa8:	ad 01       	movw	r20, r26
    3faa:	60 e0       	ldi	r22, 0x00	; 0
    3fac:	70 e0       	ldi	r23, 0x00	; 0
    3fae:	80 e8       	ldi	r24, 0x80	; 128
    3fb0:	9f eb       	ldi	r25, 0xBF	; 191
    3fb2:	0e 94 af 2b 	call	0x575e	; 0x575e <pow>
    3fb6:	6b 01       	movw	r12, r22
    3fb8:	7c 01       	movw	r14, r24
    3fba:	89 81       	ldd	r24, Y+1	; 0x01
    3fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    3fbe:	ab 81       	ldd	r26, Y+3	; 0x03
    3fc0:	bc 81       	ldd	r27, Y+4	; 0x04
    3fc2:	88 0f       	add	r24, r24
    3fc4:	99 1f       	adc	r25, r25
    3fc6:	aa 1f       	adc	r26, r26
    3fc8:	bb 1f       	adc	r27, r27
    3fca:	01 96       	adiw	r24, 0x01	; 1
    3fcc:	a1 1d       	adc	r26, r1
    3fce:	b1 1d       	adc	r27, r1
    3fd0:	bc 01       	movw	r22, r24
    3fd2:	cd 01       	movw	r24, r26
    3fd4:	0e 94 8d 2a 	call	0x551a	; 0x551a <__floatsisf>
    3fd8:	dc 01       	movw	r26, r24
    3fda:	cb 01       	movw	r24, r22
    3fdc:	9c 01       	movw	r18, r24
    3fde:	ad 01       	movw	r20, r26
    3fe0:	c7 01       	movw	r24, r14
    3fe2:	b6 01       	movw	r22, r12
    3fe4:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <__divsf3>
    3fe8:	dc 01       	movw	r26, r24
    3fea:	cb 01       	movw	r24, r22
    3fec:	8d 87       	std	Y+13, r24	; 0x0d
    3fee:	9e 87       	std	Y+14, r25	; 0x0e
    3ff0:	af 87       	std	Y+15, r26	; 0x0f
    3ff2:	b8 8b       	std	Y+16, r27	; 0x10
			Summe = Summe + Term;
    3ff4:	2d 85       	ldd	r18, Y+13	; 0x0d
    3ff6:	3e 85       	ldd	r19, Y+14	; 0x0e
    3ff8:	4f 85       	ldd	r20, Y+15	; 0x0f
    3ffa:	58 89       	ldd	r21, Y+16	; 0x10
    3ffc:	6d 81       	ldd	r22, Y+5	; 0x05
    3ffe:	7e 81       	ldd	r23, Y+6	; 0x06
    4000:	8f 81       	ldd	r24, Y+7	; 0x07
    4002:	98 85       	ldd	r25, Y+8	; 0x08
    4004:	0e 94 72 29 	call	0x52e4	; 0x52e4 <__addsf3>
    4008:	dc 01       	movw	r26, r24
    400a:	cb 01       	movw	r24, r22
    400c:	8d 83       	std	Y+5, r24	; 0x05
    400e:	9e 83       	std	Y+6, r25	; 0x06
    4010:	af 83       	std	Y+7, r26	; 0x07
    4012:	b8 87       	std	Y+8, r27	; 0x08
			pi = 4 * Summe;
    4014:	20 e0       	ldi	r18, 0x00	; 0
    4016:	30 e0       	ldi	r19, 0x00	; 0
    4018:	40 e8       	ldi	r20, 0x80	; 128
    401a:	50 e4       	ldi	r21, 0x40	; 64
    401c:	6d 81       	ldd	r22, Y+5	; 0x05
    401e:	7e 81       	ldd	r23, Y+6	; 0x06
    4020:	8f 81       	ldd	r24, Y+7	; 0x07
    4022:	98 85       	ldd	r25, Y+8	; 0x08
    4024:	0e 94 42 2b 	call	0x5684	; 0x5684 <__mulsf3>
    4028:	dc 01       	movw	r26, r24
    402a:	cb 01       	movw	r24, r22
    402c:	80 93 c7 2c 	sts	0x2CC7, r24	; 0x802cc7 <pi>
    4030:	90 93 c8 2c 	sts	0x2CC8, r25	; 0x802cc8 <pi+0x1>
    4034:	a0 93 c9 2c 	sts	0x2CC9, r26	; 0x802cc9 <pi+0x2>
    4038:	b0 93 ca 2c 	sts	0x2CCA, r27	; 0x802cca <pi+0x3>
		long int i;
		long int n;
		double Summe = 0.0;
		double Term;
		/* Applying Leibniz Formula */
		for(i=0;i< n;i++)
    403c:	89 81       	ldd	r24, Y+1	; 0x01
    403e:	9a 81       	ldd	r25, Y+2	; 0x02
    4040:	ab 81       	ldd	r26, Y+3	; 0x03
    4042:	bc 81       	ldd	r27, Y+4	; 0x04
    4044:	01 96       	adiw	r24, 0x01	; 1
    4046:	a1 1d       	adc	r26, r1
    4048:	b1 1d       	adc	r27, r1
    404a:	89 83       	std	Y+1, r24	; 0x01
    404c:	9a 83       	std	Y+2, r25	; 0x02
    404e:	ab 83       	std	Y+3, r26	; 0x03
    4050:	bc 83       	std	Y+4, r27	; 0x04
    4052:	29 81       	ldd	r18, Y+1	; 0x01
    4054:	3a 81       	ldd	r19, Y+2	; 0x02
    4056:	4b 81       	ldd	r20, Y+3	; 0x03
    4058:	5c 81       	ldd	r21, Y+4	; 0x04
    405a:	89 85       	ldd	r24, Y+9	; 0x09
    405c:	9a 85       	ldd	r25, Y+10	; 0x0a
    405e:	ab 85       	ldd	r26, Y+11	; 0x0b
    4060:	bc 85       	ldd	r27, Y+12	; 0x0c
    4062:	28 17       	cp	r18, r24
    4064:	39 07       	cpc	r19, r25
    4066:	4a 07       	cpc	r20, r26
    4068:	5b 07       	cpc	r21, r27
    406a:	0c f4       	brge	.+2      	; 0x406e <__stack+0x6f>
    406c:	94 cf       	rjmp	.-216    	; 0x3f96 <vLeibniz+0x2c>
		{
			Term = pow(-1, i) / (2*i+1);
			Summe = Summe + Term;
			pi = 4 * Summe;
		}
		}
    406e:	8a cf       	rjmp	.-236    	; 0x3f84 <vLeibniz+0x1a>

00004070 <__vector_108>:
 }
 

void vDisplayClear() {
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
}
    4070:	1f 92       	push	r1
    4072:	0f 92       	push	r0
    4074:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
    4078:	0f 92       	push	r0
    407a:	11 24       	eor	r1, r1
    407c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
    4080:	0f 92       	push	r0
    4082:	2f 93       	push	r18
    4084:	3f 93       	push	r19
    4086:	4f 93       	push	r20
    4088:	5f 93       	push	r21
    408a:	6f 93       	push	r22
    408c:	7f 93       	push	r23
    408e:	8f 93       	push	r24
    4090:	9f 93       	push	r25
    4092:	af 93       	push	r26
    4094:	bf 93       	push	r27
    4096:	ef 93       	push	r30
    4098:	ff 93       	push	r31
    409a:	cf 93       	push	r28
    409c:	df 93       	push	r29
    409e:	1f 92       	push	r1
    40a0:	cd b7       	in	r28, 0x3d	; 61
    40a2:	de b7       	in	r29, 0x3e	; 62
    40a4:	19 82       	std	Y+1, r1	; 0x01
    40a6:	80 91 cd 2c 	lds	r24, 0x2CCD	; 0x802ccd <egDisplayTiming>
    40aa:	90 91 ce 2c 	lds	r25, 0x2CCE	; 0x802cce <egDisplayTiming+0x1>
    40ae:	9e 01       	movw	r18, r28
    40b0:	2f 5f       	subi	r18, 0xFF	; 255
    40b2:	3f 4f       	sbci	r19, 0xFF	; 255
    40b4:	41 e0       	ldi	r20, 0x01	; 1
    40b6:	50 e0       	ldi	r21, 0x00	; 0
    40b8:	60 e0       	ldi	r22, 0x00	; 0
    40ba:	70 e0       	ldi	r23, 0x00	; 0
    40bc:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <xEventGroupSetBitsFromISR>
    40c0:	60 e0       	ldi	r22, 0x00	; 0
    40c2:	80 e0       	ldi	r24, 0x00	; 0
    40c4:	9b e0       	ldi	r25, 0x0B	; 11
    40c6:	0e 94 43 02 	call	0x486	; 0x486 <TC0_ConfigClockSource>
    40ca:	80 e0       	ldi	r24, 0x00	; 0
    40cc:	9b e0       	ldi	r25, 0x0B	; 11
    40ce:	fc 01       	movw	r30, r24
    40d0:	16 82       	std	Z+6, r1	; 0x06
    40d2:	00 00       	nop
    40d4:	0f 90       	pop	r0
    40d6:	df 91       	pop	r29
    40d8:	cf 91       	pop	r28
    40da:	ff 91       	pop	r31
    40dc:	ef 91       	pop	r30
    40de:	bf 91       	pop	r27
    40e0:	af 91       	pop	r26
    40e2:	9f 91       	pop	r25
    40e4:	8f 91       	pop	r24
    40e6:	7f 91       	pop	r23
    40e8:	6f 91       	pop	r22
    40ea:	5f 91       	pop	r21
    40ec:	4f 91       	pop	r20
    40ee:	3f 91       	pop	r19
    40f0:	2f 91       	pop	r18
    40f2:	0f 90       	pop	r0
    40f4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
    40f8:	0f 90       	pop	r0
    40fa:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
    40fe:	0f 90       	pop	r0
    4100:	1f 90       	pop	r1
    4102:	18 95       	reti

00004104 <delayUS>:
    4104:	cf 92       	push	r12
    4106:	df 92       	push	r13
    4108:	ef 92       	push	r14
    410a:	ff 92       	push	r15
    410c:	0f 93       	push	r16
    410e:	cf 93       	push	r28
    4110:	df 93       	push	r29
    4112:	00 d0       	rcall	.+0      	; 0x4114 <delayUS+0x10>
    4114:	1f 92       	push	r1
    4116:	cd b7       	in	r28, 0x3d	; 61
    4118:	de b7       	in	r29, 0x3e	; 62
    411a:	69 83       	std	Y+1, r22	; 0x01
    411c:	7a 83       	std	Y+2, r23	; 0x02
    411e:	8b 83       	std	Y+3, r24	; 0x03
    4120:	9c 83       	std	Y+4, r25	; 0x04
    4122:	89 81       	ldd	r24, Y+1	; 0x01
    4124:	9a 81       	ldd	r25, Y+2	; 0x02
    4126:	ab 81       	ldd	r26, Y+3	; 0x03
    4128:	bc 81       	ldd	r27, Y+4	; 0x04
    412a:	02 97       	sbiw	r24, 0x02	; 2
    412c:	a1 05       	cpc	r26, r1
    412e:	b1 05       	cpc	r27, r1
    4130:	40 f4       	brcc	.+16     	; 0x4142 <delayUS+0x3e>
    4132:	82 e0       	ldi	r24, 0x02	; 2
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	a0 e0       	ldi	r26, 0x00	; 0
    4138:	b0 e0       	ldi	r27, 0x00	; 0
    413a:	89 83       	std	Y+1, r24	; 0x01
    413c:	9a 83       	std	Y+2, r25	; 0x02
    413e:	ab 83       	std	Y+3, r26	; 0x03
    4140:	bc 83       	std	Y+4, r27	; 0x04
    4142:	80 e0       	ldi	r24, 0x00	; 0
    4144:	9b e0       	ldi	r25, 0x0B	; 11
    4146:	21 e0       	ldi	r18, 0x01	; 1
    4148:	fc 01       	movw	r30, r24
    414a:	26 83       	std	Z+6, r18	; 0x06
    414c:	80 e0       	ldi	r24, 0x00	; 0
    414e:	9b e0       	ldi	r25, 0x0B	; 11
    4150:	fc 01       	movw	r30, r24
    4152:	10 a2       	std	Z+32, r1	; 0x20
    4154:	11 a2       	std	Z+33, r1	; 0x21
    4156:	60 e0       	ldi	r22, 0x00	; 0
    4158:	80 e0       	ldi	r24, 0x00	; 0
    415a:	9b e0       	ldi	r25, 0x0B	; 11
    415c:	0e 94 5f 02 	call	0x4be	; 0x4be <TC0_ConfigWGM>
    4160:	89 81       	ldd	r24, Y+1	; 0x01
    4162:	9a 81       	ldd	r25, Y+2	; 0x02
    4164:	ab 81       	ldd	r26, Y+3	; 0x03
    4166:	bc 81       	ldd	r27, Y+4	; 0x04
    4168:	8e 3f       	cpi	r24, 0xFE	; 254
    416a:	9f 4f       	sbci	r25, 0xFF	; 255
    416c:	a1 05       	cpc	r26, r1
    416e:	b1 05       	cpc	r27, r1
    4170:	98 f4       	brcc	.+38     	; 0x4198 <delayUS+0x94>
    4172:	20 e0       	ldi	r18, 0x00	; 0
    4174:	3b e0       	ldi	r19, 0x0B	; 11
    4176:	89 81       	ldd	r24, Y+1	; 0x01
    4178:	9a 81       	ldd	r25, Y+2	; 0x02
    417a:	ab 81       	ldd	r26, Y+3	; 0x03
    417c:	bc 81       	ldd	r27, Y+4	; 0x04
    417e:	b6 95       	lsr	r27
    4180:	a7 95       	ror	r26
    4182:	97 95       	ror	r25
    4184:	87 95       	ror	r24
    4186:	f9 01       	movw	r30, r18
    4188:	86 a3       	std	Z+38, r24	; 0x26
    418a:	97 a3       	std	Z+39, r25	; 0x27
    418c:	65 e0       	ldi	r22, 0x05	; 5
    418e:	80 e0       	ldi	r24, 0x00	; 0
    4190:	9b e0       	ldi	r25, 0x0B	; 11
    4192:	0e 94 43 02 	call	0x486	; 0x486 <TC0_ConfigClockSource>
    4196:	1f c0       	rjmp	.+62     	; 0x41d6 <delayUS+0xd2>
    4198:	89 81       	ldd	r24, Y+1	; 0x01
    419a:	9a 81       	ldd	r25, Y+2	; 0x02
    419c:	ab 81       	ldd	r26, Y+3	; 0x03
    419e:	bc 81       	ldd	r27, Y+4	; 0x04
    41a0:	80 34       	cpi	r24, 0x40	; 64
    41a2:	92 44       	sbci	r25, 0x42	; 66
    41a4:	af 40       	sbci	r26, 0x0F	; 15
    41a6:	b1 05       	cpc	r27, r1
    41a8:	b0 f4       	brcc	.+44     	; 0x41d6 <delayUS+0xd2>
    41aa:	20 e0       	ldi	r18, 0x00	; 0
    41ac:	3b e0       	ldi	r19, 0x0B	; 11
    41ae:	89 81       	ldd	r24, Y+1	; 0x01
    41b0:	9a 81       	ldd	r25, Y+2	; 0x02
    41b2:	ab 81       	ldd	r26, Y+3	; 0x03
    41b4:	bc 81       	ldd	r27, Y+4	; 0x04
    41b6:	68 94       	set
    41b8:	14 f8       	bld	r1, 4
    41ba:	b6 95       	lsr	r27
    41bc:	a7 95       	ror	r26
    41be:	97 95       	ror	r25
    41c0:	87 95       	ror	r24
    41c2:	16 94       	lsr	r1
    41c4:	d1 f7       	brne	.-12     	; 0x41ba <delayUS+0xb6>
    41c6:	f9 01       	movw	r30, r18
    41c8:	86 a3       	std	Z+38, r24	; 0x26
    41ca:	97 a3       	std	Z+39, r25	; 0x27
    41cc:	67 e0       	ldi	r22, 0x07	; 7
    41ce:	80 e0       	ldi	r24, 0x00	; 0
    41d0:	9b e0       	ldi	r25, 0x0B	; 11
    41d2:	0e 94 43 02 	call	0x486	; 0x486 <TC0_ConfigClockSource>
    41d6:	80 91 cd 2c 	lds	r24, 0x2CCD	; 0x802ccd <egDisplayTiming>
    41da:	90 91 ce 2c 	lds	r25, 0x2CCE	; 0x802cce <egDisplayTiming+0x1>
    41de:	0f 2e       	mov	r0, r31
    41e0:	f4 ef       	ldi	r31, 0xF4	; 244
    41e2:	cf 2e       	mov	r12, r31
    41e4:	dd 24       	eor	r13, r13
    41e6:	d3 94       	inc	r13
    41e8:	e1 2c       	mov	r14, r1
    41ea:	f1 2c       	mov	r15, r1
    41ec:	f0 2d       	mov	r31, r0
    41ee:	00 e0       	ldi	r16, 0x00	; 0
    41f0:	21 e0       	ldi	r18, 0x01	; 1
    41f2:	41 e0       	ldi	r20, 0x01	; 1
    41f4:	50 e0       	ldi	r21, 0x00	; 0
    41f6:	60 e0       	ldi	r22, 0x00	; 0
    41f8:	70 e0       	ldi	r23, 0x00	; 0
    41fa:	0e 94 04 03 	call	0x608	; 0x608 <xEventGroupWaitBits>
    41fe:	00 00       	nop
    4200:	24 96       	adiw	r28, 0x04	; 4
    4202:	cd bf       	out	0x3d, r28	; 61
    4204:	de bf       	out	0x3e, r29	; 62
    4206:	df 91       	pop	r29
    4208:	cf 91       	pop	r28
    420a:	0f 91       	pop	r16
    420c:	ff 90       	pop	r15
    420e:	ef 90       	pop	r14
    4210:	df 90       	pop	r13
    4212:	cf 90       	pop	r12
    4214:	08 95       	ret

00004216 <setPort>:
    4216:	cf 93       	push	r28
    4218:	df 93       	push	r29
    421a:	1f 92       	push	r1
    421c:	cd b7       	in	r28, 0x3d	; 61
    421e:	de b7       	in	r29, 0x3e	; 62
    4220:	89 83       	std	Y+1, r24	; 0x01
    4222:	89 81       	ldd	r24, Y+1	; 0x01
    4224:	8f 70       	andi	r24, 0x0F	; 15
    4226:	89 83       	std	Y+1, r24	; 0x01
    4228:	89 81       	ldd	r24, Y+1	; 0x01
    422a:	82 95       	swap	r24
    422c:	80 7f       	andi	r24, 0xF0	; 240
    422e:	89 83       	std	Y+1, r24	; 0x01
    4230:	80 e0       	ldi	r24, 0x00	; 0
    4232:	96 e0       	ldi	r25, 0x06	; 6
    4234:	20 e0       	ldi	r18, 0x00	; 0
    4236:	36 e0       	ldi	r19, 0x06	; 6
    4238:	f9 01       	movw	r30, r18
    423a:	34 81       	ldd	r19, Z+4	; 0x04
    423c:	29 81       	ldd	r18, Y+1	; 0x01
    423e:	2f 60       	ori	r18, 0x0F	; 15
    4240:	23 23       	and	r18, r19
    4242:	fc 01       	movw	r30, r24
    4244:	24 83       	std	Z+4, r18	; 0x04
    4246:	80 e0       	ldi	r24, 0x00	; 0
    4248:	96 e0       	ldi	r25, 0x06	; 6
    424a:	20 e0       	ldi	r18, 0x00	; 0
    424c:	36 e0       	ldi	r19, 0x06	; 6
    424e:	f9 01       	movw	r30, r18
    4250:	34 81       	ldd	r19, Z+4	; 0x04
    4252:	29 81       	ldd	r18, Y+1	; 0x01
    4254:	23 2b       	or	r18, r19
    4256:	fc 01       	movw	r30, r24
    4258:	24 83       	std	Z+4, r18	; 0x04
    425a:	00 00       	nop
    425c:	0f 90       	pop	r0
    425e:	df 91       	pop	r29
    4260:	cf 91       	pop	r28
    4262:	08 95       	ret

00004264 <setRS>:
    4264:	cf 93       	push	r28
    4266:	df 93       	push	r29
    4268:	1f 92       	push	r1
    426a:	cd b7       	in	r28, 0x3d	; 61
    426c:	de b7       	in	r29, 0x3e	; 62
    426e:	89 83       	std	Y+1, r24	; 0x01
    4270:	89 81       	ldd	r24, Y+1	; 0x01
    4272:	88 23       	and	r24, r24
    4274:	31 f0       	breq	.+12     	; 0x4282 <setRS+0x1e>
    4276:	80 e6       	ldi	r24, 0x60	; 96
    4278:	96 e0       	ldi	r25, 0x06	; 6
    427a:	21 e0       	ldi	r18, 0x01	; 1
    427c:	fc 01       	movw	r30, r24
    427e:	25 83       	std	Z+5, r18	; 0x05
    4280:	05 c0       	rjmp	.+10     	; 0x428c <setRS+0x28>
    4282:	80 e6       	ldi	r24, 0x60	; 96
    4284:	96 e0       	ldi	r25, 0x06	; 6
    4286:	21 e0       	ldi	r18, 0x01	; 1
    4288:	fc 01       	movw	r30, r24
    428a:	26 83       	std	Z+6, r18	; 0x06
    428c:	00 00       	nop
    428e:	0f 90       	pop	r0
    4290:	df 91       	pop	r29
    4292:	cf 91       	pop	r28
    4294:	08 95       	ret

00004296 <setRW>:
    4296:	cf 93       	push	r28
    4298:	df 93       	push	r29
    429a:	1f 92       	push	r1
    429c:	cd b7       	in	r28, 0x3d	; 61
    429e:	de b7       	in	r29, 0x3e	; 62
    42a0:	89 83       	std	Y+1, r24	; 0x01
    42a2:	89 81       	ldd	r24, Y+1	; 0x01
    42a4:	88 23       	and	r24, r24
    42a6:	31 f0       	breq	.+12     	; 0x42b4 <setRW+0x1e>
    42a8:	80 e6       	ldi	r24, 0x60	; 96
    42aa:	96 e0       	ldi	r25, 0x06	; 6
    42ac:	22 e0       	ldi	r18, 0x02	; 2
    42ae:	fc 01       	movw	r30, r24
    42b0:	25 83       	std	Z+5, r18	; 0x05
    42b2:	05 c0       	rjmp	.+10     	; 0x42be <setRW+0x28>
    42b4:	80 e6       	ldi	r24, 0x60	; 96
    42b6:	96 e0       	ldi	r25, 0x06	; 6
    42b8:	22 e0       	ldi	r18, 0x02	; 2
    42ba:	fc 01       	movw	r30, r24
    42bc:	26 83       	std	Z+6, r18	; 0x06
    42be:	00 00       	nop
    42c0:	0f 90       	pop	r0
    42c2:	df 91       	pop	r29
    42c4:	cf 91       	pop	r28
    42c6:	08 95       	ret

000042c8 <setE>:
    42c8:	cf 93       	push	r28
    42ca:	df 93       	push	r29
    42cc:	1f 92       	push	r1
    42ce:	cd b7       	in	r28, 0x3d	; 61
    42d0:	de b7       	in	r29, 0x3e	; 62
    42d2:	89 83       	std	Y+1, r24	; 0x01
    42d4:	89 81       	ldd	r24, Y+1	; 0x01
    42d6:	88 23       	and	r24, r24
    42d8:	31 f0       	breq	.+12     	; 0x42e6 <setE+0x1e>
    42da:	80 e6       	ldi	r24, 0x60	; 96
    42dc:	96 e0       	ldi	r25, 0x06	; 6
    42de:	24 e0       	ldi	r18, 0x04	; 4
    42e0:	fc 01       	movw	r30, r24
    42e2:	25 83       	std	Z+5, r18	; 0x05
    42e4:	05 c0       	rjmp	.+10     	; 0x42f0 <setE+0x28>
    42e6:	80 e6       	ldi	r24, 0x60	; 96
    42e8:	96 e0       	ldi	r25, 0x06	; 6
    42ea:	24 e0       	ldi	r18, 0x04	; 4
    42ec:	fc 01       	movw	r30, r24
    42ee:	26 83       	std	Z+6, r18	; 0x06
    42f0:	00 00       	nop
    42f2:	0f 90       	pop	r0
    42f4:	df 91       	pop	r29
    42f6:	cf 91       	pop	r28
    42f8:	08 95       	ret

000042fa <Nybble>:
    42fa:	cf 93       	push	r28
    42fc:	df 93       	push	r29
    42fe:	cd b7       	in	r28, 0x3d	; 61
    4300:	de b7       	in	r29, 0x3e	; 62
    4302:	81 e0       	ldi	r24, 0x01	; 1
    4304:	0e 94 64 21 	call	0x42c8	; 0x42c8 <setE>
    4308:	61 e0       	ldi	r22, 0x01	; 1
    430a:	70 e0       	ldi	r23, 0x00	; 0
    430c:	80 e0       	ldi	r24, 0x00	; 0
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	0e 94 82 20 	call	0x4104	; 0x4104 <delayUS>
    4314:	80 e0       	ldi	r24, 0x00	; 0
    4316:	0e 94 64 21 	call	0x42c8	; 0x42c8 <setE>
    431a:	00 00       	nop
    431c:	df 91       	pop	r29
    431e:	cf 91       	pop	r28
    4320:	08 95       	ret

00004322 <command>:
    4322:	cf 93       	push	r28
    4324:	df 93       	push	r29
    4326:	1f 92       	push	r1
    4328:	cd b7       	in	r28, 0x3d	; 61
    432a:	de b7       	in	r29, 0x3e	; 62
    432c:	89 83       	std	Y+1, r24	; 0x01
    432e:	89 81       	ldd	r24, Y+1	; 0x01
    4330:	82 95       	swap	r24
    4332:	8f 70       	andi	r24, 0x0F	; 15
    4334:	0e 94 0b 21 	call	0x4216	; 0x4216 <setPort>
    4338:	80 e0       	ldi	r24, 0x00	; 0
    433a:	0e 94 32 21 	call	0x4264	; 0x4264 <setRS>
    433e:	80 e0       	ldi	r24, 0x00	; 0
    4340:	0e 94 4b 21 	call	0x4296	; 0x4296 <setRW>
    4344:	0e 94 7d 21 	call	0x42fa	; 0x42fa <Nybble>
    4348:	89 81       	ldd	r24, Y+1	; 0x01
    434a:	8f 70       	andi	r24, 0x0F	; 15
    434c:	0e 94 0b 21 	call	0x4216	; 0x4216 <setPort>
    4350:	0e 94 7d 21 	call	0x42fa	; 0x42fa <Nybble>
    4354:	00 00       	nop
    4356:	0f 90       	pop	r0
    4358:	df 91       	pop	r29
    435a:	cf 91       	pop	r28
    435c:	08 95       	ret

0000435e <write>:
    435e:	cf 93       	push	r28
    4360:	df 93       	push	r29
    4362:	1f 92       	push	r1
    4364:	cd b7       	in	r28, 0x3d	; 61
    4366:	de b7       	in	r29, 0x3e	; 62
    4368:	89 83       	std	Y+1, r24	; 0x01
    436a:	89 81       	ldd	r24, Y+1	; 0x01
    436c:	82 95       	swap	r24
    436e:	8f 70       	andi	r24, 0x0F	; 15
    4370:	0e 94 0b 21 	call	0x4216	; 0x4216 <setPort>
    4374:	81 e0       	ldi	r24, 0x01	; 1
    4376:	0e 94 32 21 	call	0x4264	; 0x4264 <setRS>
    437a:	80 e0       	ldi	r24, 0x00	; 0
    437c:	0e 94 4b 21 	call	0x4296	; 0x4296 <setRW>
    4380:	0e 94 7d 21 	call	0x42fa	; 0x42fa <Nybble>
    4384:	89 81       	ldd	r24, Y+1	; 0x01
    4386:	8f 70       	andi	r24, 0x0F	; 15
    4388:	0e 94 0b 21 	call	0x4216	; 0x4216 <setPort>
    438c:	0e 94 7d 21 	call	0x42fa	; 0x42fa <Nybble>
    4390:	00 00       	nop
    4392:	0f 90       	pop	r0
    4394:	df 91       	pop	r29
    4396:	cf 91       	pop	r28
    4398:	08 95       	ret

0000439a <vInitDisplay>:
    439a:	ef 92       	push	r14
    439c:	ff 92       	push	r15
    439e:	0f 93       	push	r16
    43a0:	cf 93       	push	r28
    43a2:	df 93       	push	r29
    43a4:	cd b7       	in	r28, 0x3d	; 61
    43a6:	de b7       	in	r29, 0x3e	; 62
    43a8:	80 e0       	ldi	r24, 0x00	; 0
    43aa:	96 e0       	ldi	r25, 0x06	; 6
    43ac:	20 e1       	ldi	r18, 0x10	; 16
    43ae:	fc 01       	movw	r30, r24
    43b0:	21 83       	std	Z+1, r18	; 0x01
    43b2:	80 e0       	ldi	r24, 0x00	; 0
    43b4:	96 e0       	ldi	r25, 0x06	; 6
    43b6:	20 e2       	ldi	r18, 0x20	; 32
    43b8:	fc 01       	movw	r30, r24
    43ba:	21 83       	std	Z+1, r18	; 0x01
    43bc:	80 e0       	ldi	r24, 0x00	; 0
    43be:	96 e0       	ldi	r25, 0x06	; 6
    43c0:	20 e4       	ldi	r18, 0x40	; 64
    43c2:	fc 01       	movw	r30, r24
    43c4:	21 83       	std	Z+1, r18	; 0x01
    43c6:	80 e0       	ldi	r24, 0x00	; 0
    43c8:	96 e0       	ldi	r25, 0x06	; 6
    43ca:	20 e8       	ldi	r18, 0x80	; 128
    43cc:	fc 01       	movw	r30, r24
    43ce:	21 83       	std	Z+1, r18	; 0x01
    43d0:	80 e6       	ldi	r24, 0x60	; 96
    43d2:	96 e0       	ldi	r25, 0x06	; 6
    43d4:	21 e0       	ldi	r18, 0x01	; 1
    43d6:	fc 01       	movw	r30, r24
    43d8:	21 83       	std	Z+1, r18	; 0x01
    43da:	80 e6       	ldi	r24, 0x60	; 96
    43dc:	96 e0       	ldi	r25, 0x06	; 6
    43de:	22 e0       	ldi	r18, 0x02	; 2
    43e0:	fc 01       	movw	r30, r24
    43e2:	21 83       	std	Z+1, r18	; 0x01
    43e4:	80 e6       	ldi	r24, 0x60	; 96
    43e6:	96 e0       	ldi	r25, 0x06	; 6
    43e8:	24 e0       	ldi	r18, 0x04	; 4
    43ea:	fc 01       	movw	r30, r24
    43ec:	21 83       	std	Z+1, r18	; 0x01
    43ee:	80 e0       	ldi	r24, 0x00	; 0
    43f0:	96 e0       	ldi	r25, 0x06	; 6
    43f2:	20 e0       	ldi	r18, 0x00	; 0
    43f4:	36 e0       	ldi	r19, 0x06	; 6
    43f6:	f9 01       	movw	r30, r18
    43f8:	24 81       	ldd	r18, Z+4	; 0x04
    43fa:	2f 70       	andi	r18, 0x0F	; 15
    43fc:	fc 01       	movw	r30, r24
    43fe:	24 83       	std	Z+4, r18	; 0x04
    4400:	80 e6       	ldi	r24, 0x60	; 96
    4402:	96 e0       	ldi	r25, 0x06	; 6
    4404:	20 e6       	ldi	r18, 0x60	; 96
    4406:	36 e0       	ldi	r19, 0x06	; 6
    4408:	f9 01       	movw	r30, r18
    440a:	24 81       	ldd	r18, Z+4	; 0x04
    440c:	28 7f       	andi	r18, 0xF8	; 248
    440e:	fc 01       	movw	r30, r24
    4410:	24 83       	std	Z+4, r18	; 0x04
    4412:	40 e0       	ldi	r20, 0x00	; 0
    4414:	66 e1       	ldi	r22, 0x16	; 22
    4416:	88 e0       	ldi	r24, 0x08	; 8
    4418:	0e 94 ed 0b 	call	0x17da	; 0x17da <xQueueGenericCreate>
    441c:	80 93 cb 2c 	sts	0x2CCB, r24	; 0x802ccb <displayLineQueue>
    4420:	90 93 cc 2c 	sts	0x2CCC, r25	; 0x802ccc <displayLineQueue+0x1>
    4424:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <xEventGroupCreate>
    4428:	80 93 cd 2c 	sts	0x2CCD, r24	; 0x802ccd <egDisplayTiming>
    442c:	90 93 ce 2c 	sts	0x2CCE, r25	; 0x802cce <egDisplayTiming+0x1>
    4430:	e1 2c       	mov	r14, r1
    4432:	f1 2c       	mov	r15, r1
    4434:	01 e0       	ldi	r16, 0x01	; 1
    4436:	20 e0       	ldi	r18, 0x00	; 0
    4438:	30 e0       	ldi	r19, 0x00	; 0
    443a:	4e e5       	ldi	r20, 0x5E	; 94
    443c:	51 e0       	ldi	r21, 0x01	; 1
    443e:	6c e3       	ldi	r22, 0x3C	; 60
    4440:	70 e2       	ldi	r23, 0x20	; 32
    4442:	8b ec       	ldi	r24, 0xCB	; 203
    4444:	92 e2       	ldi	r25, 0x22	; 34
    4446:	0e 94 6e 10 	call	0x20dc	; 0x20dc <xTaskCreate>
    444a:	00 00       	nop
    444c:	df 91       	pop	r29
    444e:	cf 91       	pop	r28
    4450:	0f 91       	pop	r16
    4452:	ff 90       	pop	r15
    4454:	ef 90       	pop	r14
    4456:	08 95       	ret

00004458 <_displaySetPos>:
    4458:	cf 93       	push	r28
    445a:	df 93       	push	r29
    445c:	00 d0       	rcall	.+0      	; 0x445e <_displaySetPos+0x6>
    445e:	1f 92       	push	r1
    4460:	cd b7       	in	r28, 0x3d	; 61
    4462:	de b7       	in	r29, 0x3e	; 62
    4464:	89 83       	std	Y+1, r24	; 0x01
    4466:	9a 83       	std	Y+2, r25	; 0x02
    4468:	6b 83       	std	Y+3, r22	; 0x03
    446a:	7c 83       	std	Y+4, r23	; 0x04
    446c:	89 81       	ldd	r24, Y+1	; 0x01
    446e:	9a 81       	ldd	r25, Y+2	; 0x02
    4470:	81 30       	cpi	r24, 0x01	; 1
    4472:	91 05       	cpc	r25, r1
    4474:	89 f0       	breq	.+34     	; 0x4498 <_displaySetPos+0x40>
    4476:	82 30       	cpi	r24, 0x02	; 2
    4478:	91 05       	cpc	r25, r1
    447a:	1c f4       	brge	.+6      	; 0x4482 <_displaySetPos+0x2a>
    447c:	89 2b       	or	r24, r25
    447e:	39 f0       	breq	.+14     	; 0x448e <_displaySetPos+0x36>
    4480:	1a c0       	rjmp	.+52     	; 0x44b6 <_displaySetPos+0x5e>
    4482:	82 30       	cpi	r24, 0x02	; 2
    4484:	91 05       	cpc	r25, r1
    4486:	69 f0       	breq	.+26     	; 0x44a2 <_displaySetPos+0x4a>
    4488:	03 97       	sbiw	r24, 0x03	; 3
    448a:	81 f0       	breq	.+32     	; 0x44ac <_displaySetPos+0x54>
    448c:	14 c0       	rjmp	.+40     	; 0x44b6 <_displaySetPos+0x5e>
    448e:	8b 81       	ldd	r24, Y+3	; 0x03
    4490:	80 58       	subi	r24, 0x80	; 128
    4492:	0e 94 91 21 	call	0x4322	; 0x4322 <command>
    4496:	0f c0       	rjmp	.+30     	; 0x44b6 <_displaySetPos+0x5e>
    4498:	8b 81       	ldd	r24, Y+3	; 0x03
    449a:	80 54       	subi	r24, 0x40	; 64
    449c:	0e 94 91 21 	call	0x4322	; 0x4322 <command>
    44a0:	0a c0       	rjmp	.+20     	; 0x44b6 <_displaySetPos+0x5e>
    44a2:	8b 81       	ldd	r24, Y+3	; 0x03
    44a4:	8c 56       	subi	r24, 0x6C	; 108
    44a6:	0e 94 91 21 	call	0x4322	; 0x4322 <command>
    44aa:	05 c0       	rjmp	.+10     	; 0x44b6 <_displaySetPos+0x5e>
    44ac:	8b 81       	ldd	r24, Y+3	; 0x03
    44ae:	8c 52       	subi	r24, 0x2C	; 44
    44b0:	0e 94 91 21 	call	0x4322	; 0x4322 <command>
    44b4:	00 00       	nop
    44b6:	67 e2       	ldi	r22, 0x27	; 39
    44b8:	70 e0       	ldi	r23, 0x00	; 0
    44ba:	80 e0       	ldi	r24, 0x00	; 0
    44bc:	90 e0       	ldi	r25, 0x00	; 0
    44be:	0e 94 82 20 	call	0x4104	; 0x4104 <delayUS>
    44c2:	00 00       	nop
    44c4:	24 96       	adiw	r28, 0x04	; 4
    44c6:	cd bf       	out	0x3d, r28	; 61
    44c8:	de bf       	out	0x3e, r29	; 62
    44ca:	df 91       	pop	r29
    44cc:	cf 91       	pop	r28
    44ce:	08 95       	ret

000044d0 <_displayWriteChar>:
    44d0:	cf 93       	push	r28
    44d2:	df 93       	push	r29
    44d4:	1f 92       	push	r1
    44d6:	cd b7       	in	r28, 0x3d	; 61
    44d8:	de b7       	in	r29, 0x3e	; 62
    44da:	89 83       	std	Y+1, r24	; 0x01
    44dc:	89 81       	ldd	r24, Y+1	; 0x01
    44de:	0e 94 af 21 	call	0x435e	; 0x435e <write>
    44e2:	6b e2       	ldi	r22, 0x2B	; 43
    44e4:	70 e0       	ldi	r23, 0x00	; 0
    44e6:	80 e0       	ldi	r24, 0x00	; 0
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	0e 94 82 20 	call	0x4104	; 0x4104 <delayUS>
    44ee:	00 00       	nop
    44f0:	0f 90       	pop	r0
    44f2:	df 91       	pop	r29
    44f4:	cf 91       	pop	r28
    44f6:	08 95       	ret

000044f8 <_displayWriteString>:
    44f8:	cf 93       	push	r28
    44fa:	df 93       	push	r29
    44fc:	00 d0       	rcall	.+0      	; 0x44fe <_displayWriteString+0x6>
    44fe:	1f 92       	push	r1
    4500:	cd b7       	in	r28, 0x3d	; 61
    4502:	de b7       	in	r29, 0x3e	; 62
    4504:	8b 83       	std	Y+3, r24	; 0x03
    4506:	9c 83       	std	Y+4, r25	; 0x04
    4508:	19 82       	std	Y+1, r1	; 0x01
    450a:	1a 82       	std	Y+2, r1	; 0x02
    450c:	19 c0       	rjmp	.+50     	; 0x4540 <_displayWriteString+0x48>
    450e:	89 81       	ldd	r24, Y+1	; 0x01
    4510:	9a 81       	ldd	r25, Y+2	; 0x02
    4512:	2b 81       	ldd	r18, Y+3	; 0x03
    4514:	3c 81       	ldd	r19, Y+4	; 0x04
    4516:	82 0f       	add	r24, r18
    4518:	93 1f       	adc	r25, r19
    451a:	fc 01       	movw	r30, r24
    451c:	80 81       	ld	r24, Z
    451e:	88 23       	and	r24, r24
    4520:	a1 f0       	breq	.+40     	; 0x454a <_displayWriteString+0x52>
    4522:	89 81       	ldd	r24, Y+1	; 0x01
    4524:	9a 81       	ldd	r25, Y+2	; 0x02
    4526:	2b 81       	ldd	r18, Y+3	; 0x03
    4528:	3c 81       	ldd	r19, Y+4	; 0x04
    452a:	82 0f       	add	r24, r18
    452c:	93 1f       	adc	r25, r19
    452e:	fc 01       	movw	r30, r24
    4530:	80 81       	ld	r24, Z
    4532:	0e 94 68 22 	call	0x44d0	; 0x44d0 <_displayWriteChar>
    4536:	89 81       	ldd	r24, Y+1	; 0x01
    4538:	9a 81       	ldd	r25, Y+2	; 0x02
    453a:	01 96       	adiw	r24, 0x01	; 1
    453c:	89 83       	std	Y+1, r24	; 0x01
    453e:	9a 83       	std	Y+2, r25	; 0x02
    4540:	89 81       	ldd	r24, Y+1	; 0x01
    4542:	9a 81       	ldd	r25, Y+2	; 0x02
    4544:	44 97       	sbiw	r24, 0x14	; 20
    4546:	1c f3       	brlt	.-58     	; 0x450e <_displayWriteString+0x16>
    4548:	01 c0       	rjmp	.+2      	; 0x454c <_displayWriteString+0x54>
    454a:	00 00       	nop
    454c:	00 00       	nop
    454e:	24 96       	adiw	r28, 0x04	; 4
    4550:	cd bf       	out	0x3d, r28	; 61
    4552:	de bf       	out	0x3e, r29	; 62
    4554:	df 91       	pop	r29
    4556:	cf 91       	pop	r28
    4558:	08 95       	ret

0000455a <_displayWriteStringAtPos>:
    455a:	cf 93       	push	r28
    455c:	df 93       	push	r29
    455e:	00 d0       	rcall	.+0      	; 0x4560 <_displayWriteStringAtPos+0x6>
    4560:	00 d0       	rcall	.+0      	; 0x4562 <_displayWriteStringAtPos+0x8>
    4562:	cd b7       	in	r28, 0x3d	; 61
    4564:	de b7       	in	r29, 0x3e	; 62
    4566:	89 83       	std	Y+1, r24	; 0x01
    4568:	9a 83       	std	Y+2, r25	; 0x02
    456a:	6b 83       	std	Y+3, r22	; 0x03
    456c:	7c 83       	std	Y+4, r23	; 0x04
    456e:	4d 83       	std	Y+5, r20	; 0x05
    4570:	5e 83       	std	Y+6, r21	; 0x06
    4572:	2b 81       	ldd	r18, Y+3	; 0x03
    4574:	3c 81       	ldd	r19, Y+4	; 0x04
    4576:	89 81       	ldd	r24, Y+1	; 0x01
    4578:	9a 81       	ldd	r25, Y+2	; 0x02
    457a:	b9 01       	movw	r22, r18
    457c:	0e 94 2c 22 	call	0x4458	; 0x4458 <_displaySetPos>
    4580:	8d 81       	ldd	r24, Y+5	; 0x05
    4582:	9e 81       	ldd	r25, Y+6	; 0x06
    4584:	0e 94 7c 22 	call	0x44f8	; 0x44f8 <_displayWriteString>
    4588:	00 00       	nop
    458a:	26 96       	adiw	r28, 0x06	; 6
    458c:	cd bf       	out	0x3d, r28	; 61
    458e:	de bf       	out	0x3e, r29	; 62
    4590:	df 91       	pop	r29
    4592:	cf 91       	pop	r28
    4594:	08 95       	ret

00004596 <vDisplayUpdateTask>:
    4596:	cf 93       	push	r28
    4598:	df 93       	push	r29
    459a:	cd b7       	in	r28, 0x3d	; 61
    459c:	de b7       	in	r29, 0x3e	; 62
    459e:	c0 57       	subi	r28, 0x70	; 112
    45a0:	d1 09       	sbc	r29, r1
    45a2:	cd bf       	out	0x3d, r28	; 61
    45a4:	de bf       	out	0x3e, r29	; 62
    45a6:	9e 01       	movw	r18, r28
    45a8:	21 59       	subi	r18, 0x91	; 145
    45aa:	3f 4f       	sbci	r19, 0xFF	; 255
    45ac:	f9 01       	movw	r30, r18
    45ae:	80 83       	st	Z, r24
    45b0:	91 83       	std	Z+1, r25	; 0x01
    45b2:	19 82       	std	Y+1, r1	; 0x01
    45b4:	1a 82       	std	Y+2, r1	; 0x02
    45b6:	1b 82       	std	Y+3, r1	; 0x03
    45b8:	1c 82       	std	Y+4, r1	; 0x04
    45ba:	1d 82       	std	Y+5, r1	; 0x05
    45bc:	1e 82       	std	Y+6, r1	; 0x06
    45be:	26 c0       	rjmp	.+76     	; 0x460c <vDisplayUpdateTask+0x76>
    45c0:	1f 82       	std	Y+7, r1	; 0x07
    45c2:	18 86       	std	Y+8, r1	; 0x08
    45c4:	1a c0       	rjmp	.+52     	; 0x45fa <vDisplayUpdateTask+0x64>
    45c6:	2d 81       	ldd	r18, Y+5	; 0x05
    45c8:	3e 81       	ldd	r19, Y+6	; 0x06
    45ca:	44 e1       	ldi	r20, 0x14	; 20
    45cc:	42 9f       	mul	r20, r18
    45ce:	c0 01       	movw	r24, r0
    45d0:	43 9f       	mul	r20, r19
    45d2:	90 0d       	add	r25, r0
    45d4:	11 24       	eor	r1, r1
    45d6:	9e 01       	movw	r18, r28
    45d8:	2f 5f       	subi	r18, 0xFF	; 255
    45da:	3f 4f       	sbci	r19, 0xFF	; 255
    45dc:	28 0f       	add	r18, r24
    45de:	39 1f       	adc	r19, r25
    45e0:	8f 81       	ldd	r24, Y+7	; 0x07
    45e2:	98 85       	ldd	r25, Y+8	; 0x08
    45e4:	82 0f       	add	r24, r18
    45e6:	93 1f       	adc	r25, r19
    45e8:	08 96       	adiw	r24, 0x08	; 8
    45ea:	20 e2       	ldi	r18, 0x20	; 32
    45ec:	fc 01       	movw	r30, r24
    45ee:	20 83       	st	Z, r18
    45f0:	8f 81       	ldd	r24, Y+7	; 0x07
    45f2:	98 85       	ldd	r25, Y+8	; 0x08
    45f4:	01 96       	adiw	r24, 0x01	; 1
    45f6:	8f 83       	std	Y+7, r24	; 0x07
    45f8:	98 87       	std	Y+8, r25	; 0x08
    45fa:	8f 81       	ldd	r24, Y+7	; 0x07
    45fc:	98 85       	ldd	r25, Y+8	; 0x08
    45fe:	44 97       	sbiw	r24, 0x14	; 20
    4600:	14 f3       	brlt	.-60     	; 0x45c6 <vDisplayUpdateTask+0x30>
    4602:	8d 81       	ldd	r24, Y+5	; 0x05
    4604:	9e 81       	ldd	r25, Y+6	; 0x06
    4606:	01 96       	adiw	r24, 0x01	; 1
    4608:	8d 83       	std	Y+5, r24	; 0x05
    460a:	9e 83       	std	Y+6, r25	; 0x06
    460c:	8d 81       	ldd	r24, Y+5	; 0x05
    460e:	9e 81       	ldd	r25, Y+6	; 0x06
    4610:	04 97       	sbiw	r24, 0x04	; 4
    4612:	b4 f2       	brlt	.-84     	; 0x45c0 <vDisplayUpdateTask+0x2a>
    4614:	60 e4       	ldi	r22, 0x40	; 64
    4616:	7c e9       	ldi	r23, 0x9C	; 156
    4618:	80 e0       	ldi	r24, 0x00	; 0
    461a:	90 e0       	ldi	r25, 0x00	; 0
    461c:	0e 94 82 20 	call	0x4104	; 0x4104 <delayUS>
    4620:	83 e0       	ldi	r24, 0x03	; 3
    4622:	0e 94 0b 21 	call	0x4216	; 0x4216 <setPort>
    4626:	68 e8       	ldi	r22, 0x88	; 136
    4628:	73 e1       	ldi	r23, 0x13	; 19
    462a:	80 e0       	ldi	r24, 0x00	; 0
    462c:	90 e0       	ldi	r25, 0x00	; 0
    462e:	0e 94 82 20 	call	0x4104	; 0x4104 <delayUS>
    4632:	0e 94 7d 21 	call	0x42fa	; 0x42fa <Nybble>
    4636:	60 ea       	ldi	r22, 0xA0	; 160
    4638:	70 e0       	ldi	r23, 0x00	; 0
    463a:	80 e0       	ldi	r24, 0x00	; 0
    463c:	90 e0       	ldi	r25, 0x00	; 0
    463e:	0e 94 82 20 	call	0x4104	; 0x4104 <delayUS>
    4642:	0e 94 7d 21 	call	0x42fa	; 0x42fa <Nybble>
    4646:	60 ea       	ldi	r22, 0xA0	; 160
    4648:	70 e0       	ldi	r23, 0x00	; 0
    464a:	80 e0       	ldi	r24, 0x00	; 0
    464c:	90 e0       	ldi	r25, 0x00	; 0
    464e:	0e 94 82 20 	call	0x4104	; 0x4104 <delayUS>
    4652:	0e 94 7d 21 	call	0x42fa	; 0x42fa <Nybble>
    4656:	60 ea       	ldi	r22, 0xA0	; 160
    4658:	70 e0       	ldi	r23, 0x00	; 0
    465a:	80 e0       	ldi	r24, 0x00	; 0
    465c:	90 e0       	ldi	r25, 0x00	; 0
    465e:	0e 94 82 20 	call	0x4104	; 0x4104 <delayUS>
    4662:	82 e0       	ldi	r24, 0x02	; 2
    4664:	0e 94 0b 21 	call	0x4216	; 0x4216 <setPort>
    4668:	0e 94 7d 21 	call	0x42fa	; 0x42fa <Nybble>
    466c:	88 e2       	ldi	r24, 0x28	; 40
    466e:	0e 94 91 21 	call	0x4322	; 0x4322 <command>
    4672:	80 e1       	ldi	r24, 0x10	; 16
    4674:	0e 94 91 21 	call	0x4322	; 0x4322 <command>
    4678:	8c e0       	ldi	r24, 0x0C	; 12
    467a:	0e 94 91 21 	call	0x4322	; 0x4322 <command>
    467e:	86 e0       	ldi	r24, 0x06	; 6
    4680:	0e 94 91 21 	call	0x4322	; 0x4322 <command>
    4684:	68 ec       	ldi	r22, 0xC8	; 200
    4686:	70 e0       	ldi	r23, 0x00	; 0
    4688:	80 e0       	ldi	r24, 0x00	; 0
    468a:	90 e0       	ldi	r25, 0x00	; 0
    468c:	0e 94 41 12 	call	0x2482	; 0x2482 <vTaskDelay>
    4690:	80 91 cd 2c 	lds	r24, 0x2CCD	; 0x802ccd <egDisplayTiming>
    4694:	90 91 ce 2c 	lds	r25, 0x2CCE	; 0x802cce <egDisplayTiming+0x1>
    4698:	40 e0       	ldi	r20, 0x00	; 0
    469a:	50 e0       	ldi	r21, 0x00	; 0
    469c:	ba 01       	movw	r22, r20
    469e:	0e 94 3c 04 	call	0x878	; 0x878 <xEventGroupClearBits>
    46a2:	dc 01       	movw	r26, r24
    46a4:	cb 01       	movw	r24, r22
    46a6:	89 2b       	or	r24, r25
    46a8:	8a 2b       	or	r24, r26
    46aa:	8b 2b       	or	r24, r27
    46ac:	09 f4       	brne	.+2      	; 0x46b0 <vDisplayUpdateTask+0x11a>
    46ae:	96 c0       	rjmp	.+300    	; 0x47dc <vDisplayUpdateTask+0x246>
    46b0:	80 91 cd 2c 	lds	r24, 0x2CCD	; 0x802ccd <egDisplayTiming>
    46b4:	90 91 ce 2c 	lds	r25, 0x2CCE	; 0x802cce <egDisplayTiming+0x1>
    46b8:	42 e0       	ldi	r20, 0x02	; 2
    46ba:	50 e0       	ldi	r21, 0x00	; 0
    46bc:	60 e0       	ldi	r22, 0x00	; 0
    46be:	70 e0       	ldi	r23, 0x00	; 0
    46c0:	0e 94 3c 04 	call	0x878	; 0x878 <xEventGroupClearBits>
    46c4:	19 82       	std	Y+1, r1	; 0x01
    46c6:	1a 82       	std	Y+2, r1	; 0x02
    46c8:	26 c0       	rjmp	.+76     	; 0x4716 <vDisplayUpdateTask+0x180>
    46ca:	1b 82       	std	Y+3, r1	; 0x03
    46cc:	1c 82       	std	Y+4, r1	; 0x04
    46ce:	1a c0       	rjmp	.+52     	; 0x4704 <vDisplayUpdateTask+0x16e>
    46d0:	29 81       	ldd	r18, Y+1	; 0x01
    46d2:	3a 81       	ldd	r19, Y+2	; 0x02
    46d4:	44 e1       	ldi	r20, 0x14	; 20
    46d6:	42 9f       	mul	r20, r18
    46d8:	c0 01       	movw	r24, r0
    46da:	43 9f       	mul	r20, r19
    46dc:	90 0d       	add	r25, r0
    46de:	11 24       	eor	r1, r1
    46e0:	9e 01       	movw	r18, r28
    46e2:	2f 5f       	subi	r18, 0xFF	; 255
    46e4:	3f 4f       	sbci	r19, 0xFF	; 255
    46e6:	28 0f       	add	r18, r24
    46e8:	39 1f       	adc	r19, r25
    46ea:	8b 81       	ldd	r24, Y+3	; 0x03
    46ec:	9c 81       	ldd	r25, Y+4	; 0x04
    46ee:	82 0f       	add	r24, r18
    46f0:	93 1f       	adc	r25, r19
    46f2:	08 96       	adiw	r24, 0x08	; 8
    46f4:	20 e2       	ldi	r18, 0x20	; 32
    46f6:	fc 01       	movw	r30, r24
    46f8:	20 83       	st	Z, r18
    46fa:	8b 81       	ldd	r24, Y+3	; 0x03
    46fc:	9c 81       	ldd	r25, Y+4	; 0x04
    46fe:	01 96       	adiw	r24, 0x01	; 1
    4700:	8b 83       	std	Y+3, r24	; 0x03
    4702:	9c 83       	std	Y+4, r25	; 0x04
    4704:	8b 81       	ldd	r24, Y+3	; 0x03
    4706:	9c 81       	ldd	r25, Y+4	; 0x04
    4708:	44 97       	sbiw	r24, 0x14	; 20
    470a:	14 f3       	brlt	.-60     	; 0x46d0 <vDisplayUpdateTask+0x13a>
    470c:	89 81       	ldd	r24, Y+1	; 0x01
    470e:	9a 81       	ldd	r25, Y+2	; 0x02
    4710:	01 96       	adiw	r24, 0x01	; 1
    4712:	89 83       	std	Y+1, r24	; 0x01
    4714:	9a 83       	std	Y+2, r25	; 0x02
    4716:	89 81       	ldd	r24, Y+1	; 0x01
    4718:	9a 81       	ldd	r25, Y+2	; 0x02
    471a:	04 97       	sbiw	r24, 0x04	; 4
    471c:	b4 f2       	brlt	.-84     	; 0x46ca <vDisplayUpdateTask+0x134>
    471e:	5e c0       	rjmp	.+188    	; 0x47dc <vDisplayUpdateTask+0x246>
    4720:	80 91 cb 2c 	lds	r24, 0x2CCB	; 0x802ccb <displayLineQueue>
    4724:	90 91 cc 2c 	lds	r25, 0x2CCC	; 0x802ccc <displayLineQueue+0x1>
    4728:	be 01       	movw	r22, r28
    472a:	67 5a       	subi	r22, 0xA7	; 167
    472c:	7f 4f       	sbci	r23, 0xFF	; 255
    472e:	2f ef       	ldi	r18, 0xFF	; 255
    4730:	3f ef       	ldi	r19, 0xFF	; 255
    4732:	a9 01       	movw	r20, r18
    4734:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <xQueueReceive>
    4738:	88 23       	and	r24, r24
    473a:	09 f4       	brne	.+2      	; 0x473e <vDisplayUpdateTask+0x1a8>
    473c:	4f c0       	rjmp	.+158    	; 0x47dc <vDisplayUpdateTask+0x246>
    473e:	19 82       	std	Y+1, r1	; 0x01
    4740:	1a 82       	std	Y+2, r1	; 0x02
    4742:	32 c0       	rjmp	.+100    	; 0x47a8 <vDisplayUpdateTask+0x212>
    4744:	ce 01       	movw	r24, r28
    4746:	87 5a       	subi	r24, 0xA7	; 167
    4748:	9f 4f       	sbci	r25, 0xFF	; 255
    474a:	fc 01       	movw	r30, r24
    474c:	80 81       	ld	r24, Z
    474e:	48 2f       	mov	r20, r24
    4750:	50 e0       	ldi	r21, 0x00	; 0
    4752:	ce 01       	movw	r24, r28
    4754:	87 5a       	subi	r24, 0xA7	; 167
    4756:	9f 4f       	sbci	r25, 0xFF	; 255
    4758:	fc 01       	movw	r30, r24
    475a:	81 81       	ldd	r24, Z+1	; 0x01
    475c:	28 2f       	mov	r18, r24
    475e:	30 e0       	ldi	r19, 0x00	; 0
    4760:	89 81       	ldd	r24, Y+1	; 0x01
    4762:	9a 81       	ldd	r25, Y+2	; 0x02
    4764:	82 0f       	add	r24, r18
    4766:	93 1f       	adc	r25, r19
    4768:	be 01       	movw	r22, r28
    476a:	67 5a       	subi	r22, 0xA7	; 167
    476c:	7f 4f       	sbci	r23, 0xFF	; 255
    476e:	29 81       	ldd	r18, Y+1	; 0x01
    4770:	3a 81       	ldd	r19, Y+2	; 0x02
    4772:	26 0f       	add	r18, r22
    4774:	37 1f       	adc	r19, r23
    4776:	2e 5f       	subi	r18, 0xFE	; 254
    4778:	3f 4f       	sbci	r19, 0xFF	; 255
    477a:	f9 01       	movw	r30, r18
    477c:	60 81       	ld	r22, Z
    477e:	74 e1       	ldi	r23, 0x14	; 20
    4780:	74 9f       	mul	r23, r20
    4782:	90 01       	movw	r18, r0
    4784:	75 9f       	mul	r23, r21
    4786:	30 0d       	add	r19, r0
    4788:	11 24       	eor	r1, r1
    478a:	ae 01       	movw	r20, r28
    478c:	4f 5f       	subi	r20, 0xFF	; 255
    478e:	5f 4f       	sbci	r21, 0xFF	; 255
    4790:	24 0f       	add	r18, r20
    4792:	35 1f       	adc	r19, r21
    4794:	82 0f       	add	r24, r18
    4796:	93 1f       	adc	r25, r19
    4798:	08 96       	adiw	r24, 0x08	; 8
    479a:	fc 01       	movw	r30, r24
    479c:	60 83       	st	Z, r22
    479e:	89 81       	ldd	r24, Y+1	; 0x01
    47a0:	9a 81       	ldd	r25, Y+2	; 0x02
    47a2:	01 96       	adiw	r24, 0x01	; 1
    47a4:	89 83       	std	Y+1, r24	; 0x01
    47a6:	9a 83       	std	Y+2, r25	; 0x02
    47a8:	ce 01       	movw	r24, r28
    47aa:	87 5a       	subi	r24, 0xA7	; 167
    47ac:	9f 4f       	sbci	r25, 0xFF	; 255
    47ae:	fc 01       	movw	r30, r24
    47b0:	81 81       	ldd	r24, Z+1	; 0x01
    47b2:	28 2f       	mov	r18, r24
    47b4:	30 e0       	ldi	r19, 0x00	; 0
    47b6:	89 81       	ldd	r24, Y+1	; 0x01
    47b8:	9a 81       	ldd	r25, Y+2	; 0x02
    47ba:	82 0f       	add	r24, r18
    47bc:	93 1f       	adc	r25, r19
    47be:	44 97       	sbiw	r24, 0x14	; 20
    47c0:	6c f4       	brge	.+26     	; 0x47dc <vDisplayUpdateTask+0x246>
    47c2:	9e 01       	movw	r18, r28
    47c4:	27 5a       	subi	r18, 0xA7	; 167
    47c6:	3f 4f       	sbci	r19, 0xFF	; 255
    47c8:	89 81       	ldd	r24, Y+1	; 0x01
    47ca:	9a 81       	ldd	r25, Y+2	; 0x02
    47cc:	82 0f       	add	r24, r18
    47ce:	93 1f       	adc	r25, r19
    47d0:	02 96       	adiw	r24, 0x02	; 2
    47d2:	fc 01       	movw	r30, r24
    47d4:	80 81       	ld	r24, Z
    47d6:	88 23       	and	r24, r24
    47d8:	09 f0       	breq	.+2      	; 0x47dc <vDisplayUpdateTask+0x246>
    47da:	b4 cf       	rjmp	.-152    	; 0x4744 <vDisplayUpdateTask+0x1ae>
    47dc:	80 91 cb 2c 	lds	r24, 0x2CCB	; 0x802ccb <displayLineQueue>
    47e0:	90 91 cc 2c 	lds	r25, 0x2CCC	; 0x802ccc <displayLineQueue+0x1>
    47e4:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <uxQueueMessagesWaiting>
    47e8:	88 23       	and	r24, r24
    47ea:	09 f0       	breq	.+2      	; 0x47ee <vDisplayUpdateTask+0x258>
    47ec:	99 cf       	rjmp	.-206    	; 0x4720 <vDisplayUpdateTask+0x18a>
    47ee:	19 82       	std	Y+1, r1	; 0x01
    47f0:	1a 82       	std	Y+2, r1	; 0x02
    47f2:	19 c0       	rjmp	.+50     	; 0x4826 <vDisplayUpdateTask+0x290>
    47f4:	9e 01       	movw	r18, r28
    47f6:	27 5f       	subi	r18, 0xF7	; 247
    47f8:	3f 4f       	sbci	r19, 0xFF	; 255
    47fa:	49 81       	ldd	r20, Y+1	; 0x01
    47fc:	5a 81       	ldd	r21, Y+2	; 0x02
    47fe:	64 e1       	ldi	r22, 0x14	; 20
    4800:	64 9f       	mul	r22, r20
    4802:	c0 01       	movw	r24, r0
    4804:	65 9f       	mul	r22, r21
    4806:	90 0d       	add	r25, r0
    4808:	11 24       	eor	r1, r1
    480a:	28 0f       	add	r18, r24
    480c:	39 1f       	adc	r19, r25
    480e:	89 81       	ldd	r24, Y+1	; 0x01
    4810:	9a 81       	ldd	r25, Y+2	; 0x02
    4812:	a9 01       	movw	r20, r18
    4814:	60 e0       	ldi	r22, 0x00	; 0
    4816:	70 e0       	ldi	r23, 0x00	; 0
    4818:	0e 94 ad 22 	call	0x455a	; 0x455a <_displayWriteStringAtPos>
    481c:	89 81       	ldd	r24, Y+1	; 0x01
    481e:	9a 81       	ldd	r25, Y+2	; 0x02
    4820:	01 96       	adiw	r24, 0x01	; 1
    4822:	89 83       	std	Y+1, r24	; 0x01
    4824:	9a 83       	std	Y+2, r25	; 0x02
    4826:	89 81       	ldd	r24, Y+1	; 0x01
    4828:	9a 81       	ldd	r25, Y+2	; 0x02
    482a:	04 97       	sbiw	r24, 0x04	; 4
    482c:	1c f3       	brlt	.-58     	; 0x47f4 <vDisplayUpdateTask+0x25e>
    482e:	2a cf       	rjmp	.-428    	; 0x4684 <vDisplayUpdateTask+0xee>

00004830 <vDisplayWriteStringAtPos>:

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    4830:	cf 93       	push	r28
    4832:	df 93       	push	r29
    4834:	1f 92       	push	r1
    4836:	1f 92       	push	r1
    4838:	cd b7       	in	r28, 0x3d	; 61
    483a:	de b7       	in	r29, 0x3e	; 62
	va_list arg;	
	va_start(arg, fmt);
    483c:	ce 01       	movw	r24, r28
    483e:	0e 96       	adiw	r24, 0x0e	; 14
    4840:	89 83       	std	Y+1, r24	; 0x01
    4842:	9a 83       	std	Y+2, r25	; 0x02
	display_vprintf(line, pos, fmt, arg);
    4844:	29 81       	ldd	r18, Y+1	; 0x01
    4846:	3a 81       	ldd	r19, Y+2	; 0x02
    4848:	4c 85       	ldd	r20, Y+12	; 0x0c
    484a:	5d 85       	ldd	r21, Y+13	; 0x0d
    484c:	6a 85       	ldd	r22, Y+10	; 0x0a
    484e:	7b 85       	ldd	r23, Y+11	; 0x0b
    4850:	88 85       	ldd	r24, Y+8	; 0x08
    4852:	99 85       	ldd	r25, Y+9	; 0x09
    4854:	0e 94 32 24 	call	0x4864	; 0x4864 <display_vprintf>
	va_end(arg);	
}
    4858:	00 00       	nop
    485a:	0f 90       	pop	r0
    485c:	0f 90       	pop	r0
    485e:	df 91       	pop	r29
    4860:	cf 91       	pop	r28
    4862:	08 95       	ret

00004864 <display_vprintf>:
 
static int display_vprintf(int line, int pos, char const *fmt, va_list arg) {
    4864:	0f 93       	push	r16
    4866:	cf 93       	push	r28
    4868:	df 93       	push	r29
    486a:	cd b7       	in	r28, 0x3d	; 61
    486c:	de b7       	in	r29, 0x3e	; 62
    486e:	ec 97       	sbiw	r28, 0x3c	; 60
    4870:	cd bf       	out	0x3d, r28	; 61
    4872:	de bf       	out	0x3e, r29	; 62
    4874:	8d ab       	std	Y+53, r24	; 0x35
    4876:	9e ab       	std	Y+54, r25	; 0x36
    4878:	6f ab       	std	Y+55, r22	; 0x37
    487a:	78 af       	std	Y+56, r23	; 0x38
    487c:	49 af       	std	Y+57, r20	; 0x39
    487e:	5a af       	std	Y+58, r21	; 0x3a
    4880:	2b af       	std	Y+59, r18	; 0x3b
    4882:	3c af       	std	Y+60, r19	; 0x3c
	int int_temp;
	char char_temp;
	char *string_temp;
	double double_temp;
	char ch;
	int length = 0;
    4884:	19 82       	std	Y+1, r1	; 0x01
    4886:	1a 82       	std	Y+2, r1	; 0x02

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    4888:	1b 82       	std	Y+3, r1	; 0x03
    488a:	1c 82       	std	Y+4, r1	; 0x04
    488c:	0b c0       	rjmp	.+22     	; 0x48a4 <display_vprintf+0x40>
		buffer[i] = 0x00;
    488e:	8b 81       	ldd	r24, Y+3	; 0x03
    4890:	9c 81       	ldd	r25, Y+4	; 0x04
    4892:	88 56       	subi	r24, 0x68	; 104
    4894:	93 4d       	sbci	r25, 0xD3	; 211
    4896:	fc 01       	movw	r30, r24
    4898:	10 82       	st	Z, r1
	char ch;
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    489a:	8b 81       	ldd	r24, Y+3	; 0x03
    489c:	9c 81       	ldd	r25, Y+4	; 0x04
    489e:	01 96       	adiw	r24, 0x01	; 1
    48a0:	8b 83       	std	Y+3, r24	; 0x03
    48a2:	9c 83       	std	Y+4, r25	; 0x04
    48a4:	8b 81       	ldd	r24, Y+3	; 0x03
    48a6:	9c 81       	ldd	r25, Y+4	; 0x04
    48a8:	44 97       	sbiw	r24, 0x14	; 20
    48aa:	8c f3       	brlt	.-30     	; 0x488e <display_vprintf+0x2a>
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    48ac:	1d 82       	std	Y+5, r1	; 0x05
    48ae:	1e 82       	std	Y+6, r1	; 0x06
    48b0:	0b c0       	rjmp	.+22     	; 0x48c8 <display_vprintf+0x64>
		str[i] = 0x00;
    48b2:	8d 81       	ldd	r24, Y+5	; 0x05
    48b4:	9e 81       	ldd	r25, Y+6	; 0x06
    48b6:	84 55       	subi	r24, 0x54	; 84
    48b8:	93 4d       	sbci	r25, 0xD3	; 211
    48ba:	fc 01       	movw	r30, r24
    48bc:	10 82       	st	Z, r1
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    48be:	8d 81       	ldd	r24, Y+5	; 0x05
    48c0:	9e 81       	ldd	r25, Y+6	; 0x06
    48c2:	01 96       	adiw	r24, 0x01	; 1
    48c4:	8d 83       	std	Y+5, r24	; 0x05
    48c6:	9e 83       	std	Y+6, r25	; 0x06
    48c8:	8d 81       	ldd	r24, Y+5	; 0x05
    48ca:	9e 81       	ldd	r25, Y+6	; 0x06
    48cc:	44 97       	sbiw	r24, 0x14	; 20
    48ce:	8c f3       	brlt	.-30     	; 0x48b2 <display_vprintf+0x4e>
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    48d0:	be c1       	rjmp	.+892    	; 0x4c4e <display_vprintf+0x3ea>
		if ( '%' == ch ) {
    48d2:	8d 89       	ldd	r24, Y+21	; 0x15
    48d4:	85 32       	cpi	r24, 0x25	; 37
    48d6:	09 f0       	breq	.+2      	; 0x48da <display_vprintf+0x76>
    48d8:	a0 c1       	rjmp	.+832    	; 0x4c1a <display_vprintf+0x3b6>
			switch (ch = *fmt++) {
    48da:	89 ad       	ldd	r24, Y+57	; 0x39
    48dc:	9a ad       	ldd	r25, Y+58	; 0x3a
    48de:	9c 01       	movw	r18, r24
    48e0:	2f 5f       	subi	r18, 0xFF	; 255
    48e2:	3f 4f       	sbci	r19, 0xFF	; 255
    48e4:	29 af       	std	Y+57, r18	; 0x39
    48e6:	3a af       	std	Y+58, r19	; 0x3a
    48e8:	fc 01       	movw	r30, r24
    48ea:	80 81       	ld	r24, Z
    48ec:	8d 8b       	std	Y+21, r24	; 0x15
    48ee:	8d 89       	ldd	r24, Y+21	; 0x15
    48f0:	88 2f       	mov	r24, r24
    48f2:	90 e0       	ldi	r25, 0x00	; 0
    48f4:	85 36       	cpi	r24, 0x65	; 101
    48f6:	91 05       	cpc	r25, r1
    48f8:	09 f4       	brne	.+2      	; 0x48fc <display_vprintf+0x98>
    48fa:	46 c1       	rjmp	.+652    	; 0x4b88 <display_vprintf+0x324>
    48fc:	86 36       	cpi	r24, 0x66	; 102
    48fe:	91 05       	cpc	r25, r1
    4900:	54 f4       	brge	.+20     	; 0x4916 <display_vprintf+0xb2>
    4902:	83 36       	cpi	r24, 0x63	; 99
    4904:	91 05       	cpc	r25, r1
    4906:	01 f1       	breq	.+64     	; 0x4948 <display_vprintf+0xe4>
    4908:	84 36       	cpi	r24, 0x64	; 100
    490a:	91 05       	cpc	r25, r1
    490c:	0c f0       	brlt	.+2      	; 0x4910 <display_vprintf+0xac>
    490e:	70 c0       	rjmp	.+224    	; 0x49f0 <display_vprintf+0x18c>
    4910:	85 97       	sbiw	r24, 0x25	; 37
    4912:	69 f0       	breq	.+26     	; 0x492e <display_vprintf+0xca>
    4914:	9c c1       	rjmp	.+824    	; 0x4c4e <display_vprintf+0x3ea>
    4916:	83 37       	cpi	r24, 0x73	; 115
    4918:	91 05       	cpc	r25, r1
    491a:	71 f1       	breq	.+92     	; 0x4978 <display_vprintf+0x114>
    491c:	88 37       	cpi	r24, 0x78	; 120
    491e:	91 05       	cpc	r25, r1
    4920:	09 f4       	brne	.+2      	; 0x4924 <display_vprintf+0xc0>
    4922:	a8 c0       	rjmp	.+336    	; 0x4a74 <display_vprintf+0x210>
    4924:	86 36       	cpi	r24, 0x66	; 102
    4926:	91 05       	cpc	r25, r1
    4928:	09 f4       	brne	.+2      	; 0x492c <display_vprintf+0xc8>
    492a:	e6 c0       	rjmp	.+460    	; 0x4af8 <display_vprintf+0x294>
    492c:	90 c1       	rjmp	.+800    	; 0x4c4e <display_vprintf+0x3ea>
				/* %% - print out a single %    */
				case '%':
				str[length] = '%';
    492e:	89 81       	ldd	r24, Y+1	; 0x01
    4930:	9a 81       	ldd	r25, Y+2	; 0x02
    4932:	84 55       	subi	r24, 0x54	; 84
    4934:	93 4d       	sbci	r25, 0xD3	; 211
    4936:	25 e2       	ldi	r18, 0x25	; 37
    4938:	fc 01       	movw	r30, r24
    493a:	20 83       	st	Z, r18
				length++;
    493c:	89 81       	ldd	r24, Y+1	; 0x01
    493e:	9a 81       	ldd	r25, Y+2	; 0x02
    4940:	01 96       	adiw	r24, 0x01	; 1
    4942:	89 83       	std	Y+1, r24	; 0x01
    4944:	9a 83       	std	Y+2, r25	; 0x02
				break;
    4946:	83 c1       	rjmp	.+774    	; 0x4c4e <display_vprintf+0x3ea>

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
    4948:	8b ad       	ldd	r24, Y+59	; 0x3b
    494a:	9c ad       	ldd	r25, Y+60	; 0x3c
    494c:	9c 01       	movw	r18, r24
    494e:	2e 5f       	subi	r18, 0xFE	; 254
    4950:	3f 4f       	sbci	r19, 0xFF	; 255
    4952:	2b af       	std	Y+59, r18	; 0x3b
    4954:	3c af       	std	Y+60, r19	; 0x3c
    4956:	fc 01       	movw	r30, r24
    4958:	80 81       	ld	r24, Z
    495a:	91 81       	ldd	r25, Z+1	; 0x01
    495c:	8e 8b       	std	Y+22, r24	; 0x16
				str[length] = char_temp;
    495e:	89 81       	ldd	r24, Y+1	; 0x01
    4960:	9a 81       	ldd	r25, Y+2	; 0x02
    4962:	84 55       	subi	r24, 0x54	; 84
    4964:	93 4d       	sbci	r25, 0xD3	; 211
    4966:	2e 89       	ldd	r18, Y+22	; 0x16
    4968:	fc 01       	movw	r30, r24
    496a:	20 83       	st	Z, r18
				length++;
    496c:	89 81       	ldd	r24, Y+1	; 0x01
    496e:	9a 81       	ldd	r25, Y+2	; 0x02
    4970:	01 96       	adiw	r24, 0x01	; 1
    4972:	89 83       	std	Y+1, r24	; 0x01
    4974:	9a 83       	std	Y+2, r25	; 0x02
				break;
    4976:	6b c1       	rjmp	.+726    	; 0x4c4e <display_vprintf+0x3ea>

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    4978:	8b ad       	ldd	r24, Y+59	; 0x3b
    497a:	9c ad       	ldd	r25, Y+60	; 0x3c
    497c:	9c 01       	movw	r18, r24
    497e:	2e 5f       	subi	r18, 0xFE	; 254
    4980:	3f 4f       	sbci	r19, 0xFF	; 255
    4982:	2b af       	std	Y+59, r18	; 0x3b
    4984:	3c af       	std	Y+60, r19	; 0x3c
    4986:	fc 01       	movw	r30, r24
    4988:	80 81       	ld	r24, Z
    498a:	91 81       	ldd	r25, Z+1	; 0x01
    498c:	8f 8b       	std	Y+23, r24	; 0x17
    498e:	98 8f       	std	Y+24, r25	; 0x18
				for(int i = 0; i < strlen(string_temp);i++) {
    4990:	1f 82       	std	Y+7, r1	; 0x07
    4992:	18 86       	std	Y+8, r1	; 0x08
    4994:	17 c0       	rjmp	.+46     	; 0x49c4 <display_vprintf+0x160>
					str[length+i] = string_temp[i];
    4996:	29 81       	ldd	r18, Y+1	; 0x01
    4998:	3a 81       	ldd	r19, Y+2	; 0x02
    499a:	8f 81       	ldd	r24, Y+7	; 0x07
    499c:	98 85       	ldd	r25, Y+8	; 0x08
    499e:	82 0f       	add	r24, r18
    49a0:	93 1f       	adc	r25, r19
    49a2:	2f 81       	ldd	r18, Y+7	; 0x07
    49a4:	38 85       	ldd	r19, Y+8	; 0x08
    49a6:	4f 89       	ldd	r20, Y+23	; 0x17
    49a8:	58 8d       	ldd	r21, Y+24	; 0x18
    49aa:	24 0f       	add	r18, r20
    49ac:	35 1f       	adc	r19, r21
    49ae:	f9 01       	movw	r30, r18
    49b0:	20 81       	ld	r18, Z
    49b2:	84 55       	subi	r24, 0x54	; 84
    49b4:	93 4d       	sbci	r25, 0xD3	; 211
    49b6:	fc 01       	movw	r30, r24
    49b8:	20 83       	st	Z, r18
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
				for(int i = 0; i < strlen(string_temp);i++) {
    49ba:	8f 81       	ldd	r24, Y+7	; 0x07
    49bc:	98 85       	ldd	r25, Y+8	; 0x08
    49be:	01 96       	adiw	r24, 0x01	; 1
    49c0:	8f 83       	std	Y+7, r24	; 0x07
    49c2:	98 87       	std	Y+8, r25	; 0x08
    49c4:	8f 89       	ldd	r24, Y+23	; 0x17
    49c6:	98 8d       	ldd	r25, Y+24	; 0x18
    49c8:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <strlen>
    49cc:	9c 01       	movw	r18, r24
    49ce:	8f 81       	ldd	r24, Y+7	; 0x07
    49d0:	98 85       	ldd	r25, Y+8	; 0x08
    49d2:	82 17       	cp	r24, r18
    49d4:	93 07       	cpc	r25, r19
    49d6:	f8 f2       	brcs	.-66     	; 0x4996 <display_vprintf+0x132>
					str[length+i] = string_temp[i];
				}
				length += strlen(string_temp);
    49d8:	8f 89       	ldd	r24, Y+23	; 0x17
    49da:	98 8d       	ldd	r25, Y+24	; 0x18
    49dc:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <strlen>
    49e0:	9c 01       	movw	r18, r24
    49e2:	89 81       	ldd	r24, Y+1	; 0x01
    49e4:	9a 81       	ldd	r25, Y+2	; 0x02
    49e6:	82 0f       	add	r24, r18
    49e8:	93 1f       	adc	r25, r19
    49ea:	89 83       	std	Y+1, r24	; 0x01
    49ec:	9a 83       	std	Y+2, r25	; 0x02
				break;
    49ee:	2f c1       	rjmp	.+606    	; 0x4c4e <display_vprintf+0x3ea>

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    49f0:	8b ad       	ldd	r24, Y+59	; 0x3b
    49f2:	9c ad       	ldd	r25, Y+60	; 0x3c
    49f4:	9c 01       	movw	r18, r24
    49f6:	2e 5f       	subi	r18, 0xFE	; 254
    49f8:	3f 4f       	sbci	r19, 0xFF	; 255
    49fa:	2b af       	std	Y+59, r18	; 0x3b
    49fc:	3c af       	std	Y+60, r19	; 0x3c
    49fe:	fc 01       	movw	r30, r24
    4a00:	80 81       	ld	r24, Z
    4a02:	91 81       	ldd	r25, Z+1	; 0x01
    4a04:	89 8f       	std	Y+25, r24	; 0x19
    4a06:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 10);
    4a08:	89 8d       	ldd	r24, Y+25	; 0x19
    4a0a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4a0c:	4a e0       	ldi	r20, 0x0A	; 10
    4a0e:	50 e0       	ldi	r21, 0x00	; 0
    4a10:	68 e9       	ldi	r22, 0x98	; 152
    4a12:	7c e2       	ldi	r23, 0x2C	; 44
    4a14:	0e 94 55 2d 	call	0x5aaa	; 0x5aaa <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    4a18:	19 86       	std	Y+9, r1	; 0x09
    4a1a:	1a 86       	std	Y+10, r1	; 0x0a
    4a1c:	15 c0       	rjmp	.+42     	; 0x4a48 <display_vprintf+0x1e4>
					str[length+i] = buffer[i];
    4a1e:	29 81       	ldd	r18, Y+1	; 0x01
    4a20:	3a 81       	ldd	r19, Y+2	; 0x02
    4a22:	89 85       	ldd	r24, Y+9	; 0x09
    4a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a26:	82 0f       	add	r24, r18
    4a28:	93 1f       	adc	r25, r19
    4a2a:	29 85       	ldd	r18, Y+9	; 0x09
    4a2c:	3a 85       	ldd	r19, Y+10	; 0x0a
    4a2e:	28 56       	subi	r18, 0x68	; 104
    4a30:	33 4d       	sbci	r19, 0xD3	; 211
    4a32:	f9 01       	movw	r30, r18
    4a34:	20 81       	ld	r18, Z
    4a36:	84 55       	subi	r24, 0x54	; 84
    4a38:	93 4d       	sbci	r25, 0xD3	; 211
    4a3a:	fc 01       	movw	r30, r24
    4a3c:	20 83       	st	Z, r18

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    4a3e:	89 85       	ldd	r24, Y+9	; 0x09
    4a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a42:	01 96       	adiw	r24, 0x01	; 1
    4a44:	89 87       	std	Y+9, r24	; 0x09
    4a46:	9a 87       	std	Y+10, r25	; 0x0a
    4a48:	88 e9       	ldi	r24, 0x98	; 152
    4a4a:	9c e2       	ldi	r25, 0x2C	; 44
    4a4c:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <strlen>
    4a50:	9c 01       	movw	r18, r24
    4a52:	89 85       	ldd	r24, Y+9	; 0x09
    4a54:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a56:	82 17       	cp	r24, r18
    4a58:	93 07       	cpc	r25, r19
    4a5a:	08 f3       	brcs	.-62     	; 0x4a1e <display_vprintf+0x1ba>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    4a5c:	88 e9       	ldi	r24, 0x98	; 152
    4a5e:	9c e2       	ldi	r25, 0x2C	; 44
    4a60:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <strlen>
    4a64:	9c 01       	movw	r18, r24
    4a66:	89 81       	ldd	r24, Y+1	; 0x01
    4a68:	9a 81       	ldd	r25, Y+2	; 0x02
    4a6a:	82 0f       	add	r24, r18
    4a6c:	93 1f       	adc	r25, r19
    4a6e:	89 83       	std	Y+1, r24	; 0x01
    4a70:	9a 83       	std	Y+2, r25	; 0x02
				break;
    4a72:	ed c0       	rjmp	.+474    	; 0x4c4e <display_vprintf+0x3ea>

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    4a74:	8b ad       	ldd	r24, Y+59	; 0x3b
    4a76:	9c ad       	ldd	r25, Y+60	; 0x3c
    4a78:	9c 01       	movw	r18, r24
    4a7a:	2e 5f       	subi	r18, 0xFE	; 254
    4a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a7e:	2b af       	std	Y+59, r18	; 0x3b
    4a80:	3c af       	std	Y+60, r19	; 0x3c
    4a82:	fc 01       	movw	r30, r24
    4a84:	80 81       	ld	r24, Z
    4a86:	91 81       	ldd	r25, Z+1	; 0x01
    4a88:	89 8f       	std	Y+25, r24	; 0x19
    4a8a:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 16);
    4a8c:	89 8d       	ldd	r24, Y+25	; 0x19
    4a8e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4a90:	40 e1       	ldi	r20, 0x10	; 16
    4a92:	50 e0       	ldi	r21, 0x00	; 0
    4a94:	68 e9       	ldi	r22, 0x98	; 152
    4a96:	7c e2       	ldi	r23, 0x2C	; 44
    4a98:	0e 94 55 2d 	call	0x5aaa	; 0x5aaa <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    4a9c:	1b 86       	std	Y+11, r1	; 0x0b
    4a9e:	1c 86       	std	Y+12, r1	; 0x0c
    4aa0:	15 c0       	rjmp	.+42     	; 0x4acc <display_vprintf+0x268>
					str[length+i] = buffer[i];
    4aa2:	29 81       	ldd	r18, Y+1	; 0x01
    4aa4:	3a 81       	ldd	r19, Y+2	; 0x02
    4aa6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4aa8:	9c 85       	ldd	r25, Y+12	; 0x0c
    4aaa:	82 0f       	add	r24, r18
    4aac:	93 1f       	adc	r25, r19
    4aae:	2b 85       	ldd	r18, Y+11	; 0x0b
    4ab0:	3c 85       	ldd	r19, Y+12	; 0x0c
    4ab2:	28 56       	subi	r18, 0x68	; 104
    4ab4:	33 4d       	sbci	r19, 0xD3	; 211
    4ab6:	f9 01       	movw	r30, r18
    4ab8:	20 81       	ld	r18, Z
    4aba:	84 55       	subi	r24, 0x54	; 84
    4abc:	93 4d       	sbci	r25, 0xD3	; 211
    4abe:	fc 01       	movw	r30, r24
    4ac0:	20 83       	st	Z, r18

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    4ac2:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ac4:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ac6:	01 96       	adiw	r24, 0x01	; 1
    4ac8:	8b 87       	std	Y+11, r24	; 0x0b
    4aca:	9c 87       	std	Y+12, r25	; 0x0c
    4acc:	88 e9       	ldi	r24, 0x98	; 152
    4ace:	9c e2       	ldi	r25, 0x2C	; 44
    4ad0:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <strlen>
    4ad4:	9c 01       	movw	r18, r24
    4ad6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ad8:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ada:	82 17       	cp	r24, r18
    4adc:	93 07       	cpc	r25, r19
    4ade:	08 f3       	brcs	.-62     	; 0x4aa2 <display_vprintf+0x23e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    4ae0:	88 e9       	ldi	r24, 0x98	; 152
    4ae2:	9c e2       	ldi	r25, 0x2C	; 44
    4ae4:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <strlen>
    4ae8:	9c 01       	movw	r18, r24
    4aea:	89 81       	ldd	r24, Y+1	; 0x01
    4aec:	9a 81       	ldd	r25, Y+2	; 0x02
    4aee:	82 0f       	add	r24, r18
    4af0:	93 1f       	adc	r25, r19
    4af2:	89 83       	std	Y+1, r24	; 0x01
    4af4:	9a 83       	std	Y+2, r25	; 0x02
				break;
    4af6:	ab c0       	rjmp	.+342    	; 0x4c4e <display_vprintf+0x3ea>

				case 'f':
				double_temp = va_arg(arg, double);
    4af8:	8b ad       	ldd	r24, Y+59	; 0x3b
    4afa:	9c ad       	ldd	r25, Y+60	; 0x3c
    4afc:	9c 01       	movw	r18, r24
    4afe:	2c 5f       	subi	r18, 0xFC	; 252
    4b00:	3f 4f       	sbci	r19, 0xFF	; 255
    4b02:	2b af       	std	Y+59, r18	; 0x3b
    4b04:	3c af       	std	Y+60, r19	; 0x3c
    4b06:	fc 01       	movw	r30, r24
    4b08:	80 81       	ld	r24, Z
    4b0a:	91 81       	ldd	r25, Z+1	; 0x01
    4b0c:	a2 81       	ldd	r26, Z+2	; 0x02
    4b0e:	b3 81       	ldd	r27, Z+3	; 0x03
    4b10:	8b 8f       	std	Y+27, r24	; 0x1b
    4b12:	9c 8f       	std	Y+28, r25	; 0x1c
    4b14:	ad 8f       	std	Y+29, r26	; 0x1d
    4b16:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_fixed(buffer, double_temp);
    4b18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b1c:	ad 8d       	ldd	r26, Y+29	; 0x1d
    4b1e:	be 8d       	ldd	r27, Y+30	; 0x1e
    4b20:	ac 01       	movw	r20, r24
    4b22:	bd 01       	movw	r22, r26
    4b24:	88 e9       	ldi	r24, 0x98	; 152
    4b26:	9c e2       	ldi	r25, 0x2C	; 44
    4b28:	0e 94 01 27 	call	0x4e02	; 0x4e02 <ftoa_fixed>
				for(int i = 0; i < strlen(buffer);i++) {
    4b2c:	1d 86       	std	Y+13, r1	; 0x0d
    4b2e:	1e 86       	std	Y+14, r1	; 0x0e
    4b30:	15 c0       	rjmp	.+42     	; 0x4b5c <display_vprintf+0x2f8>
					str[length+i] = buffer[i];
    4b32:	29 81       	ldd	r18, Y+1	; 0x01
    4b34:	3a 81       	ldd	r19, Y+2	; 0x02
    4b36:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b38:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b3a:	82 0f       	add	r24, r18
    4b3c:	93 1f       	adc	r25, r19
    4b3e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4b40:	3e 85       	ldd	r19, Y+14	; 0x0e
    4b42:	28 56       	subi	r18, 0x68	; 104
    4b44:	33 4d       	sbci	r19, 0xD3	; 211
    4b46:	f9 01       	movw	r30, r18
    4b48:	20 81       	ld	r18, Z
    4b4a:	84 55       	subi	r24, 0x54	; 84
    4b4c:	93 4d       	sbci	r25, 0xD3	; 211
    4b4e:	fc 01       	movw	r30, r24
    4b50:	20 83       	st	Z, r18
				break;

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    4b52:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b54:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b56:	01 96       	adiw	r24, 0x01	; 1
    4b58:	8d 87       	std	Y+13, r24	; 0x0d
    4b5a:	9e 87       	std	Y+14, r25	; 0x0e
    4b5c:	88 e9       	ldi	r24, 0x98	; 152
    4b5e:	9c e2       	ldi	r25, 0x2C	; 44
    4b60:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <strlen>
    4b64:	9c 01       	movw	r18, r24
    4b66:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b68:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b6a:	82 17       	cp	r24, r18
    4b6c:	93 07       	cpc	r25, r19
    4b6e:	08 f3       	brcs	.-62     	; 0x4b32 <display_vprintf+0x2ce>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    4b70:	88 e9       	ldi	r24, 0x98	; 152
    4b72:	9c e2       	ldi	r25, 0x2C	; 44
    4b74:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <strlen>
    4b78:	9c 01       	movw	r18, r24
    4b7a:	89 81       	ldd	r24, Y+1	; 0x01
    4b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    4b7e:	82 0f       	add	r24, r18
    4b80:	93 1f       	adc	r25, r19
    4b82:	89 83       	std	Y+1, r24	; 0x01
    4b84:	9a 83       	std	Y+2, r25	; 0x02
				break;
    4b86:	63 c0       	rjmp	.+198    	; 0x4c4e <display_vprintf+0x3ea>

				case 'e':
				double_temp = va_arg(arg, double);
    4b88:	8b ad       	ldd	r24, Y+59	; 0x3b
    4b8a:	9c ad       	ldd	r25, Y+60	; 0x3c
    4b8c:	9c 01       	movw	r18, r24
    4b8e:	2c 5f       	subi	r18, 0xFC	; 252
    4b90:	3f 4f       	sbci	r19, 0xFF	; 255
    4b92:	2b af       	std	Y+59, r18	; 0x3b
    4b94:	3c af       	std	Y+60, r19	; 0x3c
    4b96:	fc 01       	movw	r30, r24
    4b98:	80 81       	ld	r24, Z
    4b9a:	91 81       	ldd	r25, Z+1	; 0x01
    4b9c:	a2 81       	ldd	r26, Z+2	; 0x02
    4b9e:	b3 81       	ldd	r27, Z+3	; 0x03
    4ba0:	8b 8f       	std	Y+27, r24	; 0x1b
    4ba2:	9c 8f       	std	Y+28, r25	; 0x1c
    4ba4:	ad 8f       	std	Y+29, r26	; 0x1d
    4ba6:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_sci(buffer, double_temp);
    4ba8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4baa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4bac:	ad 8d       	ldd	r26, Y+29	; 0x1d
    4bae:	be 8d       	ldd	r27, Y+30	; 0x1e
    4bb0:	ac 01       	movw	r20, r24
    4bb2:	bd 01       	movw	r22, r26
    4bb4:	88 e9       	ldi	r24, 0x98	; 152
    4bb6:	9c e2       	ldi	r25, 0x2C	; 44
    4bb8:	0e 94 50 28 	call	0x50a0	; 0x50a0 <ftoa_sci>
				for(int i = 0; i < strlen(buffer);i++) {
    4bbc:	1f 86       	std	Y+15, r1	; 0x0f
    4bbe:	18 8a       	std	Y+16, r1	; 0x10
    4bc0:	15 c0       	rjmp	.+42     	; 0x4bec <display_vprintf+0x388>
					str[length+i] = buffer[i];
    4bc2:	29 81       	ldd	r18, Y+1	; 0x01
    4bc4:	3a 81       	ldd	r19, Y+2	; 0x02
    4bc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    4bc8:	98 89       	ldd	r25, Y+16	; 0x10
    4bca:	82 0f       	add	r24, r18
    4bcc:	93 1f       	adc	r25, r19
    4bce:	2f 85       	ldd	r18, Y+15	; 0x0f
    4bd0:	38 89       	ldd	r19, Y+16	; 0x10
    4bd2:	28 56       	subi	r18, 0x68	; 104
    4bd4:	33 4d       	sbci	r19, 0xD3	; 211
    4bd6:	f9 01       	movw	r30, r18
    4bd8:	20 81       	ld	r18, Z
    4bda:	84 55       	subi	r24, 0x54	; 84
    4bdc:	93 4d       	sbci	r25, 0xD3	; 211
    4bde:	fc 01       	movw	r30, r24
    4be0:	20 83       	st	Z, r18
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    4be2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4be4:	98 89       	ldd	r25, Y+16	; 0x10
    4be6:	01 96       	adiw	r24, 0x01	; 1
    4be8:	8f 87       	std	Y+15, r24	; 0x0f
    4bea:	98 8b       	std	Y+16, r25	; 0x10
    4bec:	88 e9       	ldi	r24, 0x98	; 152
    4bee:	9c e2       	ldi	r25, 0x2C	; 44
    4bf0:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <strlen>
    4bf4:	9c 01       	movw	r18, r24
    4bf6:	8f 85       	ldd	r24, Y+15	; 0x0f
    4bf8:	98 89       	ldd	r25, Y+16	; 0x10
    4bfa:	82 17       	cp	r24, r18
    4bfc:	93 07       	cpc	r25, r19
    4bfe:	08 f3       	brcs	.-62     	; 0x4bc2 <display_vprintf+0x35e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    4c00:	88 e9       	ldi	r24, 0x98	; 152
    4c02:	9c e2       	ldi	r25, 0x2C	; 44
    4c04:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <strlen>
    4c08:	9c 01       	movw	r18, r24
    4c0a:	89 81       	ldd	r24, Y+1	; 0x01
    4c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c0e:	82 0f       	add	r24, r18
    4c10:	93 1f       	adc	r25, r19
    4c12:	89 83       	std	Y+1, r24	; 0x01
    4c14:	9a 83       	std	Y+2, r25	; 0x02
				break;
    4c16:	00 00       	nop
    4c18:	1a c0       	rjmp	.+52     	; 0x4c4e <display_vprintf+0x3ea>
			}
		}
		else {
			str[length] = ch;
    4c1a:	89 81       	ldd	r24, Y+1	; 0x01
    4c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c1e:	84 55       	subi	r24, 0x54	; 84
    4c20:	93 4d       	sbci	r25, 0xD3	; 211
    4c22:	2d 89       	ldd	r18, Y+21	; 0x15
    4c24:	fc 01       	movw	r30, r24
    4c26:	20 83       	st	Z, r18
			if(str[length] == '\n') {
    4c28:	89 81       	ldd	r24, Y+1	; 0x01
    4c2a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c2c:	84 55       	subi	r24, 0x54	; 84
    4c2e:	93 4d       	sbci	r25, 0xD3	; 211
    4c30:	fc 01       	movw	r30, r24
    4c32:	80 81       	ld	r24, Z
    4c34:	8a 30       	cpi	r24, 0x0A	; 10
    4c36:	31 f4       	brne	.+12     	; 0x4c44 <display_vprintf+0x3e0>
				str[length] = '\0';				
    4c38:	89 81       	ldd	r24, Y+1	; 0x01
    4c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c3c:	84 55       	subi	r24, 0x54	; 84
    4c3e:	93 4d       	sbci	r25, 0xD3	; 211
    4c40:	fc 01       	movw	r30, r24
    4c42:	10 82       	st	Z, r1
			}
			length++;
    4c44:	89 81       	ldd	r24, Y+1	; 0x01
    4c46:	9a 81       	ldd	r25, Y+2	; 0x02
    4c48:	01 96       	adiw	r24, 0x01	; 1
    4c4a:	89 83       	std	Y+1, r24	; 0x01
    4c4c:	9a 83       	std	Y+2, r25	; 0x02
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    4c4e:	89 ad       	ldd	r24, Y+57	; 0x39
    4c50:	9a ad       	ldd	r25, Y+58	; 0x3a
    4c52:	9c 01       	movw	r18, r24
    4c54:	2f 5f       	subi	r18, 0xFF	; 255
    4c56:	3f 4f       	sbci	r19, 0xFF	; 255
    4c58:	29 af       	std	Y+57, r18	; 0x39
    4c5a:	3a af       	std	Y+58, r19	; 0x3a
    4c5c:	fc 01       	movw	r30, r24
    4c5e:	80 81       	ld	r24, Z
    4c60:	8d 8b       	std	Y+21, r24	; 0x15
    4c62:	8d 89       	ldd	r24, Y+21	; 0x15
    4c64:	88 23       	and	r24, r24
    4c66:	09 f0       	breq	.+2      	; 0x4c6a <display_vprintf+0x406>
    4c68:	34 ce       	rjmp	.-920    	; 0x48d2 <display_vprintf+0x6e>
				str[length] = '\0';				
			}
			length++;
		}
	}
	if(length + pos >= 20) {
    4c6a:	29 81       	ldd	r18, Y+1	; 0x01
    4c6c:	3a 81       	ldd	r19, Y+2	; 0x02
    4c6e:	8f a9       	ldd	r24, Y+55	; 0x37
    4c70:	98 ad       	ldd	r25, Y+56	; 0x38
    4c72:	82 0f       	add	r24, r18
    4c74:	93 1f       	adc	r25, r19
    4c76:	44 97       	sbiw	r24, 0x14	; 20
    4c78:	54 f0       	brlt	.+20     	; 0x4c8e <display_vprintf+0x42a>
		length = 20-pos;
    4c7a:	24 e1       	ldi	r18, 0x14	; 20
    4c7c:	30 e0       	ldi	r19, 0x00	; 0
    4c7e:	8f a9       	ldd	r24, Y+55	; 0x37
    4c80:	98 ad       	ldd	r25, Y+56	; 0x38
    4c82:	a9 01       	movw	r20, r18
    4c84:	48 1b       	sub	r20, r24
    4c86:	59 0b       	sbc	r21, r25
    4c88:	ca 01       	movw	r24, r20
    4c8a:	89 83       	std	Y+1, r24	; 0x01
    4c8c:	9a 83       	std	Y+2, r25	; 0x02
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    4c8e:	19 8a       	std	Y+17, r1	; 0x11
    4c90:	1a 8a       	std	Y+18, r1	; 0x12
    4c92:	0e c0       	rjmp	.+28     	; 0x4cb0 <display_vprintf+0x44c>
		newLine.displayBuffer[i] = 0x00;
    4c94:	9e 01       	movw	r18, r28
    4c96:	2f 5d       	subi	r18, 0xDF	; 223
    4c98:	3f 4f       	sbci	r19, 0xFF	; 255
    4c9a:	89 89       	ldd	r24, Y+17	; 0x11
    4c9c:	9a 89       	ldd	r25, Y+18	; 0x12
    4c9e:	82 0f       	add	r24, r18
    4ca0:	93 1f       	adc	r25, r19
    4ca2:	fc 01       	movw	r30, r24
    4ca4:	10 82       	st	Z, r1
	}
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    4ca6:	89 89       	ldd	r24, Y+17	; 0x11
    4ca8:	9a 89       	ldd	r25, Y+18	; 0x12
    4caa:	01 96       	adiw	r24, 0x01	; 1
    4cac:	89 8b       	std	Y+17, r24	; 0x11
    4cae:	9a 8b       	std	Y+18, r25	; 0x12
    4cb0:	89 89       	ldd	r24, Y+17	; 0x11
    4cb2:	9a 89       	ldd	r25, Y+18	; 0x12
    4cb4:	44 97       	sbiw	r24, 0x14	; 20
    4cb6:	74 f3       	brlt	.-36     	; 0x4c94 <display_vprintf+0x430>
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
    4cb8:	8d a9       	ldd	r24, Y+53	; 0x35
    4cba:	8f 8f       	std	Y+31, r24	; 0x1f
	newLine.displayPos = pos;
    4cbc:	8f a9       	ldd	r24, Y+55	; 0x37
    4cbe:	88 a3       	std	Y+32, r24	; 0x20
	for(int i = 0; i < length;i++) {
    4cc0:	1b 8a       	std	Y+19, r1	; 0x13
    4cc2:	1c 8a       	std	Y+20, r1	; 0x14
    4cc4:	14 c0       	rjmp	.+40     	; 0x4cee <display_vprintf+0x48a>
		newLine.displayBuffer[i] = str[i];
    4cc6:	8b 89       	ldd	r24, Y+19	; 0x13
    4cc8:	9c 89       	ldd	r25, Y+20	; 0x14
    4cca:	84 55       	subi	r24, 0x54	; 84
    4ccc:	93 4d       	sbci	r25, 0xD3	; 211
    4cce:	fc 01       	movw	r30, r24
    4cd0:	40 81       	ld	r20, Z
    4cd2:	9e 01       	movw	r18, r28
    4cd4:	2f 5d       	subi	r18, 0xDF	; 223
    4cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    4cd8:	8b 89       	ldd	r24, Y+19	; 0x13
    4cda:	9c 89       	ldd	r25, Y+20	; 0x14
    4cdc:	82 0f       	add	r24, r18
    4cde:	93 1f       	adc	r25, r19
    4ce0:	fc 01       	movw	r30, r24
    4ce2:	40 83       	st	Z, r20
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
	newLine.displayPos = pos;
	for(int i = 0; i < length;i++) {
    4ce4:	8b 89       	ldd	r24, Y+19	; 0x13
    4ce6:	9c 89       	ldd	r25, Y+20	; 0x14
    4ce8:	01 96       	adiw	r24, 0x01	; 1
    4cea:	8b 8b       	std	Y+19, r24	; 0x13
    4cec:	9c 8b       	std	Y+20, r25	; 0x14
    4cee:	2b 89       	ldd	r18, Y+19	; 0x13
    4cf0:	3c 89       	ldd	r19, Y+20	; 0x14
    4cf2:	89 81       	ldd	r24, Y+1	; 0x01
    4cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    4cf6:	28 17       	cp	r18, r24
    4cf8:	39 07       	cpc	r19, r25
    4cfa:	2c f3       	brlt	.-54     	; 0x4cc6 <display_vprintf+0x462>
		newLine.displayBuffer[i] = str[i];
	}	
	xQueueSend(displayLineQueue, (void *) &newLine, portMAX_DELAY);
    4cfc:	80 91 cb 2c 	lds	r24, 0x2CCB	; 0x802ccb <displayLineQueue>
    4d00:	90 91 cc 2c 	lds	r25, 0x2CCC	; 0x802ccc <displayLineQueue+0x1>
    4d04:	be 01       	movw	r22, r28
    4d06:	61 5e       	subi	r22, 0xE1	; 225
    4d08:	7f 4f       	sbci	r23, 0xFF	; 255
    4d0a:	00 e0       	ldi	r16, 0x00	; 0
    4d0c:	2f ef       	ldi	r18, 0xFF	; 255
    4d0e:	3f ef       	ldi	r19, 0xFF	; 255
    4d10:	a9 01       	movw	r20, r18
    4d12:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <xQueueGenericSend>
	
	
	return length;
    4d16:	89 81       	ldd	r24, Y+1	; 0x01
    4d18:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4d1a:	ec 96       	adiw	r28, 0x3c	; 60
    4d1c:	cd bf       	out	0x3d, r28	; 61
    4d1e:	de bf       	out	0x3e, r29	; 62
    4d20:	df 91       	pop	r29
    4d22:	cf 91       	pop	r28
    4d24:	0f 91       	pop	r16
    4d26:	08 95       	ret

00004d28 <normalize>:

static int normalize(double *val) {
    4d28:	cf 93       	push	r28
    4d2a:	df 93       	push	r29
    4d2c:	cd b7       	in	r28, 0x3d	; 61
    4d2e:	de b7       	in	r29, 0x3e	; 62
    4d30:	28 97       	sbiw	r28, 0x08	; 8
    4d32:	cd bf       	out	0x3d, r28	; 61
    4d34:	de bf       	out	0x3e, r29	; 62
    4d36:	8f 83       	std	Y+7, r24	; 0x07
    4d38:	98 87       	std	Y+8, r25	; 0x08
    int exponent = 0;
    4d3a:	19 82       	std	Y+1, r1	; 0x01
    4d3c:	1a 82       	std	Y+2, r1	; 0x02
    double value = *val;
    4d3e:	8f 81       	ldd	r24, Y+7	; 0x07
    4d40:	98 85       	ldd	r25, Y+8	; 0x08
    4d42:	fc 01       	movw	r30, r24
    4d44:	80 81       	ld	r24, Z
    4d46:	91 81       	ldd	r25, Z+1	; 0x01
    4d48:	a2 81       	ldd	r26, Z+2	; 0x02
    4d4a:	b3 81       	ldd	r27, Z+3	; 0x03
    4d4c:	8b 83       	std	Y+3, r24	; 0x03
    4d4e:	9c 83       	std	Y+4, r25	; 0x04
    4d50:	ad 83       	std	Y+5, r26	; 0x05
    4d52:	be 83       	std	Y+6, r27	; 0x06

    while (value >= 1.0) {
    4d54:	15 c0       	rjmp	.+42     	; 0x4d80 <normalize+0x58>
        value /= 10.0;
    4d56:	20 e0       	ldi	r18, 0x00	; 0
    4d58:	30 e0       	ldi	r19, 0x00	; 0
    4d5a:	40 e2       	ldi	r20, 0x20	; 32
    4d5c:	51 e4       	ldi	r21, 0x41	; 65
    4d5e:	6b 81       	ldd	r22, Y+3	; 0x03
    4d60:	7c 81       	ldd	r23, Y+4	; 0x04
    4d62:	8d 81       	ldd	r24, Y+5	; 0x05
    4d64:	9e 81       	ldd	r25, Y+6	; 0x06
    4d66:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <__divsf3>
    4d6a:	dc 01       	movw	r26, r24
    4d6c:	cb 01       	movw	r24, r22
    4d6e:	8b 83       	std	Y+3, r24	; 0x03
    4d70:	9c 83       	std	Y+4, r25	; 0x04
    4d72:	ad 83       	std	Y+5, r26	; 0x05
    4d74:	be 83       	std	Y+6, r27	; 0x06
        ++exponent;
    4d76:	89 81       	ldd	r24, Y+1	; 0x01
    4d78:	9a 81       	ldd	r25, Y+2	; 0x02
    4d7a:	01 96       	adiw	r24, 0x01	; 1
    4d7c:	89 83       	std	Y+1, r24	; 0x01
    4d7e:	9a 83       	std	Y+2, r25	; 0x02

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    4d80:	20 e0       	ldi	r18, 0x00	; 0
    4d82:	30 e0       	ldi	r19, 0x00	; 0
    4d84:	40 e8       	ldi	r20, 0x80	; 128
    4d86:	5f e3       	ldi	r21, 0x3F	; 63
    4d88:	6b 81       	ldd	r22, Y+3	; 0x03
    4d8a:	7c 81       	ldd	r23, Y+4	; 0x04
    4d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    4d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    4d90:	0e 94 3d 2b 	call	0x567a	; 0x567a <__gesf2>
    4d94:	88 23       	and	r24, r24
    4d96:	fc f6       	brge	.-66     	; 0x4d56 <normalize+0x2e>
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    4d98:	15 c0       	rjmp	.+42     	; 0x4dc4 <normalize+0x9c>
        value *= 10.0;
    4d9a:	20 e0       	ldi	r18, 0x00	; 0
    4d9c:	30 e0       	ldi	r19, 0x00	; 0
    4d9e:	40 e2       	ldi	r20, 0x20	; 32
    4da0:	51 e4       	ldi	r21, 0x41	; 65
    4da2:	6b 81       	ldd	r22, Y+3	; 0x03
    4da4:	7c 81       	ldd	r23, Y+4	; 0x04
    4da6:	8d 81       	ldd	r24, Y+5	; 0x05
    4da8:	9e 81       	ldd	r25, Y+6	; 0x06
    4daa:	0e 94 42 2b 	call	0x5684	; 0x5684 <__mulsf3>
    4dae:	dc 01       	movw	r26, r24
    4db0:	cb 01       	movw	r24, r22
    4db2:	8b 83       	std	Y+3, r24	; 0x03
    4db4:	9c 83       	std	Y+4, r25	; 0x04
    4db6:	ad 83       	std	Y+5, r26	; 0x05
    4db8:	be 83       	std	Y+6, r27	; 0x06
        --exponent;
    4dba:	89 81       	ldd	r24, Y+1	; 0x01
    4dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    4dbe:	01 97       	sbiw	r24, 0x01	; 1
    4dc0:	89 83       	std	Y+1, r24	; 0x01
    4dc2:	9a 83       	std	Y+2, r25	; 0x02
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    4dc4:	2d ec       	ldi	r18, 0xCD	; 205
    4dc6:	3c ec       	ldi	r19, 0xCC	; 204
    4dc8:	4c ec       	ldi	r20, 0xCC	; 204
    4dca:	5d e3       	ldi	r21, 0x3D	; 61
    4dcc:	6b 81       	ldd	r22, Y+3	; 0x03
    4dce:	7c 81       	ldd	r23, Y+4	; 0x04
    4dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    4dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    4dd4:	0e 94 de 29 	call	0x53bc	; 0x53bc <__cmpsf2>
    4dd8:	88 23       	and	r24, r24
    4dda:	fc f2       	brlt	.-66     	; 0x4d9a <normalize+0x72>
        value *= 10.0;
        --exponent;
    }
    *val = value;
    4ddc:	2f 81       	ldd	r18, Y+7	; 0x07
    4dde:	38 85       	ldd	r19, Y+8	; 0x08
    4de0:	8b 81       	ldd	r24, Y+3	; 0x03
    4de2:	9c 81       	ldd	r25, Y+4	; 0x04
    4de4:	ad 81       	ldd	r26, Y+5	; 0x05
    4de6:	be 81       	ldd	r27, Y+6	; 0x06
    4de8:	f9 01       	movw	r30, r18
    4dea:	80 83       	st	Z, r24
    4dec:	91 83       	std	Z+1, r25	; 0x01
    4dee:	a2 83       	std	Z+2, r26	; 0x02
    4df0:	b3 83       	std	Z+3, r27	; 0x03
    return exponent;
    4df2:	89 81       	ldd	r24, Y+1	; 0x01
    4df4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4df6:	28 96       	adiw	r28, 0x08	; 8
    4df8:	cd bf       	out	0x3d, r28	; 61
    4dfa:	de bf       	out	0x3e, r29	; 62
    4dfc:	df 91       	pop	r29
    4dfe:	cf 91       	pop	r28
    4e00:	08 95       	ret

00004e02 <ftoa_fixed>:

static void ftoa_fixed(char *buffer, double value) {  
    4e02:	cf 92       	push	r12
    4e04:	df 92       	push	r13
    4e06:	ef 92       	push	r14
    4e08:	ff 92       	push	r15
    4e0a:	cf 93       	push	r28
    4e0c:	df 93       	push	r29
    4e0e:	cd b7       	in	r28, 0x3d	; 61
    4e10:	de b7       	in	r29, 0x3e	; 62
    4e12:	2e 97       	sbiw	r28, 0x0e	; 14
    4e14:	cd bf       	out	0x3d, r28	; 61
    4e16:	de bf       	out	0x3e, r29	; 62
    4e18:	89 87       	std	Y+9, r24	; 0x09
    4e1a:	9a 87       	std	Y+10, r25	; 0x0a
    4e1c:	4b 87       	std	Y+11, r20	; 0x0b
    4e1e:	5c 87       	std	Y+12, r21	; 0x0c
    4e20:	6d 87       	std	Y+13, r22	; 0x0d
    4e22:	7e 87       	std	Y+14, r23	; 0x0e
     * The largest value we expect is an IEEE 754 double precision real, with maximum magnitude of approximately
     * e+308. The C standard requires an implementation to allow a single conversion to produce up to 512 
     * characters, so that's what we really expect as the buffer size.     
     */

    int exponent = 0;
    4e24:	19 82       	std	Y+1, r1	; 0x01
    4e26:	1a 82       	std	Y+2, r1	; 0x02
    int places = 0;
    4e28:	1b 82       	std	Y+3, r1	; 0x03
    4e2a:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    4e2c:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e2e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e30:	ad 85       	ldd	r26, Y+13	; 0x0d
    4e32:	be 85       	ldd	r27, Y+14	; 0x0e
    4e34:	20 e0       	ldi	r18, 0x00	; 0
    4e36:	30 e0       	ldi	r19, 0x00	; 0
    4e38:	a9 01       	movw	r20, r18
    4e3a:	bc 01       	movw	r22, r24
    4e3c:	cd 01       	movw	r24, r26
    4e3e:	0e 94 de 29 	call	0x53bc	; 0x53bc <__cmpsf2>
    4e42:	88 23       	and	r24, r24
    4e44:	59 f4       	brne	.+22     	; 0x4e5c <ftoa_fixed+0x5a>
        buffer[0] = '0';
    4e46:	89 85       	ldd	r24, Y+9	; 0x09
    4e48:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e4a:	20 e3       	ldi	r18, 0x30	; 48
    4e4c:	fc 01       	movw	r30, r24
    4e4e:	20 83       	st	Z, r18
        buffer[1] = '\0';
    4e50:	89 85       	ldd	r24, Y+9	; 0x09
    4e52:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e54:	01 96       	adiw	r24, 0x01	; 1
    4e56:	fc 01       	movw	r30, r24
    4e58:	10 82       	st	Z, r1
        return;
    4e5a:	18 c1       	rjmp	.+560    	; 0x508c <ftoa_fixed+0x28a>
    }         

    if (value < 0.0) {
    4e5c:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e5e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e60:	ad 85       	ldd	r26, Y+13	; 0x0d
    4e62:	be 85       	ldd	r27, Y+14	; 0x0e
    4e64:	20 e0       	ldi	r18, 0x00	; 0
    4e66:	30 e0       	ldi	r19, 0x00	; 0
    4e68:	a9 01       	movw	r20, r18
    4e6a:	bc 01       	movw	r22, r24
    4e6c:	cd 01       	movw	r24, r26
    4e6e:	0e 94 de 29 	call	0x53bc	; 0x53bc <__cmpsf2>
    4e72:	88 23       	and	r24, r24
    4e74:	9c f4       	brge	.+38     	; 0x4e9c <ftoa_fixed+0x9a>
        *buffer++ = '-';
    4e76:	89 85       	ldd	r24, Y+9	; 0x09
    4e78:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e7a:	9c 01       	movw	r18, r24
    4e7c:	2f 5f       	subi	r18, 0xFF	; 255
    4e7e:	3f 4f       	sbci	r19, 0xFF	; 255
    4e80:	29 87       	std	Y+9, r18	; 0x09
    4e82:	3a 87       	std	Y+10, r19	; 0x0a
    4e84:	2d e2       	ldi	r18, 0x2D	; 45
    4e86:	fc 01       	movw	r30, r24
    4e88:	20 83       	st	Z, r18
        value = -value;
    4e8a:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e8c:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e8e:	ad 85       	ldd	r26, Y+13	; 0x0d
    4e90:	be 85       	ldd	r27, Y+14	; 0x0e
    4e92:	b0 58       	subi	r27, 0x80	; 128
    4e94:	8b 87       	std	Y+11, r24	; 0x0b
    4e96:	9c 87       	std	Y+12, r25	; 0x0c
    4e98:	ad 87       	std	Y+13, r26	; 0x0d
    4e9a:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    4e9c:	ce 01       	movw	r24, r28
    4e9e:	0b 96       	adiw	r24, 0x0b	; 11
    4ea0:	0e 94 94 26 	call	0x4d28	; 0x4d28 <normalize>
    4ea4:	89 83       	std	Y+1, r24	; 0x01
    4ea6:	9a 83       	std	Y+2, r25	; 0x02

    while (exponent > 0) {
    4ea8:	53 c0       	rjmp	.+166    	; 0x4f50 <ftoa_fixed+0x14e>
        int digit = value * 10;
    4eaa:	8b 85       	ldd	r24, Y+11	; 0x0b
    4eac:	9c 85       	ldd	r25, Y+12	; 0x0c
    4eae:	ad 85       	ldd	r26, Y+13	; 0x0d
    4eb0:	be 85       	ldd	r27, Y+14	; 0x0e
    4eb2:	20 e0       	ldi	r18, 0x00	; 0
    4eb4:	30 e0       	ldi	r19, 0x00	; 0
    4eb6:	40 e2       	ldi	r20, 0x20	; 32
    4eb8:	51 e4       	ldi	r21, 0x41	; 65
    4eba:	bc 01       	movw	r22, r24
    4ebc:	cd 01       	movw	r24, r26
    4ebe:	0e 94 42 2b 	call	0x5684	; 0x5684 <__mulsf3>
    4ec2:	dc 01       	movw	r26, r24
    4ec4:	cb 01       	movw	r24, r22
    4ec6:	bc 01       	movw	r22, r24
    4ec8:	cd 01       	movw	r24, r26
    4eca:	0e 94 55 2a 	call	0x54aa	; 0x54aa <__fixsfsi>
    4ece:	dc 01       	movw	r26, r24
    4ed0:	cb 01       	movw	r24, r22
    4ed2:	8d 83       	std	Y+5, r24	; 0x05
    4ed4:	9e 83       	std	Y+6, r25	; 0x06
        *buffer++ = digit + '0';
    4ed6:	89 85       	ldd	r24, Y+9	; 0x09
    4ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4eda:	9c 01       	movw	r18, r24
    4edc:	2f 5f       	subi	r18, 0xFF	; 255
    4ede:	3f 4f       	sbci	r19, 0xFF	; 255
    4ee0:	29 87       	std	Y+9, r18	; 0x09
    4ee2:	3a 87       	std	Y+10, r19	; 0x0a
    4ee4:	2d 81       	ldd	r18, Y+5	; 0x05
    4ee6:	20 5d       	subi	r18, 0xD0	; 208
    4ee8:	fc 01       	movw	r30, r24
    4eea:	20 83       	st	Z, r18
        value = value * 10 - digit;
    4eec:	8b 85       	ldd	r24, Y+11	; 0x0b
    4eee:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ef0:	ad 85       	ldd	r26, Y+13	; 0x0d
    4ef2:	be 85       	ldd	r27, Y+14	; 0x0e
    4ef4:	20 e0       	ldi	r18, 0x00	; 0
    4ef6:	30 e0       	ldi	r19, 0x00	; 0
    4ef8:	40 e2       	ldi	r20, 0x20	; 32
    4efa:	51 e4       	ldi	r21, 0x41	; 65
    4efc:	bc 01       	movw	r22, r24
    4efe:	cd 01       	movw	r24, r26
    4f00:	0e 94 42 2b 	call	0x5684	; 0x5684 <__mulsf3>
    4f04:	dc 01       	movw	r26, r24
    4f06:	cb 01       	movw	r24, r22
    4f08:	6c 01       	movw	r12, r24
    4f0a:	7d 01       	movw	r14, r26
    4f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    4f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    4f10:	09 2e       	mov	r0, r25
    4f12:	00 0c       	add	r0, r0
    4f14:	aa 0b       	sbc	r26, r26
    4f16:	bb 0b       	sbc	r27, r27
    4f18:	bc 01       	movw	r22, r24
    4f1a:	cd 01       	movw	r24, r26
    4f1c:	0e 94 8d 2a 	call	0x551a	; 0x551a <__floatsisf>
    4f20:	dc 01       	movw	r26, r24
    4f22:	cb 01       	movw	r24, r22
    4f24:	9c 01       	movw	r18, r24
    4f26:	ad 01       	movw	r20, r26
    4f28:	c7 01       	movw	r24, r14
    4f2a:	b6 01       	movw	r22, r12
    4f2c:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__subsf3>
    4f30:	dc 01       	movw	r26, r24
    4f32:	cb 01       	movw	r24, r22
    4f34:	8b 87       	std	Y+11, r24	; 0x0b
    4f36:	9c 87       	std	Y+12, r25	; 0x0c
    4f38:	ad 87       	std	Y+13, r26	; 0x0d
    4f3a:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    4f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f40:	01 96       	adiw	r24, 0x01	; 1
    4f42:	8b 83       	std	Y+3, r24	; 0x03
    4f44:	9c 83       	std	Y+4, r25	; 0x04
        --exponent;
    4f46:	89 81       	ldd	r24, Y+1	; 0x01
    4f48:	9a 81       	ldd	r25, Y+2	; 0x02
    4f4a:	01 97       	sbiw	r24, 0x01	; 1
    4f4c:	89 83       	std	Y+1, r24	; 0x01
    4f4e:	9a 83       	std	Y+2, r25	; 0x02
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    4f50:	89 81       	ldd	r24, Y+1	; 0x01
    4f52:	9a 81       	ldd	r25, Y+2	; 0x02
    4f54:	18 16       	cp	r1, r24
    4f56:	19 06       	cpc	r1, r25
    4f58:	0c f4       	brge	.+2      	; 0x4f5c <ftoa_fixed+0x15a>
    4f5a:	a7 cf       	rjmp	.-178    	; 0x4eaa <ftoa_fixed+0xa8>
        value = value * 10 - digit;
        ++places;
        --exponent;
    }

    if (places == 0)
    4f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f60:	89 2b       	or	r24, r25
    4f62:	51 f4       	brne	.+20     	; 0x4f78 <ftoa_fixed+0x176>
        *buffer++ = '0';
    4f64:	89 85       	ldd	r24, Y+9	; 0x09
    4f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f68:	9c 01       	movw	r18, r24
    4f6a:	2f 5f       	subi	r18, 0xFF	; 255
    4f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    4f6e:	29 87       	std	Y+9, r18	; 0x09
    4f70:	3a 87       	std	Y+10, r19	; 0x0a
    4f72:	20 e3       	ldi	r18, 0x30	; 48
    4f74:	fc 01       	movw	r30, r24
    4f76:	20 83       	st	Z, r18

    *buffer++ = '.';
    4f78:	89 85       	ldd	r24, Y+9	; 0x09
    4f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f7c:	9c 01       	movw	r18, r24
    4f7e:	2f 5f       	subi	r18, 0xFF	; 255
    4f80:	3f 4f       	sbci	r19, 0xFF	; 255
    4f82:	29 87       	std	Y+9, r18	; 0x09
    4f84:	3a 87       	std	Y+10, r19	; 0x0a
    4f86:	2e e2       	ldi	r18, 0x2E	; 46
    4f88:	fc 01       	movw	r30, r24
    4f8a:	20 83       	st	Z, r18

    while (exponent < 0 && places < width) {
    4f8c:	14 c0       	rjmp	.+40     	; 0x4fb6 <ftoa_fixed+0x1b4>
        *buffer++ = '0';
    4f8e:	89 85       	ldd	r24, Y+9	; 0x09
    4f90:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f92:	9c 01       	movw	r18, r24
    4f94:	2f 5f       	subi	r18, 0xFF	; 255
    4f96:	3f 4f       	sbci	r19, 0xFF	; 255
    4f98:	29 87       	std	Y+9, r18	; 0x09
    4f9a:	3a 87       	std	Y+10, r19	; 0x0a
    4f9c:	20 e3       	ldi	r18, 0x30	; 48
    4f9e:	fc 01       	movw	r30, r24
    4fa0:	20 83       	st	Z, r18
        --exponent;
    4fa2:	89 81       	ldd	r24, Y+1	; 0x01
    4fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    4fa6:	01 97       	sbiw	r24, 0x01	; 1
    4fa8:	89 83       	std	Y+1, r24	; 0x01
    4faa:	9a 83       	std	Y+2, r25	; 0x02
        ++places;
    4fac:	8b 81       	ldd	r24, Y+3	; 0x03
    4fae:	9c 81       	ldd	r25, Y+4	; 0x04
    4fb0:	01 96       	adiw	r24, 0x01	; 1
    4fb2:	8b 83       	std	Y+3, r24	; 0x03
    4fb4:	9c 83       	std	Y+4, r25	; 0x04
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    4fb6:	89 81       	ldd	r24, Y+1	; 0x01
    4fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    4fba:	99 23       	and	r25, r25
    4fbc:	0c f0       	brlt	.+2      	; 0x4fc0 <ftoa_fixed+0x1be>
    4fbe:	58 c0       	rjmp	.+176    	; 0x5070 <ftoa_fixed+0x26e>
    4fc0:	80 91 47 20 	lds	r24, 0x2047	; 0x802047 <width.5062>
    4fc4:	90 91 48 20 	lds	r25, 0x2048	; 0x802048 <width.5062+0x1>
    4fc8:	2b 81       	ldd	r18, Y+3	; 0x03
    4fca:	3c 81       	ldd	r19, Y+4	; 0x04
    4fcc:	28 17       	cp	r18, r24
    4fce:	39 07       	cpc	r19, r25
    4fd0:	f4 f2       	brlt	.-68     	; 0x4f8e <ftoa_fixed+0x18c>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    4fd2:	4e c0       	rjmp	.+156    	; 0x5070 <ftoa_fixed+0x26e>
        int digit = value * 10.0;
    4fd4:	8b 85       	ldd	r24, Y+11	; 0x0b
    4fd6:	9c 85       	ldd	r25, Y+12	; 0x0c
    4fd8:	ad 85       	ldd	r26, Y+13	; 0x0d
    4fda:	be 85       	ldd	r27, Y+14	; 0x0e
    4fdc:	20 e0       	ldi	r18, 0x00	; 0
    4fde:	30 e0       	ldi	r19, 0x00	; 0
    4fe0:	40 e2       	ldi	r20, 0x20	; 32
    4fe2:	51 e4       	ldi	r21, 0x41	; 65
    4fe4:	bc 01       	movw	r22, r24
    4fe6:	cd 01       	movw	r24, r26
    4fe8:	0e 94 42 2b 	call	0x5684	; 0x5684 <__mulsf3>
    4fec:	dc 01       	movw	r26, r24
    4fee:	cb 01       	movw	r24, r22
    4ff0:	bc 01       	movw	r22, r24
    4ff2:	cd 01       	movw	r24, r26
    4ff4:	0e 94 55 2a 	call	0x54aa	; 0x54aa <__fixsfsi>
    4ff8:	dc 01       	movw	r26, r24
    4ffa:	cb 01       	movw	r24, r22
    4ffc:	8f 83       	std	Y+7, r24	; 0x07
    4ffe:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    5000:	89 85       	ldd	r24, Y+9	; 0x09
    5002:	9a 85       	ldd	r25, Y+10	; 0x0a
    5004:	9c 01       	movw	r18, r24
    5006:	2f 5f       	subi	r18, 0xFF	; 255
    5008:	3f 4f       	sbci	r19, 0xFF	; 255
    500a:	29 87       	std	Y+9, r18	; 0x09
    500c:	3a 87       	std	Y+10, r19	; 0x0a
    500e:	2f 81       	ldd	r18, Y+7	; 0x07
    5010:	20 5d       	subi	r18, 0xD0	; 208
    5012:	fc 01       	movw	r30, r24
    5014:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    5016:	8b 85       	ldd	r24, Y+11	; 0x0b
    5018:	9c 85       	ldd	r25, Y+12	; 0x0c
    501a:	ad 85       	ldd	r26, Y+13	; 0x0d
    501c:	be 85       	ldd	r27, Y+14	; 0x0e
    501e:	20 e0       	ldi	r18, 0x00	; 0
    5020:	30 e0       	ldi	r19, 0x00	; 0
    5022:	40 e2       	ldi	r20, 0x20	; 32
    5024:	51 e4       	ldi	r21, 0x41	; 65
    5026:	bc 01       	movw	r22, r24
    5028:	cd 01       	movw	r24, r26
    502a:	0e 94 42 2b 	call	0x5684	; 0x5684 <__mulsf3>
    502e:	dc 01       	movw	r26, r24
    5030:	cb 01       	movw	r24, r22
    5032:	6c 01       	movw	r12, r24
    5034:	7d 01       	movw	r14, r26
    5036:	8f 81       	ldd	r24, Y+7	; 0x07
    5038:	98 85       	ldd	r25, Y+8	; 0x08
    503a:	09 2e       	mov	r0, r25
    503c:	00 0c       	add	r0, r0
    503e:	aa 0b       	sbc	r26, r26
    5040:	bb 0b       	sbc	r27, r27
    5042:	bc 01       	movw	r22, r24
    5044:	cd 01       	movw	r24, r26
    5046:	0e 94 8d 2a 	call	0x551a	; 0x551a <__floatsisf>
    504a:	dc 01       	movw	r26, r24
    504c:	cb 01       	movw	r24, r22
    504e:	9c 01       	movw	r18, r24
    5050:	ad 01       	movw	r20, r26
    5052:	c7 01       	movw	r24, r14
    5054:	b6 01       	movw	r22, r12
    5056:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__subsf3>
    505a:	dc 01       	movw	r26, r24
    505c:	cb 01       	movw	r24, r22
    505e:	8b 87       	std	Y+11, r24	; 0x0b
    5060:	9c 87       	std	Y+12, r25	; 0x0c
    5062:	ad 87       	std	Y+13, r26	; 0x0d
    5064:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    5066:	8b 81       	ldd	r24, Y+3	; 0x03
    5068:	9c 81       	ldd	r25, Y+4	; 0x04
    506a:	01 96       	adiw	r24, 0x01	; 1
    506c:	8b 83       	std	Y+3, r24	; 0x03
    506e:	9c 83       	std	Y+4, r25	; 0x04
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    5070:	80 91 47 20 	lds	r24, 0x2047	; 0x802047 <width.5062>
    5074:	90 91 48 20 	lds	r25, 0x2048	; 0x802048 <width.5062+0x1>
    5078:	2b 81       	ldd	r18, Y+3	; 0x03
    507a:	3c 81       	ldd	r19, Y+4	; 0x04
    507c:	28 17       	cp	r18, r24
    507e:	39 07       	cpc	r19, r25
    5080:	0c f4       	brge	.+2      	; 0x5084 <ftoa_fixed+0x282>
    5082:	a8 cf       	rjmp	.-176    	; 0x4fd4 <ftoa_fixed+0x1d2>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
        ++places;
    }
    *buffer = '\0';
    5084:	89 85       	ldd	r24, Y+9	; 0x09
    5086:	9a 85       	ldd	r25, Y+10	; 0x0a
    5088:	fc 01       	movw	r30, r24
    508a:	10 82       	st	Z, r1
}
    508c:	2e 96       	adiw	r28, 0x0e	; 14
    508e:	cd bf       	out	0x3d, r28	; 61
    5090:	de bf       	out	0x3e, r29	; 62
    5092:	df 91       	pop	r29
    5094:	cf 91       	pop	r28
    5096:	ff 90       	pop	r15
    5098:	ef 90       	pop	r14
    509a:	df 90       	pop	r13
    509c:	cf 90       	pop	r12
    509e:	08 95       	ret

000050a0 <ftoa_sci>:

void ftoa_sci(char *buffer, double value) {
    50a0:	cf 92       	push	r12
    50a2:	df 92       	push	r13
    50a4:	ef 92       	push	r14
    50a6:	ff 92       	push	r15
    50a8:	cf 93       	push	r28
    50aa:	df 93       	push	r29
    50ac:	cd b7       	in	r28, 0x3d	; 61
    50ae:	de b7       	in	r29, 0x3e	; 62
    50b0:	2e 97       	sbiw	r28, 0x0e	; 14
    50b2:	cd bf       	out	0x3d, r28	; 61
    50b4:	de bf       	out	0x3e, r29	; 62
    50b6:	89 87       	std	Y+9, r24	; 0x09
    50b8:	9a 87       	std	Y+10, r25	; 0x0a
    50ba:	4b 87       	std	Y+11, r20	; 0x0b
    50bc:	5c 87       	std	Y+12, r21	; 0x0c
    50be:	6d 87       	std	Y+13, r22	; 0x0d
    50c0:	7e 87       	std	Y+14, r23	; 0x0e
    int exponent = 0;    
    50c2:	1b 82       	std	Y+3, r1	; 0x03
    50c4:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    50c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    50c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    50ca:	ad 85       	ldd	r26, Y+13	; 0x0d
    50cc:	be 85       	ldd	r27, Y+14	; 0x0e
    50ce:	20 e0       	ldi	r18, 0x00	; 0
    50d0:	30 e0       	ldi	r19, 0x00	; 0
    50d2:	a9 01       	movw	r20, r18
    50d4:	bc 01       	movw	r22, r24
    50d6:	cd 01       	movw	r24, r26
    50d8:	0e 94 de 29 	call	0x53bc	; 0x53bc <__cmpsf2>
    50dc:	88 23       	and	r24, r24
    50de:	59 f4       	brne	.+22     	; 0x50f6 <ftoa_sci+0x56>
        buffer[0] = '0';
    50e0:	89 85       	ldd	r24, Y+9	; 0x09
    50e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    50e4:	20 e3       	ldi	r18, 0x30	; 48
    50e6:	fc 01       	movw	r30, r24
    50e8:	20 83       	st	Z, r18
        buffer[1] = '\0';
    50ea:	89 85       	ldd	r24, Y+9	; 0x09
    50ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    50ee:	01 96       	adiw	r24, 0x01	; 1
    50f0:	fc 01       	movw	r30, r24
    50f2:	10 82       	st	Z, r1
        return;
    50f4:	ec c0       	rjmp	.+472    	; 0x52ce <ftoa_sci+0x22e>
    }

    if (value < 0.0) {
    50f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    50f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    50fa:	ad 85       	ldd	r26, Y+13	; 0x0d
    50fc:	be 85       	ldd	r27, Y+14	; 0x0e
    50fe:	20 e0       	ldi	r18, 0x00	; 0
    5100:	30 e0       	ldi	r19, 0x00	; 0
    5102:	a9 01       	movw	r20, r18
    5104:	bc 01       	movw	r22, r24
    5106:	cd 01       	movw	r24, r26
    5108:	0e 94 de 29 	call	0x53bc	; 0x53bc <__cmpsf2>
    510c:	88 23       	and	r24, r24
    510e:	9c f4       	brge	.+38     	; 0x5136 <ftoa_sci+0x96>
        *buffer++ = '-';
    5110:	89 85       	ldd	r24, Y+9	; 0x09
    5112:	9a 85       	ldd	r25, Y+10	; 0x0a
    5114:	9c 01       	movw	r18, r24
    5116:	2f 5f       	subi	r18, 0xFF	; 255
    5118:	3f 4f       	sbci	r19, 0xFF	; 255
    511a:	29 87       	std	Y+9, r18	; 0x09
    511c:	3a 87       	std	Y+10, r19	; 0x0a
    511e:	2d e2       	ldi	r18, 0x2D	; 45
    5120:	fc 01       	movw	r30, r24
    5122:	20 83       	st	Z, r18
        value = -value;
    5124:	8b 85       	ldd	r24, Y+11	; 0x0b
    5126:	9c 85       	ldd	r25, Y+12	; 0x0c
    5128:	ad 85       	ldd	r26, Y+13	; 0x0d
    512a:	be 85       	ldd	r27, Y+14	; 0x0e
    512c:	b0 58       	subi	r27, 0x80	; 128
    512e:	8b 87       	std	Y+11, r24	; 0x0b
    5130:	9c 87       	std	Y+12, r25	; 0x0c
    5132:	ad 87       	std	Y+13, r26	; 0x0d
    5134:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    5136:	ce 01       	movw	r24, r28
    5138:	0b 96       	adiw	r24, 0x0b	; 11
    513a:	0e 94 94 26 	call	0x4d28	; 0x4d28 <normalize>
    513e:	8b 83       	std	Y+3, r24	; 0x03
    5140:	9c 83       	std	Y+4, r25	; 0x04

    int digit = value * 10.0;
    5142:	8b 85       	ldd	r24, Y+11	; 0x0b
    5144:	9c 85       	ldd	r25, Y+12	; 0x0c
    5146:	ad 85       	ldd	r26, Y+13	; 0x0d
    5148:	be 85       	ldd	r27, Y+14	; 0x0e
    514a:	20 e0       	ldi	r18, 0x00	; 0
    514c:	30 e0       	ldi	r19, 0x00	; 0
    514e:	40 e2       	ldi	r20, 0x20	; 32
    5150:	51 e4       	ldi	r21, 0x41	; 65
    5152:	bc 01       	movw	r22, r24
    5154:	cd 01       	movw	r24, r26
    5156:	0e 94 42 2b 	call	0x5684	; 0x5684 <__mulsf3>
    515a:	dc 01       	movw	r26, r24
    515c:	cb 01       	movw	r24, r22
    515e:	bc 01       	movw	r22, r24
    5160:	cd 01       	movw	r24, r26
    5162:	0e 94 55 2a 	call	0x54aa	; 0x54aa <__fixsfsi>
    5166:	dc 01       	movw	r26, r24
    5168:	cb 01       	movw	r24, r22
    516a:	8d 83       	std	Y+5, r24	; 0x05
    516c:	9e 83       	std	Y+6, r25	; 0x06
    *buffer++ = digit + '0';
    516e:	89 85       	ldd	r24, Y+9	; 0x09
    5170:	9a 85       	ldd	r25, Y+10	; 0x0a
    5172:	9c 01       	movw	r18, r24
    5174:	2f 5f       	subi	r18, 0xFF	; 255
    5176:	3f 4f       	sbci	r19, 0xFF	; 255
    5178:	29 87       	std	Y+9, r18	; 0x09
    517a:	3a 87       	std	Y+10, r19	; 0x0a
    517c:	2d 81       	ldd	r18, Y+5	; 0x05
    517e:	20 5d       	subi	r18, 0xD0	; 208
    5180:	fc 01       	movw	r30, r24
    5182:	20 83       	st	Z, r18
    value = value * 10.0 - digit;
    5184:	8b 85       	ldd	r24, Y+11	; 0x0b
    5186:	9c 85       	ldd	r25, Y+12	; 0x0c
    5188:	ad 85       	ldd	r26, Y+13	; 0x0d
    518a:	be 85       	ldd	r27, Y+14	; 0x0e
    518c:	20 e0       	ldi	r18, 0x00	; 0
    518e:	30 e0       	ldi	r19, 0x00	; 0
    5190:	40 e2       	ldi	r20, 0x20	; 32
    5192:	51 e4       	ldi	r21, 0x41	; 65
    5194:	bc 01       	movw	r22, r24
    5196:	cd 01       	movw	r24, r26
    5198:	0e 94 42 2b 	call	0x5684	; 0x5684 <__mulsf3>
    519c:	dc 01       	movw	r26, r24
    519e:	cb 01       	movw	r24, r22
    51a0:	6c 01       	movw	r12, r24
    51a2:	7d 01       	movw	r14, r26
    51a4:	8d 81       	ldd	r24, Y+5	; 0x05
    51a6:	9e 81       	ldd	r25, Y+6	; 0x06
    51a8:	09 2e       	mov	r0, r25
    51aa:	00 0c       	add	r0, r0
    51ac:	aa 0b       	sbc	r26, r26
    51ae:	bb 0b       	sbc	r27, r27
    51b0:	bc 01       	movw	r22, r24
    51b2:	cd 01       	movw	r24, r26
    51b4:	0e 94 8d 2a 	call	0x551a	; 0x551a <__floatsisf>
    51b8:	dc 01       	movw	r26, r24
    51ba:	cb 01       	movw	r24, r22
    51bc:	9c 01       	movw	r18, r24
    51be:	ad 01       	movw	r20, r26
    51c0:	c7 01       	movw	r24, r14
    51c2:	b6 01       	movw	r22, r12
    51c4:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__subsf3>
    51c8:	dc 01       	movw	r26, r24
    51ca:	cb 01       	movw	r24, r22
    51cc:	8b 87       	std	Y+11, r24	; 0x0b
    51ce:	9c 87       	std	Y+12, r25	; 0x0c
    51d0:	ad 87       	std	Y+13, r26	; 0x0d
    51d2:	be 87       	std	Y+14, r27	; 0x0e
    --exponent;
    51d4:	8b 81       	ldd	r24, Y+3	; 0x03
    51d6:	9c 81       	ldd	r25, Y+4	; 0x04
    51d8:	01 97       	sbiw	r24, 0x01	; 1
    51da:	8b 83       	std	Y+3, r24	; 0x03
    51dc:	9c 83       	std	Y+4, r25	; 0x04

    *buffer++ = '.';
    51de:	89 85       	ldd	r24, Y+9	; 0x09
    51e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    51e2:	9c 01       	movw	r18, r24
    51e4:	2f 5f       	subi	r18, 0xFF	; 255
    51e6:	3f 4f       	sbci	r19, 0xFF	; 255
    51e8:	29 87       	std	Y+9, r18	; 0x09
    51ea:	3a 87       	std	Y+10, r19	; 0x0a
    51ec:	2e e2       	ldi	r18, 0x2E	; 46
    51ee:	fc 01       	movw	r30, r24
    51f0:	20 83       	st	Z, r18

    for (int i = 0; i < width; i++) {
    51f2:	19 82       	std	Y+1, r1	; 0x01
    51f4:	1a 82       	std	Y+2, r1	; 0x02
    51f6:	4e c0       	rjmp	.+156    	; 0x5294 <ftoa_sci+0x1f4>
        int digit = value * 10.0;
    51f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    51fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    51fc:	ad 85       	ldd	r26, Y+13	; 0x0d
    51fe:	be 85       	ldd	r27, Y+14	; 0x0e
    5200:	20 e0       	ldi	r18, 0x00	; 0
    5202:	30 e0       	ldi	r19, 0x00	; 0
    5204:	40 e2       	ldi	r20, 0x20	; 32
    5206:	51 e4       	ldi	r21, 0x41	; 65
    5208:	bc 01       	movw	r22, r24
    520a:	cd 01       	movw	r24, r26
    520c:	0e 94 42 2b 	call	0x5684	; 0x5684 <__mulsf3>
    5210:	dc 01       	movw	r26, r24
    5212:	cb 01       	movw	r24, r22
    5214:	bc 01       	movw	r22, r24
    5216:	cd 01       	movw	r24, r26
    5218:	0e 94 55 2a 	call	0x54aa	; 0x54aa <__fixsfsi>
    521c:	dc 01       	movw	r26, r24
    521e:	cb 01       	movw	r24, r22
    5220:	8f 83       	std	Y+7, r24	; 0x07
    5222:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    5224:	89 85       	ldd	r24, Y+9	; 0x09
    5226:	9a 85       	ldd	r25, Y+10	; 0x0a
    5228:	9c 01       	movw	r18, r24
    522a:	2f 5f       	subi	r18, 0xFF	; 255
    522c:	3f 4f       	sbci	r19, 0xFF	; 255
    522e:	29 87       	std	Y+9, r18	; 0x09
    5230:	3a 87       	std	Y+10, r19	; 0x0a
    5232:	2f 81       	ldd	r18, Y+7	; 0x07
    5234:	20 5d       	subi	r18, 0xD0	; 208
    5236:	fc 01       	movw	r30, r24
    5238:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    523a:	8b 85       	ldd	r24, Y+11	; 0x0b
    523c:	9c 85       	ldd	r25, Y+12	; 0x0c
    523e:	ad 85       	ldd	r26, Y+13	; 0x0d
    5240:	be 85       	ldd	r27, Y+14	; 0x0e
    5242:	20 e0       	ldi	r18, 0x00	; 0
    5244:	30 e0       	ldi	r19, 0x00	; 0
    5246:	40 e2       	ldi	r20, 0x20	; 32
    5248:	51 e4       	ldi	r21, 0x41	; 65
    524a:	bc 01       	movw	r22, r24
    524c:	cd 01       	movw	r24, r26
    524e:	0e 94 42 2b 	call	0x5684	; 0x5684 <__mulsf3>
    5252:	dc 01       	movw	r26, r24
    5254:	cb 01       	movw	r24, r22
    5256:	6c 01       	movw	r12, r24
    5258:	7d 01       	movw	r14, r26
    525a:	8f 81       	ldd	r24, Y+7	; 0x07
    525c:	98 85       	ldd	r25, Y+8	; 0x08
    525e:	09 2e       	mov	r0, r25
    5260:	00 0c       	add	r0, r0
    5262:	aa 0b       	sbc	r26, r26
    5264:	bb 0b       	sbc	r27, r27
    5266:	bc 01       	movw	r22, r24
    5268:	cd 01       	movw	r24, r26
    526a:	0e 94 8d 2a 	call	0x551a	; 0x551a <__floatsisf>
    526e:	dc 01       	movw	r26, r24
    5270:	cb 01       	movw	r24, r22
    5272:	9c 01       	movw	r18, r24
    5274:	ad 01       	movw	r20, r26
    5276:	c7 01       	movw	r24, r14
    5278:	b6 01       	movw	r22, r12
    527a:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__subsf3>
    527e:	dc 01       	movw	r26, r24
    5280:	cb 01       	movw	r24, r22
    5282:	8b 87       	std	Y+11, r24	; 0x0b
    5284:	9c 87       	std	Y+12, r25	; 0x0c
    5286:	ad 87       	std	Y+13, r26	; 0x0d
    5288:	be 87       	std	Y+14, r27	; 0x0e
    value = value * 10.0 - digit;
    --exponent;

    *buffer++ = '.';

    for (int i = 0; i < width; i++) {
    528a:	89 81       	ldd	r24, Y+1	; 0x01
    528c:	9a 81       	ldd	r25, Y+2	; 0x02
    528e:	01 96       	adiw	r24, 0x01	; 1
    5290:	89 83       	std	Y+1, r24	; 0x01
    5292:	9a 83       	std	Y+2, r25	; 0x02
    5294:	80 91 49 20 	lds	r24, 0x2049	; 0x802049 <width.5079>
    5298:	90 91 4a 20 	lds	r25, 0x204A	; 0x80204a <width.5079+0x1>
    529c:	29 81       	ldd	r18, Y+1	; 0x01
    529e:	3a 81       	ldd	r19, Y+2	; 0x02
    52a0:	28 17       	cp	r18, r24
    52a2:	39 07       	cpc	r19, r25
    52a4:	0c f4       	brge	.+2      	; 0x52a8 <ftoa_sci+0x208>
    52a6:	a8 cf       	rjmp	.-176    	; 0x51f8 <ftoa_sci+0x158>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
    }

    *buffer++ = 'e';
    52a8:	89 85       	ldd	r24, Y+9	; 0x09
    52aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    52ac:	9c 01       	movw	r18, r24
    52ae:	2f 5f       	subi	r18, 0xFF	; 255
    52b0:	3f 4f       	sbci	r19, 0xFF	; 255
    52b2:	29 87       	std	Y+9, r18	; 0x09
    52b4:	3a 87       	std	Y+10, r19	; 0x0a
    52b6:	25 e6       	ldi	r18, 0x65	; 101
    52b8:	fc 01       	movw	r30, r24
    52ba:	20 83       	st	Z, r18
    itoa(exponent, buffer, 10);
    52bc:	29 85       	ldd	r18, Y+9	; 0x09
    52be:	3a 85       	ldd	r19, Y+10	; 0x0a
    52c0:	8b 81       	ldd	r24, Y+3	; 0x03
    52c2:	9c 81       	ldd	r25, Y+4	; 0x04
    52c4:	4a e0       	ldi	r20, 0x0A	; 10
    52c6:	50 e0       	ldi	r21, 0x00	; 0
    52c8:	b9 01       	movw	r22, r18
    52ca:	0e 94 55 2d 	call	0x5aaa	; 0x5aaa <itoa>
}
    52ce:	2e 96       	adiw	r28, 0x0e	; 14
    52d0:	cd bf       	out	0x3d, r28	; 61
    52d2:	de bf       	out	0x3e, r29	; 62
    52d4:	df 91       	pop	r29
    52d6:	cf 91       	pop	r28
    52d8:	ff 90       	pop	r15
    52da:	ef 90       	pop	r14
    52dc:	df 90       	pop	r13
    52de:	cf 90       	pop	r12
    52e0:	08 95       	ret

000052e2 <__subsf3>:
    52e2:	50 58       	subi	r21, 0x80	; 128

000052e4 <__addsf3>:
    52e4:	bb 27       	eor	r27, r27
    52e6:	aa 27       	eor	r26, r26
    52e8:	0e 94 89 29 	call	0x5312	; 0x5312 <__addsf3x>
    52ec:	0c 94 03 2b 	jmp	0x5606	; 0x5606 <__fp_round>
    52f0:	0e 94 f5 2a 	call	0x55ea	; 0x55ea <__fp_pscA>
    52f4:	38 f0       	brcs	.+14     	; 0x5304 <__addsf3+0x20>
    52f6:	0e 94 fc 2a 	call	0x55f8	; 0x55f8 <__fp_pscB>
    52fa:	20 f0       	brcs	.+8      	; 0x5304 <__addsf3+0x20>
    52fc:	39 f4       	brne	.+14     	; 0x530c <__addsf3+0x28>
    52fe:	9f 3f       	cpi	r25, 0xFF	; 255
    5300:	19 f4       	brne	.+6      	; 0x5308 <__addsf3+0x24>
    5302:	26 f4       	brtc	.+8      	; 0x530c <__addsf3+0x28>
    5304:	0c 94 f2 2a 	jmp	0x55e4	; 0x55e4 <__fp_nan>
    5308:	0e f4       	brtc	.+2      	; 0x530c <__addsf3+0x28>
    530a:	e0 95       	com	r30
    530c:	e7 fb       	bst	r30, 7
    530e:	0c 94 ec 2a 	jmp	0x55d8	; 0x55d8 <__fp_inf>

00005312 <__addsf3x>:
    5312:	e9 2f       	mov	r30, r25
    5314:	0e 94 14 2b 	call	0x5628	; 0x5628 <__fp_split3>
    5318:	58 f3       	brcs	.-42     	; 0x52f0 <__addsf3+0xc>
    531a:	ba 17       	cp	r27, r26
    531c:	62 07       	cpc	r22, r18
    531e:	73 07       	cpc	r23, r19
    5320:	84 07       	cpc	r24, r20
    5322:	95 07       	cpc	r25, r21
    5324:	20 f0       	brcs	.+8      	; 0x532e <__addsf3x+0x1c>
    5326:	79 f4       	brne	.+30     	; 0x5346 <__addsf3x+0x34>
    5328:	a6 f5       	brtc	.+104    	; 0x5392 <__addsf3x+0x80>
    532a:	0c 94 36 2b 	jmp	0x566c	; 0x566c <__fp_zero>
    532e:	0e f4       	brtc	.+2      	; 0x5332 <__addsf3x+0x20>
    5330:	e0 95       	com	r30
    5332:	0b 2e       	mov	r0, r27
    5334:	ba 2f       	mov	r27, r26
    5336:	a0 2d       	mov	r26, r0
    5338:	0b 01       	movw	r0, r22
    533a:	b9 01       	movw	r22, r18
    533c:	90 01       	movw	r18, r0
    533e:	0c 01       	movw	r0, r24
    5340:	ca 01       	movw	r24, r20
    5342:	a0 01       	movw	r20, r0
    5344:	11 24       	eor	r1, r1
    5346:	ff 27       	eor	r31, r31
    5348:	59 1b       	sub	r21, r25
    534a:	99 f0       	breq	.+38     	; 0x5372 <__addsf3x+0x60>
    534c:	59 3f       	cpi	r21, 0xF9	; 249
    534e:	50 f4       	brcc	.+20     	; 0x5364 <__addsf3x+0x52>
    5350:	50 3e       	cpi	r21, 0xE0	; 224
    5352:	68 f1       	brcs	.+90     	; 0x53ae <__addsf3x+0x9c>
    5354:	1a 16       	cp	r1, r26
    5356:	f0 40       	sbci	r31, 0x00	; 0
    5358:	a2 2f       	mov	r26, r18
    535a:	23 2f       	mov	r18, r19
    535c:	34 2f       	mov	r19, r20
    535e:	44 27       	eor	r20, r20
    5360:	58 5f       	subi	r21, 0xF8	; 248
    5362:	f3 cf       	rjmp	.-26     	; 0x534a <__addsf3x+0x38>
    5364:	46 95       	lsr	r20
    5366:	37 95       	ror	r19
    5368:	27 95       	ror	r18
    536a:	a7 95       	ror	r26
    536c:	f0 40       	sbci	r31, 0x00	; 0
    536e:	53 95       	inc	r21
    5370:	c9 f7       	brne	.-14     	; 0x5364 <__addsf3x+0x52>
    5372:	7e f4       	brtc	.+30     	; 0x5392 <__addsf3x+0x80>
    5374:	1f 16       	cp	r1, r31
    5376:	ba 0b       	sbc	r27, r26
    5378:	62 0b       	sbc	r22, r18
    537a:	73 0b       	sbc	r23, r19
    537c:	84 0b       	sbc	r24, r20
    537e:	ba f0       	brmi	.+46     	; 0x53ae <__addsf3x+0x9c>
    5380:	91 50       	subi	r25, 0x01	; 1
    5382:	a1 f0       	breq	.+40     	; 0x53ac <__addsf3x+0x9a>
    5384:	ff 0f       	add	r31, r31
    5386:	bb 1f       	adc	r27, r27
    5388:	66 1f       	adc	r22, r22
    538a:	77 1f       	adc	r23, r23
    538c:	88 1f       	adc	r24, r24
    538e:	c2 f7       	brpl	.-16     	; 0x5380 <__addsf3x+0x6e>
    5390:	0e c0       	rjmp	.+28     	; 0x53ae <__addsf3x+0x9c>
    5392:	ba 0f       	add	r27, r26
    5394:	62 1f       	adc	r22, r18
    5396:	73 1f       	adc	r23, r19
    5398:	84 1f       	adc	r24, r20
    539a:	48 f4       	brcc	.+18     	; 0x53ae <__addsf3x+0x9c>
    539c:	87 95       	ror	r24
    539e:	77 95       	ror	r23
    53a0:	67 95       	ror	r22
    53a2:	b7 95       	ror	r27
    53a4:	f7 95       	ror	r31
    53a6:	9e 3f       	cpi	r25, 0xFE	; 254
    53a8:	08 f0       	brcs	.+2      	; 0x53ac <__addsf3x+0x9a>
    53aa:	b0 cf       	rjmp	.-160    	; 0x530c <__addsf3+0x28>
    53ac:	93 95       	inc	r25
    53ae:	88 0f       	add	r24, r24
    53b0:	08 f0       	brcs	.+2      	; 0x53b4 <__addsf3x+0xa2>
    53b2:	99 27       	eor	r25, r25
    53b4:	ee 0f       	add	r30, r30
    53b6:	97 95       	ror	r25
    53b8:	87 95       	ror	r24
    53ba:	08 95       	ret

000053bc <__cmpsf2>:
    53bc:	0e 94 c8 2a 	call	0x5590	; 0x5590 <__fp_cmp>
    53c0:	08 f4       	brcc	.+2      	; 0x53c4 <__cmpsf2+0x8>
    53c2:	81 e0       	ldi	r24, 0x01	; 1
    53c4:	08 95       	ret

000053c6 <__divsf3>:
    53c6:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__divsf3x>
    53ca:	0c 94 03 2b 	jmp	0x5606	; 0x5606 <__fp_round>
    53ce:	0e 94 fc 2a 	call	0x55f8	; 0x55f8 <__fp_pscB>
    53d2:	58 f0       	brcs	.+22     	; 0x53ea <__divsf3+0x24>
    53d4:	0e 94 f5 2a 	call	0x55ea	; 0x55ea <__fp_pscA>
    53d8:	40 f0       	brcs	.+16     	; 0x53ea <__divsf3+0x24>
    53da:	29 f4       	brne	.+10     	; 0x53e6 <__divsf3+0x20>
    53dc:	5f 3f       	cpi	r21, 0xFF	; 255
    53de:	29 f0       	breq	.+10     	; 0x53ea <__divsf3+0x24>
    53e0:	0c 94 ec 2a 	jmp	0x55d8	; 0x55d8 <__fp_inf>
    53e4:	51 11       	cpse	r21, r1
    53e6:	0c 94 37 2b 	jmp	0x566e	; 0x566e <__fp_szero>
    53ea:	0c 94 f2 2a 	jmp	0x55e4	; 0x55e4 <__fp_nan>

000053ee <__divsf3x>:
    53ee:	0e 94 14 2b 	call	0x5628	; 0x5628 <__fp_split3>
    53f2:	68 f3       	brcs	.-38     	; 0x53ce <__divsf3+0x8>

000053f4 <__divsf3_pse>:
    53f4:	99 23       	and	r25, r25
    53f6:	b1 f3       	breq	.-20     	; 0x53e4 <__divsf3+0x1e>
    53f8:	55 23       	and	r21, r21
    53fa:	91 f3       	breq	.-28     	; 0x53e0 <__divsf3+0x1a>
    53fc:	95 1b       	sub	r25, r21
    53fe:	55 0b       	sbc	r21, r21
    5400:	bb 27       	eor	r27, r27
    5402:	aa 27       	eor	r26, r26
    5404:	62 17       	cp	r22, r18
    5406:	73 07       	cpc	r23, r19
    5408:	84 07       	cpc	r24, r20
    540a:	38 f0       	brcs	.+14     	; 0x541a <__divsf3_pse+0x26>
    540c:	9f 5f       	subi	r25, 0xFF	; 255
    540e:	5f 4f       	sbci	r21, 0xFF	; 255
    5410:	22 0f       	add	r18, r18
    5412:	33 1f       	adc	r19, r19
    5414:	44 1f       	adc	r20, r20
    5416:	aa 1f       	adc	r26, r26
    5418:	a9 f3       	breq	.-22     	; 0x5404 <__divsf3_pse+0x10>
    541a:	35 d0       	rcall	.+106    	; 0x5486 <__divsf3_pse+0x92>
    541c:	0e 2e       	mov	r0, r30
    541e:	3a f0       	brmi	.+14     	; 0x542e <__divsf3_pse+0x3a>
    5420:	e0 e8       	ldi	r30, 0x80	; 128
    5422:	32 d0       	rcall	.+100    	; 0x5488 <__divsf3_pse+0x94>
    5424:	91 50       	subi	r25, 0x01	; 1
    5426:	50 40       	sbci	r21, 0x00	; 0
    5428:	e6 95       	lsr	r30
    542a:	00 1c       	adc	r0, r0
    542c:	ca f7       	brpl	.-14     	; 0x5420 <__divsf3_pse+0x2c>
    542e:	2b d0       	rcall	.+86     	; 0x5486 <__divsf3_pse+0x92>
    5430:	fe 2f       	mov	r31, r30
    5432:	29 d0       	rcall	.+82     	; 0x5486 <__divsf3_pse+0x92>
    5434:	66 0f       	add	r22, r22
    5436:	77 1f       	adc	r23, r23
    5438:	88 1f       	adc	r24, r24
    543a:	bb 1f       	adc	r27, r27
    543c:	26 17       	cp	r18, r22
    543e:	37 07       	cpc	r19, r23
    5440:	48 07       	cpc	r20, r24
    5442:	ab 07       	cpc	r26, r27
    5444:	b0 e8       	ldi	r27, 0x80	; 128
    5446:	09 f0       	breq	.+2      	; 0x544a <__divsf3_pse+0x56>
    5448:	bb 0b       	sbc	r27, r27
    544a:	80 2d       	mov	r24, r0
    544c:	bf 01       	movw	r22, r30
    544e:	ff 27       	eor	r31, r31
    5450:	93 58       	subi	r25, 0x83	; 131
    5452:	5f 4f       	sbci	r21, 0xFF	; 255
    5454:	3a f0       	brmi	.+14     	; 0x5464 <__divsf3_pse+0x70>
    5456:	9e 3f       	cpi	r25, 0xFE	; 254
    5458:	51 05       	cpc	r21, r1
    545a:	78 f0       	brcs	.+30     	; 0x547a <__divsf3_pse+0x86>
    545c:	0c 94 ec 2a 	jmp	0x55d8	; 0x55d8 <__fp_inf>
    5460:	0c 94 37 2b 	jmp	0x566e	; 0x566e <__fp_szero>
    5464:	5f 3f       	cpi	r21, 0xFF	; 255
    5466:	e4 f3       	brlt	.-8      	; 0x5460 <__divsf3_pse+0x6c>
    5468:	98 3e       	cpi	r25, 0xE8	; 232
    546a:	d4 f3       	brlt	.-12     	; 0x5460 <__divsf3_pse+0x6c>
    546c:	86 95       	lsr	r24
    546e:	77 95       	ror	r23
    5470:	67 95       	ror	r22
    5472:	b7 95       	ror	r27
    5474:	f7 95       	ror	r31
    5476:	9f 5f       	subi	r25, 0xFF	; 255
    5478:	c9 f7       	brne	.-14     	; 0x546c <__divsf3_pse+0x78>
    547a:	88 0f       	add	r24, r24
    547c:	91 1d       	adc	r25, r1
    547e:	96 95       	lsr	r25
    5480:	87 95       	ror	r24
    5482:	97 f9       	bld	r25, 7
    5484:	08 95       	ret
    5486:	e1 e0       	ldi	r30, 0x01	; 1
    5488:	66 0f       	add	r22, r22
    548a:	77 1f       	adc	r23, r23
    548c:	88 1f       	adc	r24, r24
    548e:	bb 1f       	adc	r27, r27
    5490:	62 17       	cp	r22, r18
    5492:	73 07       	cpc	r23, r19
    5494:	84 07       	cpc	r24, r20
    5496:	ba 07       	cpc	r27, r26
    5498:	20 f0       	brcs	.+8      	; 0x54a2 <__divsf3_pse+0xae>
    549a:	62 1b       	sub	r22, r18
    549c:	73 0b       	sbc	r23, r19
    549e:	84 0b       	sbc	r24, r20
    54a0:	ba 0b       	sbc	r27, r26
    54a2:	ee 1f       	adc	r30, r30
    54a4:	88 f7       	brcc	.-30     	; 0x5488 <__divsf3_pse+0x94>
    54a6:	e0 95       	com	r30
    54a8:	08 95       	ret

000054aa <__fixsfsi>:
    54aa:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <__fixunssfsi>
    54ae:	68 94       	set
    54b0:	b1 11       	cpse	r27, r1
    54b2:	0c 94 37 2b 	jmp	0x566e	; 0x566e <__fp_szero>
    54b6:	08 95       	ret

000054b8 <__fixunssfsi>:
    54b8:	0e 94 1c 2b 	call	0x5638	; 0x5638 <__fp_splitA>
    54bc:	88 f0       	brcs	.+34     	; 0x54e0 <__fixunssfsi+0x28>
    54be:	9f 57       	subi	r25, 0x7F	; 127
    54c0:	98 f0       	brcs	.+38     	; 0x54e8 <__fixunssfsi+0x30>
    54c2:	b9 2f       	mov	r27, r25
    54c4:	99 27       	eor	r25, r25
    54c6:	b7 51       	subi	r27, 0x17	; 23
    54c8:	b0 f0       	brcs	.+44     	; 0x54f6 <__fixunssfsi+0x3e>
    54ca:	e1 f0       	breq	.+56     	; 0x5504 <__fixunssfsi+0x4c>
    54cc:	66 0f       	add	r22, r22
    54ce:	77 1f       	adc	r23, r23
    54d0:	88 1f       	adc	r24, r24
    54d2:	99 1f       	adc	r25, r25
    54d4:	1a f0       	brmi	.+6      	; 0x54dc <__fixunssfsi+0x24>
    54d6:	ba 95       	dec	r27
    54d8:	c9 f7       	brne	.-14     	; 0x54cc <__fixunssfsi+0x14>
    54da:	14 c0       	rjmp	.+40     	; 0x5504 <__fixunssfsi+0x4c>
    54dc:	b1 30       	cpi	r27, 0x01	; 1
    54de:	91 f0       	breq	.+36     	; 0x5504 <__fixunssfsi+0x4c>
    54e0:	0e 94 36 2b 	call	0x566c	; 0x566c <__fp_zero>
    54e4:	b1 e0       	ldi	r27, 0x01	; 1
    54e6:	08 95       	ret
    54e8:	0c 94 36 2b 	jmp	0x566c	; 0x566c <__fp_zero>
    54ec:	67 2f       	mov	r22, r23
    54ee:	78 2f       	mov	r23, r24
    54f0:	88 27       	eor	r24, r24
    54f2:	b8 5f       	subi	r27, 0xF8	; 248
    54f4:	39 f0       	breq	.+14     	; 0x5504 <__fixunssfsi+0x4c>
    54f6:	b9 3f       	cpi	r27, 0xF9	; 249
    54f8:	cc f3       	brlt	.-14     	; 0x54ec <__fixunssfsi+0x34>
    54fa:	86 95       	lsr	r24
    54fc:	77 95       	ror	r23
    54fe:	67 95       	ror	r22
    5500:	b3 95       	inc	r27
    5502:	d9 f7       	brne	.-10     	; 0x54fa <__fixunssfsi+0x42>
    5504:	3e f4       	brtc	.+14     	; 0x5514 <__fixunssfsi+0x5c>
    5506:	90 95       	com	r25
    5508:	80 95       	com	r24
    550a:	70 95       	com	r23
    550c:	61 95       	neg	r22
    550e:	7f 4f       	sbci	r23, 0xFF	; 255
    5510:	8f 4f       	sbci	r24, 0xFF	; 255
    5512:	9f 4f       	sbci	r25, 0xFF	; 255
    5514:	08 95       	ret

00005516 <__floatunsisf>:
    5516:	e8 94       	clt
    5518:	09 c0       	rjmp	.+18     	; 0x552c <__floatsisf+0x12>

0000551a <__floatsisf>:
    551a:	97 fb       	bst	r25, 7
    551c:	3e f4       	brtc	.+14     	; 0x552c <__floatsisf+0x12>
    551e:	90 95       	com	r25
    5520:	80 95       	com	r24
    5522:	70 95       	com	r23
    5524:	61 95       	neg	r22
    5526:	7f 4f       	sbci	r23, 0xFF	; 255
    5528:	8f 4f       	sbci	r24, 0xFF	; 255
    552a:	9f 4f       	sbci	r25, 0xFF	; 255
    552c:	99 23       	and	r25, r25
    552e:	a9 f0       	breq	.+42     	; 0x555a <__floatsisf+0x40>
    5530:	f9 2f       	mov	r31, r25
    5532:	96 e9       	ldi	r25, 0x96	; 150
    5534:	bb 27       	eor	r27, r27
    5536:	93 95       	inc	r25
    5538:	f6 95       	lsr	r31
    553a:	87 95       	ror	r24
    553c:	77 95       	ror	r23
    553e:	67 95       	ror	r22
    5540:	b7 95       	ror	r27
    5542:	f1 11       	cpse	r31, r1
    5544:	f8 cf       	rjmp	.-16     	; 0x5536 <__floatsisf+0x1c>
    5546:	fa f4       	brpl	.+62     	; 0x5586 <__floatsisf+0x6c>
    5548:	bb 0f       	add	r27, r27
    554a:	11 f4       	brne	.+4      	; 0x5550 <__floatsisf+0x36>
    554c:	60 ff       	sbrs	r22, 0
    554e:	1b c0       	rjmp	.+54     	; 0x5586 <__floatsisf+0x6c>
    5550:	6f 5f       	subi	r22, 0xFF	; 255
    5552:	7f 4f       	sbci	r23, 0xFF	; 255
    5554:	8f 4f       	sbci	r24, 0xFF	; 255
    5556:	9f 4f       	sbci	r25, 0xFF	; 255
    5558:	16 c0       	rjmp	.+44     	; 0x5586 <__floatsisf+0x6c>
    555a:	88 23       	and	r24, r24
    555c:	11 f0       	breq	.+4      	; 0x5562 <__floatsisf+0x48>
    555e:	96 e9       	ldi	r25, 0x96	; 150
    5560:	11 c0       	rjmp	.+34     	; 0x5584 <__floatsisf+0x6a>
    5562:	77 23       	and	r23, r23
    5564:	21 f0       	breq	.+8      	; 0x556e <__floatsisf+0x54>
    5566:	9e e8       	ldi	r25, 0x8E	; 142
    5568:	87 2f       	mov	r24, r23
    556a:	76 2f       	mov	r23, r22
    556c:	05 c0       	rjmp	.+10     	; 0x5578 <__floatsisf+0x5e>
    556e:	66 23       	and	r22, r22
    5570:	71 f0       	breq	.+28     	; 0x558e <__floatsisf+0x74>
    5572:	96 e8       	ldi	r25, 0x86	; 134
    5574:	86 2f       	mov	r24, r22
    5576:	70 e0       	ldi	r23, 0x00	; 0
    5578:	60 e0       	ldi	r22, 0x00	; 0
    557a:	2a f0       	brmi	.+10     	; 0x5586 <__floatsisf+0x6c>
    557c:	9a 95       	dec	r25
    557e:	66 0f       	add	r22, r22
    5580:	77 1f       	adc	r23, r23
    5582:	88 1f       	adc	r24, r24
    5584:	da f7       	brpl	.-10     	; 0x557c <__floatsisf+0x62>
    5586:	88 0f       	add	r24, r24
    5588:	96 95       	lsr	r25
    558a:	87 95       	ror	r24
    558c:	97 f9       	bld	r25, 7
    558e:	08 95       	ret

00005590 <__fp_cmp>:
    5590:	99 0f       	add	r25, r25
    5592:	00 08       	sbc	r0, r0
    5594:	55 0f       	add	r21, r21
    5596:	aa 0b       	sbc	r26, r26
    5598:	e0 e8       	ldi	r30, 0x80	; 128
    559a:	fe ef       	ldi	r31, 0xFE	; 254
    559c:	16 16       	cp	r1, r22
    559e:	17 06       	cpc	r1, r23
    55a0:	e8 07       	cpc	r30, r24
    55a2:	f9 07       	cpc	r31, r25
    55a4:	c0 f0       	brcs	.+48     	; 0x55d6 <__fp_cmp+0x46>
    55a6:	12 16       	cp	r1, r18
    55a8:	13 06       	cpc	r1, r19
    55aa:	e4 07       	cpc	r30, r20
    55ac:	f5 07       	cpc	r31, r21
    55ae:	98 f0       	brcs	.+38     	; 0x55d6 <__fp_cmp+0x46>
    55b0:	62 1b       	sub	r22, r18
    55b2:	73 0b       	sbc	r23, r19
    55b4:	84 0b       	sbc	r24, r20
    55b6:	95 0b       	sbc	r25, r21
    55b8:	39 f4       	brne	.+14     	; 0x55c8 <__fp_cmp+0x38>
    55ba:	0a 26       	eor	r0, r26
    55bc:	61 f0       	breq	.+24     	; 0x55d6 <__fp_cmp+0x46>
    55be:	23 2b       	or	r18, r19
    55c0:	24 2b       	or	r18, r20
    55c2:	25 2b       	or	r18, r21
    55c4:	21 f4       	brne	.+8      	; 0x55ce <__fp_cmp+0x3e>
    55c6:	08 95       	ret
    55c8:	0a 26       	eor	r0, r26
    55ca:	09 f4       	brne	.+2      	; 0x55ce <__fp_cmp+0x3e>
    55cc:	a1 40       	sbci	r26, 0x01	; 1
    55ce:	a6 95       	lsr	r26
    55d0:	8f ef       	ldi	r24, 0xFF	; 255
    55d2:	81 1d       	adc	r24, r1
    55d4:	81 1d       	adc	r24, r1
    55d6:	08 95       	ret

000055d8 <__fp_inf>:
    55d8:	97 f9       	bld	r25, 7
    55da:	9f 67       	ori	r25, 0x7F	; 127
    55dc:	80 e8       	ldi	r24, 0x80	; 128
    55de:	70 e0       	ldi	r23, 0x00	; 0
    55e0:	60 e0       	ldi	r22, 0x00	; 0
    55e2:	08 95       	ret

000055e4 <__fp_nan>:
    55e4:	9f ef       	ldi	r25, 0xFF	; 255
    55e6:	80 ec       	ldi	r24, 0xC0	; 192
    55e8:	08 95       	ret

000055ea <__fp_pscA>:
    55ea:	00 24       	eor	r0, r0
    55ec:	0a 94       	dec	r0
    55ee:	16 16       	cp	r1, r22
    55f0:	17 06       	cpc	r1, r23
    55f2:	18 06       	cpc	r1, r24
    55f4:	09 06       	cpc	r0, r25
    55f6:	08 95       	ret

000055f8 <__fp_pscB>:
    55f8:	00 24       	eor	r0, r0
    55fa:	0a 94       	dec	r0
    55fc:	12 16       	cp	r1, r18
    55fe:	13 06       	cpc	r1, r19
    5600:	14 06       	cpc	r1, r20
    5602:	05 06       	cpc	r0, r21
    5604:	08 95       	ret

00005606 <__fp_round>:
    5606:	09 2e       	mov	r0, r25
    5608:	03 94       	inc	r0
    560a:	00 0c       	add	r0, r0
    560c:	11 f4       	brne	.+4      	; 0x5612 <__fp_round+0xc>
    560e:	88 23       	and	r24, r24
    5610:	52 f0       	brmi	.+20     	; 0x5626 <__fp_round+0x20>
    5612:	bb 0f       	add	r27, r27
    5614:	40 f4       	brcc	.+16     	; 0x5626 <__fp_round+0x20>
    5616:	bf 2b       	or	r27, r31
    5618:	11 f4       	brne	.+4      	; 0x561e <__fp_round+0x18>
    561a:	60 ff       	sbrs	r22, 0
    561c:	04 c0       	rjmp	.+8      	; 0x5626 <__fp_round+0x20>
    561e:	6f 5f       	subi	r22, 0xFF	; 255
    5620:	7f 4f       	sbci	r23, 0xFF	; 255
    5622:	8f 4f       	sbci	r24, 0xFF	; 255
    5624:	9f 4f       	sbci	r25, 0xFF	; 255
    5626:	08 95       	ret

00005628 <__fp_split3>:
    5628:	57 fd       	sbrc	r21, 7
    562a:	90 58       	subi	r25, 0x80	; 128
    562c:	44 0f       	add	r20, r20
    562e:	55 1f       	adc	r21, r21
    5630:	59 f0       	breq	.+22     	; 0x5648 <__fp_splitA+0x10>
    5632:	5f 3f       	cpi	r21, 0xFF	; 255
    5634:	71 f0       	breq	.+28     	; 0x5652 <__fp_splitA+0x1a>
    5636:	47 95       	ror	r20

00005638 <__fp_splitA>:
    5638:	88 0f       	add	r24, r24
    563a:	97 fb       	bst	r25, 7
    563c:	99 1f       	adc	r25, r25
    563e:	61 f0       	breq	.+24     	; 0x5658 <__fp_splitA+0x20>
    5640:	9f 3f       	cpi	r25, 0xFF	; 255
    5642:	79 f0       	breq	.+30     	; 0x5662 <__fp_splitA+0x2a>
    5644:	87 95       	ror	r24
    5646:	08 95       	ret
    5648:	12 16       	cp	r1, r18
    564a:	13 06       	cpc	r1, r19
    564c:	14 06       	cpc	r1, r20
    564e:	55 1f       	adc	r21, r21
    5650:	f2 cf       	rjmp	.-28     	; 0x5636 <__fp_split3+0xe>
    5652:	46 95       	lsr	r20
    5654:	f1 df       	rcall	.-30     	; 0x5638 <__fp_splitA>
    5656:	08 c0       	rjmp	.+16     	; 0x5668 <__fp_splitA+0x30>
    5658:	16 16       	cp	r1, r22
    565a:	17 06       	cpc	r1, r23
    565c:	18 06       	cpc	r1, r24
    565e:	99 1f       	adc	r25, r25
    5660:	f1 cf       	rjmp	.-30     	; 0x5644 <__fp_splitA+0xc>
    5662:	86 95       	lsr	r24
    5664:	71 05       	cpc	r23, r1
    5666:	61 05       	cpc	r22, r1
    5668:	08 94       	sec
    566a:	08 95       	ret

0000566c <__fp_zero>:
    566c:	e8 94       	clt

0000566e <__fp_szero>:
    566e:	bb 27       	eor	r27, r27
    5670:	66 27       	eor	r22, r22
    5672:	77 27       	eor	r23, r23
    5674:	cb 01       	movw	r24, r22
    5676:	97 f9       	bld	r25, 7
    5678:	08 95       	ret

0000567a <__gesf2>:
    567a:	0e 94 c8 2a 	call	0x5590	; 0x5590 <__fp_cmp>
    567e:	08 f4       	brcc	.+2      	; 0x5682 <__gesf2+0x8>
    5680:	8f ef       	ldi	r24, 0xFF	; 255
    5682:	08 95       	ret

00005684 <__mulsf3>:
    5684:	0e 94 55 2b 	call	0x56aa	; 0x56aa <__mulsf3x>
    5688:	0c 94 03 2b 	jmp	0x5606	; 0x5606 <__fp_round>
    568c:	0e 94 f5 2a 	call	0x55ea	; 0x55ea <__fp_pscA>
    5690:	38 f0       	brcs	.+14     	; 0x56a0 <__mulsf3+0x1c>
    5692:	0e 94 fc 2a 	call	0x55f8	; 0x55f8 <__fp_pscB>
    5696:	20 f0       	brcs	.+8      	; 0x56a0 <__mulsf3+0x1c>
    5698:	95 23       	and	r25, r21
    569a:	11 f0       	breq	.+4      	; 0x56a0 <__mulsf3+0x1c>
    569c:	0c 94 ec 2a 	jmp	0x55d8	; 0x55d8 <__fp_inf>
    56a0:	0c 94 f2 2a 	jmp	0x55e4	; 0x55e4 <__fp_nan>
    56a4:	11 24       	eor	r1, r1
    56a6:	0c 94 37 2b 	jmp	0x566e	; 0x566e <__fp_szero>

000056aa <__mulsf3x>:
    56aa:	0e 94 14 2b 	call	0x5628	; 0x5628 <__fp_split3>
    56ae:	70 f3       	brcs	.-36     	; 0x568c <__mulsf3+0x8>

000056b0 <__mulsf3_pse>:
    56b0:	95 9f       	mul	r25, r21
    56b2:	c1 f3       	breq	.-16     	; 0x56a4 <__mulsf3+0x20>
    56b4:	95 0f       	add	r25, r21
    56b6:	50 e0       	ldi	r21, 0x00	; 0
    56b8:	55 1f       	adc	r21, r21
    56ba:	62 9f       	mul	r22, r18
    56bc:	f0 01       	movw	r30, r0
    56be:	72 9f       	mul	r23, r18
    56c0:	bb 27       	eor	r27, r27
    56c2:	f0 0d       	add	r31, r0
    56c4:	b1 1d       	adc	r27, r1
    56c6:	63 9f       	mul	r22, r19
    56c8:	aa 27       	eor	r26, r26
    56ca:	f0 0d       	add	r31, r0
    56cc:	b1 1d       	adc	r27, r1
    56ce:	aa 1f       	adc	r26, r26
    56d0:	64 9f       	mul	r22, r20
    56d2:	66 27       	eor	r22, r22
    56d4:	b0 0d       	add	r27, r0
    56d6:	a1 1d       	adc	r26, r1
    56d8:	66 1f       	adc	r22, r22
    56da:	82 9f       	mul	r24, r18
    56dc:	22 27       	eor	r18, r18
    56de:	b0 0d       	add	r27, r0
    56e0:	a1 1d       	adc	r26, r1
    56e2:	62 1f       	adc	r22, r18
    56e4:	73 9f       	mul	r23, r19
    56e6:	b0 0d       	add	r27, r0
    56e8:	a1 1d       	adc	r26, r1
    56ea:	62 1f       	adc	r22, r18
    56ec:	83 9f       	mul	r24, r19
    56ee:	a0 0d       	add	r26, r0
    56f0:	61 1d       	adc	r22, r1
    56f2:	22 1f       	adc	r18, r18
    56f4:	74 9f       	mul	r23, r20
    56f6:	33 27       	eor	r19, r19
    56f8:	a0 0d       	add	r26, r0
    56fa:	61 1d       	adc	r22, r1
    56fc:	23 1f       	adc	r18, r19
    56fe:	84 9f       	mul	r24, r20
    5700:	60 0d       	add	r22, r0
    5702:	21 1d       	adc	r18, r1
    5704:	82 2f       	mov	r24, r18
    5706:	76 2f       	mov	r23, r22
    5708:	6a 2f       	mov	r22, r26
    570a:	11 24       	eor	r1, r1
    570c:	9f 57       	subi	r25, 0x7F	; 127
    570e:	50 40       	sbci	r21, 0x00	; 0
    5710:	9a f0       	brmi	.+38     	; 0x5738 <__mulsf3_pse+0x88>
    5712:	f1 f0       	breq	.+60     	; 0x5750 <__mulsf3_pse+0xa0>
    5714:	88 23       	and	r24, r24
    5716:	4a f0       	brmi	.+18     	; 0x572a <__mulsf3_pse+0x7a>
    5718:	ee 0f       	add	r30, r30
    571a:	ff 1f       	adc	r31, r31
    571c:	bb 1f       	adc	r27, r27
    571e:	66 1f       	adc	r22, r22
    5720:	77 1f       	adc	r23, r23
    5722:	88 1f       	adc	r24, r24
    5724:	91 50       	subi	r25, 0x01	; 1
    5726:	50 40       	sbci	r21, 0x00	; 0
    5728:	a9 f7       	brne	.-22     	; 0x5714 <__mulsf3_pse+0x64>
    572a:	9e 3f       	cpi	r25, 0xFE	; 254
    572c:	51 05       	cpc	r21, r1
    572e:	80 f0       	brcs	.+32     	; 0x5750 <__mulsf3_pse+0xa0>
    5730:	0c 94 ec 2a 	jmp	0x55d8	; 0x55d8 <__fp_inf>
    5734:	0c 94 37 2b 	jmp	0x566e	; 0x566e <__fp_szero>
    5738:	5f 3f       	cpi	r21, 0xFF	; 255
    573a:	e4 f3       	brlt	.-8      	; 0x5734 <__mulsf3_pse+0x84>
    573c:	98 3e       	cpi	r25, 0xE8	; 232
    573e:	d4 f3       	brlt	.-12     	; 0x5734 <__mulsf3_pse+0x84>
    5740:	86 95       	lsr	r24
    5742:	77 95       	ror	r23
    5744:	67 95       	ror	r22
    5746:	b7 95       	ror	r27
    5748:	f7 95       	ror	r31
    574a:	e7 95       	ror	r30
    574c:	9f 5f       	subi	r25, 0xFF	; 255
    574e:	c1 f7       	brne	.-16     	; 0x5740 <__mulsf3_pse+0x90>
    5750:	fe 2b       	or	r31, r30
    5752:	88 0f       	add	r24, r24
    5754:	91 1d       	adc	r25, r1
    5756:	96 95       	lsr	r25
    5758:	87 95       	ror	r24
    575a:	97 f9       	bld	r25, 7
    575c:	08 95       	ret

0000575e <pow>:
    575e:	fa 01       	movw	r30, r20
    5760:	ee 0f       	add	r30, r30
    5762:	ff 1f       	adc	r31, r31
    5764:	30 96       	adiw	r30, 0x00	; 0
    5766:	21 05       	cpc	r18, r1
    5768:	31 05       	cpc	r19, r1
    576a:	a1 f1       	breq	.+104    	; 0x57d4 <pow+0x76>
    576c:	61 15       	cp	r22, r1
    576e:	71 05       	cpc	r23, r1
    5770:	61 f4       	brne	.+24     	; 0x578a <pow+0x2c>
    5772:	80 38       	cpi	r24, 0x80	; 128
    5774:	bf e3       	ldi	r27, 0x3F	; 63
    5776:	9b 07       	cpc	r25, r27
    5778:	49 f1       	breq	.+82     	; 0x57cc <pow+0x6e>
    577a:	68 94       	set
    577c:	90 38       	cpi	r25, 0x80	; 128
    577e:	81 05       	cpc	r24, r1
    5780:	61 f0       	breq	.+24     	; 0x579a <pow+0x3c>
    5782:	80 38       	cpi	r24, 0x80	; 128
    5784:	bf ef       	ldi	r27, 0xFF	; 255
    5786:	9b 07       	cpc	r25, r27
    5788:	41 f0       	breq	.+16     	; 0x579a <pow+0x3c>
    578a:	99 23       	and	r25, r25
    578c:	4a f5       	brpl	.+82     	; 0x57e0 <pow+0x82>
    578e:	ff 3f       	cpi	r31, 0xFF	; 255
    5790:	e1 05       	cpc	r30, r1
    5792:	31 05       	cpc	r19, r1
    5794:	21 05       	cpc	r18, r1
    5796:	19 f1       	breq	.+70     	; 0x57de <pow+0x80>
    5798:	e8 94       	clt
    579a:	08 94       	sec
    579c:	e7 95       	ror	r30
    579e:	d9 01       	movw	r26, r18
    57a0:	aa 23       	and	r26, r26
    57a2:	29 f4       	brne	.+10     	; 0x57ae <pow+0x50>
    57a4:	ab 2f       	mov	r26, r27
    57a6:	be 2f       	mov	r27, r30
    57a8:	f8 5f       	subi	r31, 0xF8	; 248
    57aa:	d0 f3       	brcs	.-12     	; 0x57a0 <pow+0x42>
    57ac:	10 c0       	rjmp	.+32     	; 0x57ce <pow+0x70>
    57ae:	ff 5f       	subi	r31, 0xFF	; 255
    57b0:	70 f4       	brcc	.+28     	; 0x57ce <pow+0x70>
    57b2:	a6 95       	lsr	r26
    57b4:	e0 f7       	brcc	.-8      	; 0x57ae <pow+0x50>
    57b6:	f7 39       	cpi	r31, 0x97	; 151
    57b8:	50 f0       	brcs	.+20     	; 0x57ce <pow+0x70>
    57ba:	19 f0       	breq	.+6      	; 0x57c2 <pow+0x64>
    57bc:	ff 3a       	cpi	r31, 0xAF	; 175
    57be:	38 f4       	brcc	.+14     	; 0x57ce <pow+0x70>
    57c0:	9f 77       	andi	r25, 0x7F	; 127
    57c2:	9f 93       	push	r25
    57c4:	0d d0       	rcall	.+26     	; 0x57e0 <pow+0x82>
    57c6:	0f 90       	pop	r0
    57c8:	07 fc       	sbrc	r0, 7
    57ca:	90 58       	subi	r25, 0x80	; 128
    57cc:	08 95       	ret
    57ce:	46 f0       	brts	.+16     	; 0x57e0 <pow+0x82>
    57d0:	0c 94 f2 2a 	jmp	0x55e4	; 0x55e4 <__fp_nan>
    57d4:	60 e0       	ldi	r22, 0x00	; 0
    57d6:	70 e0       	ldi	r23, 0x00	; 0
    57d8:	80 e8       	ldi	r24, 0x80	; 128
    57da:	9f e3       	ldi	r25, 0x3F	; 63
    57dc:	08 95       	ret
    57de:	4f e7       	ldi	r20, 0x7F	; 127
    57e0:	9f 77       	andi	r25, 0x7F	; 127
    57e2:	5f 93       	push	r21
    57e4:	4f 93       	push	r20
    57e6:	3f 93       	push	r19
    57e8:	2f 93       	push	r18
    57ea:	0e 94 aa 2c 	call	0x5954	; 0x5954 <log>
    57ee:	2f 91       	pop	r18
    57f0:	3f 91       	pop	r19
    57f2:	4f 91       	pop	r20
    57f4:	5f 91       	pop	r21
    57f6:	0e 94 42 2b 	call	0x5684	; 0x5684 <__mulsf3>
    57fa:	0c 94 07 2c 	jmp	0x580e	; 0x580e <exp>
    57fe:	29 f4       	brne	.+10     	; 0x580a <pow+0xac>
    5800:	16 f0       	brts	.+4      	; 0x5806 <pow+0xa8>
    5802:	0c 94 ec 2a 	jmp	0x55d8	; 0x55d8 <__fp_inf>
    5806:	0c 94 36 2b 	jmp	0x566c	; 0x566c <__fp_zero>
    580a:	0c 94 f2 2a 	jmp	0x55e4	; 0x55e4 <__fp_nan>

0000580e <exp>:
    580e:	0e 94 1c 2b 	call	0x5638	; 0x5638 <__fp_splitA>
    5812:	a8 f3       	brcs	.-22     	; 0x57fe <pow+0xa0>
    5814:	96 38       	cpi	r25, 0x86	; 134
    5816:	a0 f7       	brcc	.-24     	; 0x5800 <pow+0xa2>
    5818:	07 f8       	bld	r0, 7
    581a:	0f 92       	push	r0
    581c:	e8 94       	clt
    581e:	2b e3       	ldi	r18, 0x3B	; 59
    5820:	3a ea       	ldi	r19, 0xAA	; 170
    5822:	48 eb       	ldi	r20, 0xB8	; 184
    5824:	5f e7       	ldi	r21, 0x7F	; 127
    5826:	0e 94 58 2b 	call	0x56b0	; 0x56b0 <__mulsf3_pse>
    582a:	0f 92       	push	r0
    582c:	0f 92       	push	r0
    582e:	0f 92       	push	r0
    5830:	4d b7       	in	r20, 0x3d	; 61
    5832:	5e b7       	in	r21, 0x3e	; 62
    5834:	0f 92       	push	r0
    5836:	0e 94 f2 2c 	call	0x59e4	; 0x59e4 <modf>
    583a:	e0 e1       	ldi	r30, 0x10	; 16
    583c:	f2 e0       	ldi	r31, 0x02	; 2
    583e:	0e 94 39 2c 	call	0x5872	; 0x5872 <__fp_powser>
    5842:	4f 91       	pop	r20
    5844:	5f 91       	pop	r21
    5846:	ef 91       	pop	r30
    5848:	ff 91       	pop	r31
    584a:	e5 95       	asr	r30
    584c:	ee 1f       	adc	r30, r30
    584e:	ff 1f       	adc	r31, r31
    5850:	49 f0       	breq	.+18     	; 0x5864 <exp+0x56>
    5852:	fe 57       	subi	r31, 0x7E	; 126
    5854:	e0 68       	ori	r30, 0x80	; 128
    5856:	44 27       	eor	r20, r20
    5858:	ee 0f       	add	r30, r30
    585a:	44 1f       	adc	r20, r20
    585c:	fa 95       	dec	r31
    585e:	e1 f7       	brne	.-8      	; 0x5858 <exp+0x4a>
    5860:	41 95       	neg	r20
    5862:	55 0b       	sbc	r21, r21
    5864:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <ldexp>
    5868:	0f 90       	pop	r0
    586a:	07 fe       	sbrs	r0, 7
    586c:	0c 94 60 2c 	jmp	0x58c0	; 0x58c0 <inverse>
    5870:	08 95       	ret

00005872 <__fp_powser>:
    5872:	df 93       	push	r29
    5874:	cf 93       	push	r28
    5876:	1f 93       	push	r17
    5878:	0f 93       	push	r16
    587a:	ff 92       	push	r15
    587c:	ef 92       	push	r14
    587e:	df 92       	push	r13
    5880:	7b 01       	movw	r14, r22
    5882:	8c 01       	movw	r16, r24
    5884:	68 94       	set
    5886:	06 c0       	rjmp	.+12     	; 0x5894 <__fp_powser+0x22>
    5888:	da 2e       	mov	r13, r26
    588a:	ef 01       	movw	r28, r30
    588c:	0e 94 55 2b 	call	0x56aa	; 0x56aa <__mulsf3x>
    5890:	fe 01       	movw	r30, r28
    5892:	e8 94       	clt
    5894:	a5 91       	lpm	r26, Z+
    5896:	25 91       	lpm	r18, Z+
    5898:	35 91       	lpm	r19, Z+
    589a:	45 91       	lpm	r20, Z+
    589c:	55 91       	lpm	r21, Z+
    589e:	a6 f3       	brts	.-24     	; 0x5888 <__fp_powser+0x16>
    58a0:	ef 01       	movw	r28, r30
    58a2:	0e 94 89 29 	call	0x5312	; 0x5312 <__addsf3x>
    58a6:	fe 01       	movw	r30, r28
    58a8:	97 01       	movw	r18, r14
    58aa:	a8 01       	movw	r20, r16
    58ac:	da 94       	dec	r13
    58ae:	69 f7       	brne	.-38     	; 0x588a <__fp_powser+0x18>
    58b0:	df 90       	pop	r13
    58b2:	ef 90       	pop	r14
    58b4:	ff 90       	pop	r15
    58b6:	0f 91       	pop	r16
    58b8:	1f 91       	pop	r17
    58ba:	cf 91       	pop	r28
    58bc:	df 91       	pop	r29
    58be:	08 95       	ret

000058c0 <inverse>:
    58c0:	9b 01       	movw	r18, r22
    58c2:	ac 01       	movw	r20, r24
    58c4:	60 e0       	ldi	r22, 0x00	; 0
    58c6:	70 e0       	ldi	r23, 0x00	; 0
    58c8:	80 e8       	ldi	r24, 0x80	; 128
    58ca:	9f e3       	ldi	r25, 0x3F	; 63
    58cc:	0c 94 e3 29 	jmp	0x53c6	; 0x53c6 <__divsf3>
    58d0:	0c 94 ec 2a 	jmp	0x55d8	; 0x55d8 <__fp_inf>
    58d4:	0c 94 26 2d 	jmp	0x5a4c	; 0x5a4c <__fp_mpack>

000058d8 <ldexp>:
    58d8:	0e 94 1c 2b 	call	0x5638	; 0x5638 <__fp_splitA>
    58dc:	d8 f3       	brcs	.-10     	; 0x58d4 <inverse+0x14>
    58de:	99 23       	and	r25, r25
    58e0:	c9 f3       	breq	.-14     	; 0x58d4 <inverse+0x14>
    58e2:	94 0f       	add	r25, r20
    58e4:	51 1d       	adc	r21, r1
    58e6:	a3 f3       	brvs	.-24     	; 0x58d0 <inverse+0x10>
    58e8:	91 50       	subi	r25, 0x01	; 1
    58ea:	50 40       	sbci	r21, 0x00	; 0
    58ec:	94 f0       	brlt	.+36     	; 0x5912 <ldexp+0x3a>
    58ee:	59 f0       	breq	.+22     	; 0x5906 <ldexp+0x2e>
    58f0:	88 23       	and	r24, r24
    58f2:	32 f0       	brmi	.+12     	; 0x5900 <ldexp+0x28>
    58f4:	66 0f       	add	r22, r22
    58f6:	77 1f       	adc	r23, r23
    58f8:	88 1f       	adc	r24, r24
    58fa:	91 50       	subi	r25, 0x01	; 1
    58fc:	50 40       	sbci	r21, 0x00	; 0
    58fe:	c1 f7       	brne	.-16     	; 0x58f0 <ldexp+0x18>
    5900:	9e 3f       	cpi	r25, 0xFE	; 254
    5902:	51 05       	cpc	r21, r1
    5904:	2c f7       	brge	.-54     	; 0x58d0 <inverse+0x10>
    5906:	88 0f       	add	r24, r24
    5908:	91 1d       	adc	r25, r1
    590a:	96 95       	lsr	r25
    590c:	87 95       	ror	r24
    590e:	97 f9       	bld	r25, 7
    5910:	08 95       	ret
    5912:	5f 3f       	cpi	r21, 0xFF	; 255
    5914:	ac f0       	brlt	.+42     	; 0x5940 <ldexp+0x68>
    5916:	98 3e       	cpi	r25, 0xE8	; 232
    5918:	9c f0       	brlt	.+38     	; 0x5940 <ldexp+0x68>
    591a:	bb 27       	eor	r27, r27
    591c:	86 95       	lsr	r24
    591e:	77 95       	ror	r23
    5920:	67 95       	ror	r22
    5922:	b7 95       	ror	r27
    5924:	08 f4       	brcc	.+2      	; 0x5928 <ldexp+0x50>
    5926:	b1 60       	ori	r27, 0x01	; 1
    5928:	93 95       	inc	r25
    592a:	c1 f7       	brne	.-16     	; 0x591c <ldexp+0x44>
    592c:	bb 0f       	add	r27, r27
    592e:	58 f7       	brcc	.-42     	; 0x5906 <ldexp+0x2e>
    5930:	11 f4       	brne	.+4      	; 0x5936 <ldexp+0x5e>
    5932:	60 ff       	sbrs	r22, 0
    5934:	e8 cf       	rjmp	.-48     	; 0x5906 <ldexp+0x2e>
    5936:	6f 5f       	subi	r22, 0xFF	; 255
    5938:	7f 4f       	sbci	r23, 0xFF	; 255
    593a:	8f 4f       	sbci	r24, 0xFF	; 255
    593c:	9f 4f       	sbci	r25, 0xFF	; 255
    593e:	e3 cf       	rjmp	.-58     	; 0x5906 <ldexp+0x2e>
    5940:	0c 94 37 2b 	jmp	0x566e	; 0x566e <__fp_szero>
    5944:	16 f0       	brts	.+4      	; 0x594a <ldexp+0x72>
    5946:	0c 94 26 2d 	jmp	0x5a4c	; 0x5a4c <__fp_mpack>
    594a:	0c 94 f2 2a 	jmp	0x55e4	; 0x55e4 <__fp_nan>
    594e:	68 94       	set
    5950:	0c 94 ec 2a 	jmp	0x55d8	; 0x55d8 <__fp_inf>

00005954 <log>:
    5954:	0e 94 1c 2b 	call	0x5638	; 0x5638 <__fp_splitA>
    5958:	a8 f3       	brcs	.-22     	; 0x5944 <ldexp+0x6c>
    595a:	99 23       	and	r25, r25
    595c:	c1 f3       	breq	.-16     	; 0x594e <ldexp+0x76>
    595e:	ae f3       	brts	.-22     	; 0x594a <ldexp+0x72>
    5960:	df 93       	push	r29
    5962:	cf 93       	push	r28
    5964:	1f 93       	push	r17
    5966:	0f 93       	push	r16
    5968:	ff 92       	push	r15
    596a:	c9 2f       	mov	r28, r25
    596c:	dd 27       	eor	r29, r29
    596e:	88 23       	and	r24, r24
    5970:	2a f0       	brmi	.+10     	; 0x597c <log+0x28>
    5972:	21 97       	sbiw	r28, 0x01	; 1
    5974:	66 0f       	add	r22, r22
    5976:	77 1f       	adc	r23, r23
    5978:	88 1f       	adc	r24, r24
    597a:	da f7       	brpl	.-10     	; 0x5972 <log+0x1e>
    597c:	20 e0       	ldi	r18, 0x00	; 0
    597e:	30 e0       	ldi	r19, 0x00	; 0
    5980:	40 e8       	ldi	r20, 0x80	; 128
    5982:	5f eb       	ldi	r21, 0xBF	; 191
    5984:	9f e3       	ldi	r25, 0x3F	; 63
    5986:	88 39       	cpi	r24, 0x98	; 152
    5988:	20 f0       	brcs	.+8      	; 0x5992 <log+0x3e>
    598a:	80 3e       	cpi	r24, 0xE0	; 224
    598c:	38 f0       	brcs	.+14     	; 0x599c <log+0x48>
    598e:	21 96       	adiw	r28, 0x01	; 1
    5990:	8f 77       	andi	r24, 0x7F	; 127
    5992:	0e 94 72 29 	call	0x52e4	; 0x52e4 <__addsf3>
    5996:	e8 e3       	ldi	r30, 0x38	; 56
    5998:	f2 e0       	ldi	r31, 0x02	; 2
    599a:	04 c0       	rjmp	.+8      	; 0x59a4 <log+0x50>
    599c:	0e 94 72 29 	call	0x52e4	; 0x52e4 <__addsf3>
    59a0:	e5 e6       	ldi	r30, 0x65	; 101
    59a2:	f2 e0       	ldi	r31, 0x02	; 2
    59a4:	0e 94 39 2c 	call	0x5872	; 0x5872 <__fp_powser>
    59a8:	8b 01       	movw	r16, r22
    59aa:	be 01       	movw	r22, r28
    59ac:	ec 01       	movw	r28, r24
    59ae:	fb 2e       	mov	r15, r27
    59b0:	6f 57       	subi	r22, 0x7F	; 127
    59b2:	71 09       	sbc	r23, r1
    59b4:	75 95       	asr	r23
    59b6:	77 1f       	adc	r23, r23
    59b8:	88 0b       	sbc	r24, r24
    59ba:	99 0b       	sbc	r25, r25
    59bc:	0e 94 8d 2a 	call	0x551a	; 0x551a <__floatsisf>
    59c0:	28 e1       	ldi	r18, 0x18	; 24
    59c2:	32 e7       	ldi	r19, 0x72	; 114
    59c4:	41 e3       	ldi	r20, 0x31	; 49
    59c6:	5f e3       	ldi	r21, 0x3F	; 63
    59c8:	0e 94 55 2b 	call	0x56aa	; 0x56aa <__mulsf3x>
    59cc:	af 2d       	mov	r26, r15
    59ce:	98 01       	movw	r18, r16
    59d0:	ae 01       	movw	r20, r28
    59d2:	ff 90       	pop	r15
    59d4:	0f 91       	pop	r16
    59d6:	1f 91       	pop	r17
    59d8:	cf 91       	pop	r28
    59da:	df 91       	pop	r29
    59dc:	0e 94 89 29 	call	0x5312	; 0x5312 <__addsf3x>
    59e0:	0c 94 03 2b 	jmp	0x5606	; 0x5606 <__fp_round>

000059e4 <modf>:
    59e4:	fa 01       	movw	r30, r20
    59e6:	dc 01       	movw	r26, r24
    59e8:	aa 0f       	add	r26, r26
    59ea:	bb 1f       	adc	r27, r27
    59ec:	9b 01       	movw	r18, r22
    59ee:	ac 01       	movw	r20, r24
    59f0:	bf 57       	subi	r27, 0x7F	; 127
    59f2:	28 f4       	brcc	.+10     	; 0x59fe <modf+0x1a>
    59f4:	22 27       	eor	r18, r18
    59f6:	33 27       	eor	r19, r19
    59f8:	44 27       	eor	r20, r20
    59fa:	50 78       	andi	r21, 0x80	; 128
    59fc:	20 c0       	rjmp	.+64     	; 0x5a3e <modf+0x5a>
    59fe:	b7 51       	subi	r27, 0x17	; 23
    5a00:	90 f4       	brcc	.+36     	; 0x5a26 <modf+0x42>
    5a02:	ab 2f       	mov	r26, r27
    5a04:	00 24       	eor	r0, r0
    5a06:	46 95       	lsr	r20
    5a08:	37 95       	ror	r19
    5a0a:	27 95       	ror	r18
    5a0c:	01 1c       	adc	r0, r1
    5a0e:	a3 95       	inc	r26
    5a10:	d2 f3       	brmi	.-12     	; 0x5a06 <modf+0x22>
    5a12:	00 20       	and	r0, r0
    5a14:	71 f0       	breq	.+28     	; 0x5a32 <modf+0x4e>
    5a16:	22 0f       	add	r18, r18
    5a18:	33 1f       	adc	r19, r19
    5a1a:	44 1f       	adc	r20, r20
    5a1c:	b3 95       	inc	r27
    5a1e:	da f3       	brmi	.-10     	; 0x5a16 <modf+0x32>
    5a20:	0e d0       	rcall	.+28     	; 0x5a3e <modf+0x5a>
    5a22:	0c 94 71 29 	jmp	0x52e2	; 0x52e2 <__subsf3>
    5a26:	61 30       	cpi	r22, 0x01	; 1
    5a28:	71 05       	cpc	r23, r1
    5a2a:	a0 e8       	ldi	r26, 0x80	; 128
    5a2c:	8a 07       	cpc	r24, r26
    5a2e:	b9 46       	sbci	r27, 0x69	; 105
    5a30:	30 f4       	brcc	.+12     	; 0x5a3e <modf+0x5a>
    5a32:	9b 01       	movw	r18, r22
    5a34:	ac 01       	movw	r20, r24
    5a36:	66 27       	eor	r22, r22
    5a38:	77 27       	eor	r23, r23
    5a3a:	88 27       	eor	r24, r24
    5a3c:	90 78       	andi	r25, 0x80	; 128
    5a3e:	30 96       	adiw	r30, 0x00	; 0
    5a40:	21 f0       	breq	.+8      	; 0x5a4a <modf+0x66>
    5a42:	20 83       	st	Z, r18
    5a44:	31 83       	std	Z+1, r19	; 0x01
    5a46:	42 83       	std	Z+2, r20	; 0x02
    5a48:	53 83       	std	Z+3, r21	; 0x03
    5a4a:	08 95       	ret

00005a4c <__fp_mpack>:
    5a4c:	9f 3f       	cpi	r25, 0xFF	; 255
    5a4e:	31 f0       	breq	.+12     	; 0x5a5c <__fp_mpack_finite+0xc>

00005a50 <__fp_mpack_finite>:
    5a50:	91 50       	subi	r25, 0x01	; 1
    5a52:	20 f4       	brcc	.+8      	; 0x5a5c <__fp_mpack_finite+0xc>
    5a54:	87 95       	ror	r24
    5a56:	77 95       	ror	r23
    5a58:	67 95       	ror	r22
    5a5a:	b7 95       	ror	r27
    5a5c:	88 0f       	add	r24, r24
    5a5e:	91 1d       	adc	r25, r1
    5a60:	96 95       	lsr	r25
    5a62:	87 95       	ror	r24
    5a64:	97 f9       	bld	r25, 7
    5a66:	08 95       	ret

00005a68 <__tablejump2__>:
    5a68:	ee 0f       	add	r30, r30
    5a6a:	ff 1f       	adc	r31, r31
    5a6c:	88 1f       	adc	r24, r24
    5a6e:	8b bf       	out	0x3b, r24	; 59
    5a70:	07 90       	elpm	r0, Z+
    5a72:	f6 91       	elpm	r31, Z
    5a74:	e0 2d       	mov	r30, r0
    5a76:	19 94       	eijmp

00005a78 <memcpy>:
    5a78:	fb 01       	movw	r30, r22
    5a7a:	dc 01       	movw	r26, r24
    5a7c:	02 c0       	rjmp	.+4      	; 0x5a82 <memcpy+0xa>
    5a7e:	01 90       	ld	r0, Z+
    5a80:	0d 92       	st	X+, r0
    5a82:	41 50       	subi	r20, 0x01	; 1
    5a84:	50 40       	sbci	r21, 0x00	; 0
    5a86:	d8 f7       	brcc	.-10     	; 0x5a7e <memcpy+0x6>
    5a88:	08 95       	ret

00005a8a <memset>:
    5a8a:	dc 01       	movw	r26, r24
    5a8c:	01 c0       	rjmp	.+2      	; 0x5a90 <memset+0x6>
    5a8e:	6d 93       	st	X+, r22
    5a90:	41 50       	subi	r20, 0x01	; 1
    5a92:	50 40       	sbci	r21, 0x00	; 0
    5a94:	e0 f7       	brcc	.-8      	; 0x5a8e <memset+0x4>
    5a96:	08 95       	ret

00005a98 <strlen>:
    5a98:	fc 01       	movw	r30, r24
    5a9a:	01 90       	ld	r0, Z+
    5a9c:	00 20       	and	r0, r0
    5a9e:	e9 f7       	brne	.-6      	; 0x5a9a <strlen+0x2>
    5aa0:	80 95       	com	r24
    5aa2:	90 95       	com	r25
    5aa4:	8e 0f       	add	r24, r30
    5aa6:	9f 1f       	adc	r25, r31
    5aa8:	08 95       	ret

00005aaa <itoa>:
    5aaa:	45 32       	cpi	r20, 0x25	; 37
    5aac:	51 05       	cpc	r21, r1
    5aae:	20 f4       	brcc	.+8      	; 0x5ab8 <itoa+0xe>
    5ab0:	42 30       	cpi	r20, 0x02	; 2
    5ab2:	10 f0       	brcs	.+4      	; 0x5ab8 <itoa+0xe>
    5ab4:	0c 94 60 2d 	jmp	0x5ac0	; 0x5ac0 <__itoa_ncheck>
    5ab8:	fb 01       	movw	r30, r22
    5aba:	10 82       	st	Z, r1
    5abc:	cb 01       	movw	r24, r22
    5abe:	08 95       	ret

00005ac0 <__itoa_ncheck>:
    5ac0:	bb 27       	eor	r27, r27
    5ac2:	4a 30       	cpi	r20, 0x0A	; 10
    5ac4:	31 f4       	brne	.+12     	; 0x5ad2 <__itoa_ncheck+0x12>
    5ac6:	99 23       	and	r25, r25
    5ac8:	22 f4       	brpl	.+8      	; 0x5ad2 <__itoa_ncheck+0x12>
    5aca:	bd e2       	ldi	r27, 0x2D	; 45
    5acc:	90 95       	com	r25
    5ace:	81 95       	neg	r24
    5ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ad2:	0c 94 6c 2d 	jmp	0x5ad8	; 0x5ad8 <__utoa_common>

00005ad6 <__utoa_ncheck>:
    5ad6:	bb 27       	eor	r27, r27

00005ad8 <__utoa_common>:
    5ad8:	fb 01       	movw	r30, r22
    5ada:	55 27       	eor	r21, r21
    5adc:	aa 27       	eor	r26, r26
    5ade:	88 0f       	add	r24, r24
    5ae0:	99 1f       	adc	r25, r25
    5ae2:	aa 1f       	adc	r26, r26
    5ae4:	a4 17       	cp	r26, r20
    5ae6:	10 f0       	brcs	.+4      	; 0x5aec <__utoa_common+0x14>
    5ae8:	a4 1b       	sub	r26, r20
    5aea:	83 95       	inc	r24
    5aec:	50 51       	subi	r21, 0x10	; 16
    5aee:	b9 f7       	brne	.-18     	; 0x5ade <__utoa_common+0x6>
    5af0:	a0 5d       	subi	r26, 0xD0	; 208
    5af2:	aa 33       	cpi	r26, 0x3A	; 58
    5af4:	08 f0       	brcs	.+2      	; 0x5af8 <__utoa_common+0x20>
    5af6:	a9 5d       	subi	r26, 0xD9	; 217
    5af8:	a1 93       	st	Z+, r26
    5afa:	00 97       	sbiw	r24, 0x00	; 0
    5afc:	79 f7       	brne	.-34     	; 0x5adc <__utoa_common+0x4>
    5afe:	b1 11       	cpse	r27, r1
    5b00:	b1 93       	st	Z+, r27
    5b02:	11 92       	st	Z+, r1
    5b04:	cb 01       	movw	r24, r22
    5b06:	0c 94 c8 2f 	jmp	0x5f90	; 0x5f90 <strrev>

00005b0a <sprintf>:
    5b0a:	0f 93       	push	r16
    5b0c:	1f 93       	push	r17
    5b0e:	cf 93       	push	r28
    5b10:	df 93       	push	r29
    5b12:	cd b7       	in	r28, 0x3d	; 61
    5b14:	de b7       	in	r29, 0x3e	; 62
    5b16:	2e 97       	sbiw	r28, 0x0e	; 14
    5b18:	cd bf       	out	0x3d, r28	; 61
    5b1a:	de bf       	out	0x3e, r29	; 62
    5b1c:	0e 89       	ldd	r16, Y+22	; 0x16
    5b1e:	1f 89       	ldd	r17, Y+23	; 0x17
    5b20:	86 e0       	ldi	r24, 0x06	; 6
    5b22:	8c 83       	std	Y+4, r24	; 0x04
    5b24:	09 83       	std	Y+1, r16	; 0x01
    5b26:	1a 83       	std	Y+2, r17	; 0x02
    5b28:	8f ef       	ldi	r24, 0xFF	; 255
    5b2a:	9f e7       	ldi	r25, 0x7F	; 127
    5b2c:	8d 83       	std	Y+5, r24	; 0x05
    5b2e:	9e 83       	std	Y+6, r25	; 0x06
    5b30:	ae 01       	movw	r20, r28
    5b32:	46 5e       	subi	r20, 0xE6	; 230
    5b34:	5f 4f       	sbci	r21, 0xFF	; 255
    5b36:	68 8d       	ldd	r22, Y+24	; 0x18
    5b38:	79 8d       	ldd	r23, Y+25	; 0x19
    5b3a:	ce 01       	movw	r24, r28
    5b3c:	01 96       	adiw	r24, 0x01	; 1
    5b3e:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <vfprintf>
    5b42:	ef 81       	ldd	r30, Y+7	; 0x07
    5b44:	f8 85       	ldd	r31, Y+8	; 0x08
    5b46:	e0 0f       	add	r30, r16
    5b48:	f1 1f       	adc	r31, r17
    5b4a:	10 82       	st	Z, r1
    5b4c:	2e 96       	adiw	r28, 0x0e	; 14
    5b4e:	cd bf       	out	0x3d, r28	; 61
    5b50:	de bf       	out	0x3e, r29	; 62
    5b52:	df 91       	pop	r29
    5b54:	cf 91       	pop	r28
    5b56:	1f 91       	pop	r17
    5b58:	0f 91       	pop	r16
    5b5a:	08 95       	ret

00005b5c <vfprintf>:
    5b5c:	2f 92       	push	r2
    5b5e:	3f 92       	push	r3
    5b60:	4f 92       	push	r4
    5b62:	5f 92       	push	r5
    5b64:	6f 92       	push	r6
    5b66:	7f 92       	push	r7
    5b68:	8f 92       	push	r8
    5b6a:	9f 92       	push	r9
    5b6c:	af 92       	push	r10
    5b6e:	bf 92       	push	r11
    5b70:	cf 92       	push	r12
    5b72:	df 92       	push	r13
    5b74:	ef 92       	push	r14
    5b76:	ff 92       	push	r15
    5b78:	0f 93       	push	r16
    5b7a:	1f 93       	push	r17
    5b7c:	cf 93       	push	r28
    5b7e:	df 93       	push	r29
    5b80:	cd b7       	in	r28, 0x3d	; 61
    5b82:	de b7       	in	r29, 0x3e	; 62
    5b84:	2b 97       	sbiw	r28, 0x0b	; 11
    5b86:	cd bf       	out	0x3d, r28	; 61
    5b88:	de bf       	out	0x3e, r29	; 62
    5b8a:	6c 01       	movw	r12, r24
    5b8c:	7b 01       	movw	r14, r22
    5b8e:	8a 01       	movw	r16, r20
    5b90:	fc 01       	movw	r30, r24
    5b92:	16 82       	std	Z+6, r1	; 0x06
    5b94:	17 82       	std	Z+7, r1	; 0x07
    5b96:	83 81       	ldd	r24, Z+3	; 0x03
    5b98:	81 ff       	sbrs	r24, 1
    5b9a:	cc c1       	rjmp	.+920    	; 0x5f34 <vfprintf+0x3d8>
    5b9c:	ce 01       	movw	r24, r28
    5b9e:	01 96       	adiw	r24, 0x01	; 1
    5ba0:	3c 01       	movw	r6, r24
    5ba2:	f6 01       	movw	r30, r12
    5ba4:	93 81       	ldd	r25, Z+3	; 0x03
    5ba6:	f7 01       	movw	r30, r14
    5ba8:	93 fd       	sbrc	r25, 3
    5baa:	85 91       	lpm	r24, Z+
    5bac:	93 ff       	sbrs	r25, 3
    5bae:	81 91       	ld	r24, Z+
    5bb0:	7f 01       	movw	r14, r30
    5bb2:	88 23       	and	r24, r24
    5bb4:	09 f4       	brne	.+2      	; 0x5bb8 <vfprintf+0x5c>
    5bb6:	ba c1       	rjmp	.+884    	; 0x5f2c <vfprintf+0x3d0>
    5bb8:	85 32       	cpi	r24, 0x25	; 37
    5bba:	39 f4       	brne	.+14     	; 0x5bca <vfprintf+0x6e>
    5bbc:	93 fd       	sbrc	r25, 3
    5bbe:	85 91       	lpm	r24, Z+
    5bc0:	93 ff       	sbrs	r25, 3
    5bc2:	81 91       	ld	r24, Z+
    5bc4:	7f 01       	movw	r14, r30
    5bc6:	85 32       	cpi	r24, 0x25	; 37
    5bc8:	29 f4       	brne	.+10     	; 0x5bd4 <vfprintf+0x78>
    5bca:	b6 01       	movw	r22, r12
    5bcc:	90 e0       	ldi	r25, 0x00	; 0
    5bce:	0e 94 d8 2f 	call	0x5fb0	; 0x5fb0 <fputc>
    5bd2:	e7 cf       	rjmp	.-50     	; 0x5ba2 <vfprintf+0x46>
    5bd4:	91 2c       	mov	r9, r1
    5bd6:	21 2c       	mov	r2, r1
    5bd8:	31 2c       	mov	r3, r1
    5bda:	ff e1       	ldi	r31, 0x1F	; 31
    5bdc:	f3 15       	cp	r31, r3
    5bde:	d8 f0       	brcs	.+54     	; 0x5c16 <vfprintf+0xba>
    5be0:	8b 32       	cpi	r24, 0x2B	; 43
    5be2:	79 f0       	breq	.+30     	; 0x5c02 <vfprintf+0xa6>
    5be4:	38 f4       	brcc	.+14     	; 0x5bf4 <vfprintf+0x98>
    5be6:	80 32       	cpi	r24, 0x20	; 32
    5be8:	79 f0       	breq	.+30     	; 0x5c08 <vfprintf+0xac>
    5bea:	83 32       	cpi	r24, 0x23	; 35
    5bec:	a1 f4       	brne	.+40     	; 0x5c16 <vfprintf+0xba>
    5bee:	23 2d       	mov	r18, r3
    5bf0:	20 61       	ori	r18, 0x10	; 16
    5bf2:	1d c0       	rjmp	.+58     	; 0x5c2e <vfprintf+0xd2>
    5bf4:	8d 32       	cpi	r24, 0x2D	; 45
    5bf6:	61 f0       	breq	.+24     	; 0x5c10 <vfprintf+0xb4>
    5bf8:	80 33       	cpi	r24, 0x30	; 48
    5bfa:	69 f4       	brne	.+26     	; 0x5c16 <vfprintf+0xba>
    5bfc:	23 2d       	mov	r18, r3
    5bfe:	21 60       	ori	r18, 0x01	; 1
    5c00:	16 c0       	rjmp	.+44     	; 0x5c2e <vfprintf+0xd2>
    5c02:	83 2d       	mov	r24, r3
    5c04:	82 60       	ori	r24, 0x02	; 2
    5c06:	38 2e       	mov	r3, r24
    5c08:	e3 2d       	mov	r30, r3
    5c0a:	e4 60       	ori	r30, 0x04	; 4
    5c0c:	3e 2e       	mov	r3, r30
    5c0e:	2a c0       	rjmp	.+84     	; 0x5c64 <vfprintf+0x108>
    5c10:	f3 2d       	mov	r31, r3
    5c12:	f8 60       	ori	r31, 0x08	; 8
    5c14:	1d c0       	rjmp	.+58     	; 0x5c50 <vfprintf+0xf4>
    5c16:	37 fc       	sbrc	r3, 7
    5c18:	2d c0       	rjmp	.+90     	; 0x5c74 <vfprintf+0x118>
    5c1a:	20 ed       	ldi	r18, 0xD0	; 208
    5c1c:	28 0f       	add	r18, r24
    5c1e:	2a 30       	cpi	r18, 0x0A	; 10
    5c20:	40 f0       	brcs	.+16     	; 0x5c32 <vfprintf+0xd6>
    5c22:	8e 32       	cpi	r24, 0x2E	; 46
    5c24:	b9 f4       	brne	.+46     	; 0x5c54 <vfprintf+0xf8>
    5c26:	36 fc       	sbrc	r3, 6
    5c28:	81 c1       	rjmp	.+770    	; 0x5f2c <vfprintf+0x3d0>
    5c2a:	23 2d       	mov	r18, r3
    5c2c:	20 64       	ori	r18, 0x40	; 64
    5c2e:	32 2e       	mov	r3, r18
    5c30:	19 c0       	rjmp	.+50     	; 0x5c64 <vfprintf+0x108>
    5c32:	36 fe       	sbrs	r3, 6
    5c34:	06 c0       	rjmp	.+12     	; 0x5c42 <vfprintf+0xe6>
    5c36:	8a e0       	ldi	r24, 0x0A	; 10
    5c38:	98 9e       	mul	r9, r24
    5c3a:	20 0d       	add	r18, r0
    5c3c:	11 24       	eor	r1, r1
    5c3e:	92 2e       	mov	r9, r18
    5c40:	11 c0       	rjmp	.+34     	; 0x5c64 <vfprintf+0x108>
    5c42:	ea e0       	ldi	r30, 0x0A	; 10
    5c44:	2e 9e       	mul	r2, r30
    5c46:	20 0d       	add	r18, r0
    5c48:	11 24       	eor	r1, r1
    5c4a:	22 2e       	mov	r2, r18
    5c4c:	f3 2d       	mov	r31, r3
    5c4e:	f0 62       	ori	r31, 0x20	; 32
    5c50:	3f 2e       	mov	r3, r31
    5c52:	08 c0       	rjmp	.+16     	; 0x5c64 <vfprintf+0x108>
    5c54:	8c 36       	cpi	r24, 0x6C	; 108
    5c56:	21 f4       	brne	.+8      	; 0x5c60 <vfprintf+0x104>
    5c58:	83 2d       	mov	r24, r3
    5c5a:	80 68       	ori	r24, 0x80	; 128
    5c5c:	38 2e       	mov	r3, r24
    5c5e:	02 c0       	rjmp	.+4      	; 0x5c64 <vfprintf+0x108>
    5c60:	88 36       	cpi	r24, 0x68	; 104
    5c62:	41 f4       	brne	.+16     	; 0x5c74 <vfprintf+0x118>
    5c64:	f7 01       	movw	r30, r14
    5c66:	93 fd       	sbrc	r25, 3
    5c68:	85 91       	lpm	r24, Z+
    5c6a:	93 ff       	sbrs	r25, 3
    5c6c:	81 91       	ld	r24, Z+
    5c6e:	7f 01       	movw	r14, r30
    5c70:	81 11       	cpse	r24, r1
    5c72:	b3 cf       	rjmp	.-154    	; 0x5bda <vfprintf+0x7e>
    5c74:	98 2f       	mov	r25, r24
    5c76:	9f 7d       	andi	r25, 0xDF	; 223
    5c78:	95 54       	subi	r25, 0x45	; 69
    5c7a:	93 30       	cpi	r25, 0x03	; 3
    5c7c:	28 f4       	brcc	.+10     	; 0x5c88 <vfprintf+0x12c>
    5c7e:	0c 5f       	subi	r16, 0xFC	; 252
    5c80:	1f 4f       	sbci	r17, 0xFF	; 255
    5c82:	9f e3       	ldi	r25, 0x3F	; 63
    5c84:	99 83       	std	Y+1, r25	; 0x01
    5c86:	0d c0       	rjmp	.+26     	; 0x5ca2 <vfprintf+0x146>
    5c88:	83 36       	cpi	r24, 0x63	; 99
    5c8a:	31 f0       	breq	.+12     	; 0x5c98 <vfprintf+0x13c>
    5c8c:	83 37       	cpi	r24, 0x73	; 115
    5c8e:	71 f0       	breq	.+28     	; 0x5cac <vfprintf+0x150>
    5c90:	83 35       	cpi	r24, 0x53	; 83
    5c92:	09 f0       	breq	.+2      	; 0x5c96 <vfprintf+0x13a>
    5c94:	59 c0       	rjmp	.+178    	; 0x5d48 <vfprintf+0x1ec>
    5c96:	21 c0       	rjmp	.+66     	; 0x5cda <vfprintf+0x17e>
    5c98:	f8 01       	movw	r30, r16
    5c9a:	80 81       	ld	r24, Z
    5c9c:	89 83       	std	Y+1, r24	; 0x01
    5c9e:	0e 5f       	subi	r16, 0xFE	; 254
    5ca0:	1f 4f       	sbci	r17, 0xFF	; 255
    5ca2:	88 24       	eor	r8, r8
    5ca4:	83 94       	inc	r8
    5ca6:	91 2c       	mov	r9, r1
    5ca8:	53 01       	movw	r10, r6
    5caa:	13 c0       	rjmp	.+38     	; 0x5cd2 <vfprintf+0x176>
    5cac:	28 01       	movw	r4, r16
    5cae:	f2 e0       	ldi	r31, 0x02	; 2
    5cb0:	4f 0e       	add	r4, r31
    5cb2:	51 1c       	adc	r5, r1
    5cb4:	f8 01       	movw	r30, r16
    5cb6:	a0 80       	ld	r10, Z
    5cb8:	b1 80       	ldd	r11, Z+1	; 0x01
    5cba:	36 fe       	sbrs	r3, 6
    5cbc:	03 c0       	rjmp	.+6      	; 0x5cc4 <vfprintf+0x168>
    5cbe:	69 2d       	mov	r22, r9
    5cc0:	70 e0       	ldi	r23, 0x00	; 0
    5cc2:	02 c0       	rjmp	.+4      	; 0x5cc8 <vfprintf+0x16c>
    5cc4:	6f ef       	ldi	r22, 0xFF	; 255
    5cc6:	7f ef       	ldi	r23, 0xFF	; 255
    5cc8:	c5 01       	movw	r24, r10
    5cca:	0e 94 bd 2f 	call	0x5f7a	; 0x5f7a <strnlen>
    5cce:	4c 01       	movw	r8, r24
    5cd0:	82 01       	movw	r16, r4
    5cd2:	f3 2d       	mov	r31, r3
    5cd4:	ff 77       	andi	r31, 0x7F	; 127
    5cd6:	3f 2e       	mov	r3, r31
    5cd8:	16 c0       	rjmp	.+44     	; 0x5d06 <vfprintf+0x1aa>
    5cda:	28 01       	movw	r4, r16
    5cdc:	22 e0       	ldi	r18, 0x02	; 2
    5cde:	42 0e       	add	r4, r18
    5ce0:	51 1c       	adc	r5, r1
    5ce2:	f8 01       	movw	r30, r16
    5ce4:	a0 80       	ld	r10, Z
    5ce6:	b1 80       	ldd	r11, Z+1	; 0x01
    5ce8:	36 fe       	sbrs	r3, 6
    5cea:	03 c0       	rjmp	.+6      	; 0x5cf2 <vfprintf+0x196>
    5cec:	69 2d       	mov	r22, r9
    5cee:	70 e0       	ldi	r23, 0x00	; 0
    5cf0:	02 c0       	rjmp	.+4      	; 0x5cf6 <vfprintf+0x19a>
    5cf2:	6f ef       	ldi	r22, 0xFF	; 255
    5cf4:	7f ef       	ldi	r23, 0xFF	; 255
    5cf6:	c5 01       	movw	r24, r10
    5cf8:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <strnlen_P>
    5cfc:	4c 01       	movw	r8, r24
    5cfe:	f3 2d       	mov	r31, r3
    5d00:	f0 68       	ori	r31, 0x80	; 128
    5d02:	3f 2e       	mov	r3, r31
    5d04:	82 01       	movw	r16, r4
    5d06:	33 fc       	sbrc	r3, 3
    5d08:	1b c0       	rjmp	.+54     	; 0x5d40 <vfprintf+0x1e4>
    5d0a:	82 2d       	mov	r24, r2
    5d0c:	90 e0       	ldi	r25, 0x00	; 0
    5d0e:	88 16       	cp	r8, r24
    5d10:	99 06       	cpc	r9, r25
    5d12:	b0 f4       	brcc	.+44     	; 0x5d40 <vfprintf+0x1e4>
    5d14:	b6 01       	movw	r22, r12
    5d16:	80 e2       	ldi	r24, 0x20	; 32
    5d18:	90 e0       	ldi	r25, 0x00	; 0
    5d1a:	0e 94 d8 2f 	call	0x5fb0	; 0x5fb0 <fputc>
    5d1e:	2a 94       	dec	r2
    5d20:	f4 cf       	rjmp	.-24     	; 0x5d0a <vfprintf+0x1ae>
    5d22:	f5 01       	movw	r30, r10
    5d24:	37 fc       	sbrc	r3, 7
    5d26:	85 91       	lpm	r24, Z+
    5d28:	37 fe       	sbrs	r3, 7
    5d2a:	81 91       	ld	r24, Z+
    5d2c:	5f 01       	movw	r10, r30
    5d2e:	b6 01       	movw	r22, r12
    5d30:	90 e0       	ldi	r25, 0x00	; 0
    5d32:	0e 94 d8 2f 	call	0x5fb0	; 0x5fb0 <fputc>
    5d36:	21 10       	cpse	r2, r1
    5d38:	2a 94       	dec	r2
    5d3a:	21 e0       	ldi	r18, 0x01	; 1
    5d3c:	82 1a       	sub	r8, r18
    5d3e:	91 08       	sbc	r9, r1
    5d40:	81 14       	cp	r8, r1
    5d42:	91 04       	cpc	r9, r1
    5d44:	71 f7       	brne	.-36     	; 0x5d22 <vfprintf+0x1c6>
    5d46:	e8 c0       	rjmp	.+464    	; 0x5f18 <vfprintf+0x3bc>
    5d48:	84 36       	cpi	r24, 0x64	; 100
    5d4a:	11 f0       	breq	.+4      	; 0x5d50 <vfprintf+0x1f4>
    5d4c:	89 36       	cpi	r24, 0x69	; 105
    5d4e:	41 f5       	brne	.+80     	; 0x5da0 <vfprintf+0x244>
    5d50:	f8 01       	movw	r30, r16
    5d52:	37 fe       	sbrs	r3, 7
    5d54:	07 c0       	rjmp	.+14     	; 0x5d64 <vfprintf+0x208>
    5d56:	60 81       	ld	r22, Z
    5d58:	71 81       	ldd	r23, Z+1	; 0x01
    5d5a:	82 81       	ldd	r24, Z+2	; 0x02
    5d5c:	93 81       	ldd	r25, Z+3	; 0x03
    5d5e:	0c 5f       	subi	r16, 0xFC	; 252
    5d60:	1f 4f       	sbci	r17, 0xFF	; 255
    5d62:	08 c0       	rjmp	.+16     	; 0x5d74 <vfprintf+0x218>
    5d64:	60 81       	ld	r22, Z
    5d66:	71 81       	ldd	r23, Z+1	; 0x01
    5d68:	07 2e       	mov	r0, r23
    5d6a:	00 0c       	add	r0, r0
    5d6c:	88 0b       	sbc	r24, r24
    5d6e:	99 0b       	sbc	r25, r25
    5d70:	0e 5f       	subi	r16, 0xFE	; 254
    5d72:	1f 4f       	sbci	r17, 0xFF	; 255
    5d74:	f3 2d       	mov	r31, r3
    5d76:	ff 76       	andi	r31, 0x6F	; 111
    5d78:	3f 2e       	mov	r3, r31
    5d7a:	97 ff       	sbrs	r25, 7
    5d7c:	09 c0       	rjmp	.+18     	; 0x5d90 <vfprintf+0x234>
    5d7e:	90 95       	com	r25
    5d80:	80 95       	com	r24
    5d82:	70 95       	com	r23
    5d84:	61 95       	neg	r22
    5d86:	7f 4f       	sbci	r23, 0xFF	; 255
    5d88:	8f 4f       	sbci	r24, 0xFF	; 255
    5d8a:	9f 4f       	sbci	r25, 0xFF	; 255
    5d8c:	f0 68       	ori	r31, 0x80	; 128
    5d8e:	3f 2e       	mov	r3, r31
    5d90:	2a e0       	ldi	r18, 0x0A	; 10
    5d92:	30 e0       	ldi	r19, 0x00	; 0
    5d94:	a3 01       	movw	r20, r6
    5d96:	0e 94 14 30 	call	0x6028	; 0x6028 <__ultoa_invert>
    5d9a:	88 2e       	mov	r8, r24
    5d9c:	86 18       	sub	r8, r6
    5d9e:	45 c0       	rjmp	.+138    	; 0x5e2a <vfprintf+0x2ce>
    5da0:	85 37       	cpi	r24, 0x75	; 117
    5da2:	31 f4       	brne	.+12     	; 0x5db0 <vfprintf+0x254>
    5da4:	23 2d       	mov	r18, r3
    5da6:	2f 7e       	andi	r18, 0xEF	; 239
    5da8:	b2 2e       	mov	r11, r18
    5daa:	2a e0       	ldi	r18, 0x0A	; 10
    5dac:	30 e0       	ldi	r19, 0x00	; 0
    5dae:	25 c0       	rjmp	.+74     	; 0x5dfa <vfprintf+0x29e>
    5db0:	93 2d       	mov	r25, r3
    5db2:	99 7f       	andi	r25, 0xF9	; 249
    5db4:	b9 2e       	mov	r11, r25
    5db6:	8f 36       	cpi	r24, 0x6F	; 111
    5db8:	c1 f0       	breq	.+48     	; 0x5dea <vfprintf+0x28e>
    5dba:	18 f4       	brcc	.+6      	; 0x5dc2 <vfprintf+0x266>
    5dbc:	88 35       	cpi	r24, 0x58	; 88
    5dbe:	79 f0       	breq	.+30     	; 0x5dde <vfprintf+0x282>
    5dc0:	b5 c0       	rjmp	.+362    	; 0x5f2c <vfprintf+0x3d0>
    5dc2:	80 37       	cpi	r24, 0x70	; 112
    5dc4:	19 f0       	breq	.+6      	; 0x5dcc <vfprintf+0x270>
    5dc6:	88 37       	cpi	r24, 0x78	; 120
    5dc8:	21 f0       	breq	.+8      	; 0x5dd2 <vfprintf+0x276>
    5dca:	b0 c0       	rjmp	.+352    	; 0x5f2c <vfprintf+0x3d0>
    5dcc:	e9 2f       	mov	r30, r25
    5dce:	e0 61       	ori	r30, 0x10	; 16
    5dd0:	be 2e       	mov	r11, r30
    5dd2:	b4 fe       	sbrs	r11, 4
    5dd4:	0d c0       	rjmp	.+26     	; 0x5df0 <vfprintf+0x294>
    5dd6:	fb 2d       	mov	r31, r11
    5dd8:	f4 60       	ori	r31, 0x04	; 4
    5dda:	bf 2e       	mov	r11, r31
    5ddc:	09 c0       	rjmp	.+18     	; 0x5df0 <vfprintf+0x294>
    5dde:	34 fe       	sbrs	r3, 4
    5de0:	0a c0       	rjmp	.+20     	; 0x5df6 <vfprintf+0x29a>
    5de2:	29 2f       	mov	r18, r25
    5de4:	26 60       	ori	r18, 0x06	; 6
    5de6:	b2 2e       	mov	r11, r18
    5de8:	06 c0       	rjmp	.+12     	; 0x5df6 <vfprintf+0x29a>
    5dea:	28 e0       	ldi	r18, 0x08	; 8
    5dec:	30 e0       	ldi	r19, 0x00	; 0
    5dee:	05 c0       	rjmp	.+10     	; 0x5dfa <vfprintf+0x29e>
    5df0:	20 e1       	ldi	r18, 0x10	; 16
    5df2:	30 e0       	ldi	r19, 0x00	; 0
    5df4:	02 c0       	rjmp	.+4      	; 0x5dfa <vfprintf+0x29e>
    5df6:	20 e1       	ldi	r18, 0x10	; 16
    5df8:	32 e0       	ldi	r19, 0x02	; 2
    5dfa:	f8 01       	movw	r30, r16
    5dfc:	b7 fe       	sbrs	r11, 7
    5dfe:	07 c0       	rjmp	.+14     	; 0x5e0e <vfprintf+0x2b2>
    5e00:	60 81       	ld	r22, Z
    5e02:	71 81       	ldd	r23, Z+1	; 0x01
    5e04:	82 81       	ldd	r24, Z+2	; 0x02
    5e06:	93 81       	ldd	r25, Z+3	; 0x03
    5e08:	0c 5f       	subi	r16, 0xFC	; 252
    5e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    5e0c:	06 c0       	rjmp	.+12     	; 0x5e1a <vfprintf+0x2be>
    5e0e:	60 81       	ld	r22, Z
    5e10:	71 81       	ldd	r23, Z+1	; 0x01
    5e12:	80 e0       	ldi	r24, 0x00	; 0
    5e14:	90 e0       	ldi	r25, 0x00	; 0
    5e16:	0e 5f       	subi	r16, 0xFE	; 254
    5e18:	1f 4f       	sbci	r17, 0xFF	; 255
    5e1a:	a3 01       	movw	r20, r6
    5e1c:	0e 94 14 30 	call	0x6028	; 0x6028 <__ultoa_invert>
    5e20:	88 2e       	mov	r8, r24
    5e22:	86 18       	sub	r8, r6
    5e24:	fb 2d       	mov	r31, r11
    5e26:	ff 77       	andi	r31, 0x7F	; 127
    5e28:	3f 2e       	mov	r3, r31
    5e2a:	36 fe       	sbrs	r3, 6
    5e2c:	0d c0       	rjmp	.+26     	; 0x5e48 <vfprintf+0x2ec>
    5e2e:	23 2d       	mov	r18, r3
    5e30:	2e 7f       	andi	r18, 0xFE	; 254
    5e32:	a2 2e       	mov	r10, r18
    5e34:	89 14       	cp	r8, r9
    5e36:	58 f4       	brcc	.+22     	; 0x5e4e <vfprintf+0x2f2>
    5e38:	34 fe       	sbrs	r3, 4
    5e3a:	0b c0       	rjmp	.+22     	; 0x5e52 <vfprintf+0x2f6>
    5e3c:	32 fc       	sbrc	r3, 2
    5e3e:	09 c0       	rjmp	.+18     	; 0x5e52 <vfprintf+0x2f6>
    5e40:	83 2d       	mov	r24, r3
    5e42:	8e 7e       	andi	r24, 0xEE	; 238
    5e44:	a8 2e       	mov	r10, r24
    5e46:	05 c0       	rjmp	.+10     	; 0x5e52 <vfprintf+0x2f6>
    5e48:	b8 2c       	mov	r11, r8
    5e4a:	a3 2c       	mov	r10, r3
    5e4c:	03 c0       	rjmp	.+6      	; 0x5e54 <vfprintf+0x2f8>
    5e4e:	b8 2c       	mov	r11, r8
    5e50:	01 c0       	rjmp	.+2      	; 0x5e54 <vfprintf+0x2f8>
    5e52:	b9 2c       	mov	r11, r9
    5e54:	a4 fe       	sbrs	r10, 4
    5e56:	0f c0       	rjmp	.+30     	; 0x5e76 <vfprintf+0x31a>
    5e58:	fe 01       	movw	r30, r28
    5e5a:	e8 0d       	add	r30, r8
    5e5c:	f1 1d       	adc	r31, r1
    5e5e:	80 81       	ld	r24, Z
    5e60:	80 33       	cpi	r24, 0x30	; 48
    5e62:	21 f4       	brne	.+8      	; 0x5e6c <vfprintf+0x310>
    5e64:	9a 2d       	mov	r25, r10
    5e66:	99 7e       	andi	r25, 0xE9	; 233
    5e68:	a9 2e       	mov	r10, r25
    5e6a:	09 c0       	rjmp	.+18     	; 0x5e7e <vfprintf+0x322>
    5e6c:	a2 fe       	sbrs	r10, 2
    5e6e:	06 c0       	rjmp	.+12     	; 0x5e7c <vfprintf+0x320>
    5e70:	b3 94       	inc	r11
    5e72:	b3 94       	inc	r11
    5e74:	04 c0       	rjmp	.+8      	; 0x5e7e <vfprintf+0x322>
    5e76:	8a 2d       	mov	r24, r10
    5e78:	86 78       	andi	r24, 0x86	; 134
    5e7a:	09 f0       	breq	.+2      	; 0x5e7e <vfprintf+0x322>
    5e7c:	b3 94       	inc	r11
    5e7e:	a3 fc       	sbrc	r10, 3
    5e80:	11 c0       	rjmp	.+34     	; 0x5ea4 <vfprintf+0x348>
    5e82:	a0 fe       	sbrs	r10, 0
    5e84:	06 c0       	rjmp	.+12     	; 0x5e92 <vfprintf+0x336>
    5e86:	b2 14       	cp	r11, r2
    5e88:	88 f4       	brcc	.+34     	; 0x5eac <vfprintf+0x350>
    5e8a:	28 0c       	add	r2, r8
    5e8c:	92 2c       	mov	r9, r2
    5e8e:	9b 18       	sub	r9, r11
    5e90:	0e c0       	rjmp	.+28     	; 0x5eae <vfprintf+0x352>
    5e92:	b2 14       	cp	r11, r2
    5e94:	60 f4       	brcc	.+24     	; 0x5eae <vfprintf+0x352>
    5e96:	b6 01       	movw	r22, r12
    5e98:	80 e2       	ldi	r24, 0x20	; 32
    5e9a:	90 e0       	ldi	r25, 0x00	; 0
    5e9c:	0e 94 d8 2f 	call	0x5fb0	; 0x5fb0 <fputc>
    5ea0:	b3 94       	inc	r11
    5ea2:	f7 cf       	rjmp	.-18     	; 0x5e92 <vfprintf+0x336>
    5ea4:	b2 14       	cp	r11, r2
    5ea6:	18 f4       	brcc	.+6      	; 0x5eae <vfprintf+0x352>
    5ea8:	2b 18       	sub	r2, r11
    5eaa:	02 c0       	rjmp	.+4      	; 0x5eb0 <vfprintf+0x354>
    5eac:	98 2c       	mov	r9, r8
    5eae:	21 2c       	mov	r2, r1
    5eb0:	a4 fe       	sbrs	r10, 4
    5eb2:	10 c0       	rjmp	.+32     	; 0x5ed4 <vfprintf+0x378>
    5eb4:	b6 01       	movw	r22, r12
    5eb6:	80 e3       	ldi	r24, 0x30	; 48
    5eb8:	90 e0       	ldi	r25, 0x00	; 0
    5eba:	0e 94 d8 2f 	call	0x5fb0	; 0x5fb0 <fputc>
    5ebe:	a2 fe       	sbrs	r10, 2
    5ec0:	17 c0       	rjmp	.+46     	; 0x5ef0 <vfprintf+0x394>
    5ec2:	a1 fc       	sbrc	r10, 1
    5ec4:	03 c0       	rjmp	.+6      	; 0x5ecc <vfprintf+0x370>
    5ec6:	88 e7       	ldi	r24, 0x78	; 120
    5ec8:	90 e0       	ldi	r25, 0x00	; 0
    5eca:	02 c0       	rjmp	.+4      	; 0x5ed0 <vfprintf+0x374>
    5ecc:	88 e5       	ldi	r24, 0x58	; 88
    5ece:	90 e0       	ldi	r25, 0x00	; 0
    5ed0:	b6 01       	movw	r22, r12
    5ed2:	0c c0       	rjmp	.+24     	; 0x5eec <vfprintf+0x390>
    5ed4:	8a 2d       	mov	r24, r10
    5ed6:	86 78       	andi	r24, 0x86	; 134
    5ed8:	59 f0       	breq	.+22     	; 0x5ef0 <vfprintf+0x394>
    5eda:	a1 fe       	sbrs	r10, 1
    5edc:	02 c0       	rjmp	.+4      	; 0x5ee2 <vfprintf+0x386>
    5ede:	8b e2       	ldi	r24, 0x2B	; 43
    5ee0:	01 c0       	rjmp	.+2      	; 0x5ee4 <vfprintf+0x388>
    5ee2:	80 e2       	ldi	r24, 0x20	; 32
    5ee4:	a7 fc       	sbrc	r10, 7
    5ee6:	8d e2       	ldi	r24, 0x2D	; 45
    5ee8:	b6 01       	movw	r22, r12
    5eea:	90 e0       	ldi	r25, 0x00	; 0
    5eec:	0e 94 d8 2f 	call	0x5fb0	; 0x5fb0 <fputc>
    5ef0:	89 14       	cp	r8, r9
    5ef2:	38 f4       	brcc	.+14     	; 0x5f02 <vfprintf+0x3a6>
    5ef4:	b6 01       	movw	r22, r12
    5ef6:	80 e3       	ldi	r24, 0x30	; 48
    5ef8:	90 e0       	ldi	r25, 0x00	; 0
    5efa:	0e 94 d8 2f 	call	0x5fb0	; 0x5fb0 <fputc>
    5efe:	9a 94       	dec	r9
    5f00:	f7 cf       	rjmp	.-18     	; 0x5ef0 <vfprintf+0x394>
    5f02:	8a 94       	dec	r8
    5f04:	f3 01       	movw	r30, r6
    5f06:	e8 0d       	add	r30, r8
    5f08:	f1 1d       	adc	r31, r1
    5f0a:	80 81       	ld	r24, Z
    5f0c:	b6 01       	movw	r22, r12
    5f0e:	90 e0       	ldi	r25, 0x00	; 0
    5f10:	0e 94 d8 2f 	call	0x5fb0	; 0x5fb0 <fputc>
    5f14:	81 10       	cpse	r8, r1
    5f16:	f5 cf       	rjmp	.-22     	; 0x5f02 <vfprintf+0x3a6>
    5f18:	22 20       	and	r2, r2
    5f1a:	09 f4       	brne	.+2      	; 0x5f1e <vfprintf+0x3c2>
    5f1c:	42 ce       	rjmp	.-892    	; 0x5ba2 <vfprintf+0x46>
    5f1e:	b6 01       	movw	r22, r12
    5f20:	80 e2       	ldi	r24, 0x20	; 32
    5f22:	90 e0       	ldi	r25, 0x00	; 0
    5f24:	0e 94 d8 2f 	call	0x5fb0	; 0x5fb0 <fputc>
    5f28:	2a 94       	dec	r2
    5f2a:	f6 cf       	rjmp	.-20     	; 0x5f18 <vfprintf+0x3bc>
    5f2c:	f6 01       	movw	r30, r12
    5f2e:	86 81       	ldd	r24, Z+6	; 0x06
    5f30:	97 81       	ldd	r25, Z+7	; 0x07
    5f32:	02 c0       	rjmp	.+4      	; 0x5f38 <vfprintf+0x3dc>
    5f34:	8f ef       	ldi	r24, 0xFF	; 255
    5f36:	9f ef       	ldi	r25, 0xFF	; 255
    5f38:	2b 96       	adiw	r28, 0x0b	; 11
    5f3a:	cd bf       	out	0x3d, r28	; 61
    5f3c:	de bf       	out	0x3e, r29	; 62
    5f3e:	df 91       	pop	r29
    5f40:	cf 91       	pop	r28
    5f42:	1f 91       	pop	r17
    5f44:	0f 91       	pop	r16
    5f46:	ff 90       	pop	r15
    5f48:	ef 90       	pop	r14
    5f4a:	df 90       	pop	r13
    5f4c:	cf 90       	pop	r12
    5f4e:	bf 90       	pop	r11
    5f50:	af 90       	pop	r10
    5f52:	9f 90       	pop	r9
    5f54:	8f 90       	pop	r8
    5f56:	7f 90       	pop	r7
    5f58:	6f 90       	pop	r6
    5f5a:	5f 90       	pop	r5
    5f5c:	4f 90       	pop	r4
    5f5e:	3f 90       	pop	r3
    5f60:	2f 90       	pop	r2
    5f62:	08 95       	ret

00005f64 <strnlen_P>:
    5f64:	fc 01       	movw	r30, r24
    5f66:	05 90       	lpm	r0, Z+
    5f68:	61 50       	subi	r22, 0x01	; 1
    5f6a:	70 40       	sbci	r23, 0x00	; 0
    5f6c:	01 10       	cpse	r0, r1
    5f6e:	d8 f7       	brcc	.-10     	; 0x5f66 <strnlen_P+0x2>
    5f70:	80 95       	com	r24
    5f72:	90 95       	com	r25
    5f74:	8e 0f       	add	r24, r30
    5f76:	9f 1f       	adc	r25, r31
    5f78:	08 95       	ret

00005f7a <strnlen>:
    5f7a:	fc 01       	movw	r30, r24
    5f7c:	61 50       	subi	r22, 0x01	; 1
    5f7e:	70 40       	sbci	r23, 0x00	; 0
    5f80:	01 90       	ld	r0, Z+
    5f82:	01 10       	cpse	r0, r1
    5f84:	d8 f7       	brcc	.-10     	; 0x5f7c <strnlen+0x2>
    5f86:	80 95       	com	r24
    5f88:	90 95       	com	r25
    5f8a:	8e 0f       	add	r24, r30
    5f8c:	9f 1f       	adc	r25, r31
    5f8e:	08 95       	ret

00005f90 <strrev>:
    5f90:	dc 01       	movw	r26, r24
    5f92:	fc 01       	movw	r30, r24
    5f94:	67 2f       	mov	r22, r23
    5f96:	71 91       	ld	r23, Z+
    5f98:	77 23       	and	r23, r23
    5f9a:	e1 f7       	brne	.-8      	; 0x5f94 <strrev+0x4>
    5f9c:	32 97       	sbiw	r30, 0x02	; 2
    5f9e:	04 c0       	rjmp	.+8      	; 0x5fa8 <strrev+0x18>
    5fa0:	7c 91       	ld	r23, X
    5fa2:	6d 93       	st	X+, r22
    5fa4:	70 83       	st	Z, r23
    5fa6:	62 91       	ld	r22, -Z
    5fa8:	ae 17       	cp	r26, r30
    5faa:	bf 07       	cpc	r27, r31
    5fac:	c8 f3       	brcs	.-14     	; 0x5fa0 <strrev+0x10>
    5fae:	08 95       	ret

00005fb0 <fputc>:
    5fb0:	0f 93       	push	r16
    5fb2:	1f 93       	push	r17
    5fb4:	cf 93       	push	r28
    5fb6:	df 93       	push	r29
    5fb8:	fb 01       	movw	r30, r22
    5fba:	23 81       	ldd	r18, Z+3	; 0x03
    5fbc:	21 fd       	sbrc	r18, 1
    5fbe:	03 c0       	rjmp	.+6      	; 0x5fc6 <fputc+0x16>
    5fc0:	8f ef       	ldi	r24, 0xFF	; 255
    5fc2:	9f ef       	ldi	r25, 0xFF	; 255
    5fc4:	2c c0       	rjmp	.+88     	; 0x601e <fputc+0x6e>
    5fc6:	22 ff       	sbrs	r18, 2
    5fc8:	16 c0       	rjmp	.+44     	; 0x5ff6 <fputc+0x46>
    5fca:	46 81       	ldd	r20, Z+6	; 0x06
    5fcc:	57 81       	ldd	r21, Z+7	; 0x07
    5fce:	24 81       	ldd	r18, Z+4	; 0x04
    5fd0:	35 81       	ldd	r19, Z+5	; 0x05
    5fd2:	42 17       	cp	r20, r18
    5fd4:	53 07       	cpc	r21, r19
    5fd6:	44 f4       	brge	.+16     	; 0x5fe8 <fputc+0x38>
    5fd8:	a0 81       	ld	r26, Z
    5fda:	b1 81       	ldd	r27, Z+1	; 0x01
    5fdc:	9d 01       	movw	r18, r26
    5fde:	2f 5f       	subi	r18, 0xFF	; 255
    5fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    5fe2:	20 83       	st	Z, r18
    5fe4:	31 83       	std	Z+1, r19	; 0x01
    5fe6:	8c 93       	st	X, r24
    5fe8:	26 81       	ldd	r18, Z+6	; 0x06
    5fea:	37 81       	ldd	r19, Z+7	; 0x07
    5fec:	2f 5f       	subi	r18, 0xFF	; 255
    5fee:	3f 4f       	sbci	r19, 0xFF	; 255
    5ff0:	26 83       	std	Z+6, r18	; 0x06
    5ff2:	37 83       	std	Z+7, r19	; 0x07
    5ff4:	14 c0       	rjmp	.+40     	; 0x601e <fputc+0x6e>
    5ff6:	8b 01       	movw	r16, r22
    5ff8:	ec 01       	movw	r28, r24
    5ffa:	fb 01       	movw	r30, r22
    5ffc:	00 84       	ldd	r0, Z+8	; 0x08
    5ffe:	f1 85       	ldd	r31, Z+9	; 0x09
    6000:	e0 2d       	mov	r30, r0
    6002:	19 95       	eicall
    6004:	89 2b       	or	r24, r25
    6006:	e1 f6       	brne	.-72     	; 0x5fc0 <fputc+0x10>
    6008:	d8 01       	movw	r26, r16
    600a:	16 96       	adiw	r26, 0x06	; 6
    600c:	8d 91       	ld	r24, X+
    600e:	9c 91       	ld	r25, X
    6010:	17 97       	sbiw	r26, 0x07	; 7
    6012:	01 96       	adiw	r24, 0x01	; 1
    6014:	16 96       	adiw	r26, 0x06	; 6
    6016:	8d 93       	st	X+, r24
    6018:	9c 93       	st	X, r25
    601a:	17 97       	sbiw	r26, 0x07	; 7
    601c:	ce 01       	movw	r24, r28
    601e:	df 91       	pop	r29
    6020:	cf 91       	pop	r28
    6022:	1f 91       	pop	r17
    6024:	0f 91       	pop	r16
    6026:	08 95       	ret

00006028 <__ultoa_invert>:
    6028:	fa 01       	movw	r30, r20
    602a:	aa 27       	eor	r26, r26
    602c:	28 30       	cpi	r18, 0x08	; 8
    602e:	51 f1       	breq	.+84     	; 0x6084 <__ultoa_invert+0x5c>
    6030:	20 31       	cpi	r18, 0x10	; 16
    6032:	81 f1       	breq	.+96     	; 0x6094 <__ultoa_invert+0x6c>
    6034:	e8 94       	clt
    6036:	6f 93       	push	r22
    6038:	6e 7f       	andi	r22, 0xFE	; 254
    603a:	6e 5f       	subi	r22, 0xFE	; 254
    603c:	7f 4f       	sbci	r23, 0xFF	; 255
    603e:	8f 4f       	sbci	r24, 0xFF	; 255
    6040:	9f 4f       	sbci	r25, 0xFF	; 255
    6042:	af 4f       	sbci	r26, 0xFF	; 255
    6044:	b1 e0       	ldi	r27, 0x01	; 1
    6046:	3e d0       	rcall	.+124    	; 0x60c4 <__ultoa_invert+0x9c>
    6048:	b4 e0       	ldi	r27, 0x04	; 4
    604a:	3c d0       	rcall	.+120    	; 0x60c4 <__ultoa_invert+0x9c>
    604c:	67 0f       	add	r22, r23
    604e:	78 1f       	adc	r23, r24
    6050:	89 1f       	adc	r24, r25
    6052:	9a 1f       	adc	r25, r26
    6054:	a1 1d       	adc	r26, r1
    6056:	68 0f       	add	r22, r24
    6058:	79 1f       	adc	r23, r25
    605a:	8a 1f       	adc	r24, r26
    605c:	91 1d       	adc	r25, r1
    605e:	a1 1d       	adc	r26, r1
    6060:	6a 0f       	add	r22, r26
    6062:	71 1d       	adc	r23, r1
    6064:	81 1d       	adc	r24, r1
    6066:	91 1d       	adc	r25, r1
    6068:	a1 1d       	adc	r26, r1
    606a:	20 d0       	rcall	.+64     	; 0x60ac <__ultoa_invert+0x84>
    606c:	09 f4       	brne	.+2      	; 0x6070 <__ultoa_invert+0x48>
    606e:	68 94       	set
    6070:	3f 91       	pop	r19
    6072:	2a e0       	ldi	r18, 0x0A	; 10
    6074:	26 9f       	mul	r18, r22
    6076:	11 24       	eor	r1, r1
    6078:	30 19       	sub	r19, r0
    607a:	30 5d       	subi	r19, 0xD0	; 208
    607c:	31 93       	st	Z+, r19
    607e:	de f6       	brtc	.-74     	; 0x6036 <__ultoa_invert+0xe>
    6080:	cf 01       	movw	r24, r30
    6082:	08 95       	ret
    6084:	46 2f       	mov	r20, r22
    6086:	47 70       	andi	r20, 0x07	; 7
    6088:	40 5d       	subi	r20, 0xD0	; 208
    608a:	41 93       	st	Z+, r20
    608c:	b3 e0       	ldi	r27, 0x03	; 3
    608e:	0f d0       	rcall	.+30     	; 0x60ae <__ultoa_invert+0x86>
    6090:	c9 f7       	brne	.-14     	; 0x6084 <__ultoa_invert+0x5c>
    6092:	f6 cf       	rjmp	.-20     	; 0x6080 <__ultoa_invert+0x58>
    6094:	46 2f       	mov	r20, r22
    6096:	4f 70       	andi	r20, 0x0F	; 15
    6098:	40 5d       	subi	r20, 0xD0	; 208
    609a:	4a 33       	cpi	r20, 0x3A	; 58
    609c:	18 f0       	brcs	.+6      	; 0x60a4 <__ultoa_invert+0x7c>
    609e:	49 5d       	subi	r20, 0xD9	; 217
    60a0:	31 fd       	sbrc	r19, 1
    60a2:	40 52       	subi	r20, 0x20	; 32
    60a4:	41 93       	st	Z+, r20
    60a6:	02 d0       	rcall	.+4      	; 0x60ac <__ultoa_invert+0x84>
    60a8:	a9 f7       	brne	.-22     	; 0x6094 <__ultoa_invert+0x6c>
    60aa:	ea cf       	rjmp	.-44     	; 0x6080 <__ultoa_invert+0x58>
    60ac:	b4 e0       	ldi	r27, 0x04	; 4
    60ae:	a6 95       	lsr	r26
    60b0:	97 95       	ror	r25
    60b2:	87 95       	ror	r24
    60b4:	77 95       	ror	r23
    60b6:	67 95       	ror	r22
    60b8:	ba 95       	dec	r27
    60ba:	c9 f7       	brne	.-14     	; 0x60ae <__ultoa_invert+0x86>
    60bc:	00 97       	sbiw	r24, 0x00	; 0
    60be:	61 05       	cpc	r22, r1
    60c0:	71 05       	cpc	r23, r1
    60c2:	08 95       	ret
    60c4:	9b 01       	movw	r18, r22
    60c6:	ac 01       	movw	r20, r24
    60c8:	0a 2e       	mov	r0, r26
    60ca:	06 94       	lsr	r0
    60cc:	57 95       	ror	r21
    60ce:	47 95       	ror	r20
    60d0:	37 95       	ror	r19
    60d2:	27 95       	ror	r18
    60d4:	ba 95       	dec	r27
    60d6:	c9 f7       	brne	.-14     	; 0x60ca <__ultoa_invert+0xa2>
    60d8:	62 0f       	add	r22, r18
    60da:	73 1f       	adc	r23, r19
    60dc:	84 1f       	adc	r24, r20
    60de:	95 1f       	adc	r25, r21
    60e0:	a0 1d       	adc	r26, r0
    60e2:	08 95       	ret

000060e4 <_exit>:
    60e4:	f8 94       	cli

000060e6 <__stop_program>:
    60e6:	ff cf       	rjmp	.-2      	; 0x60e6 <__stop_program>
