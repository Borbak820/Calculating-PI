
Calculating-PI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007df4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00802000  00007df4  00007e88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000149f  00802110  00802110  00007f98  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007f98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007ff4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007f0  00000000  00000000  00008034  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b3f5  00000000  00000000  00008824  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004693  00000000  00000000  00013c19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005bb9  00000000  00000000  000182ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ed8  00000000  00000000  0001de68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000056c3  00000000  00000000  0001fd40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004169  00000000  00000000  00025403  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000718  00000000  00000000  0002956c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a1 01 	jmp	0x342	; 0x342 <__ctors_end>
       4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
       8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
       c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      10:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      14:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      18:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      1c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      20:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      24:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      28:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      2c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      30:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      34:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      38:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__vector_14>
      3c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      40:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      44:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      48:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      4c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      50:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      54:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      58:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      5c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      60:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      64:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      68:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      6c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      70:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      74:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      78:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      7c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      80:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      84:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      88:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      8c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      90:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      94:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      98:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      9c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      a0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      a4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      a8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      ac:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      b0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      b4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      b8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      bc:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      c0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      c4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      c8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      cc:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      d0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      d4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      d8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      dc:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      e0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      e4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      e8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      ec:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      f0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      f4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      f8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      fc:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     100:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     104:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     108:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     10c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     110:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     114:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     118:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     11c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     120:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     124:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     128:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     12c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     130:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     134:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     138:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     13c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     140:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     144:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     148:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     14c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     150:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     154:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     158:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     15c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     160:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     164:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     168:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     16c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     170:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     174:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     178:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     17c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     180:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     184:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     188:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     18c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     190:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     194:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     198:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     19c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1a0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1a4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1a8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1ac:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1b0:	0c 94 93 2d 	jmp	0x5b26	; 0x5b26 <__vector_108>
     1b4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1b8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1bc:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1c0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1c4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1c8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1cc:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1d0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1d4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1d8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1dc:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1e0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1e4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1e8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1ec:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1f0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1f4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1f8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
     1fc:	ec 1e       	adc	r14, r28
     1fe:	ec 1e       	adc	r14, r28
     200:	ec 1e       	adc	r14, r28
     202:	73 1f       	adc	r23, r19
     204:	3f 1f       	adc	r19, r31
     206:	6d 1f       	adc	r22, r29
     208:	ec 1e       	adc	r14, r28
     20a:	ec 1e       	adc	r14, r28
     20c:	73 1f       	adc	r23, r19
     20e:	3f 1f       	adc	r19, r31

00000210 <__trampolines_start>:
     210:	0c 94 6d 1f 	jmp	0x3eda	; 0x3eda <prvProcessReceivedCommands+0x1d0>
     214:	0c 94 26 30 	jmp	0x604c	; 0x604c <vDisplayUpdateTask>
     218:	0c 94 b7 2a 	jmp	0x556e	; 0x556e <vNilakantha>
     21c:	0c 94 27 1a 	jmp	0x344e	; 0x344e <prvIdleTask>
     220:	0c 94 ec 1e 	jmp	0x3dd8	; 0x3dd8 <prvProcessReceivedCommands+0xce>
     224:	0c 94 ce 1c 	jmp	0x399c	; 0x399c <prvTimerTask>
     228:	0c 94 74 27 	jmp	0x4ee8	; 0x4ee8 <vButtonHandler>
     22c:	0c 94 73 1f 	jmp	0x3ee6	; 0x3ee6 <prvProcessReceivedCommands+0x1dc>
     230:	0c 94 7f 21 	jmp	0x42fe	; 0x42fe <vUserInterface>
     234:	0c 94 ff 27 	jmp	0x4ffe	; 0x4ffe <vLeibniz>
     238:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <vEventGroupSetBitsCallback>
     23c:	0c 94 3f 1f 	jmp	0x3e7e	; 0x3e7e <prvProcessReceivedCommands+0x174>

00000240 <__trampolines_end>:
     240:	6e 61       	ori	r22, 0x1E	; 30
     242:	6e 00       	.word	0x006e	; ????

00000244 <__c.2332>:
     244:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     254:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     264:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     274:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     284:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     294:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2a4:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2b4:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2c4:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2d4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2e4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2f4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     304:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     314:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     324:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     334:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000342 <__ctors_end>:
     342:	11 24       	eor	r1, r1
     344:	1f be       	out	0x3f, r1	; 63
     346:	cf ef       	ldi	r28, 0xFF	; 255
     348:	cd bf       	out	0x3d, r28	; 61
     34a:	df e3       	ldi	r29, 0x3F	; 63
     34c:	de bf       	out	0x3e, r29	; 62
     34e:	00 e0       	ldi	r16, 0x00	; 0
     350:	0c bf       	out	0x3c, r16	; 60

00000352 <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     352:	ef ea       	ldi	r30, 0xAF	; 175
     354:	f5 e3       	ldi	r31, 0x35	; 53
     356:	8a ea       	ldi	r24, 0xAA	; 170
     358:	90 e4       	ldi	r25, 0x40	; 64
     35a:	81 93       	st	Z+, r24
     35c:	e0 30       	cpi	r30, 0x00	; 0
     35e:	f9 07       	cpc	r31, r25
     360:	e0 f3       	brcs	.-8      	; 0x35a <init_mem+0x8>
	...

00000364 <__do_copy_data>:
     364:	11 e2       	ldi	r17, 0x21	; 33
     366:	a0 e0       	ldi	r26, 0x00	; 0
     368:	b0 e2       	ldi	r27, 0x20	; 32
     36a:	e4 ef       	ldi	r30, 0xF4	; 244
     36c:	fd e7       	ldi	r31, 0x7D	; 125
     36e:	00 e0       	ldi	r16, 0x00	; 0
     370:	0b bf       	out	0x3b, r16	; 59
     372:	02 c0       	rjmp	.+4      	; 0x378 <__do_copy_data+0x14>
     374:	07 90       	elpm	r0, Z+
     376:	0d 92       	st	X+, r0
     378:	a0 31       	cpi	r26, 0x10	; 16
     37a:	b1 07       	cpc	r27, r17
     37c:	d9 f7       	brne	.-10     	; 0x374 <__do_copy_data+0x10>

0000037e <__do_clear_bss>:
     37e:	25 e3       	ldi	r18, 0x35	; 53
     380:	a0 e1       	ldi	r26, 0x10	; 16
     382:	b1 e2       	ldi	r27, 0x21	; 33
     384:	01 c0       	rjmp	.+2      	; 0x388 <.do_clear_bss_start>

00000386 <.do_clear_bss_loop>:
     386:	1d 92       	st	X+, r1

00000388 <.do_clear_bss_start>:
     388:	af 3a       	cpi	r26, 0xAF	; 175
     38a:	b2 07       	cpc	r27, r18
     38c:	e1 f7       	brne	.-8      	; 0x386 <.do_clear_bss_loop>
     38e:	0e 94 1e 21 	call	0x423c	; 0x423c <main>
     392:	0c 94 f8 3e 	jmp	0x7df0	; 0x7df0 <_exit>

00000396 <__bad_interrupt>:
     396:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000039a <initButtons>:
 #define BUTTON_PRESS_SHORT			100
 #define BUTTON_PRESS_LONG			500

 

 void initButtons(void) {
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
	PORTF.DIRCLR = PIN4_bm; //SW1
     3a2:	80 ea       	ldi	r24, 0xA0	; 160
     3a4:	96 e0       	ldi	r25, 0x06	; 6
     3a6:	20 e1       	ldi	r18, 0x10	; 16
     3a8:	fc 01       	movw	r30, r24
     3aa:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN5_bm; //SW2
     3ac:	80 ea       	ldi	r24, 0xA0	; 160
     3ae:	96 e0       	ldi	r25, 0x06	; 6
     3b0:	20 e2       	ldi	r18, 0x20	; 32
     3b2:	fc 01       	movw	r30, r24
     3b4:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN6_bm; //SW3
     3b6:	80 ea       	ldi	r24, 0xA0	; 160
     3b8:	96 e0       	ldi	r25, 0x06	; 6
     3ba:	20 e4       	ldi	r18, 0x40	; 64
     3bc:	fc 01       	movw	r30, r24
     3be:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN7_bm; //SW4
     3c0:	80 ea       	ldi	r24, 0xA0	; 160
     3c2:	96 e0       	ldi	r25, 0x06	; 6
     3c4:	20 e8       	ldi	r18, 0x80	; 128
     3c6:	fc 01       	movw	r30, r24
     3c8:	22 83       	std	Z+2, r18	; 0x02
 }
     3ca:	00 00       	nop
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	08 95       	ret

000003d2 <updateButtons>:
 button_press_t b1Status;
 button_press_t b2Status;
 button_press_t b3Status;
 button_press_t b4Status;

 void updateButtons(void) {
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
	static uint16_t b1Count = 0;
	static uint16_t b2Count = 0;
	static uint16_t b3Count = 0;
	static uint16_t b4Count = 0;
	if(Button1_Value == 0) {
     3da:	80 ea       	ldi	r24, 0xA0	; 160
     3dc:	96 e0       	ldi	r25, 0x06	; 6
     3de:	fc 01       	movw	r30, r24
     3e0:	80 85       	ldd	r24, Z+8	; 0x08
     3e2:	88 2f       	mov	r24, r24
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	80 71       	andi	r24, 0x10	; 16
     3e8:	99 27       	eor	r25, r25
     3ea:	95 95       	asr	r25
     3ec:	87 95       	ror	r24
     3ee:	95 95       	asr	r25
     3f0:	87 95       	ror	r24
     3f2:	95 95       	asr	r25
     3f4:	87 95       	ror	r24
     3f6:	95 95       	asr	r25
     3f8:	87 95       	ror	r24
     3fa:	89 2b       	or	r24, r25
     3fc:	89 f4       	brne	.+34     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		if(b1Count < 60000) {
     3fe:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <__data_end>
     402:	90 91 11 21 	lds	r25, 0x2111	; 0x802111 <__data_end+0x1>
     406:	80 36       	cpi	r24, 0x60	; 96
     408:	9a 4e       	sbci	r25, 0xEA	; 234
     40a:	20 f5       	brcc	.+72     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			b1Count++;
     40c:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <__data_end>
     410:	90 91 11 21 	lds	r25, 0x2111	; 0x802111 <__data_end+0x1>
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	80 93 10 21 	sts	0x2110, r24	; 0x802110 <__data_end>
     41a:	90 93 11 21 	sts	0x2111, r25	; 0x802111 <__data_end+0x1>
     41e:	1a c0       	rjmp	.+52     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		}
	} else {
		if(b1Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     420:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <__data_end>
     424:	90 91 11 21 	lds	r25, 0x2111	; 0x802111 <__data_end+0x1>
     428:	0b 97       	sbiw	r24, 0x0b	; 11
     42a:	68 f0       	brcs	.+26     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			if(b1Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     42c:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <__data_end>
     430:	90 91 11 21 	lds	r25, 0x2111	; 0x802111 <__data_end+0x1>
     434:	c3 97       	sbiw	r24, 0x33	; 51
     436:	18 f0       	brcs	.+6      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
				//Button was pressed Long
				b1Status = LONG_PRESSED;
     438:	10 92 5e 35 	sts	0x355E, r1	; 0x80355e <b1Status>
     43c:	07 c0       	rjmp	.+14     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			} else {
				//Button was pressed Short	
				b1Status = SHORT_PRESSED;
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	80 93 5e 35 	sts	0x355E, r24	; 0x80355e <b1Status>
     444:	03 c0       	rjmp	.+6      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			}
		} else {
			b1Status = NOT_PRESSED;
     446:	82 e0       	ldi	r24, 0x02	; 2
     448:	80 93 5e 35 	sts	0x355E, r24	; 0x80355e <b1Status>
		}
		b1Count = 0;
     44c:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <__data_end>
     450:	10 92 11 21 	sts	0x2111, r1	; 0x802111 <__data_end+0x1>
	}
	if(Button2_Value == 0) {
     454:	80 ea       	ldi	r24, 0xA0	; 160
     456:	96 e0       	ldi	r25, 0x06	; 6
     458:	fc 01       	movw	r30, r24
     45a:	80 85       	ldd	r24, Z+8	; 0x08
     45c:	88 2f       	mov	r24, r24
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	80 72       	andi	r24, 0x20	; 32
     462:	99 27       	eor	r25, r25
     464:	95 95       	asr	r25
     466:	87 95       	ror	r24
     468:	95 95       	asr	r25
     46a:	87 95       	ror	r24
     46c:	95 95       	asr	r25
     46e:	87 95       	ror	r24
     470:	95 95       	asr	r25
     472:	87 95       	ror	r24
     474:	95 95       	asr	r25
     476:	87 95       	ror	r24
     478:	89 2b       	or	r24, r25
     47a:	89 f4       	brne	.+34     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
		if(b2Count < 60000) {
     47c:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <b2Count.3830>
     480:	90 91 13 21 	lds	r25, 0x2113	; 0x802113 <b2Count.3830+0x1>
     484:	80 36       	cpi	r24, 0x60	; 96
     486:	9a 4e       	sbci	r25, 0xEA	; 234
     488:	20 f5       	brcc	.+72     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
			b2Count++;
     48a:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <b2Count.3830>
     48e:	90 91 13 21 	lds	r25, 0x2113	; 0x802113 <b2Count.3830+0x1>
     492:	01 96       	adiw	r24, 0x01	; 1
     494:	80 93 12 21 	sts	0x2112, r24	; 0x802112 <b2Count.3830>
     498:	90 93 13 21 	sts	0x2113, r25	; 0x802113 <b2Count.3830+0x1>
     49c:	1a c0       	rjmp	.+52     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
		}
	} else {
		if(b2Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     49e:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <b2Count.3830>
     4a2:	90 91 13 21 	lds	r25, 0x2113	; 0x802113 <b2Count.3830+0x1>
     4a6:	0b 97       	sbiw	r24, 0x0b	; 11
     4a8:	68 f0       	brcs	.+26     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
			if(b2Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     4aa:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <b2Count.3830>
     4ae:	90 91 13 21 	lds	r25, 0x2113	; 0x802113 <b2Count.3830+0x1>
     4b2:	c3 97       	sbiw	r24, 0x33	; 51
     4b4:	18 f0       	brcs	.+6      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
				//Button was pressed Long
				b2Status = LONG_PRESSED;
     4b6:	10 92 5f 35 	sts	0x355F, r1	; 0x80355f <b2Status>
     4ba:	07 c0       	rjmp	.+14     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
				} else {
				//Button was pressed Short
				b2Status = SHORT_PRESSED;
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	80 93 5f 35 	sts	0x355F, r24	; 0x80355f <b2Status>
     4c2:	03 c0       	rjmp	.+6      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
			}
		} else {
			b2Status = NOT_PRESSED;			
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	80 93 5f 35 	sts	0x355F, r24	; 0x80355f <b2Status>
		}
		b2Count = 0;
     4ca:	10 92 12 21 	sts	0x2112, r1	; 0x802112 <b2Count.3830>
     4ce:	10 92 13 21 	sts	0x2113, r1	; 0x802113 <b2Count.3830+0x1>
	}
	if(Button3_Value == 0) {
     4d2:	80 ea       	ldi	r24, 0xA0	; 160
     4d4:	96 e0       	ldi	r25, 0x06	; 6
     4d6:	fc 01       	movw	r30, r24
     4d8:	80 85       	ldd	r24, Z+8	; 0x08
     4da:	88 2f       	mov	r24, r24
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	80 74       	andi	r24, 0x40	; 64
     4e0:	99 27       	eor	r25, r25
     4e2:	08 2e       	mov	r0, r24
     4e4:	89 2f       	mov	r24, r25
     4e6:	00 0c       	add	r0, r0
     4e8:	88 1f       	adc	r24, r24
     4ea:	99 0b       	sbc	r25, r25
     4ec:	00 0c       	add	r0, r0
     4ee:	88 1f       	adc	r24, r24
     4f0:	99 1f       	adc	r25, r25
     4f2:	89 2b       	or	r24, r25
     4f4:	89 f4       	brne	.+34     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
		if(b3Count < 60000) {
     4f6:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <b3Count.3831>
     4fa:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <b3Count.3831+0x1>
     4fe:	80 36       	cpi	r24, 0x60	; 96
     500:	9a 4e       	sbci	r25, 0xEA	; 234
     502:	20 f5       	brcc	.+72     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
			b3Count++;
     504:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <b3Count.3831>
     508:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <b3Count.3831+0x1>
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	80 93 14 21 	sts	0x2114, r24	; 0x802114 <b3Count.3831>
     512:	90 93 15 21 	sts	0x2115, r25	; 0x802115 <b3Count.3831+0x1>
     516:	1a c0       	rjmp	.+52     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
		}
	} else {
		if(b3Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     518:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <b3Count.3831>
     51c:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <b3Count.3831+0x1>
     520:	0b 97       	sbiw	r24, 0x0b	; 11
     522:	68 f0       	brcs	.+26     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
			if(b3Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     524:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <b3Count.3831>
     528:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <b3Count.3831+0x1>
     52c:	c3 97       	sbiw	r24, 0x33	; 51
     52e:	18 f0       	brcs	.+6      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
				//Button was pressed Long
				b3Status = LONG_PRESSED;
     530:	10 92 60 35 	sts	0x3560, r1	; 0x803560 <b3Status>
     534:	07 c0       	rjmp	.+14     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
				} else {
				//Button was pressed Short
				b3Status = SHORT_PRESSED;
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	80 93 60 35 	sts	0x3560, r24	; 0x803560 <b3Status>
     53c:	03 c0       	rjmp	.+6      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
			}
		} else {
			b3Status = NOT_PRESSED;
     53e:	82 e0       	ldi	r24, 0x02	; 2
     540:	80 93 60 35 	sts	0x3560, r24	; 0x803560 <b3Status>
		}
		b3Count = 0;
     544:	10 92 14 21 	sts	0x2114, r1	; 0x802114 <b3Count.3831>
     548:	10 92 15 21 	sts	0x2115, r1	; 0x802115 <b3Count.3831+0x1>
	}
	if(Button4_Value == 0) {
     54c:	80 ea       	ldi	r24, 0xA0	; 160
     54e:	96 e0       	ldi	r25, 0x06	; 6
     550:	fc 01       	movw	r30, r24
     552:	80 85       	ldd	r24, Z+8	; 0x08
     554:	88 23       	and	r24, r24
     556:	8c f0       	brlt	.+34     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
		if(b4Count < 60000) {
     558:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <b4Count.3832>
     55c:	90 91 17 21 	lds	r25, 0x2117	; 0x802117 <b4Count.3832+0x1>
     560:	80 36       	cpi	r24, 0x60	; 96
     562:	9a 4e       	sbci	r25, 0xEA	; 234
     564:	20 f5       	brcc	.+72     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
			b4Count++;
     566:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <b4Count.3832>
     56a:	90 91 17 21 	lds	r25, 0x2117	; 0x802117 <b4Count.3832+0x1>
     56e:	01 96       	adiw	r24, 0x01	; 1
     570:	80 93 16 21 	sts	0x2116, r24	; 0x802116 <b4Count.3832>
     574:	90 93 17 21 	sts	0x2117, r25	; 0x802117 <b4Count.3832+0x1>
		} else {
			b4Status = NOT_PRESSED;
		}
		b4Count = 0;
	}
 }
     578:	1a c0       	rjmp	.+52     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
	if(Button4_Value == 0) {
		if(b4Count < 60000) {
			b4Count++;
		}
	} else {
		if(b4Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     57a:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <b4Count.3832>
     57e:	90 91 17 21 	lds	r25, 0x2117	; 0x802117 <b4Count.3832+0x1>
     582:	0b 97       	sbiw	r24, 0x0b	; 11
     584:	68 f0       	brcs	.+26     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
			if(b4Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     586:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <b4Count.3832>
     58a:	90 91 17 21 	lds	r25, 0x2117	; 0x802117 <b4Count.3832+0x1>
     58e:	c3 97       	sbiw	r24, 0x33	; 51
     590:	18 f0       	brcs	.+6      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
				//Button was pressed Long
				b4Status = LONG_PRESSED;
     592:	10 92 61 35 	sts	0x3561, r1	; 0x803561 <b4Status>
     596:	07 c0       	rjmp	.+14     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
				} else {
				//Button was pressed Short
				b4Status = SHORT_PRESSED;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	80 93 61 35 	sts	0x3561, r24	; 0x803561 <b4Status>
     59e:	03 c0       	rjmp	.+6      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
			}
		} else {
			b4Status = NOT_PRESSED;
     5a0:	82 e0       	ldi	r24, 0x02	; 2
     5a2:	80 93 61 35 	sts	0x3561, r24	; 0x803561 <b4Status>
		}
		b4Count = 0;
     5a6:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <b4Count.3832>
     5aa:	10 92 17 21 	sts	0x2117, r1	; 0x802117 <b4Count.3832+0x1>
	}
 }
     5ae:	00 00       	nop
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <getButtonPress>:

 button_press_t getButtonPress(button_t button) {
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	1f 92       	push	r1
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
     5c0:	89 83       	std	Y+1, r24	; 0x01
	switch(button) {
     5c2:	89 81       	ldd	r24, Y+1	; 0x01
     5c4:	88 2f       	mov	r24, r24
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	81 30       	cpi	r24, 0x01	; 1
     5ca:	91 05       	cpc	r25, r1
     5cc:	79 f0       	breq	.+30     	; 0x5ec <getButtonPress+0x36>
     5ce:	82 30       	cpi	r24, 0x02	; 2
     5d0:	91 05       	cpc	r25, r1
     5d2:	1c f4       	brge	.+6      	; 0x5da <getButtonPress+0x24>
     5d4:	89 2b       	or	r24, r25
     5d6:	39 f0       	breq	.+14     	; 0x5e6 <getButtonPress+0x30>
     5d8:	12 c0       	rjmp	.+36     	; 0x5fe <getButtonPress+0x48>
     5da:	82 30       	cpi	r24, 0x02	; 2
     5dc:	91 05       	cpc	r25, r1
     5de:	49 f0       	breq	.+18     	; 0x5f2 <getButtonPress+0x3c>
     5e0:	03 97       	sbiw	r24, 0x03	; 3
     5e2:	51 f0       	breq	.+20     	; 0x5f8 <getButtonPress+0x42>
     5e4:	0c c0       	rjmp	.+24     	; 0x5fe <getButtonPress+0x48>
		case BUTTON1:
			return b1Status;
     5e6:	80 91 5e 35 	lds	r24, 0x355E	; 0x80355e <b1Status>
     5ea:	0a c0       	rjmp	.+20     	; 0x600 <getButtonPress+0x4a>
		break;
		case BUTTON2:
			return b2Status;
     5ec:	80 91 5f 35 	lds	r24, 0x355F	; 0x80355f <b2Status>
     5f0:	07 c0       	rjmp	.+14     	; 0x600 <getButtonPress+0x4a>
		break;
		case BUTTON3:
			return b3Status;
     5f2:	80 91 60 35 	lds	r24, 0x3560	; 0x803560 <b3Status>
     5f6:	04 c0       	rjmp	.+8      	; 0x600 <getButtonPress+0x4a>
		break;
		case BUTTON4:
			return b4Status;
     5f8:	80 91 61 35 	lds	r24, 0x3561	; 0x803561 <b4Status>
     5fc:	01 c0       	rjmp	.+2      	; 0x600 <getButtonPress+0x4a>
		break;
	}
	return NOT_PRESSED;
     5fe:	82 e0       	ldi	r24, 0x02	; 2
     600:	0f 90       	pop	r0
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	08 95       	ret

00000608 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     608:	0f 93       	push	r16
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	00 d0       	rcall	.+0      	; 0x610 <CCPWrite+0x8>
     610:	00 d0       	rcall	.+0      	; 0x612 <CCPWrite+0xa>
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	8c 83       	std	Y+4, r24	; 0x04
     618:	9d 83       	std	Y+5, r25	; 0x05
     61a:	6e 83       	std	Y+6, r22	; 0x06

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     61c:	8f e3       	ldi	r24, 0x3F	; 63
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	fc 01       	movw	r30, r24
     622:	80 81       	ld	r24, Z
     624:	8b 83       	std	Y+3, r24	; 0x03
     626:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
     628:	8c 81       	ldd	r24, Y+4	; 0x04
     62a:	9d 81       	ldd	r25, Y+5	; 0x05
     62c:	89 83       	std	Y+1, r24	; 0x01
     62e:	9a 83       	std	Y+2, r25	; 0x02
#ifdef RAMPZ
	RAMPZ = 0;
     630:	8b e3       	ldi	r24, 0x3B	; 59
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	fc 01       	movw	r30, r24
     636:	10 82       	st	Z, r1
#endif
	asm volatile(
     638:	89 81       	ldd	r24, Y+1	; 0x01
     63a:	9a 81       	ldd	r25, Y+2	; 0x02
     63c:	2e 81       	ldd	r18, Y+6	; 0x06
     63e:	fc 01       	movw	r30, r24
     640:	08 ed       	ldi	r16, 0xD8	; 216
     642:	04 bf       	out	0x34, r16	; 52
     644:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     646:	8f e3       	ldi	r24, 0x3F	; 63
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	2b 81       	ldd	r18, Y+3	; 0x03
     64c:	fc 01       	movw	r30, r24
     64e:	20 83       	st	Z, r18
#endif
}
     650:	00 00       	nop
     652:	26 96       	adiw	r28, 0x06	; 6
     654:	cd bf       	out	0x3d, r28	; 61
     656:	de bf       	out	0x3e, r29	; 62
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	0f 91       	pop	r16
     65e:	08 95       	ret

00000660 <CLKSYS_XOSC_Config>:
 *                             external clock) and startup times.
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	00 d0       	rcall	.+0      	; 0x666 <CLKSYS_XOSC_Config+0x6>
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
     66a:	89 83       	std	Y+1, r24	; 0x01
     66c:	6a 83       	std	Y+2, r22	; 0x02
     66e:	4b 83       	std	Y+3, r20	; 0x03
	OSC.XOSCCTRL = (uint8_t) freqRange |
     670:	80 e5       	ldi	r24, 0x50	; 80
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	2a 81       	ldd	r18, Y+2	; 0x02
     676:	22 23       	and	r18, r18
     678:	11 f0       	breq	.+4      	; 0x67e <CLKSYS_XOSC_Config+0x1e>
     67a:	20 e2       	ldi	r18, 0x20	; 32
     67c:	01 c0       	rjmp	.+2      	; 0x680 <CLKSYS_XOSC_Config+0x20>
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	39 81       	ldd	r19, Y+1	; 0x01
     682:	32 2b       	or	r19, r18
     684:	2b 81       	ldd	r18, Y+3	; 0x03
     686:	23 2b       	or	r18, r19
     688:	fc 01       	movw	r30, r24
     68a:	22 83       	std	Z+2, r18	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
     68c:	00 00       	nop
     68e:	23 96       	adiw	r28, 0x03	; 3
     690:	cd bf       	out	0x3d, r28	; 61
     692:	de bf       	out	0x3e, r29	; 62
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	08 95       	ret

0000069a <CLKSYS_PLL_Config>:
 *                      must be above 0.4MHz.
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	1f 92       	push	r1
     6a0:	1f 92       	push	r1
     6a2:	cd b7       	in	r28, 0x3d	; 61
     6a4:	de b7       	in	r29, 0x3e	; 62
     6a6:	89 83       	std	Y+1, r24	; 0x01
     6a8:	6a 83       	std	Y+2, r22	; 0x02
	factor &= OSC_PLLFAC_gm;
     6aa:	8a 81       	ldd	r24, Y+2	; 0x02
     6ac:	8f 71       	andi	r24, 0x1F	; 31
     6ae:	8a 83       	std	Y+2, r24	; 0x02
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     6b0:	80 e5       	ldi	r24, 0x50	; 80
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	39 81       	ldd	r19, Y+1	; 0x01
     6b6:	2a 81       	ldd	r18, Y+2	; 0x02
     6b8:	23 2b       	or	r18, r19
     6ba:	fc 01       	movw	r30, r24
     6bc:	25 83       	std	Z+5, r18	; 0x05
}
     6be:	00 00       	nop
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <CLKSYS_Disable>:
 *                 OSC_XOSCEN_bm, OSC_PLLEN_bm.
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	1f 92       	push	r1
     6d0:	1f 92       	push	r1
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
     6d6:	8a 83       	std	Y+2, r24	; 0x02
	OSC.CTRL &= ~oscSel;
     6d8:	80 e5       	ldi	r24, 0x50	; 80
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	20 e5       	ldi	r18, 0x50	; 80
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	f9 01       	movw	r30, r18
     6e2:	20 81       	ld	r18, Z
     6e4:	32 2f       	mov	r19, r18
     6e6:	2a 81       	ldd	r18, Y+2	; 0x02
     6e8:	20 95       	com	r18
     6ea:	23 23       	and	r18, r19
     6ec:	fc 01       	movw	r30, r24
     6ee:	20 83       	st	Z, r18
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     6f0:	80 e5       	ldi	r24, 0x50	; 80
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	fc 01       	movw	r30, r24
     6f6:	90 81       	ld	r25, Z
     6f8:	8a 81       	ldd	r24, Y+2	; 0x02
     6fa:	89 23       	and	r24, r25
     6fc:	89 83       	std	Y+1, r24	; 0x01
	return clkEnabled;
     6fe:	89 81       	ldd	r24, Y+1	; 0x01
}
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	00 d0       	rcall	.+0      	; 0x710 <CLKSYS_Prescalers_Config+0x6>
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
     714:	8a 83       	std	Y+2, r24	; 0x02
     716:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     718:	9a 81       	ldd	r25, Y+2	; 0x02
     71a:	8b 81       	ldd	r24, Y+3	; 0x03
     71c:	89 2b       	or	r24, r25
     71e:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.PSCTRL, PSconfig );
     720:	69 81       	ldd	r22, Y+1	; 0x01
     722:	81 e4       	ldi	r24, 0x41	; 65
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 04 03 	call	0x608	; 0x608 <CCPWrite>
}
     72a:	00 00       	nop
     72c:	23 96       	adiw	r28, 0x03	; 3
     72e:	cd bf       	out	0x3d, r28	; 61
     730:	de bf       	out	0x3e, r29	; 62
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	08 95       	ret

00000738 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	1f 92       	push	r1
     73e:	1f 92       	push	r1
     740:	cd b7       	in	r28, 0x3d	; 61
     742:	de b7       	in	r29, 0x3e	; 62
     744:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     746:	80 e4       	ldi	r24, 0x40	; 64
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	fc 01       	movw	r30, r24
     74c:	80 81       	ld	r24, Z
     74e:	98 2f       	mov	r25, r24
     750:	98 7f       	andi	r25, 0xF8	; 248
     752:	8a 81       	ldd	r24, Y+2	; 0x02
     754:	89 2b       	or	r24, r25
     756:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.CTRL, clkCtrl );
     758:	69 81       	ldd	r22, Y+1	; 0x01
     75a:	80 e4       	ldi	r24, 0x40	; 64
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 04 03 	call	0x608	; 0x608 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     762:	80 e4       	ldi	r24, 0x40	; 64
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	fc 01       	movw	r30, r24
     768:	90 81       	ld	r25, Z
     76a:	8a 81       	ldd	r24, Y+2	; 0x02
     76c:	89 23       	and	r24, r25
     76e:	89 83       	std	Y+1, r24	; 0x01
	return clkCtrl;
     770:	89 81       	ldd	r24, Y+1	; 0x01
}
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	08 95       	ret

0000077c <TC0_ConfigClockSource>:
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
}
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	00 d0       	rcall	.+0      	; 0x782 <TC0_ConfigClockSource+0x6>
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	89 83       	std	Y+1, r24	; 0x01
     788:	9a 83       	std	Y+2, r25	; 0x02
     78a:	6b 83       	std	Y+3, r22	; 0x03
     78c:	89 81       	ldd	r24, Y+1	; 0x01
     78e:	9a 81       	ldd	r25, Y+2	; 0x02
     790:	fc 01       	movw	r30, r24
     792:	80 81       	ld	r24, Z
     794:	98 2f       	mov	r25, r24
     796:	90 7f       	andi	r25, 0xF0	; 240
     798:	8b 81       	ldd	r24, Y+3	; 0x03
     79a:	89 2b       	or	r24, r25
     79c:	28 2f       	mov	r18, r24
     79e:	89 81       	ldd	r24, Y+1	; 0x01
     7a0:	9a 81       	ldd	r25, Y+2	; 0x02
     7a2:	fc 01       	movw	r30, r24
     7a4:	20 83       	st	Z, r18
     7a6:	00 00       	nop
     7a8:	23 96       	adiw	r28, 0x03	; 3
     7aa:	cd bf       	out	0x3d, r28	; 61
     7ac:	de bf       	out	0x3e, r29	; 62
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	08 95       	ret

000007b4 <TC0_ConfigWGM>:
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	00 d0       	rcall	.+0      	; 0x7ba <TC0_ConfigWGM+0x6>
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	89 83       	std	Y+1, r24	; 0x01
     7c0:	9a 83       	std	Y+2, r25	; 0x02
     7c2:	6b 83       	std	Y+3, r22	; 0x03
     7c4:	89 81       	ldd	r24, Y+1	; 0x01
     7c6:	9a 81       	ldd	r25, Y+2	; 0x02
     7c8:	fc 01       	movw	r30, r24
     7ca:	81 81       	ldd	r24, Z+1	; 0x01
     7cc:	98 2f       	mov	r25, r24
     7ce:	98 7f       	andi	r25, 0xF8	; 248
     7d0:	8b 81       	ldd	r24, Y+3	; 0x03
     7d2:	89 2b       	or	r24, r25
     7d4:	28 2f       	mov	r18, r24
     7d6:	89 81       	ldd	r24, Y+1	; 0x01
     7d8:	9a 81       	ldd	r25, Y+2	; 0x02
     7da:	fc 01       	movw	r30, r24
     7dc:	21 83       	std	Z+1, r18	; 0x01
     7de:	00 00       	nop
     7e0:	23 96       	adiw	r28, 0x03	; 3
     7e2:	cd bf       	out	0x3d, r28	; 61
     7e4:	de bf       	out	0x3e, r29	; 62
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	08 95       	ret

000007ec <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	00 d0       	rcall	.+0      	; 0x7f2 <TC0_SetOverflowIntLevel+0x6>
     7f2:	cd b7       	in	r28, 0x3d	; 61
     7f4:	de b7       	in	r29, 0x3e	; 62
     7f6:	89 83       	std	Y+1, r24	; 0x01
     7f8:	9a 83       	std	Y+2, r25	; 0x02
     7fa:	6b 83       	std	Y+3, r22	; 0x03
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     7fc:	89 81       	ldd	r24, Y+1	; 0x01
     7fe:	9a 81       	ldd	r25, Y+2	; 0x02
     800:	fc 01       	movw	r30, r24
     802:	86 81       	ldd	r24, Z+6	; 0x06
     804:	98 2f       	mov	r25, r24
     806:	9c 7f       	andi	r25, 0xFC	; 252
     808:	8b 81       	ldd	r24, Y+3	; 0x03
     80a:	89 2b       	or	r24, r25
     80c:	28 2f       	mov	r18, r24
     80e:	89 81       	ldd	r24, Y+1	; 0x01
     810:	9a 81       	ldd	r25, Y+2	; 0x02
     812:	fc 01       	movw	r30, r24
     814:	26 83       	std	Z+6, r18	; 0x06
}
     816:	00 00       	nop
     818:	23 96       	adiw	r28, 0x03	; 3
     81a:	cd bf       	out	0x3d, r28	; 61
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	08 95       	ret

00000824 <vApplicationStackOverflowHook>:
 {
	 (void)errCode;

	 uint8_t a=42; (void)a;

 }
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	00 d0       	rcall	.+0      	; 0x82a <vApplicationStackOverflowHook+0x6>
     82a:	1f 92       	push	r1
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
     830:	89 83       	std	Y+1, r24	; 0x01
     832:	9a 83       	std	Y+2, r25	; 0x02
     834:	6b 83       	std	Y+3, r22	; 0x03
     836:	7c 83       	std	Y+4, r23	; 0x04
     838:	8b e2       	ldi	r24, 0x2B	; 43
     83a:	0e 94 26 04 	call	0x84c	; 0x84c <error>
     83e:	00 00       	nop
     840:	24 96       	adiw	r28, 0x04	; 4
     842:	cd bf       	out	0x3d, r28	; 61
     844:	de bf       	out	0x3e, r29	; 62
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	08 95       	ret

0000084c <error>:

 //----------------------------------------------
 //
 void error(uint8_t errCode)
 {
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	1f 92       	push	r1
     852:	1f 92       	push	r1
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
     858:	8a 83       	std	Y+2, r24	; 0x02
	 uint8_t a;

	 if(errCode==ERR_STACK_OVERFLOW)
     85a:	8a 81       	ldd	r24, Y+2	; 0x02
     85c:	8b 32       	cpi	r24, 0x2B	; 43
     85e:	19 f4       	brne	.+6      	; 0x866 <error+0x1a>
	 a = 1;
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	89 83       	std	Y+1, r24	; 0x01
     864:	0e c0       	rjmp	.+28     	; 0x882 <error+0x36>
	 else if(errCode==ERR_QUEUE_SEND_FAILED)
     866:	8a 81       	ldd	r24, Y+2	; 0x02
     868:	8c 32       	cpi	r24, 0x2C	; 44
     86a:	19 f4       	brne	.+6      	; 0x872 <error+0x26>
	 a = 2;
     86c:	82 e0       	ldi	r24, 0x02	; 2
     86e:	89 83       	std	Y+1, r24	; 0x01
     870:	08 c0       	rjmp	.+16     	; 0x882 <error+0x36>
	 else if(errCode==ERR_BYTES_SHOULD_BE_AVAILABLE)
     872:	8a 81       	ldd	r24, Y+2	; 0x02
     874:	8f 32       	cpi	r24, 0x2F	; 47
     876:	19 f4       	brne	.+6      	; 0x87e <error+0x32>
	 a = 3;
     878:	83 e0       	ldi	r24, 0x03	; 3
     87a:	89 83       	std	Y+1, r24	; 0x01
     87c:	02 c0       	rjmp	.+4      	; 0x882 <error+0x36>
	 else
	 a = 4;
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	89 83       	std	Y+1, r24	; 0x01
	 // TODO from here:
	 //
	 // - log the occurance of any error in flash mem (inc counter)
	 // - print a message

	 software_reset();
     882:	0e 94 49 04 	call	0x892	; 0x892 <software_reset>
 }
     886:	00 00       	nop
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	08 95       	ret

00000892 <software_reset>:

 //----------------------------------------------
 //
 void software_reset(void)
 {	 
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62
	 asm("nop");
     89a:	00 00       	nop
	 CPU_CCP  = CCP_IOREG_gc;
     89c:	84 e3       	ldi	r24, 0x34	; 52
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	28 ed       	ldi	r18, 0xD8	; 216
     8a2:	fc 01       	movw	r30, r24
     8a4:	20 83       	st	Z, r18
	 RST.CTRL = RST_SWRST_bm ;	 
     8a6:	88 e7       	ldi	r24, 0x78	; 120
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	21 e0       	ldi	r18, 0x01	; 1
     8ac:	fc 01       	movw	r30, r24
     8ae:	21 83       	std	Z+1, r18	; 0x01
     8b0:	00 00       	nop
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	08 95       	ret

000008b8 <xEventGroupCreate>:
/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	1f 92       	push	r1
     8be:	1f 92       	push	r1
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	80 e1       	ldi	r24, 0x10	; 16
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 99 07 	call	0xf32	; 0xf32 <pvPortMalloc>
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	9a 83       	std	Y+2, r25	; 0x02
     8d0:	89 81       	ldd	r24, Y+1	; 0x01
     8d2:	9a 81       	ldd	r25, Y+2	; 0x02
     8d4:	89 2b       	or	r24, r25
     8d6:	61 f0       	breq	.+24     	; 0x8f0 <xEventGroupCreate+0x38>
     8d8:	89 81       	ldd	r24, Y+1	; 0x01
     8da:	9a 81       	ldd	r25, Y+2	; 0x02
     8dc:	fc 01       	movw	r30, r24
     8de:	10 82       	st	Z, r1
     8e0:	11 82       	std	Z+1, r1	; 0x01
     8e2:	12 82       	std	Z+2, r1	; 0x02
     8e4:	13 82       	std	Z+3, r1	; 0x03
     8e6:	89 81       	ldd	r24, Y+1	; 0x01
     8e8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ea:	04 96       	adiw	r24, 0x04	; 4
     8ec:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vListInitialise>
     8f0:	89 81       	ldd	r24, Y+1	; 0x01
     8f2:	9a 81       	ldd	r25, Y+2	; 0x02
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	08 95       	ret

000008fe <xEventGroupWaitBits>:
     8fe:	cf 92       	push	r12
     900:	df 92       	push	r13
     902:	ef 92       	push	r14
     904:	ff 92       	push	r15
     906:	0f 93       	push	r16
     908:	1f 93       	push	r17
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	cd b7       	in	r28, 0x3d	; 61
     910:	de b7       	in	r29, 0x3e	; 62
     912:	6d 97       	sbiw	r28, 0x1d	; 29
     914:	cd bf       	out	0x3d, r28	; 61
     916:	de bf       	out	0x3e, r29	; 62
     918:	8a 8b       	std	Y+18, r24	; 0x12
     91a:	9b 8b       	std	Y+19, r25	; 0x13
     91c:	4c 8b       	std	Y+20, r20	; 0x14
     91e:	5d 8b       	std	Y+21, r21	; 0x15
     920:	6e 8b       	std	Y+22, r22	; 0x16
     922:	7f 8b       	std	Y+23, r23	; 0x17
     924:	28 8f       	std	Y+24, r18	; 0x18
     926:	09 8f       	std	Y+25, r16	; 0x19
     928:	ca 8e       	std	Y+26, r12	; 0x1a
     92a:	db 8e       	std	Y+27, r13	; 0x1b
     92c:	ec 8e       	std	Y+28, r14	; 0x1c
     92e:	fd 8e       	std	Y+29, r15	; 0x1d
     930:	8a 89       	ldd	r24, Y+18	; 0x12
     932:	9b 89       	ldd	r25, Y+19	; 0x13
     934:	89 87       	std	Y+9, r24	; 0x09
     936:	9a 87       	std	Y+10, r25	; 0x0a
     938:	1d 82       	std	Y+5, r1	; 0x05
     93a:	1e 82       	std	Y+6, r1	; 0x06
     93c:	1f 82       	std	Y+7, r1	; 0x07
     93e:	18 86       	std	Y+8, r1	; 0x08
     940:	1b 86       	std	Y+11, r1	; 0x0b
     942:	0e 94 40 15 	call	0x2a80	; 0x2a80 <vTaskSuspendAll>
     946:	89 85       	ldd	r24, Y+9	; 0x09
     948:	9a 85       	ldd	r25, Y+10	; 0x0a
     94a:	fc 01       	movw	r30, r24
     94c:	80 81       	ld	r24, Z
     94e:	91 81       	ldd	r25, Z+1	; 0x01
     950:	a2 81       	ldd	r26, Z+2	; 0x02
     952:	b3 81       	ldd	r27, Z+3	; 0x03
     954:	8c 87       	std	Y+12, r24	; 0x0c
     956:	9d 87       	std	Y+13, r25	; 0x0d
     958:	ae 87       	std	Y+14, r26	; 0x0e
     95a:	bf 87       	std	Y+15, r27	; 0x0f
     95c:	2c 89       	ldd	r18, Y+20	; 0x14
     95e:	3d 89       	ldd	r19, Y+21	; 0x15
     960:	4e 89       	ldd	r20, Y+22	; 0x16
     962:	5f 89       	ldd	r21, Y+23	; 0x17
     964:	8c 85       	ldd	r24, Y+12	; 0x0c
     966:	9d 85       	ldd	r25, Y+13	; 0x0d
     968:	ae 85       	ldd	r26, Y+14	; 0x0e
     96a:	bf 85       	ldd	r27, Y+15	; 0x0f
     96c:	09 8d       	ldd	r16, Y+25	; 0x19
     96e:	bc 01       	movw	r22, r24
     970:	cd 01       	movw	r24, r26
     972:	0e 94 28 07 	call	0xe50	; 0xe50 <prvTestWaitCondition>
     976:	88 8b       	std	Y+16, r24	; 0x10
     978:	88 89       	ldd	r24, Y+16	; 0x10
     97a:	88 23       	and	r24, r24
     97c:	59 f1       	breq	.+86     	; 0x9d4 <xEventGroupWaitBits+0xd6>
     97e:	8c 85       	ldd	r24, Y+12	; 0x0c
     980:	9d 85       	ldd	r25, Y+13	; 0x0d
     982:	ae 85       	ldd	r26, Y+14	; 0x0e
     984:	bf 85       	ldd	r27, Y+15	; 0x0f
     986:	89 83       	std	Y+1, r24	; 0x01
     988:	9a 83       	std	Y+2, r25	; 0x02
     98a:	ab 83       	std	Y+3, r26	; 0x03
     98c:	bc 83       	std	Y+4, r27	; 0x04
     98e:	1a 8e       	std	Y+26, r1	; 0x1a
     990:	1b 8e       	std	Y+27, r1	; 0x1b
     992:	1c 8e       	std	Y+28, r1	; 0x1c
     994:	1d 8e       	std	Y+29, r1	; 0x1d
     996:	88 8d       	ldd	r24, Y+24	; 0x18
     998:	88 23       	and	r24, r24
     99a:	09 f4       	brne	.+2      	; 0x99e <xEventGroupWaitBits+0xa0>
     99c:	65 c0       	rjmp	.+202    	; 0xa68 <xEventGroupWaitBits+0x16a>
     99e:	89 85       	ldd	r24, Y+9	; 0x09
     9a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     9a2:	fc 01       	movw	r30, r24
     9a4:	20 81       	ld	r18, Z
     9a6:	31 81       	ldd	r19, Z+1	; 0x01
     9a8:	42 81       	ldd	r20, Z+2	; 0x02
     9aa:	53 81       	ldd	r21, Z+3	; 0x03
     9ac:	8c 89       	ldd	r24, Y+20	; 0x14
     9ae:	9d 89       	ldd	r25, Y+21	; 0x15
     9b0:	ae 89       	ldd	r26, Y+22	; 0x16
     9b2:	bf 89       	ldd	r27, Y+23	; 0x17
     9b4:	80 95       	com	r24
     9b6:	90 95       	com	r25
     9b8:	a0 95       	com	r26
     9ba:	b0 95       	com	r27
     9bc:	82 23       	and	r24, r18
     9be:	93 23       	and	r25, r19
     9c0:	a4 23       	and	r26, r20
     9c2:	b5 23       	and	r27, r21
     9c4:	29 85       	ldd	r18, Y+9	; 0x09
     9c6:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c8:	f9 01       	movw	r30, r18
     9ca:	80 83       	st	Z, r24
     9cc:	91 83       	std	Z+1, r25	; 0x01
     9ce:	a2 83       	std	Z+2, r26	; 0x02
     9d0:	b3 83       	std	Z+3, r27	; 0x03
     9d2:	4a c0       	rjmp	.+148    	; 0xa68 <xEventGroupWaitBits+0x16a>
     9d4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9d6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9d8:	ac 8d       	ldd	r26, Y+28	; 0x1c
     9da:	bd 8d       	ldd	r27, Y+29	; 0x1d
     9dc:	89 2b       	or	r24, r25
     9de:	8a 2b       	or	r24, r26
     9e0:	8b 2b       	or	r24, r27
     9e2:	59 f4       	brne	.+22     	; 0x9fa <xEventGroupWaitBits+0xfc>
     9e4:	8c 85       	ldd	r24, Y+12	; 0x0c
     9e6:	9d 85       	ldd	r25, Y+13	; 0x0d
     9e8:	ae 85       	ldd	r26, Y+14	; 0x0e
     9ea:	bf 85       	ldd	r27, Y+15	; 0x0f
     9ec:	89 83       	std	Y+1, r24	; 0x01
     9ee:	9a 83       	std	Y+2, r25	; 0x02
     9f0:	ab 83       	std	Y+3, r26	; 0x03
     9f2:	bc 83       	std	Y+4, r27	; 0x04
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	8b 87       	std	Y+11, r24	; 0x0b
     9f8:	37 c0       	rjmp	.+110    	; 0xa68 <xEventGroupWaitBits+0x16a>
     9fa:	88 8d       	ldd	r24, Y+24	; 0x18
     9fc:	88 23       	and	r24, r24
     9fe:	49 f0       	breq	.+18     	; 0xa12 <xEventGroupWaitBits+0x114>
     a00:	8d 81       	ldd	r24, Y+5	; 0x05
     a02:	9e 81       	ldd	r25, Y+6	; 0x06
     a04:	af 81       	ldd	r26, Y+7	; 0x07
     a06:	b8 85       	ldd	r27, Y+8	; 0x08
     a08:	b1 60       	ori	r27, 0x01	; 1
     a0a:	8d 83       	std	Y+5, r24	; 0x05
     a0c:	9e 83       	std	Y+6, r25	; 0x06
     a0e:	af 83       	std	Y+7, r26	; 0x07
     a10:	b8 87       	std	Y+8, r27	; 0x08
     a12:	89 8d       	ldd	r24, Y+25	; 0x19
     a14:	88 23       	and	r24, r24
     a16:	49 f0       	breq	.+18     	; 0xa2a <xEventGroupWaitBits+0x12c>
     a18:	8d 81       	ldd	r24, Y+5	; 0x05
     a1a:	9e 81       	ldd	r25, Y+6	; 0x06
     a1c:	af 81       	ldd	r26, Y+7	; 0x07
     a1e:	b8 85       	ldd	r27, Y+8	; 0x08
     a20:	b4 60       	ori	r27, 0x04	; 4
     a22:	8d 83       	std	Y+5, r24	; 0x05
     a24:	9e 83       	std	Y+6, r25	; 0x06
     a26:	af 83       	std	Y+7, r26	; 0x07
     a28:	b8 87       	std	Y+8, r27	; 0x08
     a2a:	2c 89       	ldd	r18, Y+20	; 0x14
     a2c:	3d 89       	ldd	r19, Y+21	; 0x15
     a2e:	4e 89       	ldd	r20, Y+22	; 0x16
     a30:	5f 89       	ldd	r21, Y+23	; 0x17
     a32:	8d 81       	ldd	r24, Y+5	; 0x05
     a34:	9e 81       	ldd	r25, Y+6	; 0x06
     a36:	af 81       	ldd	r26, Y+7	; 0x07
     a38:	b8 85       	ldd	r27, Y+8	; 0x08
     a3a:	82 2b       	or	r24, r18
     a3c:	93 2b       	or	r25, r19
     a3e:	a4 2b       	or	r26, r20
     a40:	b5 2b       	or	r27, r21
     a42:	29 85       	ldd	r18, Y+9	; 0x09
     a44:	3a 85       	ldd	r19, Y+10	; 0x0a
     a46:	f9 01       	movw	r30, r18
     a48:	34 96       	adiw	r30, 0x04	; 4
     a4a:	2a 8d       	ldd	r18, Y+26	; 0x1a
     a4c:	3b 8d       	ldd	r19, Y+27	; 0x1b
     a4e:	4c 8d       	ldd	r20, Y+28	; 0x1c
     a50:	5d 8d       	ldd	r21, Y+29	; 0x1d
     a52:	89 01       	movw	r16, r18
     a54:	9a 01       	movw	r18, r20
     a56:	ac 01       	movw	r20, r24
     a58:	bd 01       	movw	r22, r26
     a5a:	cf 01       	movw	r24, r30
     a5c:	0e 94 13 18 	call	0x3026	; 0x3026 <vTaskPlaceOnUnorderedEventList>
     a60:	19 82       	std	Y+1, r1	; 0x01
     a62:	1a 82       	std	Y+2, r1	; 0x02
     a64:	1b 82       	std	Y+3, r1	; 0x03
     a66:	1c 82       	std	Y+4, r1	; 0x04
     a68:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
     a6c:	89 8b       	std	Y+17, r24	; 0x11
     a6e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a70:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a72:	ac 8d       	ldd	r26, Y+28	; 0x1c
     a74:	bd 8d       	ldd	r27, Y+29	; 0x1d
     a76:	89 2b       	or	r24, r25
     a78:	8a 2b       	or	r24, r26
     a7a:	8b 2b       	or	r24, r27
     a7c:	09 f4       	brne	.+2      	; 0xa80 <xEventGroupWaitBits+0x182>
     a7e:	65 c0       	rjmp	.+202    	; 0xb4a <xEventGroupWaitBits+0x24c>
     a80:	89 89       	ldd	r24, Y+17	; 0x11
     a82:	88 23       	and	r24, r24
     a84:	11 f4       	brne	.+4      	; 0xa8a <xEventGroupWaitBits+0x18c>
     a86:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
     a8a:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <uxTaskResetEventItemValue>
     a8e:	dc 01       	movw	r26, r24
     a90:	cb 01       	movw	r24, r22
     a92:	89 83       	std	Y+1, r24	; 0x01
     a94:	9a 83       	std	Y+2, r25	; 0x02
     a96:	ab 83       	std	Y+3, r26	; 0x03
     a98:	bc 83       	std	Y+4, r27	; 0x04
     a9a:	89 81       	ldd	r24, Y+1	; 0x01
     a9c:	9a 81       	ldd	r25, Y+2	; 0x02
     a9e:	ab 81       	ldd	r26, Y+3	; 0x03
     aa0:	bc 81       	ldd	r27, Y+4	; 0x04
     aa2:	88 27       	eor	r24, r24
     aa4:	99 27       	eor	r25, r25
     aa6:	aa 27       	eor	r26, r26
     aa8:	b2 70       	andi	r27, 0x02	; 2
     aaa:	89 2b       	or	r24, r25
     aac:	8a 2b       	or	r24, r26
     aae:	8b 2b       	or	r24, r27
     ab0:	09 f0       	breq	.+2      	; 0xab4 <xEventGroupWaitBits+0x1b6>
     ab2:	42 c0       	rjmp	.+132    	; 0xb38 <xEventGroupWaitBits+0x23a>
     ab4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ab8:	ff 93       	push	r31
     aba:	f8 7f       	andi	r31, 0xF8	; 248
     abc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ac0:	89 85       	ldd	r24, Y+9	; 0x09
     ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ac4:	fc 01       	movw	r30, r24
     ac6:	80 81       	ld	r24, Z
     ac8:	91 81       	ldd	r25, Z+1	; 0x01
     aca:	a2 81       	ldd	r26, Z+2	; 0x02
     acc:	b3 81       	ldd	r27, Z+3	; 0x03
     ace:	89 83       	std	Y+1, r24	; 0x01
     ad0:	9a 83       	std	Y+2, r25	; 0x02
     ad2:	ab 83       	std	Y+3, r26	; 0x03
     ad4:	bc 83       	std	Y+4, r27	; 0x04
     ad6:	2c 89       	ldd	r18, Y+20	; 0x14
     ad8:	3d 89       	ldd	r19, Y+21	; 0x15
     ada:	4e 89       	ldd	r20, Y+22	; 0x16
     adc:	5f 89       	ldd	r21, Y+23	; 0x17
     ade:	89 81       	ldd	r24, Y+1	; 0x01
     ae0:	9a 81       	ldd	r25, Y+2	; 0x02
     ae2:	ab 81       	ldd	r26, Y+3	; 0x03
     ae4:	bc 81       	ldd	r27, Y+4	; 0x04
     ae6:	09 8d       	ldd	r16, Y+25	; 0x19
     ae8:	bc 01       	movw	r22, r24
     aea:	cd 01       	movw	r24, r26
     aec:	0e 94 28 07 	call	0xe50	; 0xe50 <prvTestWaitCondition>
     af0:	88 23       	and	r24, r24
     af2:	e9 f0       	breq	.+58     	; 0xb2e <xEventGroupWaitBits+0x230>
     af4:	88 8d       	ldd	r24, Y+24	; 0x18
     af6:	88 23       	and	r24, r24
     af8:	d1 f0       	breq	.+52     	; 0xb2e <xEventGroupWaitBits+0x230>
     afa:	89 85       	ldd	r24, Y+9	; 0x09
     afc:	9a 85       	ldd	r25, Y+10	; 0x0a
     afe:	fc 01       	movw	r30, r24
     b00:	20 81       	ld	r18, Z
     b02:	31 81       	ldd	r19, Z+1	; 0x01
     b04:	42 81       	ldd	r20, Z+2	; 0x02
     b06:	53 81       	ldd	r21, Z+3	; 0x03
     b08:	8c 89       	ldd	r24, Y+20	; 0x14
     b0a:	9d 89       	ldd	r25, Y+21	; 0x15
     b0c:	ae 89       	ldd	r26, Y+22	; 0x16
     b0e:	bf 89       	ldd	r27, Y+23	; 0x17
     b10:	80 95       	com	r24
     b12:	90 95       	com	r25
     b14:	a0 95       	com	r26
     b16:	b0 95       	com	r27
     b18:	82 23       	and	r24, r18
     b1a:	93 23       	and	r25, r19
     b1c:	a4 23       	and	r26, r20
     b1e:	b5 23       	and	r27, r21
     b20:	29 85       	ldd	r18, Y+9	; 0x09
     b22:	3a 85       	ldd	r19, Y+10	; 0x0a
     b24:	f9 01       	movw	r30, r18
     b26:	80 83       	st	Z, r24
     b28:	91 83       	std	Z+1, r25	; 0x01
     b2a:	a2 83       	std	Z+2, r26	; 0x02
     b2c:	b3 83       	std	Z+3, r27	; 0x03
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	8b 87       	std	Y+11, r24	; 0x0b
     b32:	ff 91       	pop	r31
     b34:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b38:	89 81       	ldd	r24, Y+1	; 0x01
     b3a:	9a 81       	ldd	r25, Y+2	; 0x02
     b3c:	ab 81       	ldd	r26, Y+3	; 0x03
     b3e:	bc 81       	ldd	r27, Y+4	; 0x04
     b40:	bb 27       	eor	r27, r27
     b42:	89 83       	std	Y+1, r24	; 0x01
     b44:	9a 83       	std	Y+2, r25	; 0x02
     b46:	ab 83       	std	Y+3, r26	; 0x03
     b48:	bc 83       	std	Y+4, r27	; 0x04
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	9a 81       	ldd	r25, Y+2	; 0x02
     b4e:	ab 81       	ldd	r26, Y+3	; 0x03
     b50:	bc 81       	ldd	r27, Y+4	; 0x04
     b52:	bc 01       	movw	r22, r24
     b54:	cd 01       	movw	r24, r26
     b56:	6d 96       	adiw	r28, 0x1d	; 29
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	ff 90       	pop	r15
     b66:	ef 90       	pop	r14
     b68:	df 90       	pop	r13
     b6a:	cf 90       	pop	r12
     b6c:	08 95       	ret

00000b6e <xEventGroupClearBits>:
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	2c 97       	sbiw	r28, 0x0c	; 12
     b78:	cd bf       	out	0x3d, r28	; 61
     b7a:	de bf       	out	0x3e, r29	; 62
     b7c:	8f 83       	std	Y+7, r24	; 0x07
     b7e:	98 87       	std	Y+8, r25	; 0x08
     b80:	49 87       	std	Y+9, r20	; 0x09
     b82:	5a 87       	std	Y+10, r21	; 0x0a
     b84:	6b 87       	std	Y+11, r22	; 0x0b
     b86:	7c 87       	std	Y+12, r23	; 0x0c
     b88:	8f 81       	ldd	r24, Y+7	; 0x07
     b8a:	98 85       	ldd	r25, Y+8	; 0x08
     b8c:	89 83       	std	Y+1, r24	; 0x01
     b8e:	9a 83       	std	Y+2, r25	; 0x02
     b90:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b94:	ff 93       	push	r31
     b96:	f8 7f       	andi	r31, 0xF8	; 248
     b98:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ba0:	fc 01       	movw	r30, r24
     ba2:	80 81       	ld	r24, Z
     ba4:	91 81       	ldd	r25, Z+1	; 0x01
     ba6:	a2 81       	ldd	r26, Z+2	; 0x02
     ba8:	b3 81       	ldd	r27, Z+3	; 0x03
     baa:	8b 83       	std	Y+3, r24	; 0x03
     bac:	9c 83       	std	Y+4, r25	; 0x04
     bae:	ad 83       	std	Y+5, r26	; 0x05
     bb0:	be 83       	std	Y+6, r27	; 0x06
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	9a 81       	ldd	r25, Y+2	; 0x02
     bb6:	fc 01       	movw	r30, r24
     bb8:	20 81       	ld	r18, Z
     bba:	31 81       	ldd	r19, Z+1	; 0x01
     bbc:	42 81       	ldd	r20, Z+2	; 0x02
     bbe:	53 81       	ldd	r21, Z+3	; 0x03
     bc0:	89 85       	ldd	r24, Y+9	; 0x09
     bc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc4:	ab 85       	ldd	r26, Y+11	; 0x0b
     bc6:	bc 85       	ldd	r27, Y+12	; 0x0c
     bc8:	80 95       	com	r24
     bca:	90 95       	com	r25
     bcc:	a0 95       	com	r26
     bce:	b0 95       	com	r27
     bd0:	82 23       	and	r24, r18
     bd2:	93 23       	and	r25, r19
     bd4:	a4 23       	and	r26, r20
     bd6:	b5 23       	and	r27, r21
     bd8:	29 81       	ldd	r18, Y+1	; 0x01
     bda:	3a 81       	ldd	r19, Y+2	; 0x02
     bdc:	f9 01       	movw	r30, r18
     bde:	80 83       	st	Z, r24
     be0:	91 83       	std	Z+1, r25	; 0x01
     be2:	a2 83       	std	Z+2, r26	; 0x02
     be4:	b3 83       	std	Z+3, r27	; 0x03
     be6:	ff 91       	pop	r31
     be8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     bec:	8b 81       	ldd	r24, Y+3	; 0x03
     bee:	9c 81       	ldd	r25, Y+4	; 0x04
     bf0:	ad 81       	ldd	r26, Y+5	; 0x05
     bf2:	be 81       	ldd	r27, Y+6	; 0x06
     bf4:	bc 01       	movw	r22, r24
     bf6:	cd 01       	movw	r24, r26
     bf8:	2c 96       	adiw	r28, 0x0c	; 12
     bfa:	cd bf       	out	0x3d, r28	; 61
     bfc:	de bf       	out	0x3e, r29	; 62
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	08 95       	ret

00000c04 <xEventGroupSetBits>:
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	6d 97       	sbiw	r28, 0x1d	; 29
     c0e:	cd bf       	out	0x3d, r28	; 61
     c10:	de bf       	out	0x3e, r29	; 62
     c12:	88 8f       	std	Y+24, r24	; 0x18
     c14:	99 8f       	std	Y+25, r25	; 0x19
     c16:	4a 8f       	std	Y+26, r20	; 0x1a
     c18:	5b 8f       	std	Y+27, r21	; 0x1b
     c1a:	6c 8f       	std	Y+28, r22	; 0x1c
     c1c:	7d 8f       	std	Y+29, r23	; 0x1d
     c1e:	1b 82       	std	Y+3, r1	; 0x03
     c20:	1c 82       	std	Y+4, r1	; 0x04
     c22:	1d 82       	std	Y+5, r1	; 0x05
     c24:	1e 82       	std	Y+6, r1	; 0x06
     c26:	88 8d       	ldd	r24, Y+24	; 0x18
     c28:	99 8d       	ldd	r25, Y+25	; 0x19
     c2a:	88 87       	std	Y+8, r24	; 0x08
     c2c:	99 87       	std	Y+9, r25	; 0x09
     c2e:	1f 82       	std	Y+7, r1	; 0x07
     c30:	88 85       	ldd	r24, Y+8	; 0x08
     c32:	99 85       	ldd	r25, Y+9	; 0x09
     c34:	04 96       	adiw	r24, 0x04	; 4
     c36:	8a 87       	std	Y+10, r24	; 0x0a
     c38:	9b 87       	std	Y+11, r25	; 0x0b
     c3a:	8a 85       	ldd	r24, Y+10	; 0x0a
     c3c:	9b 85       	ldd	r25, Y+11	; 0x0b
     c3e:	03 96       	adiw	r24, 0x03	; 3
     c40:	8c 87       	std	Y+12, r24	; 0x0c
     c42:	9d 87       	std	Y+13, r25	; 0x0d
     c44:	0e 94 40 15 	call	0x2a80	; 0x2a80 <vTaskSuspendAll>
     c48:	8a 85       	ldd	r24, Y+10	; 0x0a
     c4a:	9b 85       	ldd	r25, Y+11	; 0x0b
     c4c:	fc 01       	movw	r30, r24
     c4e:	87 81       	ldd	r24, Z+7	; 0x07
     c50:	90 85       	ldd	r25, Z+8	; 0x08
     c52:	89 83       	std	Y+1, r24	; 0x01
     c54:	9a 83       	std	Y+2, r25	; 0x02
     c56:	88 85       	ldd	r24, Y+8	; 0x08
     c58:	99 85       	ldd	r25, Y+9	; 0x09
     c5a:	fc 01       	movw	r30, r24
     c5c:	20 81       	ld	r18, Z
     c5e:	31 81       	ldd	r19, Z+1	; 0x01
     c60:	42 81       	ldd	r20, Z+2	; 0x02
     c62:	53 81       	ldd	r21, Z+3	; 0x03
     c64:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c66:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c68:	ac 8d       	ldd	r26, Y+28	; 0x1c
     c6a:	bd 8d       	ldd	r27, Y+29	; 0x1d
     c6c:	82 2b       	or	r24, r18
     c6e:	93 2b       	or	r25, r19
     c70:	a4 2b       	or	r26, r20
     c72:	b5 2b       	or	r27, r21
     c74:	28 85       	ldd	r18, Y+8	; 0x08
     c76:	39 85       	ldd	r19, Y+9	; 0x09
     c78:	f9 01       	movw	r30, r18
     c7a:	80 83       	st	Z, r24
     c7c:	91 83       	std	Z+1, r25	; 0x01
     c7e:	a2 83       	std	Z+2, r26	; 0x02
     c80:	b3 83       	std	Z+3, r27	; 0x03
     c82:	95 c0       	rjmp	.+298    	; 0xdae <xEventGroupSetBits+0x1aa>
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	9a 81       	ldd	r25, Y+2	; 0x02
     c88:	fc 01       	movw	r30, r24
     c8a:	84 81       	ldd	r24, Z+4	; 0x04
     c8c:	95 81       	ldd	r25, Z+5	; 0x05
     c8e:	8e 87       	std	Y+14, r24	; 0x0e
     c90:	9f 87       	std	Y+15, r25	; 0x0f
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	9a 81       	ldd	r25, Y+2	; 0x02
     c96:	fc 01       	movw	r30, r24
     c98:	80 81       	ld	r24, Z
     c9a:	91 81       	ldd	r25, Z+1	; 0x01
     c9c:	a2 81       	ldd	r26, Z+2	; 0x02
     c9e:	b3 81       	ldd	r27, Z+3	; 0x03
     ca0:	88 8b       	std	Y+16, r24	; 0x10
     ca2:	99 8b       	std	Y+17, r25	; 0x11
     ca4:	aa 8b       	std	Y+18, r26	; 0x12
     ca6:	bb 8b       	std	Y+19, r27	; 0x13
     ca8:	1f 82       	std	Y+7, r1	; 0x07
     caa:	88 89       	ldd	r24, Y+16	; 0x10
     cac:	99 89       	ldd	r25, Y+17	; 0x11
     cae:	aa 89       	ldd	r26, Y+18	; 0x12
     cb0:	bb 89       	ldd	r27, Y+19	; 0x13
     cb2:	88 27       	eor	r24, r24
     cb4:	99 27       	eor	r25, r25
     cb6:	aa 27       	eor	r26, r26
     cb8:	8c 8b       	std	Y+20, r24	; 0x14
     cba:	9d 8b       	std	Y+21, r25	; 0x15
     cbc:	ae 8b       	std	Y+22, r26	; 0x16
     cbe:	bf 8b       	std	Y+23, r27	; 0x17
     cc0:	88 89       	ldd	r24, Y+16	; 0x10
     cc2:	99 89       	ldd	r25, Y+17	; 0x11
     cc4:	aa 89       	ldd	r26, Y+18	; 0x12
     cc6:	bb 89       	ldd	r27, Y+19	; 0x13
     cc8:	bb 27       	eor	r27, r27
     cca:	88 8b       	std	Y+16, r24	; 0x10
     ccc:	99 8b       	std	Y+17, r25	; 0x11
     cce:	aa 8b       	std	Y+18, r26	; 0x12
     cd0:	bb 8b       	std	Y+19, r27	; 0x13
     cd2:	8c 89       	ldd	r24, Y+20	; 0x14
     cd4:	9d 89       	ldd	r25, Y+21	; 0x15
     cd6:	ae 89       	ldd	r26, Y+22	; 0x16
     cd8:	bf 89       	ldd	r27, Y+23	; 0x17
     cda:	88 27       	eor	r24, r24
     cdc:	99 27       	eor	r25, r25
     cde:	aa 27       	eor	r26, r26
     ce0:	b4 70       	andi	r27, 0x04	; 4
     ce2:	89 2b       	or	r24, r25
     ce4:	8a 2b       	or	r24, r26
     ce6:	8b 2b       	or	r24, r27
     ce8:	b1 f4       	brne	.+44     	; 0xd16 <xEventGroupSetBits+0x112>
     cea:	88 85       	ldd	r24, Y+8	; 0x08
     cec:	99 85       	ldd	r25, Y+9	; 0x09
     cee:	fc 01       	movw	r30, r24
     cf0:	20 81       	ld	r18, Z
     cf2:	31 81       	ldd	r19, Z+1	; 0x01
     cf4:	42 81       	ldd	r20, Z+2	; 0x02
     cf6:	53 81       	ldd	r21, Z+3	; 0x03
     cf8:	88 89       	ldd	r24, Y+16	; 0x10
     cfa:	99 89       	ldd	r25, Y+17	; 0x11
     cfc:	aa 89       	ldd	r26, Y+18	; 0x12
     cfe:	bb 89       	ldd	r27, Y+19	; 0x13
     d00:	82 23       	and	r24, r18
     d02:	93 23       	and	r25, r19
     d04:	a4 23       	and	r26, r20
     d06:	b5 23       	and	r27, r21
     d08:	89 2b       	or	r24, r25
     d0a:	8a 2b       	or	r24, r26
     d0c:	8b 2b       	or	r24, r27
     d0e:	e9 f0       	breq	.+58     	; 0xd4a <xEventGroupSetBits+0x146>
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	8f 83       	std	Y+7, r24	; 0x07
     d14:	1a c0       	rjmp	.+52     	; 0xd4a <xEventGroupSetBits+0x146>
     d16:	88 85       	ldd	r24, Y+8	; 0x08
     d18:	99 85       	ldd	r25, Y+9	; 0x09
     d1a:	fc 01       	movw	r30, r24
     d1c:	20 81       	ld	r18, Z
     d1e:	31 81       	ldd	r19, Z+1	; 0x01
     d20:	42 81       	ldd	r20, Z+2	; 0x02
     d22:	53 81       	ldd	r21, Z+3	; 0x03
     d24:	88 89       	ldd	r24, Y+16	; 0x10
     d26:	99 89       	ldd	r25, Y+17	; 0x11
     d28:	aa 89       	ldd	r26, Y+18	; 0x12
     d2a:	bb 89       	ldd	r27, Y+19	; 0x13
     d2c:	28 23       	and	r18, r24
     d2e:	39 23       	and	r19, r25
     d30:	4a 23       	and	r20, r26
     d32:	5b 23       	and	r21, r27
     d34:	88 89       	ldd	r24, Y+16	; 0x10
     d36:	99 89       	ldd	r25, Y+17	; 0x11
     d38:	aa 89       	ldd	r26, Y+18	; 0x12
     d3a:	bb 89       	ldd	r27, Y+19	; 0x13
     d3c:	28 17       	cp	r18, r24
     d3e:	39 07       	cpc	r19, r25
     d40:	4a 07       	cpc	r20, r26
     d42:	5b 07       	cpc	r21, r27
     d44:	11 f4       	brne	.+4      	; 0xd4a <xEventGroupSetBits+0x146>
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	8f 83       	std	Y+7, r24	; 0x07
     d4a:	8f 81       	ldd	r24, Y+7	; 0x07
     d4c:	88 23       	and	r24, r24
     d4e:	59 f1       	breq	.+86     	; 0xda6 <xEventGroupSetBits+0x1a2>
     d50:	8c 89       	ldd	r24, Y+20	; 0x14
     d52:	9d 89       	ldd	r25, Y+21	; 0x15
     d54:	ae 89       	ldd	r26, Y+22	; 0x16
     d56:	bf 89       	ldd	r27, Y+23	; 0x17
     d58:	88 27       	eor	r24, r24
     d5a:	99 27       	eor	r25, r25
     d5c:	aa 27       	eor	r26, r26
     d5e:	b1 70       	andi	r27, 0x01	; 1
     d60:	89 2b       	or	r24, r25
     d62:	8a 2b       	or	r24, r26
     d64:	8b 2b       	or	r24, r27
     d66:	81 f0       	breq	.+32     	; 0xd88 <xEventGroupSetBits+0x184>
     d68:	2b 81       	ldd	r18, Y+3	; 0x03
     d6a:	3c 81       	ldd	r19, Y+4	; 0x04
     d6c:	4d 81       	ldd	r20, Y+5	; 0x05
     d6e:	5e 81       	ldd	r21, Y+6	; 0x06
     d70:	88 89       	ldd	r24, Y+16	; 0x10
     d72:	99 89       	ldd	r25, Y+17	; 0x11
     d74:	aa 89       	ldd	r26, Y+18	; 0x12
     d76:	bb 89       	ldd	r27, Y+19	; 0x13
     d78:	82 2b       	or	r24, r18
     d7a:	93 2b       	or	r25, r19
     d7c:	a4 2b       	or	r26, r20
     d7e:	b5 2b       	or	r27, r21
     d80:	8b 83       	std	Y+3, r24	; 0x03
     d82:	9c 83       	std	Y+4, r25	; 0x04
     d84:	ad 83       	std	Y+5, r26	; 0x05
     d86:	be 83       	std	Y+6, r27	; 0x06
     d88:	88 85       	ldd	r24, Y+8	; 0x08
     d8a:	99 85       	ldd	r25, Y+9	; 0x09
     d8c:	fc 01       	movw	r30, r24
     d8e:	80 81       	ld	r24, Z
     d90:	91 81       	ldd	r25, Z+1	; 0x01
     d92:	a2 81       	ldd	r26, Z+2	; 0x02
     d94:	b3 81       	ldd	r27, Z+3	; 0x03
     d96:	b2 60       	ori	r27, 0x02	; 2
     d98:	29 81       	ldd	r18, Y+1	; 0x01
     d9a:	3a 81       	ldd	r19, Y+2	; 0x02
     d9c:	ac 01       	movw	r20, r24
     d9e:	bd 01       	movw	r22, r26
     da0:	c9 01       	movw	r24, r18
     da2:	0e 94 ee 18 	call	0x31dc	; 0x31dc <vTaskRemoveFromUnorderedEventList>
     da6:	8e 85       	ldd	r24, Y+14	; 0x0e
     da8:	9f 85       	ldd	r25, Y+15	; 0x0f
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	9a 83       	std	Y+2, r25	; 0x02
     dae:	29 81       	ldd	r18, Y+1	; 0x01
     db0:	3a 81       	ldd	r19, Y+2	; 0x02
     db2:	8c 85       	ldd	r24, Y+12	; 0x0c
     db4:	9d 85       	ldd	r25, Y+13	; 0x0d
     db6:	28 17       	cp	r18, r24
     db8:	39 07       	cpc	r19, r25
     dba:	09 f0       	breq	.+2      	; 0xdbe <xEventGroupSetBits+0x1ba>
     dbc:	63 cf       	rjmp	.-314    	; 0xc84 <xEventGroupSetBits+0x80>
     dbe:	88 85       	ldd	r24, Y+8	; 0x08
     dc0:	99 85       	ldd	r25, Y+9	; 0x09
     dc2:	fc 01       	movw	r30, r24
     dc4:	20 81       	ld	r18, Z
     dc6:	31 81       	ldd	r19, Z+1	; 0x01
     dc8:	42 81       	ldd	r20, Z+2	; 0x02
     dca:	53 81       	ldd	r21, Z+3	; 0x03
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	9c 81       	ldd	r25, Y+4	; 0x04
     dd0:	ad 81       	ldd	r26, Y+5	; 0x05
     dd2:	be 81       	ldd	r27, Y+6	; 0x06
     dd4:	80 95       	com	r24
     dd6:	90 95       	com	r25
     dd8:	a0 95       	com	r26
     dda:	b0 95       	com	r27
     ddc:	82 23       	and	r24, r18
     dde:	93 23       	and	r25, r19
     de0:	a4 23       	and	r26, r20
     de2:	b5 23       	and	r27, r21
     de4:	28 85       	ldd	r18, Y+8	; 0x08
     de6:	39 85       	ldd	r19, Y+9	; 0x09
     de8:	f9 01       	movw	r30, r18
     dea:	80 83       	st	Z, r24
     dec:	91 83       	std	Z+1, r25	; 0x01
     dee:	a2 83       	std	Z+2, r26	; 0x02
     df0:	b3 83       	std	Z+3, r27	; 0x03
     df2:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
     df6:	88 85       	ldd	r24, Y+8	; 0x08
     df8:	99 85       	ldd	r25, Y+9	; 0x09
     dfa:	fc 01       	movw	r30, r24
     dfc:	80 81       	ld	r24, Z
     dfe:	91 81       	ldd	r25, Z+1	; 0x01
     e00:	a2 81       	ldd	r26, Z+2	; 0x02
     e02:	b3 81       	ldd	r27, Z+3	; 0x03
     e04:	bc 01       	movw	r22, r24
     e06:	cd 01       	movw	r24, r26
     e08:	6d 96       	adiw	r28, 0x1d	; 29
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	08 95       	ret

00000e14 <vEventGroupSetBitsCallback>:
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	00 d0       	rcall	.+0      	; 0xe1a <vEventGroupSetBitsCallback+0x6>
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <vEventGroupSetBitsCallback+0x8>
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	89 83       	std	Y+1, r24	; 0x01
     e22:	9a 83       	std	Y+2, r25	; 0x02
     e24:	4b 83       	std	Y+3, r20	; 0x03
     e26:	5c 83       	std	Y+4, r21	; 0x04
     e28:	6d 83       	std	Y+5, r22	; 0x05
     e2a:	7e 83       	std	Y+6, r23	; 0x06
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	9c 81       	ldd	r25, Y+4	; 0x04
     e30:	ad 81       	ldd	r26, Y+5	; 0x05
     e32:	be 81       	ldd	r27, Y+6	; 0x06
     e34:	29 81       	ldd	r18, Y+1	; 0x01
     e36:	3a 81       	ldd	r19, Y+2	; 0x02
     e38:	ac 01       	movw	r20, r24
     e3a:	bd 01       	movw	r22, r26
     e3c:	c9 01       	movw	r24, r18
     e3e:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
     e42:	00 00       	nop
     e44:	26 96       	adiw	r28, 0x06	; 6
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	08 95       	ret

00000e50 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
     e50:	0f 93       	push	r16
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	2a 97       	sbiw	r28, 0x0a	; 10
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	6a 83       	std	Y+2, r22	; 0x02
     e62:	7b 83       	std	Y+3, r23	; 0x03
     e64:	8c 83       	std	Y+4, r24	; 0x04
     e66:	9d 83       	std	Y+5, r25	; 0x05
     e68:	2e 83       	std	Y+6, r18	; 0x06
     e6a:	3f 83       	std	Y+7, r19	; 0x07
     e6c:	48 87       	std	Y+8, r20	; 0x08
     e6e:	59 87       	std	Y+9, r21	; 0x09
     e70:	0a 87       	std	Y+10, r16	; 0x0a
BaseType_t xWaitConditionMet = pdFALSE;
     e72:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
     e74:	8a 85       	ldd	r24, Y+10	; 0x0a
     e76:	88 23       	and	r24, r24
     e78:	99 f4       	brne	.+38     	; 0xea0 <prvTestWaitCondition+0x50>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     e7a:	2a 81       	ldd	r18, Y+2	; 0x02
     e7c:	3b 81       	ldd	r19, Y+3	; 0x03
     e7e:	4c 81       	ldd	r20, Y+4	; 0x04
     e80:	5d 81       	ldd	r21, Y+5	; 0x05
     e82:	8e 81       	ldd	r24, Y+6	; 0x06
     e84:	9f 81       	ldd	r25, Y+7	; 0x07
     e86:	a8 85       	ldd	r26, Y+8	; 0x08
     e88:	b9 85       	ldd	r27, Y+9	; 0x09
     e8a:	82 23       	and	r24, r18
     e8c:	93 23       	and	r25, r19
     e8e:	a4 23       	and	r26, r20
     e90:	b5 23       	and	r27, r21
     e92:	89 2b       	or	r24, r25
     e94:	8a 2b       	or	r24, r26
     e96:	8b 2b       	or	r24, r27
     e98:	d1 f0       	breq	.+52     	; 0xece <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	89 83       	std	Y+1, r24	; 0x01
     e9e:	17 c0       	rjmp	.+46     	; 0xece <prvTestWaitCondition+0x7e>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     ea0:	2a 81       	ldd	r18, Y+2	; 0x02
     ea2:	3b 81       	ldd	r19, Y+3	; 0x03
     ea4:	4c 81       	ldd	r20, Y+4	; 0x04
     ea6:	5d 81       	ldd	r21, Y+5	; 0x05
     ea8:	8e 81       	ldd	r24, Y+6	; 0x06
     eaa:	9f 81       	ldd	r25, Y+7	; 0x07
     eac:	a8 85       	ldd	r26, Y+8	; 0x08
     eae:	b9 85       	ldd	r27, Y+9	; 0x09
     eb0:	28 23       	and	r18, r24
     eb2:	39 23       	and	r19, r25
     eb4:	4a 23       	and	r20, r26
     eb6:	5b 23       	and	r21, r27
     eb8:	8e 81       	ldd	r24, Y+6	; 0x06
     eba:	9f 81       	ldd	r25, Y+7	; 0x07
     ebc:	a8 85       	ldd	r26, Y+8	; 0x08
     ebe:	b9 85       	ldd	r27, Y+9	; 0x09
     ec0:	28 17       	cp	r18, r24
     ec2:	39 07       	cpc	r19, r25
     ec4:	4a 07       	cpc	r20, r26
     ec6:	5b 07       	cpc	r21, r27
     ec8:	11 f4       	brne	.+4      	; 0xece <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
     ece:	89 81       	ldd	r24, Y+1	; 0x01
}
     ed0:	2a 96       	adiw	r28, 0x0a	; 10
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	0f 91       	pop	r16
     edc:	08 95       	ret

00000ede <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	29 97       	sbiw	r28, 0x09	; 9
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	8a 83       	std	Y+2, r24	; 0x02
     ef2:	9b 83       	std	Y+3, r25	; 0x03
     ef4:	4c 83       	std	Y+4, r20	; 0x04
     ef6:	5d 83       	std	Y+5, r21	; 0x05
     ef8:	6e 83       	std	Y+6, r22	; 0x06
     efa:	7f 83       	std	Y+7, r23	; 0x07
     efc:	28 87       	std	Y+8, r18	; 0x08
     efe:	39 87       	std	Y+9, r19	; 0x09
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     f00:	28 85       	ldd	r18, Y+8	; 0x08
     f02:	39 85       	ldd	r19, Y+9	; 0x09
     f04:	8c 81       	ldd	r24, Y+4	; 0x04
     f06:	9d 81       	ldd	r25, Y+5	; 0x05
     f08:	ae 81       	ldd	r26, Y+6	; 0x06
     f0a:	bf 81       	ldd	r27, Y+7	; 0x07
     f0c:	6a 81       	ldd	r22, Y+2	; 0x02
     f0e:	7b 81       	ldd	r23, Y+3	; 0x03
     f10:	89 01       	movw	r16, r18
     f12:	9c 01       	movw	r18, r24
     f14:	ad 01       	movw	r20, r26
     f16:	8a e0       	ldi	r24, 0x0A	; 10
     f18:	97 e0       	ldi	r25, 0x07	; 7
     f1a:	0e 94 7d 20 	call	0x40fa	; 0x40fa <xTimerPendFunctionCallFromISR>
     f1e:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
     f20:	89 81       	ldd	r24, Y+1	; 0x01
	}
     f22:	29 96       	adiw	r28, 0x09	; 9
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	1f 91       	pop	r17
     f2e:	0f 91       	pop	r16
     f30:	08 95       	ret

00000f32 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	00 d0       	rcall	.+0      	; 0xf38 <pvPortMalloc+0x6>
     f38:	1f 92       	push	r1
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	8b 83       	std	Y+3, r24	; 0x03
     f40:	9c 83       	std	Y+4, r25	; 0x04
void *pvReturn = NULL; 
     f42:	19 82       	std	Y+1, r1	; 0x01
     f44:	1a 82       	std	Y+2, r1	; 0x02
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     f46:	0e 94 40 15 	call	0x2a80	; 0x2a80 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     f4a:	20 91 a0 34 	lds	r18, 0x34A0	; 0x8034a0 <xNextFreeByte>
     f4e:	30 91 a1 34 	lds	r19, 0x34A1	; 0x8034a1 <xNextFreeByte+0x1>
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	9c 81       	ldd	r25, Y+4	; 0x04
     f56:	82 0f       	add	r24, r18
     f58:	93 1f       	adc	r25, r19
     f5a:	88 38       	cpi	r24, 0x88	; 136
     f5c:	93 41       	sbci	r25, 0x13	; 19
     f5e:	18 f5       	brcc	.+70     	; 0xfa6 <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     f60:	20 91 a0 34 	lds	r18, 0x34A0	; 0x8034a0 <xNextFreeByte>
     f64:	30 91 a1 34 	lds	r19, 0x34A1	; 0x8034a1 <xNextFreeByte+0x1>
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	9c 81       	ldd	r25, Y+4	; 0x04
     f6c:	28 0f       	add	r18, r24
     f6e:	39 1f       	adc	r19, r25
     f70:	80 91 a0 34 	lds	r24, 0x34A0	; 0x8034a0 <xNextFreeByte>
     f74:	90 91 a1 34 	lds	r25, 0x34A1	; 0x8034a1 <xNextFreeByte+0x1>
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     f78:	82 17       	cp	r24, r18
     f7a:	93 07       	cpc	r25, r19
     f7c:	a0 f4       	brcc	.+40     	; 0xfa6 <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     f7e:	80 91 a0 34 	lds	r24, 0x34A0	; 0x8034a0 <xNextFreeByte>
     f82:	90 91 a1 34 	lds	r25, 0x34A1	; 0x8034a1 <xNextFreeByte+0x1>
     f86:	88 5e       	subi	r24, 0xE8	; 232
     f88:	9e 4d       	sbci	r25, 0xDE	; 222
     f8a:	89 83       	std	Y+1, r24	; 0x01
     f8c:	9a 83       	std	Y+2, r25	; 0x02
			xNextFreeByte += xWantedSize;			
     f8e:	20 91 a0 34 	lds	r18, 0x34A0	; 0x8034a0 <xNextFreeByte>
     f92:	30 91 a1 34 	lds	r19, 0x34A1	; 0x8034a1 <xNextFreeByte+0x1>
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	9c 81       	ldd	r25, Y+4	; 0x04
     f9a:	82 0f       	add	r24, r18
     f9c:	93 1f       	adc	r25, r19
     f9e:	80 93 a0 34 	sts	0x34A0, r24	; 0x8034a0 <xNextFreeByte>
     fa2:	90 93 a1 34 	sts	0x34A1, r25	; 0x8034a1 <xNextFreeByte+0x1>
		}	
	}
	xTaskResumeAll();
     fa6:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
}
     fae:	24 96       	adiw	r28, 0x04	; 4
     fb0:	cd bf       	out	0x3d, r28	; 61
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	08 95       	ret

00000fba <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	1f 92       	push	r1
     fc0:	1f 92       	push	r1
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	89 83       	std	Y+1, r24	; 0x01
     fc8:	9a 83       	std	Y+2, r25	; 0x02
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
	
	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
     fca:	00 00       	nop
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	08 95       	ret

00000fd6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	1f 92       	push	r1
     fdc:	1f 92       	push	r1
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	9a 83       	std	Y+2, r25	; 0x02
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	9a 81       	ldd	r25, Y+2	; 0x02
     fea:	9c 01       	movw	r18, r24
     fec:	2d 5f       	subi	r18, 0xFD	; 253
     fee:	3f 4f       	sbci	r19, 0xFF	; 255
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	9a 81       	ldd	r25, Y+2	; 0x02
     ff4:	fc 01       	movw	r30, r24
     ff6:	21 83       	std	Z+1, r18	; 0x01
     ff8:	32 83       	std	Z+2, r19	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     ffa:	29 81       	ldd	r18, Y+1	; 0x01
     ffc:	3a 81       	ldd	r19, Y+2	; 0x02
     ffe:	8f ef       	ldi	r24, 0xFF	; 255
    1000:	9f ef       	ldi	r25, 0xFF	; 255
    1002:	dc 01       	movw	r26, r24
    1004:	f9 01       	movw	r30, r18
    1006:	83 83       	std	Z+3, r24	; 0x03
    1008:	94 83       	std	Z+4, r25	; 0x04
    100a:	a5 83       	std	Z+5, r26	; 0x05
    100c:	b6 83       	std	Z+6, r27	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	9a 81       	ldd	r25, Y+2	; 0x02
    1012:	9c 01       	movw	r18, r24
    1014:	2d 5f       	subi	r18, 0xFD	; 253
    1016:	3f 4f       	sbci	r19, 0xFF	; 255
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	9a 81       	ldd	r25, Y+2	; 0x02
    101c:	fc 01       	movw	r30, r24
    101e:	27 83       	std	Z+7, r18	; 0x07
    1020:	30 87       	std	Z+8, r19	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	9a 81       	ldd	r25, Y+2	; 0x02
    1026:	9c 01       	movw	r18, r24
    1028:	2d 5f       	subi	r18, 0xFD	; 253
    102a:	3f 4f       	sbci	r19, 0xFF	; 255
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	9a 81       	ldd	r25, Y+2	; 0x02
    1030:	fc 01       	movw	r30, r24
    1032:	21 87       	std	Z+9, r18	; 0x09
    1034:	32 87       	std	Z+10, r19	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	9a 81       	ldd	r25, Y+2	; 0x02
    103a:	fc 01       	movw	r30, r24
    103c:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    103e:	00 00       	nop
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	08 95       	ret

0000104a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	1f 92       	push	r1
    1050:	1f 92       	push	r1
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	89 83       	std	Y+1, r24	; 0x01
    1058:	9a 83       	std	Y+2, r25	; 0x02
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	9a 81       	ldd	r25, Y+2	; 0x02
    105e:	fc 01       	movw	r30, r24
    1060:	12 86       	std	Z+10, r1	; 0x0a
    1062:	13 86       	std	Z+11, r1	; 0x0b

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    1064:	00 00       	nop
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	08 95       	ret

00001070 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	00 d0       	rcall	.+0      	; 0x1076 <vListInsertEnd+0x6>
    1076:	00 d0       	rcall	.+0      	; 0x1078 <vListInsertEnd+0x8>
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    107c:	8b 83       	std	Y+3, r24	; 0x03
    107e:	9c 83       	std	Y+4, r25	; 0x04
    1080:	6d 83       	std	Y+5, r22	; 0x05
    1082:	7e 83       	std	Y+6, r23	; 0x06
ListItem_t * const pxIndex = pxList->pxIndex;
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	9c 81       	ldd	r25, Y+4	; 0x04
    1088:	fc 01       	movw	r30, r24
    108a:	81 81       	ldd	r24, Z+1	; 0x01
    108c:	92 81       	ldd	r25, Z+2	; 0x02
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	9a 83       	std	Y+2, r25	; 0x02
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1092:	8d 81       	ldd	r24, Y+5	; 0x05
    1094:	9e 81       	ldd	r25, Y+6	; 0x06
    1096:	29 81       	ldd	r18, Y+1	; 0x01
    1098:	3a 81       	ldd	r19, Y+2	; 0x02
    109a:	fc 01       	movw	r30, r24
    109c:	24 83       	std	Z+4, r18	; 0x04
    109e:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	9a 81       	ldd	r25, Y+2	; 0x02
    10a4:	fc 01       	movw	r30, r24
    10a6:	26 81       	ldd	r18, Z+6	; 0x06
    10a8:	37 81       	ldd	r19, Z+7	; 0x07
    10aa:	8d 81       	ldd	r24, Y+5	; 0x05
    10ac:	9e 81       	ldd	r25, Y+6	; 0x06
    10ae:	fc 01       	movw	r30, r24
    10b0:	26 83       	std	Z+6, r18	; 0x06
    10b2:	37 83       	std	Z+7, r19	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	9a 81       	ldd	r25, Y+2	; 0x02
    10b8:	fc 01       	movw	r30, r24
    10ba:	86 81       	ldd	r24, Z+6	; 0x06
    10bc:	97 81       	ldd	r25, Z+7	; 0x07
    10be:	2d 81       	ldd	r18, Y+5	; 0x05
    10c0:	3e 81       	ldd	r19, Y+6	; 0x06
    10c2:	fc 01       	movw	r30, r24
    10c4:	24 83       	std	Z+4, r18	; 0x04
    10c6:	35 83       	std	Z+5, r19	; 0x05
	pxIndex->pxPrevious = pxNewListItem;
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	9a 81       	ldd	r25, Y+2	; 0x02
    10cc:	2d 81       	ldd	r18, Y+5	; 0x05
    10ce:	3e 81       	ldd	r19, Y+6	; 0x06
    10d0:	fc 01       	movw	r30, r24
    10d2:	26 83       	std	Z+6, r18	; 0x06
    10d4:	37 83       	std	Z+7, r19	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    10d6:	8d 81       	ldd	r24, Y+5	; 0x05
    10d8:	9e 81       	ldd	r25, Y+6	; 0x06
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	fc 01       	movw	r30, r24
    10e0:	22 87       	std	Z+10, r18	; 0x0a
    10e2:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	fc 01       	movw	r30, r24
    10ea:	80 81       	ld	r24, Z
    10ec:	21 e0       	ldi	r18, 0x01	; 1
    10ee:	28 0f       	add	r18, r24
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	fc 01       	movw	r30, r24
    10f6:	20 83       	st	Z, r18
}
    10f8:	00 00       	nop
    10fa:	26 96       	adiw	r28, 0x06	; 6
    10fc:	cd bf       	out	0x3d, r28	; 61
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	08 95       	ret

00001106 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	2a 97       	sbiw	r28, 0x0a	; 10
    1110:	cd bf       	out	0x3d, r28	; 61
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	8f 83       	std	Y+7, r24	; 0x07
    1116:	98 87       	std	Y+8, r25	; 0x08
    1118:	69 87       	std	Y+9, r22	; 0x09
    111a:	7a 87       	std	Y+10, r23	; 0x0a
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    111c:	89 85       	ldd	r24, Y+9	; 0x09
    111e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1120:	fc 01       	movw	r30, r24
    1122:	80 81       	ld	r24, Z
    1124:	91 81       	ldd	r25, Z+1	; 0x01
    1126:	a2 81       	ldd	r26, Z+2	; 0x02
    1128:	b3 81       	ldd	r27, Z+3	; 0x03
    112a:	8b 83       	std	Y+3, r24	; 0x03
    112c:	9c 83       	std	Y+4, r25	; 0x04
    112e:	ad 83       	std	Y+5, r26	; 0x05
    1130:	be 83       	std	Y+6, r27	; 0x06
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	9c 81       	ldd	r25, Y+4	; 0x04
    1136:	ad 81       	ldd	r26, Y+5	; 0x05
    1138:	be 81       	ldd	r27, Y+6	; 0x06
    113a:	8f 3f       	cpi	r24, 0xFF	; 255
    113c:	9f 4f       	sbci	r25, 0xFF	; 255
    113e:	af 4f       	sbci	r26, 0xFF	; 255
    1140:	bf 4f       	sbci	r27, 0xFF	; 255
    1142:	41 f4       	brne	.+16     	; 0x1154 <vListInsert+0x4e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1144:	8f 81       	ldd	r24, Y+7	; 0x07
    1146:	98 85       	ldd	r25, Y+8	; 0x08
    1148:	fc 01       	movw	r30, r24
    114a:	81 85       	ldd	r24, Z+9	; 0x09
    114c:	92 85       	ldd	r25, Z+10	; 0x0a
    114e:	89 83       	std	Y+1, r24	; 0x01
    1150:	9a 83       	std	Y+2, r25	; 0x02
    1152:	20 c0       	rjmp	.+64     	; 0x1194 <vListInsert+0x8e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1154:	8f 81       	ldd	r24, Y+7	; 0x07
    1156:	98 85       	ldd	r25, Y+8	; 0x08
    1158:	03 96       	adiw	r24, 0x03	; 3
    115a:	89 83       	std	Y+1, r24	; 0x01
    115c:	9a 83       	std	Y+2, r25	; 0x02
    115e:	07 c0       	rjmp	.+14     	; 0x116e <vListInsert+0x68>
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	9a 81       	ldd	r25, Y+2	; 0x02
    1164:	fc 01       	movw	r30, r24
    1166:	84 81       	ldd	r24, Z+4	; 0x04
    1168:	95 81       	ldd	r25, Z+5	; 0x05
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	9a 83       	std	Y+2, r25	; 0x02
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	9a 81       	ldd	r25, Y+2	; 0x02
    1172:	fc 01       	movw	r30, r24
    1174:	84 81       	ldd	r24, Z+4	; 0x04
    1176:	95 81       	ldd	r25, Z+5	; 0x05
    1178:	fc 01       	movw	r30, r24
    117a:	20 81       	ld	r18, Z
    117c:	31 81       	ldd	r19, Z+1	; 0x01
    117e:	42 81       	ldd	r20, Z+2	; 0x02
    1180:	53 81       	ldd	r21, Z+3	; 0x03
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	9c 81       	ldd	r25, Y+4	; 0x04
    1186:	ad 81       	ldd	r26, Y+5	; 0x05
    1188:	be 81       	ldd	r27, Y+6	; 0x06
    118a:	82 17       	cp	r24, r18
    118c:	93 07       	cpc	r25, r19
    118e:	a4 07       	cpc	r26, r20
    1190:	b5 07       	cpc	r27, r21
    1192:	30 f7       	brcc	.-52     	; 0x1160 <vListInsert+0x5a>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	9a 81       	ldd	r25, Y+2	; 0x02
    1198:	fc 01       	movw	r30, r24
    119a:	24 81       	ldd	r18, Z+4	; 0x04
    119c:	35 81       	ldd	r19, Z+5	; 0x05
    119e:	89 85       	ldd	r24, Y+9	; 0x09
    11a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a2:	fc 01       	movw	r30, r24
    11a4:	24 83       	std	Z+4, r18	; 0x04
    11a6:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    11a8:	89 85       	ldd	r24, Y+9	; 0x09
    11aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ac:	fc 01       	movw	r30, r24
    11ae:	84 81       	ldd	r24, Z+4	; 0x04
    11b0:	95 81       	ldd	r25, Z+5	; 0x05
    11b2:	29 85       	ldd	r18, Y+9	; 0x09
    11b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    11b6:	fc 01       	movw	r30, r24
    11b8:	26 83       	std	Z+6, r18	; 0x06
    11ba:	37 83       	std	Z+7, r19	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
    11bc:	89 85       	ldd	r24, Y+9	; 0x09
    11be:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c0:	29 81       	ldd	r18, Y+1	; 0x01
    11c2:	3a 81       	ldd	r19, Y+2	; 0x02
    11c4:	fc 01       	movw	r30, r24
    11c6:	26 83       	std	Z+6, r18	; 0x06
    11c8:	37 83       	std	Z+7, r19	; 0x07
	pxIterator->pxNext = pxNewListItem;
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	9a 81       	ldd	r25, Y+2	; 0x02
    11ce:	29 85       	ldd	r18, Y+9	; 0x09
    11d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    11d2:	fc 01       	movw	r30, r24
    11d4:	24 83       	std	Z+4, r18	; 0x04
    11d6:	35 83       	std	Z+5, r19	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    11d8:	89 85       	ldd	r24, Y+9	; 0x09
    11da:	9a 85       	ldd	r25, Y+10	; 0x0a
    11dc:	2f 81       	ldd	r18, Y+7	; 0x07
    11de:	38 85       	ldd	r19, Y+8	; 0x08
    11e0:	fc 01       	movw	r30, r24
    11e2:	22 87       	std	Z+10, r18	; 0x0a
    11e4:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
    11e6:	8f 81       	ldd	r24, Y+7	; 0x07
    11e8:	98 85       	ldd	r25, Y+8	; 0x08
    11ea:	fc 01       	movw	r30, r24
    11ec:	80 81       	ld	r24, Z
    11ee:	21 e0       	ldi	r18, 0x01	; 1
    11f0:	28 0f       	add	r18, r24
    11f2:	8f 81       	ldd	r24, Y+7	; 0x07
    11f4:	98 85       	ldd	r25, Y+8	; 0x08
    11f6:	fc 01       	movw	r30, r24
    11f8:	20 83       	st	Z, r18
}
    11fa:	00 00       	nop
    11fc:	2a 96       	adiw	r28, 0x0a	; 10
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	08 95       	ret

00001208 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	00 d0       	rcall	.+0      	; 0x120e <uxListRemove+0x6>
    120e:	1f 92       	push	r1
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	8b 83       	std	Y+3, r24	; 0x03
    1216:	9c 83       	std	Y+4, r25	; 0x04
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	fc 01       	movw	r30, r24
    121e:	82 85       	ldd	r24, Z+10	; 0x0a
    1220:	93 85       	ldd	r25, Z+11	; 0x0b
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	9a 83       	std	Y+2, r25	; 0x02

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	9c 81       	ldd	r25, Y+4	; 0x04
    122a:	fc 01       	movw	r30, r24
    122c:	84 81       	ldd	r24, Z+4	; 0x04
    122e:	95 81       	ldd	r25, Z+5	; 0x05
    1230:	2b 81       	ldd	r18, Y+3	; 0x03
    1232:	3c 81       	ldd	r19, Y+4	; 0x04
    1234:	f9 01       	movw	r30, r18
    1236:	26 81       	ldd	r18, Z+6	; 0x06
    1238:	37 81       	ldd	r19, Z+7	; 0x07
    123a:	fc 01       	movw	r30, r24
    123c:	26 83       	std	Z+6, r18	; 0x06
    123e:	37 83       	std	Z+7, r19	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	9c 81       	ldd	r25, Y+4	; 0x04
    1244:	fc 01       	movw	r30, r24
    1246:	86 81       	ldd	r24, Z+6	; 0x06
    1248:	97 81       	ldd	r25, Z+7	; 0x07
    124a:	2b 81       	ldd	r18, Y+3	; 0x03
    124c:	3c 81       	ldd	r19, Y+4	; 0x04
    124e:	f9 01       	movw	r30, r18
    1250:	24 81       	ldd	r18, Z+4	; 0x04
    1252:	35 81       	ldd	r19, Z+5	; 0x05
    1254:	fc 01       	movw	r30, r24
    1256:	24 83       	std	Z+4, r18	; 0x04
    1258:	35 83       	std	Z+5, r19	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	9a 81       	ldd	r25, Y+2	; 0x02
    125e:	fc 01       	movw	r30, r24
    1260:	21 81       	ldd	r18, Z+1	; 0x01
    1262:	32 81       	ldd	r19, Z+2	; 0x02
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	9c 81       	ldd	r25, Y+4	; 0x04
    1268:	28 17       	cp	r18, r24
    126a:	39 07       	cpc	r19, r25
    126c:	51 f4       	brne	.+20     	; 0x1282 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	9c 81       	ldd	r25, Y+4	; 0x04
    1272:	fc 01       	movw	r30, r24
    1274:	26 81       	ldd	r18, Z+6	; 0x06
    1276:	37 81       	ldd	r19, Z+7	; 0x07
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	9a 81       	ldd	r25, Y+2	; 0x02
    127c:	fc 01       	movw	r30, r24
    127e:	21 83       	std	Z+1, r18	; 0x01
    1280:	32 83       	std	Z+2, r19	; 0x02
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	9c 81       	ldd	r25, Y+4	; 0x04
    1286:	fc 01       	movw	r30, r24
    1288:	12 86       	std	Z+10, r1	; 0x0a
    128a:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	9a 81       	ldd	r25, Y+2	; 0x02
    1290:	fc 01       	movw	r30, r24
    1292:	80 81       	ld	r24, Z
    1294:	2f ef       	ldi	r18, 0xFF	; 255
    1296:	28 0f       	add	r18, r24
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	9a 81       	ldd	r25, Y+2	; 0x02
    129c:	fc 01       	movw	r30, r24
    129e:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	9a 81       	ldd	r25, Y+2	; 0x02
    12a4:	fc 01       	movw	r30, r24
    12a6:	80 81       	ld	r24, Z
}
    12a8:	24 96       	adiw	r28, 0x04	; 4
    12aa:	cd bf       	out	0x3d, r28	; 61
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	08 95       	ret

000012b4 <_portSetInterruptMaskFromIsr>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    12b4:	1f 93       	push	r17
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	80 ea       	ldi	r24, 0xA0	; 160
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	fc 01       	movw	r30, r24
    12c4:	12 81       	ldd	r17, Z+2	; 0x02
    12c6:	80 ea       	ldi	r24, 0xA0	; 160
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	20 ea       	ldi	r18, 0xA0	; 160
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	f9 01       	movw	r30, r18
    12d0:	22 81       	ldd	r18, Z+2	; 0x02
    12d2:	28 7f       	andi	r18, 0xF8	; 248
    12d4:	fc 01       	movw	r30, r24
    12d6:	22 83       	std	Z+2, r18	; 0x02
    12d8:	81 2f       	mov	r24, r17
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	1f 91       	pop	r17
    12e0:	08 95       	ret

000012e2 <pxPortInitialiseStack>:
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	2a 97       	sbiw	r28, 0x0a	; 10
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	8d 83       	std	Y+5, r24	; 0x05
    12f2:	9e 83       	std	Y+6, r25	; 0x06
    12f4:	6f 83       	std	Y+7, r22	; 0x07
    12f6:	78 87       	std	Y+8, r23	; 0x08
    12f8:	49 87       	std	Y+9, r20	; 0x09
    12fa:	5a 87       	std	Y+10, r21	; 0x0a
    12fc:	8d 81       	ldd	r24, Y+5	; 0x05
    12fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1300:	21 e1       	ldi	r18, 0x11	; 17
    1302:	fc 01       	movw	r30, r24
    1304:	20 83       	st	Z, r18
    1306:	8d 81       	ldd	r24, Y+5	; 0x05
    1308:	9e 81       	ldd	r25, Y+6	; 0x06
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	8d 83       	std	Y+5, r24	; 0x05
    130e:	9e 83       	std	Y+6, r25	; 0x06
    1310:	8d 81       	ldd	r24, Y+5	; 0x05
    1312:	9e 81       	ldd	r25, Y+6	; 0x06
    1314:	22 e2       	ldi	r18, 0x22	; 34
    1316:	fc 01       	movw	r30, r24
    1318:	20 83       	st	Z, r18
    131a:	8d 81       	ldd	r24, Y+5	; 0x05
    131c:	9e 81       	ldd	r25, Y+6	; 0x06
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	8d 83       	std	Y+5, r24	; 0x05
    1322:	9e 83       	std	Y+6, r25	; 0x06
    1324:	8d 81       	ldd	r24, Y+5	; 0x05
    1326:	9e 81       	ldd	r25, Y+6	; 0x06
    1328:	23 e3       	ldi	r18, 0x33	; 51
    132a:	fc 01       	movw	r30, r24
    132c:	20 83       	st	Z, r18
    132e:	8d 81       	ldd	r24, Y+5	; 0x05
    1330:	9e 81       	ldd	r25, Y+6	; 0x06
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	8d 83       	std	Y+5, r24	; 0x05
    1336:	9e 83       	std	Y+6, r25	; 0x06
    1338:	8f 81       	ldd	r24, Y+7	; 0x07
    133a:	98 85       	ldd	r25, Y+8	; 0x08
    133c:	cc 01       	movw	r24, r24
    133e:	a0 e0       	ldi	r26, 0x00	; 0
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	9a 83       	std	Y+2, r25	; 0x02
    1346:	ab 83       	std	Y+3, r26	; 0x03
    1348:	bc 83       	std	Y+4, r27	; 0x04
    134a:	29 81       	ldd	r18, Y+1	; 0x01
    134c:	8d 81       	ldd	r24, Y+5	; 0x05
    134e:	9e 81       	ldd	r25, Y+6	; 0x06
    1350:	fc 01       	movw	r30, r24
    1352:	20 83       	st	Z, r18
    1354:	8d 81       	ldd	r24, Y+5	; 0x05
    1356:	9e 81       	ldd	r25, Y+6	; 0x06
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	8d 83       	std	Y+5, r24	; 0x05
    135c:	9e 83       	std	Y+6, r25	; 0x06
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	ab 81       	ldd	r26, Y+3	; 0x03
    1364:	bc 81       	ldd	r27, Y+4	; 0x04
    1366:	89 2f       	mov	r24, r25
    1368:	9a 2f       	mov	r25, r26
    136a:	ab 2f       	mov	r26, r27
    136c:	bb 27       	eor	r27, r27
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	9a 83       	std	Y+2, r25	; 0x02
    1372:	ab 83       	std	Y+3, r26	; 0x03
    1374:	bc 83       	std	Y+4, r27	; 0x04
    1376:	29 81       	ldd	r18, Y+1	; 0x01
    1378:	8d 81       	ldd	r24, Y+5	; 0x05
    137a:	9e 81       	ldd	r25, Y+6	; 0x06
    137c:	fc 01       	movw	r30, r24
    137e:	20 83       	st	Z, r18
    1380:	8d 81       	ldd	r24, Y+5	; 0x05
    1382:	9e 81       	ldd	r25, Y+6	; 0x06
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	8d 83       	std	Y+5, r24	; 0x05
    1388:	9e 83       	std	Y+6, r25	; 0x06
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	9a 81       	ldd	r25, Y+2	; 0x02
    138e:	ab 81       	ldd	r26, Y+3	; 0x03
    1390:	bc 81       	ldd	r27, Y+4	; 0x04
    1392:	89 2f       	mov	r24, r25
    1394:	9a 2f       	mov	r25, r26
    1396:	ab 2f       	mov	r26, r27
    1398:	bb 27       	eor	r27, r27
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	9a 83       	std	Y+2, r25	; 0x02
    139e:	ab 83       	std	Y+3, r26	; 0x03
    13a0:	bc 83       	std	Y+4, r27	; 0x04
    13a2:	29 81       	ldd	r18, Y+1	; 0x01
    13a4:	8d 81       	ldd	r24, Y+5	; 0x05
    13a6:	9e 81       	ldd	r25, Y+6	; 0x06
    13a8:	fc 01       	movw	r30, r24
    13aa:	20 83       	st	Z, r18
    13ac:	8d 81       	ldd	r24, Y+5	; 0x05
    13ae:	9e 81       	ldd	r25, Y+6	; 0x06
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	8d 83       	std	Y+5, r24	; 0x05
    13b4:	9e 83       	std	Y+6, r25	; 0x06
    13b6:	8d 81       	ldd	r24, Y+5	; 0x05
    13b8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ba:	21 e3       	ldi	r18, 0x31	; 49
    13bc:	fc 01       	movw	r30, r24
    13be:	20 83       	st	Z, r18
    13c0:	8d 81       	ldd	r24, Y+5	; 0x05
    13c2:	9e 81       	ldd	r25, Y+6	; 0x06
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	8d 83       	std	Y+5, r24	; 0x05
    13c8:	9e 83       	std	Y+6, r25	; 0x06
    13ca:	8d 81       	ldd	r24, Y+5	; 0x05
    13cc:	9e 81       	ldd	r25, Y+6	; 0x06
    13ce:	20 e8       	ldi	r18, 0x80	; 128
    13d0:	fc 01       	movw	r30, r24
    13d2:	20 83       	st	Z, r18
    13d4:	8d 81       	ldd	r24, Y+5	; 0x05
    13d6:	9e 81       	ldd	r25, Y+6	; 0x06
    13d8:	01 97       	sbiw	r24, 0x01	; 1
    13da:	8d 83       	std	Y+5, r24	; 0x05
    13dc:	9e 83       	std	Y+6, r25	; 0x06
    13de:	8d 81       	ldd	r24, Y+5	; 0x05
    13e0:	9e 81       	ldd	r25, Y+6	; 0x06
    13e2:	27 e8       	ldi	r18, 0x87	; 135
    13e4:	fc 01       	movw	r30, r24
    13e6:	20 83       	st	Z, r18
    13e8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ea:	9e 81       	ldd	r25, Y+6	; 0x06
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	8d 83       	std	Y+5, r24	; 0x05
    13f0:	9e 83       	std	Y+6, r25	; 0x06
    13f2:	8d 81       	ldd	r24, Y+5	; 0x05
    13f4:	9e 81       	ldd	r25, Y+6	; 0x06
    13f6:	fc 01       	movw	r30, r24
    13f8:	10 82       	st	Z, r1
    13fa:	8d 81       	ldd	r24, Y+5	; 0x05
    13fc:	9e 81       	ldd	r25, Y+6	; 0x06
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	8d 83       	std	Y+5, r24	; 0x05
    1402:	9e 83       	std	Y+6, r25	; 0x06
    1404:	8d 81       	ldd	r24, Y+5	; 0x05
    1406:	9e 81       	ldd	r25, Y+6	; 0x06
    1408:	fc 01       	movw	r30, r24
    140a:	10 82       	st	Z, r1
    140c:	8d 81       	ldd	r24, Y+5	; 0x05
    140e:	9e 81       	ldd	r25, Y+6	; 0x06
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	8d 83       	std	Y+5, r24	; 0x05
    1414:	9e 83       	std	Y+6, r25	; 0x06
    1416:	8d 81       	ldd	r24, Y+5	; 0x05
    1418:	9e 81       	ldd	r25, Y+6	; 0x06
    141a:	22 e0       	ldi	r18, 0x02	; 2
    141c:	fc 01       	movw	r30, r24
    141e:	20 83       	st	Z, r18
    1420:	8d 81       	ldd	r24, Y+5	; 0x05
    1422:	9e 81       	ldd	r25, Y+6	; 0x06
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	8d 83       	std	Y+5, r24	; 0x05
    1428:	9e 83       	std	Y+6, r25	; 0x06
    142a:	8d 81       	ldd	r24, Y+5	; 0x05
    142c:	9e 81       	ldd	r25, Y+6	; 0x06
    142e:	23 e0       	ldi	r18, 0x03	; 3
    1430:	fc 01       	movw	r30, r24
    1432:	20 83       	st	Z, r18
    1434:	8d 81       	ldd	r24, Y+5	; 0x05
    1436:	9e 81       	ldd	r25, Y+6	; 0x06
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	8d 83       	std	Y+5, r24	; 0x05
    143c:	9e 83       	std	Y+6, r25	; 0x06
    143e:	8d 81       	ldd	r24, Y+5	; 0x05
    1440:	9e 81       	ldd	r25, Y+6	; 0x06
    1442:	24 e0       	ldi	r18, 0x04	; 4
    1444:	fc 01       	movw	r30, r24
    1446:	20 83       	st	Z, r18
    1448:	8d 81       	ldd	r24, Y+5	; 0x05
    144a:	9e 81       	ldd	r25, Y+6	; 0x06
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	8d 83       	std	Y+5, r24	; 0x05
    1450:	9e 83       	std	Y+6, r25	; 0x06
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	9e 81       	ldd	r25, Y+6	; 0x06
    1456:	25 e0       	ldi	r18, 0x05	; 5
    1458:	fc 01       	movw	r30, r24
    145a:	20 83       	st	Z, r18
    145c:	8d 81       	ldd	r24, Y+5	; 0x05
    145e:	9e 81       	ldd	r25, Y+6	; 0x06
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	8d 83       	std	Y+5, r24	; 0x05
    1464:	9e 83       	std	Y+6, r25	; 0x06
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	9e 81       	ldd	r25, Y+6	; 0x06
    146a:	26 e0       	ldi	r18, 0x06	; 6
    146c:	fc 01       	movw	r30, r24
    146e:	20 83       	st	Z, r18
    1470:	8d 81       	ldd	r24, Y+5	; 0x05
    1472:	9e 81       	ldd	r25, Y+6	; 0x06
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	8d 83       	std	Y+5, r24	; 0x05
    1478:	9e 83       	std	Y+6, r25	; 0x06
    147a:	8d 81       	ldd	r24, Y+5	; 0x05
    147c:	9e 81       	ldd	r25, Y+6	; 0x06
    147e:	27 e0       	ldi	r18, 0x07	; 7
    1480:	fc 01       	movw	r30, r24
    1482:	20 83       	st	Z, r18
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	9e 81       	ldd	r25, Y+6	; 0x06
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	8d 83       	std	Y+5, r24	; 0x05
    148c:	9e 83       	std	Y+6, r25	; 0x06
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
    1492:	28 e0       	ldi	r18, 0x08	; 8
    1494:	fc 01       	movw	r30, r24
    1496:	20 83       	st	Z, r18
    1498:	8d 81       	ldd	r24, Y+5	; 0x05
    149a:	9e 81       	ldd	r25, Y+6	; 0x06
    149c:	01 97       	sbiw	r24, 0x01	; 1
    149e:	8d 83       	std	Y+5, r24	; 0x05
    14a0:	9e 83       	std	Y+6, r25	; 0x06
    14a2:	8d 81       	ldd	r24, Y+5	; 0x05
    14a4:	9e 81       	ldd	r25, Y+6	; 0x06
    14a6:	29 e0       	ldi	r18, 0x09	; 9
    14a8:	fc 01       	movw	r30, r24
    14aa:	20 83       	st	Z, r18
    14ac:	8d 81       	ldd	r24, Y+5	; 0x05
    14ae:	9e 81       	ldd	r25, Y+6	; 0x06
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	8d 83       	std	Y+5, r24	; 0x05
    14b4:	9e 83       	std	Y+6, r25	; 0x06
    14b6:	8d 81       	ldd	r24, Y+5	; 0x05
    14b8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ba:	20 e1       	ldi	r18, 0x10	; 16
    14bc:	fc 01       	movw	r30, r24
    14be:	20 83       	st	Z, r18
    14c0:	8d 81       	ldd	r24, Y+5	; 0x05
    14c2:	9e 81       	ldd	r25, Y+6	; 0x06
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	8d 83       	std	Y+5, r24	; 0x05
    14c8:	9e 83       	std	Y+6, r25	; 0x06
    14ca:	8d 81       	ldd	r24, Y+5	; 0x05
    14cc:	9e 81       	ldd	r25, Y+6	; 0x06
    14ce:	21 e1       	ldi	r18, 0x11	; 17
    14d0:	fc 01       	movw	r30, r24
    14d2:	20 83       	st	Z, r18
    14d4:	8d 81       	ldd	r24, Y+5	; 0x05
    14d6:	9e 81       	ldd	r25, Y+6	; 0x06
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	8d 83       	std	Y+5, r24	; 0x05
    14dc:	9e 83       	std	Y+6, r25	; 0x06
    14de:	8d 81       	ldd	r24, Y+5	; 0x05
    14e0:	9e 81       	ldd	r25, Y+6	; 0x06
    14e2:	22 e1       	ldi	r18, 0x12	; 18
    14e4:	fc 01       	movw	r30, r24
    14e6:	20 83       	st	Z, r18
    14e8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ea:	9e 81       	ldd	r25, Y+6	; 0x06
    14ec:	01 97       	sbiw	r24, 0x01	; 1
    14ee:	8d 83       	std	Y+5, r24	; 0x05
    14f0:	9e 83       	std	Y+6, r25	; 0x06
    14f2:	8d 81       	ldd	r24, Y+5	; 0x05
    14f4:	9e 81       	ldd	r25, Y+6	; 0x06
    14f6:	23 e1       	ldi	r18, 0x13	; 19
    14f8:	fc 01       	movw	r30, r24
    14fa:	20 83       	st	Z, r18
    14fc:	8d 81       	ldd	r24, Y+5	; 0x05
    14fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	8d 83       	std	Y+5, r24	; 0x05
    1504:	9e 83       	std	Y+6, r25	; 0x06
    1506:	8d 81       	ldd	r24, Y+5	; 0x05
    1508:	9e 81       	ldd	r25, Y+6	; 0x06
    150a:	24 e1       	ldi	r18, 0x14	; 20
    150c:	fc 01       	movw	r30, r24
    150e:	20 83       	st	Z, r18
    1510:	8d 81       	ldd	r24, Y+5	; 0x05
    1512:	9e 81       	ldd	r25, Y+6	; 0x06
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	8d 83       	std	Y+5, r24	; 0x05
    1518:	9e 83       	std	Y+6, r25	; 0x06
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	9e 81       	ldd	r25, Y+6	; 0x06
    151e:	25 e1       	ldi	r18, 0x15	; 21
    1520:	fc 01       	movw	r30, r24
    1522:	20 83       	st	Z, r18
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	8d 83       	std	Y+5, r24	; 0x05
    152c:	9e 83       	std	Y+6, r25	; 0x06
    152e:	8d 81       	ldd	r24, Y+5	; 0x05
    1530:	9e 81       	ldd	r25, Y+6	; 0x06
    1532:	26 e1       	ldi	r18, 0x16	; 22
    1534:	fc 01       	movw	r30, r24
    1536:	20 83       	st	Z, r18
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
    153a:	9e 81       	ldd	r25, Y+6	; 0x06
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	8d 83       	std	Y+5, r24	; 0x05
    1540:	9e 83       	std	Y+6, r25	; 0x06
    1542:	8d 81       	ldd	r24, Y+5	; 0x05
    1544:	9e 81       	ldd	r25, Y+6	; 0x06
    1546:	27 e1       	ldi	r18, 0x17	; 23
    1548:	fc 01       	movw	r30, r24
    154a:	20 83       	st	Z, r18
    154c:	8d 81       	ldd	r24, Y+5	; 0x05
    154e:	9e 81       	ldd	r25, Y+6	; 0x06
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	8d 83       	std	Y+5, r24	; 0x05
    1554:	9e 83       	std	Y+6, r25	; 0x06
    1556:	8d 81       	ldd	r24, Y+5	; 0x05
    1558:	9e 81       	ldd	r25, Y+6	; 0x06
    155a:	28 e1       	ldi	r18, 0x18	; 24
    155c:	fc 01       	movw	r30, r24
    155e:	20 83       	st	Z, r18
    1560:	8d 81       	ldd	r24, Y+5	; 0x05
    1562:	9e 81       	ldd	r25, Y+6	; 0x06
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	8d 83       	std	Y+5, r24	; 0x05
    1568:	9e 83       	std	Y+6, r25	; 0x06
    156a:	8d 81       	ldd	r24, Y+5	; 0x05
    156c:	9e 81       	ldd	r25, Y+6	; 0x06
    156e:	29 e1       	ldi	r18, 0x19	; 25
    1570:	fc 01       	movw	r30, r24
    1572:	20 83       	st	Z, r18
    1574:	8d 81       	ldd	r24, Y+5	; 0x05
    1576:	9e 81       	ldd	r25, Y+6	; 0x06
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	8d 83       	std	Y+5, r24	; 0x05
    157c:	9e 83       	std	Y+6, r25	; 0x06
    157e:	8d 81       	ldd	r24, Y+5	; 0x05
    1580:	9e 81       	ldd	r25, Y+6	; 0x06
    1582:	20 e2       	ldi	r18, 0x20	; 32
    1584:	fc 01       	movw	r30, r24
    1586:	20 83       	st	Z, r18
    1588:	8d 81       	ldd	r24, Y+5	; 0x05
    158a:	9e 81       	ldd	r25, Y+6	; 0x06
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	8d 83       	std	Y+5, r24	; 0x05
    1590:	9e 83       	std	Y+6, r25	; 0x06
    1592:	8d 81       	ldd	r24, Y+5	; 0x05
    1594:	9e 81       	ldd	r25, Y+6	; 0x06
    1596:	21 e2       	ldi	r18, 0x21	; 33
    1598:	fc 01       	movw	r30, r24
    159a:	20 83       	st	Z, r18
    159c:	8d 81       	ldd	r24, Y+5	; 0x05
    159e:	9e 81       	ldd	r25, Y+6	; 0x06
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	8d 83       	std	Y+5, r24	; 0x05
    15a4:	9e 83       	std	Y+6, r25	; 0x06
    15a6:	8d 81       	ldd	r24, Y+5	; 0x05
    15a8:	9e 81       	ldd	r25, Y+6	; 0x06
    15aa:	22 e2       	ldi	r18, 0x22	; 34
    15ac:	fc 01       	movw	r30, r24
    15ae:	20 83       	st	Z, r18
    15b0:	8d 81       	ldd	r24, Y+5	; 0x05
    15b2:	9e 81       	ldd	r25, Y+6	; 0x06
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	8d 83       	std	Y+5, r24	; 0x05
    15b8:	9e 83       	std	Y+6, r25	; 0x06
    15ba:	8d 81       	ldd	r24, Y+5	; 0x05
    15bc:	9e 81       	ldd	r25, Y+6	; 0x06
    15be:	23 e2       	ldi	r18, 0x23	; 35
    15c0:	fc 01       	movw	r30, r24
    15c2:	20 83       	st	Z, r18
    15c4:	8d 81       	ldd	r24, Y+5	; 0x05
    15c6:	9e 81       	ldd	r25, Y+6	; 0x06
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	8d 83       	std	Y+5, r24	; 0x05
    15cc:	9e 83       	std	Y+6, r25	; 0x06
    15ce:	89 85       	ldd	r24, Y+9	; 0x09
    15d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d2:	cc 01       	movw	r24, r24
    15d4:	a0 e0       	ldi	r26, 0x00	; 0
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	89 83       	std	Y+1, r24	; 0x01
    15da:	9a 83       	std	Y+2, r25	; 0x02
    15dc:	ab 83       	std	Y+3, r26	; 0x03
    15de:	bc 83       	std	Y+4, r27	; 0x04
    15e0:	29 81       	ldd	r18, Y+1	; 0x01
    15e2:	8d 81       	ldd	r24, Y+5	; 0x05
    15e4:	9e 81       	ldd	r25, Y+6	; 0x06
    15e6:	fc 01       	movw	r30, r24
    15e8:	20 83       	st	Z, r18
    15ea:	8d 81       	ldd	r24, Y+5	; 0x05
    15ec:	9e 81       	ldd	r25, Y+6	; 0x06
    15ee:	01 97       	sbiw	r24, 0x01	; 1
    15f0:	8d 83       	std	Y+5, r24	; 0x05
    15f2:	9e 83       	std	Y+6, r25	; 0x06
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	9a 81       	ldd	r25, Y+2	; 0x02
    15f8:	ab 81       	ldd	r26, Y+3	; 0x03
    15fa:	bc 81       	ldd	r27, Y+4	; 0x04
    15fc:	89 2f       	mov	r24, r25
    15fe:	9a 2f       	mov	r25, r26
    1600:	ab 2f       	mov	r26, r27
    1602:	bb 27       	eor	r27, r27
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	9a 83       	std	Y+2, r25	; 0x02
    1608:	ab 83       	std	Y+3, r26	; 0x03
    160a:	bc 83       	std	Y+4, r27	; 0x04
    160c:	29 81       	ldd	r18, Y+1	; 0x01
    160e:	8d 81       	ldd	r24, Y+5	; 0x05
    1610:	9e 81       	ldd	r25, Y+6	; 0x06
    1612:	fc 01       	movw	r30, r24
    1614:	20 83       	st	Z, r18
    1616:	8d 81       	ldd	r24, Y+5	; 0x05
    1618:	9e 81       	ldd	r25, Y+6	; 0x06
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	8d 83       	std	Y+5, r24	; 0x05
    161e:	9e 83       	std	Y+6, r25	; 0x06
    1620:	8d 81       	ldd	r24, Y+5	; 0x05
    1622:	9e 81       	ldd	r25, Y+6	; 0x06
    1624:	26 e2       	ldi	r18, 0x26	; 38
    1626:	fc 01       	movw	r30, r24
    1628:	20 83       	st	Z, r18
    162a:	8d 81       	ldd	r24, Y+5	; 0x05
    162c:	9e 81       	ldd	r25, Y+6	; 0x06
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	8d 83       	std	Y+5, r24	; 0x05
    1632:	9e 83       	std	Y+6, r25	; 0x06
    1634:	8d 81       	ldd	r24, Y+5	; 0x05
    1636:	9e 81       	ldd	r25, Y+6	; 0x06
    1638:	27 e2       	ldi	r18, 0x27	; 39
    163a:	fc 01       	movw	r30, r24
    163c:	20 83       	st	Z, r18
    163e:	8d 81       	ldd	r24, Y+5	; 0x05
    1640:	9e 81       	ldd	r25, Y+6	; 0x06
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	8d 83       	std	Y+5, r24	; 0x05
    1646:	9e 83       	std	Y+6, r25	; 0x06
    1648:	8d 81       	ldd	r24, Y+5	; 0x05
    164a:	9e 81       	ldd	r25, Y+6	; 0x06
    164c:	28 e2       	ldi	r18, 0x28	; 40
    164e:	fc 01       	movw	r30, r24
    1650:	20 83       	st	Z, r18
    1652:	8d 81       	ldd	r24, Y+5	; 0x05
    1654:	9e 81       	ldd	r25, Y+6	; 0x06
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	8d 83       	std	Y+5, r24	; 0x05
    165a:	9e 83       	std	Y+6, r25	; 0x06
    165c:	8d 81       	ldd	r24, Y+5	; 0x05
    165e:	9e 81       	ldd	r25, Y+6	; 0x06
    1660:	29 e2       	ldi	r18, 0x29	; 41
    1662:	fc 01       	movw	r30, r24
    1664:	20 83       	st	Z, r18
    1666:	8d 81       	ldd	r24, Y+5	; 0x05
    1668:	9e 81       	ldd	r25, Y+6	; 0x06
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	8d 83       	std	Y+5, r24	; 0x05
    166e:	9e 83       	std	Y+6, r25	; 0x06
    1670:	8d 81       	ldd	r24, Y+5	; 0x05
    1672:	9e 81       	ldd	r25, Y+6	; 0x06
    1674:	20 e3       	ldi	r18, 0x30	; 48
    1676:	fc 01       	movw	r30, r24
    1678:	20 83       	st	Z, r18
    167a:	8d 81       	ldd	r24, Y+5	; 0x05
    167c:	9e 81       	ldd	r25, Y+6	; 0x06
    167e:	01 97       	sbiw	r24, 0x01	; 1
    1680:	8d 83       	std	Y+5, r24	; 0x05
    1682:	9e 83       	std	Y+6, r25	; 0x06
    1684:	8d 81       	ldd	r24, Y+5	; 0x05
    1686:	9e 81       	ldd	r25, Y+6	; 0x06
    1688:	2a 96       	adiw	r28, 0x0a	; 10
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	08 95       	ret

00001694 <xPortStartScheduler>:
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
    169c:	0e 94 91 0c 	call	0x1922	; 0x1922 <prvSetupTimerInterrupt>
    16a0:	a0 91 a2 34 	lds	r26, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    16a4:	b0 91 a3 34 	lds	r27, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    16a8:	0d 90       	ld	r0, X+
    16aa:	0d be       	out	0x3d, r0	; 61
    16ac:	0d 90       	ld	r0, X+
    16ae:	0e be       	out	0x3e, r0	; 62
    16b0:	ef 91       	pop	r30
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	bf 91       	pop	r27
    16b8:	af 91       	pop	r26
    16ba:	9f 91       	pop	r25
    16bc:	8f 91       	pop	r24
    16be:	7f 91       	pop	r23
    16c0:	6f 91       	pop	r22
    16c2:	5f 91       	pop	r21
    16c4:	4f 91       	pop	r20
    16c6:	3f 91       	pop	r19
    16c8:	2f 91       	pop	r18
    16ca:	1f 91       	pop	r17
    16cc:	0f 91       	pop	r16
    16ce:	ff 90       	pop	r15
    16d0:	ef 90       	pop	r14
    16d2:	df 90       	pop	r13
    16d4:	cf 90       	pop	r12
    16d6:	bf 90       	pop	r11
    16d8:	af 90       	pop	r10
    16da:	9f 90       	pop	r9
    16dc:	8f 90       	pop	r8
    16de:	7f 90       	pop	r7
    16e0:	6f 90       	pop	r6
    16e2:	5f 90       	pop	r5
    16e4:	4f 90       	pop	r4
    16e6:	3f 90       	pop	r3
    16e8:	2f 90       	pop	r2
    16ea:	1f 90       	pop	r1
    16ec:	0f 90       	pop	r0
    16ee:	ff 91       	pop	r31
    16f0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    16f4:	ff 91       	pop	r31
    16f6:	ff bf       	out	0x3f, r31	; 63
    16f8:	ff 91       	pop	r31
    16fa:	08 95       	ret
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	08 95       	ret

00001704 <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1704:	ff 93       	push	r31
    1706:	ff b7       	in	r31, 0x3f	; 63
    1708:	ff 93       	push	r31
    170a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    170e:	ff 93       	push	r31
    1710:	f8 7f       	andi	r31, 0xF8	; 248
    1712:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1716:	0f 92       	push	r0
    1718:	1f 92       	push	r1
    171a:	11 24       	eor	r1, r1
    171c:	2f 92       	push	r2
    171e:	3f 92       	push	r3
    1720:	4f 92       	push	r4
    1722:	5f 92       	push	r5
    1724:	6f 92       	push	r6
    1726:	7f 92       	push	r7
    1728:	8f 92       	push	r8
    172a:	9f 92       	push	r9
    172c:	af 92       	push	r10
    172e:	bf 92       	push	r11
    1730:	cf 92       	push	r12
    1732:	df 92       	push	r13
    1734:	ef 92       	push	r14
    1736:	ff 92       	push	r15
    1738:	0f 93       	push	r16
    173a:	1f 93       	push	r17
    173c:	2f 93       	push	r18
    173e:	3f 93       	push	r19
    1740:	4f 93       	push	r20
    1742:	5f 93       	push	r21
    1744:	6f 93       	push	r22
    1746:	7f 93       	push	r23
    1748:	8f 93       	push	r24
    174a:	9f 93       	push	r25
    174c:	af 93       	push	r26
    174e:	bf 93       	push	r27
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	ef 93       	push	r30
    1756:	a0 91 a2 34 	lds	r26, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    175a:	b0 91 a3 34 	lds	r27, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    175e:	0d b6       	in	r0, 0x3d	; 61
    1760:	0d 92       	st	X+, r0
    1762:	0e b6       	in	r0, 0x3e	; 62
    1764:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1766:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    176a:	a0 91 a2 34 	lds	r26, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    176e:	b0 91 a3 34 	lds	r27, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    1772:	0d 90       	ld	r0, X+
    1774:	0d be       	out	0x3d, r0	; 61
    1776:	0d 90       	ld	r0, X+
    1778:	0e be       	out	0x3e, r0	; 62
    177a:	ef 91       	pop	r30
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	bf 91       	pop	r27
    1782:	af 91       	pop	r26
    1784:	9f 91       	pop	r25
    1786:	8f 91       	pop	r24
    1788:	7f 91       	pop	r23
    178a:	6f 91       	pop	r22
    178c:	5f 91       	pop	r21
    178e:	4f 91       	pop	r20
    1790:	3f 91       	pop	r19
    1792:	2f 91       	pop	r18
    1794:	1f 91       	pop	r17
    1796:	0f 91       	pop	r16
    1798:	ff 90       	pop	r15
    179a:	ef 90       	pop	r14
    179c:	df 90       	pop	r13
    179e:	cf 90       	pop	r12
    17a0:	bf 90       	pop	r11
    17a2:	af 90       	pop	r10
    17a4:	9f 90       	pop	r9
    17a6:	8f 90       	pop	r8
    17a8:	7f 90       	pop	r7
    17aa:	6f 90       	pop	r6
    17ac:	5f 90       	pop	r5
    17ae:	4f 90       	pop	r4
    17b0:	3f 90       	pop	r3
    17b2:	2f 90       	pop	r2
    17b4:	1f 90       	pop	r1
    17b6:	0f 90       	pop	r0
    17b8:	ff 91       	pop	r31
    17ba:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    17be:	ff 91       	pop	r31
    17c0:	ff bf       	out	0x3f, r31	; 63
    17c2:	ff 91       	pop	r31
	asm volatile ( "ret" );
    17c4:	08 95       	ret
	...

000017c8 <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
    17c8:	1f 93       	push	r17
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	1f 92       	push	r1
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	89 83       	std	Y+1, r24	; 0x01
		intTaskSwitchPending |= xSwitchRequired;					
    17d6:	80 91 62 35 	lds	r24, 0x3562	; 0x803562 <intTaskSwitchPending>
    17da:	98 2f       	mov	r25, r24
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	89 2b       	or	r24, r25
    17e0:	80 93 62 35 	sts	0x3562, r24	; 0x803562 <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
    17e4:	80 ea       	ldi	r24, 0xA0	; 160
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	fc 01       	movw	r30, r24
    17ea:	80 81       	ld	r24, Z
    17ec:	81 30       	cpi	r24, 0x01	; 1
    17ee:	61 f0       	breq	.+24     	; 0x1808 <portTaskSwitchContext+0x40>
    17f0:	80 ea       	ldi	r24, 0xA0	; 160
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	fc 01       	movw	r30, r24
    17f6:	80 81       	ld	r24, Z
    17f8:	82 30       	cpi	r24, 0x02	; 2
    17fa:	31 f0       	breq	.+12     	; 0x1808 <portTaskSwitchContext+0x40>
    17fc:	80 ea       	ldi	r24, 0xA0	; 160
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	fc 01       	movw	r30, r24
    1802:	80 81       	ld	r24, Z
    1804:	84 30       	cpi	r24, 0x04	; 4
    1806:	79 f4       	brne	.+30     	; 0x1826 <portTaskSwitchContext+0x5e>
    1808:	80 91 62 35 	lds	r24, 0x3562	; 0x803562 <intTaskSwitchPending>
    180c:	88 23       	and	r24, r24
    180e:	59 f0       	breq	.+22     	; 0x1826 <portTaskSwitchContext+0x5e>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
    1810:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_portSetInterruptMaskFromIsr>
    1814:	18 2f       	mov	r17, r24
			intTaskSwitchPending = 0;								
    1816:	10 92 62 35 	sts	0x3562, r1	; 0x803562 <intTaskSwitchPending>
			vTaskSwitchContext();                   				
    181a:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
    181e:	80 ea       	ldi	r24, 0xA0	; 160
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	fc 01       	movw	r30, r24
    1824:	12 83       	std	Z+2, r17	; 0x02
		}                                          					
	}
    1826:	00 00       	nop
    1828:	0f 90       	pop	r0
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	1f 91       	pop	r17
    1830:	08 95       	ret

00001832 <portTaskIncrementTick>:
	// This routine is only an indirect call to vTaskIncrementTick because
	// a local variable is necessary. Local variables cannot be used directly
	// in a naked isr because of the lack of the frame pointer.
	//
	static void portTaskIncrementTick( void )
	{
    1832:	1f 93       	push	r17
    1834:	cf 93       	push	r28
    1836:	df 93       	push	r29
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
		register unsigned portBASE_TYPE uxSavedPmicCtrlReg;

 		uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR();
    183c:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_portSetInterruptMaskFromIsr>
    1840:	18 2f       	mov	r17, r24
		xTaskIncrementTick();
    1842:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <xTaskIncrementTick>
 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedPmicCtrlReg );
    1846:	80 ea       	ldi	r24, 0xA0	; 160
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	fc 01       	movw	r30, r24
    184c:	12 83       	std	Z+2, r17	; 0x02
	}
    184e:	00 00       	nop
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	1f 91       	pop	r17
    1856:	08 95       	ret

00001858 <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
    1858:	ff 93       	push	r31
    185a:	ff b7       	in	r31, 0x3f	; 63
    185c:	ff 93       	push	r31
    185e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1862:	ff 93       	push	r31
    1864:	f8 7f       	andi	r31, 0xF8	; 248
    1866:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    186a:	0f 92       	push	r0
    186c:	1f 92       	push	r1
    186e:	11 24       	eor	r1, r1
    1870:	2f 92       	push	r2
    1872:	3f 92       	push	r3
    1874:	4f 92       	push	r4
    1876:	5f 92       	push	r5
    1878:	6f 92       	push	r6
    187a:	7f 92       	push	r7
    187c:	8f 92       	push	r8
    187e:	9f 92       	push	r9
    1880:	af 92       	push	r10
    1882:	bf 92       	push	r11
    1884:	cf 92       	push	r12
    1886:	df 92       	push	r13
    1888:	ef 92       	push	r14
    188a:	ff 92       	push	r15
    188c:	0f 93       	push	r16
    188e:	1f 93       	push	r17
    1890:	2f 93       	push	r18
    1892:	3f 93       	push	r19
    1894:	4f 93       	push	r20
    1896:	5f 93       	push	r21
    1898:	6f 93       	push	r22
    189a:	7f 93       	push	r23
    189c:	8f 93       	push	r24
    189e:	9f 93       	push	r25
    18a0:	af 93       	push	r26
    18a2:	bf 93       	push	r27
    18a4:	cf 93       	push	r28
    18a6:	df 93       	push	r29
    18a8:	ef 93       	push	r30
    18aa:	a0 91 a2 34 	lds	r26, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    18ae:	b0 91 a3 34 	lds	r27, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    18b2:	0d b6       	in	r0, 0x3d	; 61
    18b4:	0d 92       	st	X+, r0
    18b6:	0e b6       	in	r0, 0x3e	; 62
    18b8:	0d 92       	st	X+, r0
		portTaskIncrementTick();
    18ba:	0e 94 19 0c 	call	0x1832	; 0x1832 <portTaskIncrementTick>
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <portTaskSwitchContext>
    18c4:	a0 91 a2 34 	lds	r26, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    18c8:	b0 91 a3 34 	lds	r27, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    18cc:	0d 90       	ld	r0, X+
    18ce:	0d be       	out	0x3d, r0	; 61
    18d0:	0d 90       	ld	r0, X+
    18d2:	0e be       	out	0x3e, r0	; 62
    18d4:	ef 91       	pop	r30
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	bf 91       	pop	r27
    18dc:	af 91       	pop	r26
    18de:	9f 91       	pop	r25
    18e0:	8f 91       	pop	r24
    18e2:	7f 91       	pop	r23
    18e4:	6f 91       	pop	r22
    18e6:	5f 91       	pop	r21
    18e8:	4f 91       	pop	r20
    18ea:	3f 91       	pop	r19
    18ec:	2f 91       	pop	r18
    18ee:	1f 91       	pop	r17
    18f0:	0f 91       	pop	r16
    18f2:	ff 90       	pop	r15
    18f4:	ef 90       	pop	r14
    18f6:	df 90       	pop	r13
    18f8:	cf 90       	pop	r12
    18fa:	bf 90       	pop	r11
    18fc:	af 90       	pop	r10
    18fe:	9f 90       	pop	r9
    1900:	8f 90       	pop	r8
    1902:	7f 90       	pop	r7
    1904:	6f 90       	pop	r6
    1906:	5f 90       	pop	r5
    1908:	4f 90       	pop	r4
    190a:	3f 90       	pop	r3
    190c:	2f 90       	pop	r2
    190e:	1f 90       	pop	r1
    1910:	0f 90       	pop	r0
    1912:	ff 91       	pop	r31
    1914:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1918:	ff 91       	pop	r31
    191a:	ff bf       	out	0x3f, r31	; 63
    191c:	ff 91       	pop	r31
    191e:	18 95       	reti
	...

00001922 <prvSetupTimerInterrupt>:
//-----------------------------------------------------------
//
// Setup of 16bit timer C0 to generate a tick interrupt in case of overflow.
//
static void prvSetupTimerInterrupt( void )
{
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
    1926:	00 d0       	rcall	.+0      	; 0x1928 <prvSetupTimerInterrupt+0x6>
    1928:	1f 92       	push	r1
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62

	unsigned portLONG ulOvfMatch;

	ulOvfMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	9d e7       	ldi	r25, 0x7D	; 125
    1932:	a0 e0       	ldi	r26, 0x00	; 0
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	89 83       	std	Y+1, r24	; 0x01
    1938:	9a 83       	std	Y+2, r25	; 0x02
    193a:	ab 83       	std	Y+3, r26	; 0x03
    193c:	bc 83       	std	Y+4, r27	; 0x04

	// We only have 16bits so have to scale to get our required tick rate.
	ulOvfMatch /= portCLOCK_PRESCALER_TIMER0;
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	9a 81       	ldd	r25, Y+2	; 0x02
    1942:	ab 81       	ldd	r26, Y+3	; 0x03
    1944:	bc 81       	ldd	r27, Y+4	; 0x04
    1946:	68 94       	set
    1948:	15 f8       	bld	r1, 5
    194a:	b6 95       	lsr	r27
    194c:	a7 95       	ror	r26
    194e:	97 95       	ror	r25
    1950:	87 95       	ror	r24
    1952:	16 94       	lsr	r1
    1954:	d1 f7       	brne	.-12     	; 0x194a <prvSetupTimerInterrupt+0x28>
    1956:	89 83       	std	Y+1, r24	; 0x01
    1958:	9a 83       	std	Y+2, r25	; 0x02
    195a:	ab 83       	std	Y+3, r26	; 0x03
    195c:	bc 83       	std	Y+4, r27	; 0x04

	// Adjust for correct value. (because overflow clear if CNT > PER)
	ulOvfMatch -= ( unsigned portLONG ) 1;
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	9a 81       	ldd	r25, Y+2	; 0x02
    1962:	ab 81       	ldd	r26, Y+3	; 0x03
    1964:	bc 81       	ldd	r27, Y+4	; 0x04
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	a1 09       	sbc	r26, r1
    196a:	b1 09       	sbc	r27, r1
    196c:	89 83       	std	Y+1, r24	; 0x01
    196e:	9a 83       	std	Y+2, r25	; 0x02
    1970:	ab 83       	std	Y+3, r26	; 0x03
    1972:	bc 83       	std	Y+4, r27	; 0x04

	// Setup overflow value
	TC_SetPeriod( &TCC0, ulOvfMatch);
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	98 e0       	ldi	r25, 0x08	; 8
    1978:	29 81       	ldd	r18, Y+1	; 0x01
    197a:	3a 81       	ldd	r19, Y+2	; 0x02
    197c:	fc 01       	movw	r30, r24
    197e:	26 a3       	std	Z+38, r18	; 0x26
    1980:	37 a3       	std	Z+39, r19	; 0x27
		
	// Setup clock source and compare match behaviour.
	TC0_ConfigClockSource( &TCC0, TC_CLKSEL_DIV64_gc);
    1982:	65 e0       	ldi	r22, 0x05	; 5
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	98 e0       	ldi	r25, 0x08	; 8
    1988:	0e 94 be 03 	call	0x77c	; 0x77c <TC0_ConfigClockSource>

	// Enable the interrupt - this is okay as interrupts are currently globally disabled.
	// The tick interrupt may run in one of the three levels.
#if   configKERNEL_INTERRUPT_PRIORITY == 0
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_LO_gc);	//low interrupt priority
    198c:	61 e0       	ldi	r22, 0x01	; 1
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	98 e0       	ldi	r25, 0x08	; 8
    1992:	0e 94 f6 03 	call	0x7ec	; 0x7ec <TC0_SetOverflowIntLevel>
#elif configKERNEL_INTERRUPT_PRIORITY == 1
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_MED_gc);	//medium interrupt priority
#elif configKERNEL_INTERRUPT_PRIORITY == 2
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_HI_gc);	//high interrupt priority
#endif
}
    1996:	00 00       	nop
    1998:	24 96       	adiw	r28, 0x04	; 4
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	df 91       	pop	r29
    19a0:	cf 91       	pop	r28
    19a2:	08 95       	ret

000019a4 <xQueueGenericReset>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	25 97       	sbiw	r28, 0x05	; 5
    19ae:	cd bf       	out	0x3d, r28	; 61
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	8b 83       	std	Y+3, r24	; 0x03
    19b4:	9c 83       	std	Y+4, r25	; 0x04
    19b6:	6d 83       	std	Y+5, r22	; 0x05
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	9c 81       	ldd	r25, Y+4	; 0x04
    19bc:	89 83       	std	Y+1, r24	; 0x01
    19be:	9a 83       	std	Y+2, r25	; 0x02
    19c0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    19c4:	ff 93       	push	r31
    19c6:	f8 7f       	andi	r31, 0xF8	; 248
    19c8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	9a 81       	ldd	r25, Y+2	; 0x02
    19d0:	fc 01       	movw	r30, r24
    19d2:	80 81       	ld	r24, Z
    19d4:	91 81       	ldd	r25, Z+1	; 0x01
    19d6:	29 81       	ldd	r18, Y+1	; 0x01
    19d8:	3a 81       	ldd	r19, Y+2	; 0x02
    19da:	f9 01       	movw	r30, r18
    19dc:	27 8d       	ldd	r18, Z+31	; 0x1f
    19de:	42 2f       	mov	r20, r18
    19e0:	50 e0       	ldi	r21, 0x00	; 0
    19e2:	29 81       	ldd	r18, Y+1	; 0x01
    19e4:	3a 81       	ldd	r19, Y+2	; 0x02
    19e6:	f9 01       	movw	r30, r18
    19e8:	20 a1       	ldd	r18, Z+32	; 0x20
    19ea:	22 2f       	mov	r18, r18
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	42 9f       	mul	r20, r18
    19f0:	b0 01       	movw	r22, r0
    19f2:	43 9f       	mul	r20, r19
    19f4:	70 0d       	add	r23, r0
    19f6:	52 9f       	mul	r21, r18
    19f8:	70 0d       	add	r23, r0
    19fa:	11 24       	eor	r1, r1
    19fc:	9b 01       	movw	r18, r22
    19fe:	28 0f       	add	r18, r24
    1a00:	39 1f       	adc	r19, r25
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	9a 81       	ldd	r25, Y+2	; 0x02
    1a06:	fc 01       	movw	r30, r24
    1a08:	22 83       	std	Z+2, r18	; 0x02
    1a0a:	33 83       	std	Z+3, r19	; 0x03
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a10:	fc 01       	movw	r30, r24
    1a12:	16 8e       	std	Z+30, r1	; 0x1e
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	9a 81       	ldd	r25, Y+2	; 0x02
    1a18:	fc 01       	movw	r30, r24
    1a1a:	20 81       	ld	r18, Z
    1a1c:	31 81       	ldd	r19, Z+1	; 0x01
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	9a 81       	ldd	r25, Y+2	; 0x02
    1a22:	fc 01       	movw	r30, r24
    1a24:	24 83       	std	Z+4, r18	; 0x04
    1a26:	35 83       	std	Z+5, r19	; 0x05
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	80 81       	ld	r24, Z
    1a30:	91 81       	ldd	r25, Z+1	; 0x01
    1a32:	29 81       	ldd	r18, Y+1	; 0x01
    1a34:	3a 81       	ldd	r19, Y+2	; 0x02
    1a36:	f9 01       	movw	r30, r18
    1a38:	27 8d       	ldd	r18, Z+31	; 0x1f
    1a3a:	22 2f       	mov	r18, r18
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	a9 01       	movw	r20, r18
    1a40:	41 50       	subi	r20, 0x01	; 1
    1a42:	51 09       	sbc	r21, r1
    1a44:	29 81       	ldd	r18, Y+1	; 0x01
    1a46:	3a 81       	ldd	r19, Y+2	; 0x02
    1a48:	f9 01       	movw	r30, r18
    1a4a:	20 a1       	ldd	r18, Z+32	; 0x20
    1a4c:	22 2f       	mov	r18, r18
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	42 9f       	mul	r20, r18
    1a52:	b0 01       	movw	r22, r0
    1a54:	43 9f       	mul	r20, r19
    1a56:	70 0d       	add	r23, r0
    1a58:	52 9f       	mul	r21, r18
    1a5a:	70 0d       	add	r23, r0
    1a5c:	11 24       	eor	r1, r1
    1a5e:	9b 01       	movw	r18, r22
    1a60:	28 0f       	add	r18, r24
    1a62:	39 1f       	adc	r19, r25
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	9a 81       	ldd	r25, Y+2	; 0x02
    1a68:	fc 01       	movw	r30, r24
    1a6a:	26 83       	std	Z+6, r18	; 0x06
    1a6c:	37 83       	std	Z+7, r19	; 0x07
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	9a 81       	ldd	r25, Y+2	; 0x02
    1a72:	2f ef       	ldi	r18, 0xFF	; 255
    1a74:	fc 01       	movw	r30, r24
    1a76:	21 a3       	std	Z+33, r18	; 0x21
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
    1a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7c:	2f ef       	ldi	r18, 0xFF	; 255
    1a7e:	fc 01       	movw	r30, r24
    1a80:	22 a3       	std	Z+34, r18	; 0x22
    1a82:	8d 81       	ldd	r24, Y+5	; 0x05
    1a84:	88 23       	and	r24, r24
    1a86:	81 f4       	brne	.+32     	; 0x1aa8 <xQueueGenericReset+0x104>
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	80 85       	ldd	r24, Z+8	; 0x08
    1a90:	88 23       	and	r24, r24
    1a92:	a1 f0       	breq	.+40     	; 0x1abc <xQueueGenericReset+0x118>
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	9a 81       	ldd	r25, Y+2	; 0x02
    1a98:	08 96       	adiw	r24, 0x08	; 8
    1a9a:	0e 94 86 18 	call	0x310c	; 0x310c <xTaskRemoveFromEventList>
    1a9e:	88 23       	and	r24, r24
    1aa0:	69 f0       	breq	.+26     	; 0x1abc <xQueueGenericReset+0x118>
    1aa2:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    1aa6:	0a c0       	rjmp	.+20     	; 0x1abc <xQueueGenericReset+0x118>
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1aac:	08 96       	adiw	r24, 0x08	; 8
    1aae:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vListInitialise>
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab6:	43 96       	adiw	r24, 0x13	; 19
    1ab8:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vListInitialise>
    1abc:	ff 91       	pop	r31
    1abe:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	25 96       	adiw	r28, 0x05	; 5
    1ac6:	cd bf       	out	0x3d, r28	; 61
    1ac8:	de bf       	out	0x3e, r29	; 62
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	08 95       	ret

00001ad0 <xQueueGenericCreate>:
    1ad0:	0f 93       	push	r16
    1ad2:	1f 93       	push	r17
    1ad4:	cf 93       	push	r28
    1ad6:	df 93       	push	r29
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	29 97       	sbiw	r28, 0x09	; 9
    1ade:	cd bf       	out	0x3d, r28	; 61
    1ae0:	de bf       	out	0x3e, r29	; 62
    1ae2:	8f 83       	std	Y+7, r24	; 0x07
    1ae4:	68 87       	std	Y+8, r22	; 0x08
    1ae6:	49 87       	std	Y+9, r20	; 0x09
    1ae8:	88 85       	ldd	r24, Y+8	; 0x08
    1aea:	88 23       	and	r24, r24
    1aec:	19 f4       	brne	.+6      	; 0x1af4 <xQueueGenericCreate+0x24>
    1aee:	19 82       	std	Y+1, r1	; 0x01
    1af0:	1a 82       	std	Y+2, r1	; 0x02
    1af2:	0f c0       	rjmp	.+30     	; 0x1b12 <xQueueGenericCreate+0x42>
    1af4:	8f 81       	ldd	r24, Y+7	; 0x07
    1af6:	48 2f       	mov	r20, r24
    1af8:	50 e0       	ldi	r21, 0x00	; 0
    1afa:	88 85       	ldd	r24, Y+8	; 0x08
    1afc:	28 2f       	mov	r18, r24
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	42 9f       	mul	r20, r18
    1b02:	c0 01       	movw	r24, r0
    1b04:	43 9f       	mul	r20, r19
    1b06:	90 0d       	add	r25, r0
    1b08:	52 9f       	mul	r21, r18
    1b0a:	90 0d       	add	r25, r0
    1b0c:	11 24       	eor	r1, r1
    1b0e:	89 83       	std	Y+1, r24	; 0x01
    1b10:	9a 83       	std	Y+2, r25	; 0x02
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	9a 81       	ldd	r25, Y+2	; 0x02
    1b16:	85 96       	adiw	r24, 0x25	; 37
    1b18:	0e 94 99 07 	call	0xf32	; 0xf32 <pvPortMalloc>
    1b1c:	8b 83       	std	Y+3, r24	; 0x03
    1b1e:	9c 83       	std	Y+4, r25	; 0x04
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	9c 81       	ldd	r25, Y+4	; 0x04
    1b24:	89 2b       	or	r24, r25
    1b26:	81 f0       	breq	.+32     	; 0x1b48 <xQueueGenericCreate+0x78>
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2c:	85 96       	adiw	r24, 0x25	; 37
    1b2e:	8d 83       	std	Y+5, r24	; 0x05
    1b30:	9e 83       	std	Y+6, r25	; 0x06
    1b32:	2b 81       	ldd	r18, Y+3	; 0x03
    1b34:	3c 81       	ldd	r19, Y+4	; 0x04
    1b36:	8d 81       	ldd	r24, Y+5	; 0x05
    1b38:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3a:	89 01       	movw	r16, r18
    1b3c:	29 85       	ldd	r18, Y+9	; 0x09
    1b3e:	ac 01       	movw	r20, r24
    1b40:	68 85       	ldd	r22, Y+8	; 0x08
    1b42:	8f 81       	ldd	r24, Y+7	; 0x07
    1b44:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <prvInitialiseNewQueue>
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4c:	29 96       	adiw	r28, 0x09	; 9
    1b4e:	cd bf       	out	0x3d, r28	; 61
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	1f 91       	pop	r17
    1b58:	0f 91       	pop	r16
    1b5a:	08 95       	ret

00001b5c <prvInitialiseNewQueue>:
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	27 97       	sbiw	r28, 0x07	; 7
    1b6a:	cd bf       	out	0x3d, r28	; 61
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	6a 83       	std	Y+2, r22	; 0x02
    1b72:	4b 83       	std	Y+3, r20	; 0x03
    1b74:	5c 83       	std	Y+4, r21	; 0x04
    1b76:	2d 83       	std	Y+5, r18	; 0x05
    1b78:	0e 83       	std	Y+6, r16	; 0x06
    1b7a:	1f 83       	std	Y+7, r17	; 0x07
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	88 23       	and	r24, r24
    1b80:	41 f4       	brne	.+16     	; 0x1b92 <prvInitialiseNewQueue+0x36>
    1b82:	8e 81       	ldd	r24, Y+6	; 0x06
    1b84:	9f 81       	ldd	r25, Y+7	; 0x07
    1b86:	2e 81       	ldd	r18, Y+6	; 0x06
    1b88:	3f 81       	ldd	r19, Y+7	; 0x07
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	20 83       	st	Z, r18
    1b8e:	31 83       	std	Z+1, r19	; 0x01
    1b90:	07 c0       	rjmp	.+14     	; 0x1ba0 <prvInitialiseNewQueue+0x44>
    1b92:	8e 81       	ldd	r24, Y+6	; 0x06
    1b94:	9f 81       	ldd	r25, Y+7	; 0x07
    1b96:	2b 81       	ldd	r18, Y+3	; 0x03
    1b98:	3c 81       	ldd	r19, Y+4	; 0x04
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	20 83       	st	Z, r18
    1b9e:	31 83       	std	Z+1, r19	; 0x01
    1ba0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba4:	29 81       	ldd	r18, Y+1	; 0x01
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	27 8f       	std	Z+31, r18	; 0x1f
    1baa:	8e 81       	ldd	r24, Y+6	; 0x06
    1bac:	9f 81       	ldd	r25, Y+7	; 0x07
    1bae:	2a 81       	ldd	r18, Y+2	; 0x02
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	20 a3       	std	Z+32, r18	; 0x20
    1bb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb6:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb8:	61 e0       	ldi	r22, 0x01	; 1
    1bba:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <xQueueGenericReset>
    1bbe:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc0:	9f 81       	ldd	r25, Y+7	; 0x07
    1bc2:	2d 81       	ldd	r18, Y+5	; 0x05
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	24 a3       	std	Z+36, r18	; 0x24
    1bc8:	00 00       	nop
    1bca:	27 96       	adiw	r28, 0x07	; 7
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	1f 91       	pop	r17
    1bd6:	0f 91       	pop	r16
    1bd8:	08 95       	ret

00001bda <xQueueGenericSend>:
    1bda:	0f 93       	push	r16
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	62 97       	sbiw	r28, 0x12	; 18
    1be6:	cd bf       	out	0x3d, r28	; 61
    1be8:	de bf       	out	0x3e, r29	; 62
    1bea:	8a 87       	std	Y+10, r24	; 0x0a
    1bec:	9b 87       	std	Y+11, r25	; 0x0b
    1bee:	6c 87       	std	Y+12, r22	; 0x0c
    1bf0:	7d 87       	std	Y+13, r23	; 0x0d
    1bf2:	2e 87       	std	Y+14, r18	; 0x0e
    1bf4:	3f 87       	std	Y+15, r19	; 0x0f
    1bf6:	48 8b       	std	Y+16, r20	; 0x10
    1bf8:	59 8b       	std	Y+17, r21	; 0x11
    1bfa:	0a 8b       	std	Y+18, r16	; 0x12
    1bfc:	19 82       	std	Y+1, r1	; 0x01
    1bfe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c00:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c02:	8a 83       	std	Y+2, r24	; 0x02
    1c04:	9b 83       	std	Y+3, r25	; 0x03
    1c06:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1c0a:	ff 93       	push	r31
    1c0c:	f8 7f       	andi	r31, 0xF8	; 248
    1c0e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	9b 81       	ldd	r25, Y+3	; 0x03
    1c16:	fc 01       	movw	r30, r24
    1c18:	26 8d       	ldd	r18, Z+30	; 0x1e
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1e:	fc 01       	movw	r30, r24
    1c20:	87 8d       	ldd	r24, Z+31	; 0x1f
    1c22:	28 17       	cp	r18, r24
    1c24:	18 f0       	brcs	.+6      	; 0x1c2c <xQueueGenericSend+0x52>
    1c26:	8a 89       	ldd	r24, Y+18	; 0x12
    1c28:	82 30       	cpi	r24, 0x02	; 2
    1c2a:	19 f5       	brne	.+70     	; 0x1c72 <xQueueGenericSend+0x98>
    1c2c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c2e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	9b 81       	ldd	r25, Y+3	; 0x03
    1c34:	4a 89       	ldd	r20, Y+18	; 0x12
    1c36:	b9 01       	movw	r22, r18
    1c38:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <prvCopyDataToQueue>
    1c3c:	8c 83       	std	Y+4, r24	; 0x04
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	9b 81       	ldd	r25, Y+3	; 0x03
    1c42:	fc 01       	movw	r30, r24
    1c44:	83 89       	ldd	r24, Z+19	; 0x13
    1c46:	88 23       	and	r24, r24
    1c48:	51 f0       	breq	.+20     	; 0x1c5e <xQueueGenericSend+0x84>
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4e:	43 96       	adiw	r24, 0x13	; 19
    1c50:	0e 94 86 18 	call	0x310c	; 0x310c <xTaskRemoveFromEventList>
    1c54:	88 23       	and	r24, r24
    1c56:	41 f0       	breq	.+16     	; 0x1c68 <xQueueGenericSend+0x8e>
    1c58:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    1c5c:	05 c0       	rjmp	.+10     	; 0x1c68 <xQueueGenericSend+0x8e>
    1c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c60:	88 23       	and	r24, r24
    1c62:	11 f0       	breq	.+4      	; 0x1c68 <xQueueGenericSend+0x8e>
    1c64:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    1c68:	ff 91       	pop	r31
    1c6a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	6f c0       	rjmp	.+222    	; 0x1d50 <xQueueGenericSend+0x176>
    1c72:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c74:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c76:	a8 89       	ldd	r26, Y+16	; 0x10
    1c78:	b9 89       	ldd	r27, Y+17	; 0x11
    1c7a:	89 2b       	or	r24, r25
    1c7c:	8a 2b       	or	r24, r26
    1c7e:	8b 2b       	or	r24, r27
    1c80:	29 f4       	brne	.+10     	; 0x1c8c <xQueueGenericSend+0xb2>
    1c82:	ff 91       	pop	r31
    1c84:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	62 c0       	rjmp	.+196    	; 0x1d50 <xQueueGenericSend+0x176>
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	88 23       	and	r24, r24
    1c90:	31 f4       	brne	.+12     	; 0x1c9e <xQueueGenericSend+0xc4>
    1c92:	ce 01       	movw	r24, r28
    1c94:	05 96       	adiw	r24, 0x05	; 5
    1c96:	0e 94 51 19 	call	0x32a2	; 0x32a2 <vTaskInternalSetTimeOutState>
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	ff 91       	pop	r31
    1ca0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ca4:	0e 94 40 15 	call	0x2a80	; 0x2a80 <vTaskSuspendAll>
    1ca8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1cac:	ff 93       	push	r31
    1cae:	f8 7f       	andi	r31, 0xF8	; 248
    1cb0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb8:	fc 01       	movw	r30, r24
    1cba:	81 a1       	ldd	r24, Z+33	; 0x21
    1cbc:	8f 3f       	cpi	r24, 0xFF	; 255
    1cbe:	21 f4       	brne	.+8      	; 0x1cc8 <xQueueGenericSend+0xee>
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	11 a2       	std	Z+33, r1	; 0x21
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	9b 81       	ldd	r25, Y+3	; 0x03
    1ccc:	fc 01       	movw	r30, r24
    1cce:	82 a1       	ldd	r24, Z+34	; 0x22
    1cd0:	8f 3f       	cpi	r24, 0xFF	; 255
    1cd2:	21 f4       	brne	.+8      	; 0x1cdc <xQueueGenericSend+0x102>
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd8:	fc 01       	movw	r30, r24
    1cda:	12 a2       	std	Z+34, r1	; 0x22
    1cdc:	ff 91       	pop	r31
    1cde:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ce2:	9e 01       	movw	r18, r28
    1ce4:	22 5f       	subi	r18, 0xF2	; 242
    1ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce8:	ce 01       	movw	r24, r28
    1cea:	05 96       	adiw	r24, 0x05	; 5
    1cec:	b9 01       	movw	r22, r18
    1cee:	0e 94 74 19 	call	0x32e8	; 0x32e8 <xTaskCheckForTimeOut>
    1cf2:	88 23       	and	r24, r24
    1cf4:	31 f5       	brne	.+76     	; 0x1d42 <xQueueGenericSend+0x168>
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cfa:	0e 94 76 11 	call	0x22ec	; 0x22ec <prvIsQueueFull>
    1cfe:	88 23       	and	r24, r24
    1d00:	c9 f0       	breq	.+50     	; 0x1d34 <xQueueGenericSend+0x15a>
    1d02:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d04:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d06:	a8 89       	ldd	r26, Y+16	; 0x10
    1d08:	b9 89       	ldd	r27, Y+17	; 0x11
    1d0a:	2a 81       	ldd	r18, Y+2	; 0x02
    1d0c:	3b 81       	ldd	r19, Y+3	; 0x03
    1d0e:	28 5f       	subi	r18, 0xF8	; 248
    1d10:	3f 4f       	sbci	r19, 0xFF	; 255
    1d12:	ac 01       	movw	r20, r24
    1d14:	bd 01       	movw	r22, r26
    1d16:	c9 01       	movw	r24, r18
    1d18:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <vTaskPlaceOnEventList>
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d20:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <prvUnlockQueue>
    1d24:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
    1d28:	88 23       	and	r24, r24
    1d2a:	09 f0       	breq	.+2      	; 0x1d2e <xQueueGenericSend+0x154>
    1d2c:	6c cf       	rjmp	.-296    	; 0x1c06 <xQueueGenericSend+0x2c>
    1d2e:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    1d32:	69 cf       	rjmp	.-302    	; 0x1c06 <xQueueGenericSend+0x2c>
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	9b 81       	ldd	r25, Y+3	; 0x03
    1d38:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <prvUnlockQueue>
    1d3c:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
    1d40:	62 cf       	rjmp	.-316    	; 0x1c06 <xQueueGenericSend+0x2c>
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	9b 81       	ldd	r25, Y+3	; 0x03
    1d46:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <prvUnlockQueue>
    1d4a:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	62 96       	adiw	r28, 0x12	; 18
    1d52:	cd bf       	out	0x3d, r28	; 61
    1d54:	de bf       	out	0x3e, r29	; 62
    1d56:	df 91       	pop	r29
    1d58:	cf 91       	pop	r28
    1d5a:	0f 91       	pop	r16
    1d5c:	08 95       	ret

00001d5e <xQueueGenericSendFromISR>:
    1d5e:	cf 93       	push	r28
    1d60:	df 93       	push	r29
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    1d66:	2c 97       	sbiw	r28, 0x0c	; 12
    1d68:	cd bf       	out	0x3d, r28	; 61
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	8e 83       	std	Y+6, r24	; 0x06
    1d6e:	9f 83       	std	Y+7, r25	; 0x07
    1d70:	68 87       	std	Y+8, r22	; 0x08
    1d72:	79 87       	std	Y+9, r23	; 0x09
    1d74:	4a 87       	std	Y+10, r20	; 0x0a
    1d76:	5b 87       	std	Y+11, r21	; 0x0b
    1d78:	2c 87       	std	Y+12, r18	; 0x0c
    1d7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d7c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d7e:	8a 83       	std	Y+2, r24	; 0x02
    1d80:	9b 83       	std	Y+3, r25	; 0x03
    1d82:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_portSetInterruptMaskFromIsr>
    1d86:	8c 83       	std	Y+4, r24	; 0x04
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	26 8d       	ldd	r18, Z+30	; 0x1e
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	9b 81       	ldd	r25, Y+3	; 0x03
    1d94:	fc 01       	movw	r30, r24
    1d96:	87 8d       	ldd	r24, Z+31	; 0x1f
    1d98:	28 17       	cp	r18, r24
    1d9a:	18 f0       	brcs	.+6      	; 0x1da2 <xQueueGenericSendFromISR+0x44>
    1d9c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d9e:	82 30       	cpi	r24, 0x02	; 2
    1da0:	89 f5       	brne	.+98     	; 0x1e04 <xQueueGenericSendFromISR+0xa6>
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	9b 81       	ldd	r25, Y+3	; 0x03
    1da6:	fc 01       	movw	r30, r24
    1da8:	82 a1       	ldd	r24, Z+34	; 0x22
    1daa:	8d 83       	std	Y+5, r24	; 0x05
    1dac:	28 85       	ldd	r18, Y+8	; 0x08
    1dae:	39 85       	ldd	r19, Y+9	; 0x09
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	9b 81       	ldd	r25, Y+3	; 0x03
    1db4:	4c 85       	ldd	r20, Y+12	; 0x0c
    1db6:	b9 01       	movw	r22, r18
    1db8:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <prvCopyDataToQueue>
    1dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbe:	8f 3f       	cpi	r24, 0xFF	; 255
    1dc0:	b9 f4       	brne	.+46     	; 0x1df0 <xQueueGenericSendFromISR+0x92>
    1dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	83 89       	ldd	r24, Z+19	; 0x13
    1dca:	88 23       	and	r24, r24
    1dcc:	c1 f0       	breq	.+48     	; 0x1dfe <xQueueGenericSendFromISR+0xa0>
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd2:	43 96       	adiw	r24, 0x13	; 19
    1dd4:	0e 94 86 18 	call	0x310c	; 0x310c <xTaskRemoveFromEventList>
    1dd8:	88 23       	and	r24, r24
    1dda:	89 f0       	breq	.+34     	; 0x1dfe <xQueueGenericSendFromISR+0xa0>
    1ddc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dde:	9b 85       	ldd	r25, Y+11	; 0x0b
    1de0:	89 2b       	or	r24, r25
    1de2:	69 f0       	breq	.+26     	; 0x1dfe <xQueueGenericSendFromISR+0xa0>
    1de4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1de6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1de8:	21 e0       	ldi	r18, 0x01	; 1
    1dea:	fc 01       	movw	r30, r24
    1dec:	20 83       	st	Z, r18
    1dee:	07 c0       	rjmp	.+14     	; 0x1dfe <xQueueGenericSendFromISR+0xa0>
    1df0:	8d 81       	ldd	r24, Y+5	; 0x05
    1df2:	8f 5f       	subi	r24, 0xFF	; 255
    1df4:	28 2f       	mov	r18, r24
    1df6:	8a 81       	ldd	r24, Y+2	; 0x02
    1df8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	22 a3       	std	Z+34, r18	; 0x22
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	89 83       	std	Y+1, r24	; 0x01
    1e02:	01 c0       	rjmp	.+2      	; 0x1e06 <xQueueGenericSendFromISR+0xa8>
    1e04:	19 82       	std	Y+1, r1	; 0x01
    1e06:	80 ea       	ldi	r24, 0xA0	; 160
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	22 83       	std	Z+2, r18	; 0x02
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	2c 96       	adiw	r28, 0x0c	; 12
    1e14:	cd bf       	out	0x3d, r28	; 61
    1e16:	de bf       	out	0x3e, r29	; 62
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	08 95       	ret

00001e1e <xQueueReceive>:
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	61 97       	sbiw	r28, 0x11	; 17
    1e28:	cd bf       	out	0x3d, r28	; 61
    1e2a:	de bf       	out	0x3e, r29	; 62
    1e2c:	8a 87       	std	Y+10, r24	; 0x0a
    1e2e:	9b 87       	std	Y+11, r25	; 0x0b
    1e30:	6c 87       	std	Y+12, r22	; 0x0c
    1e32:	7d 87       	std	Y+13, r23	; 0x0d
    1e34:	2e 87       	std	Y+14, r18	; 0x0e
    1e36:	3f 87       	std	Y+15, r19	; 0x0f
    1e38:	48 8b       	std	Y+16, r20	; 0x10
    1e3a:	59 8b       	std	Y+17, r21	; 0x11
    1e3c:	19 82       	std	Y+1, r1	; 0x01
    1e3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e40:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e42:	8a 83       	std	Y+2, r24	; 0x02
    1e44:	9b 83       	std	Y+3, r25	; 0x03
    1e46:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1e4a:	ff 93       	push	r31
    1e4c:	f8 7f       	andi	r31, 0xF8	; 248
    1e4e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1e52:	8a 81       	ldd	r24, Y+2	; 0x02
    1e54:	9b 81       	ldd	r25, Y+3	; 0x03
    1e56:	fc 01       	movw	r30, r24
    1e58:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e5a:	8c 83       	std	Y+4, r24	; 0x04
    1e5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5e:	88 23       	and	r24, r24
    1e60:	11 f1       	breq	.+68     	; 0x1ea6 <xQueueReceive+0x88>
    1e62:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e64:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6a:	b9 01       	movw	r22, r18
    1e6c:	0e 94 a0 10 	call	0x2140	; 0x2140 <prvCopyDataFromQueue>
    1e70:	8c 81       	ldd	r24, Y+4	; 0x04
    1e72:	2f ef       	ldi	r18, 0xFF	; 255
    1e74:	28 0f       	add	r18, r24
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	26 8f       	std	Z+30, r18	; 0x1e
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	9b 81       	ldd	r25, Y+3	; 0x03
    1e82:	fc 01       	movw	r30, r24
    1e84:	80 85       	ldd	r24, Z+8	; 0x08
    1e86:	88 23       	and	r24, r24
    1e88:	49 f0       	breq	.+18     	; 0x1e9c <xQueueReceive+0x7e>
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8e:	08 96       	adiw	r24, 0x08	; 8
    1e90:	0e 94 86 18 	call	0x310c	; 0x310c <xTaskRemoveFromEventList>
    1e94:	88 23       	and	r24, r24
    1e96:	11 f0       	breq	.+4      	; 0x1e9c <xQueueReceive+0x7e>
    1e98:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    1e9c:	ff 91       	pop	r31
    1e9e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	76 c0       	rjmp	.+236    	; 0x1f92 <xQueueReceive+0x174>
    1ea6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ea8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1eaa:	a8 89       	ldd	r26, Y+16	; 0x10
    1eac:	b9 89       	ldd	r27, Y+17	; 0x11
    1eae:	89 2b       	or	r24, r25
    1eb0:	8a 2b       	or	r24, r26
    1eb2:	8b 2b       	or	r24, r27
    1eb4:	29 f4       	brne	.+10     	; 0x1ec0 <xQueueReceive+0xa2>
    1eb6:	ff 91       	pop	r31
    1eb8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	69 c0       	rjmp	.+210    	; 0x1f92 <xQueueReceive+0x174>
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	88 23       	and	r24, r24
    1ec4:	31 f4       	brne	.+12     	; 0x1ed2 <xQueueReceive+0xb4>
    1ec6:	ce 01       	movw	r24, r28
    1ec8:	05 96       	adiw	r24, 0x05	; 5
    1eca:	0e 94 51 19 	call	0x32a2	; 0x32a2 <vTaskInternalSetTimeOutState>
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	89 83       	std	Y+1, r24	; 0x01
    1ed2:	ff 91       	pop	r31
    1ed4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ed8:	0e 94 40 15 	call	0x2a80	; 0x2a80 <vTaskSuspendAll>
    1edc:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ee0:	ff 93       	push	r31
    1ee2:	f8 7f       	andi	r31, 0xF8	; 248
    1ee4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	9b 81       	ldd	r25, Y+3	; 0x03
    1eec:	fc 01       	movw	r30, r24
    1eee:	81 a1       	ldd	r24, Z+33	; 0x21
    1ef0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ef2:	21 f4       	brne	.+8      	; 0x1efc <xQueueReceive+0xde>
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef8:	fc 01       	movw	r30, r24
    1efa:	11 a2       	std	Z+33, r1	; 0x21
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	9b 81       	ldd	r25, Y+3	; 0x03
    1f00:	fc 01       	movw	r30, r24
    1f02:	82 a1       	ldd	r24, Z+34	; 0x22
    1f04:	8f 3f       	cpi	r24, 0xFF	; 255
    1f06:	21 f4       	brne	.+8      	; 0x1f10 <xQueueReceive+0xf2>
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	12 a2       	std	Z+34, r1	; 0x22
    1f10:	ff 91       	pop	r31
    1f12:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1f16:	9e 01       	movw	r18, r28
    1f18:	22 5f       	subi	r18, 0xF2	; 242
    1f1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	05 96       	adiw	r24, 0x05	; 5
    1f20:	b9 01       	movw	r22, r18
    1f22:	0e 94 74 19 	call	0x32e8	; 0x32e8 <xTaskCheckForTimeOut>
    1f26:	88 23       	and	r24, r24
    1f28:	31 f5       	brne	.+76     	; 0x1f76 <xQueueReceive+0x158>
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2e:	0e 94 55 11 	call	0x22aa	; 0x22aa <prvIsQueueEmpty>
    1f32:	88 23       	and	r24, r24
    1f34:	c9 f0       	breq	.+50     	; 0x1f68 <xQueueReceive+0x14a>
    1f36:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f38:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f3a:	a8 89       	ldd	r26, Y+16	; 0x10
    1f3c:	b9 89       	ldd	r27, Y+17	; 0x11
    1f3e:	2a 81       	ldd	r18, Y+2	; 0x02
    1f40:	3b 81       	ldd	r19, Y+3	; 0x03
    1f42:	2d 5e       	subi	r18, 0xED	; 237
    1f44:	3f 4f       	sbci	r19, 0xFF	; 255
    1f46:	ac 01       	movw	r20, r24
    1f48:	bd 01       	movw	r22, r26
    1f4a:	c9 01       	movw	r24, r18
    1f4c:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <vTaskPlaceOnEventList>
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	9b 81       	ldd	r25, Y+3	; 0x03
    1f54:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <prvUnlockQueue>
    1f58:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
    1f5c:	88 23       	and	r24, r24
    1f5e:	09 f0       	breq	.+2      	; 0x1f62 <xQueueReceive+0x144>
    1f60:	72 cf       	rjmp	.-284    	; 0x1e46 <xQueueReceive+0x28>
    1f62:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    1f66:	6f cf       	rjmp	.-290    	; 0x1e46 <xQueueReceive+0x28>
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6c:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <prvUnlockQueue>
    1f70:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
    1f74:	68 cf       	rjmp	.-304    	; 0x1e46 <xQueueReceive+0x28>
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	9b 81       	ldd	r25, Y+3	; 0x03
    1f7a:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <prvUnlockQueue>
    1f7e:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	9b 81       	ldd	r25, Y+3	; 0x03
    1f86:	0e 94 55 11 	call	0x22aa	; 0x22aa <prvIsQueueEmpty>
    1f8a:	88 23       	and	r24, r24
    1f8c:	09 f4       	brne	.+2      	; 0x1f90 <xQueueReceive+0x172>
    1f8e:	5b cf       	rjmp	.-330    	; 0x1e46 <xQueueReceive+0x28>
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	61 96       	adiw	r28, 0x11	; 17
    1f94:	cd bf       	out	0x3d, r28	; 61
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	df 91       	pop	r29
    1f9a:	cf 91       	pop	r28
    1f9c:	08 95       	ret

00001f9e <uxQueueMessagesWaiting>:
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	00 d0       	rcall	.+0      	; 0x1fa4 <uxQueueMessagesWaiting+0x6>
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	8a 83       	std	Y+2, r24	; 0x02
    1faa:	9b 83       	std	Y+3, r25	; 0x03
    1fac:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1fb0:	ff 93       	push	r31
    1fb2:	f8 7f       	andi	r31, 0xF8	; 248
    1fb4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	9b 81       	ldd	r25, Y+3	; 0x03
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	86 8d       	ldd	r24, Z+30	; 0x1e
    1fc0:	89 83       	std	Y+1, r24	; 0x01
    1fc2:	ff 91       	pop	r31
    1fc4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	23 96       	adiw	r28, 0x03	; 3
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	de bf       	out	0x3e, r29	; 62
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	08 95       	ret

00001fd6 <prvCopyDataToQueue>:
    1fd6:	cf 93       	push	r28
    1fd8:	df 93       	push	r29
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	27 97       	sbiw	r28, 0x07	; 7
    1fe0:	cd bf       	out	0x3d, r28	; 61
    1fe2:	de bf       	out	0x3e, r29	; 62
    1fe4:	8b 83       	std	Y+3, r24	; 0x03
    1fe6:	9c 83       	std	Y+4, r25	; 0x04
    1fe8:	6d 83       	std	Y+5, r22	; 0x05
    1fea:	7e 83       	std	Y+6, r23	; 0x06
    1fec:	4f 83       	std	Y+7, r20	; 0x07
    1fee:	1a 82       	std	Y+2, r1	; 0x02
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ff8:	89 83       	std	Y+1, r24	; 0x01
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffe:	fc 01       	movw	r30, r24
    2000:	80 a1       	ldd	r24, Z+32	; 0x20
    2002:	88 23       	and	r24, r24
    2004:	09 f4       	brne	.+2      	; 0x2008 <__DATA_REGION_LENGTH__+0x8>
    2006:	8e c0       	rjmp	.+284    	; 0x2124 <__DATA_REGION_LENGTH__+0x124>
    2008:	8f 81       	ldd	r24, Y+7	; 0x07
    200a:	88 23       	and	r24, r24
    200c:	d9 f5       	brne	.+118    	; 0x2084 <__DATA_REGION_LENGTH__+0x84>
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	9c 81       	ldd	r25, Y+4	; 0x04
    2012:	fc 01       	movw	r30, r24
    2014:	80 a1       	ldd	r24, Z+32	; 0x20
    2016:	48 2f       	mov	r20, r24
    2018:	50 e0       	ldi	r21, 0x00	; 0
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	9c 81       	ldd	r25, Y+4	; 0x04
    201e:	fc 01       	movw	r30, r24
    2020:	84 81       	ldd	r24, Z+4	; 0x04
    2022:	95 81       	ldd	r25, Z+5	; 0x05
    2024:	2d 81       	ldd	r18, Y+5	; 0x05
    2026:	3e 81       	ldd	r19, Y+6	; 0x06
    2028:	b9 01       	movw	r22, r18
    202a:	0e 94 d1 3d 	call	0x7ba2	; 0x7ba2 <memcpy>
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	9c 81       	ldd	r25, Y+4	; 0x04
    2032:	fc 01       	movw	r30, r24
    2034:	24 81       	ldd	r18, Z+4	; 0x04
    2036:	35 81       	ldd	r19, Z+5	; 0x05
    2038:	8b 81       	ldd	r24, Y+3	; 0x03
    203a:	9c 81       	ldd	r25, Y+4	; 0x04
    203c:	fc 01       	movw	r30, r24
    203e:	80 a1       	ldd	r24, Z+32	; 0x20
    2040:	88 2f       	mov	r24, r24
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	28 0f       	add	r18, r24
    2046:	39 1f       	adc	r19, r25
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	9c 81       	ldd	r25, Y+4	; 0x04
    204c:	fc 01       	movw	r30, r24
    204e:	24 83       	std	Z+4, r18	; 0x04
    2050:	35 83       	std	Z+5, r19	; 0x05
    2052:	8b 81       	ldd	r24, Y+3	; 0x03
    2054:	9c 81       	ldd	r25, Y+4	; 0x04
    2056:	fc 01       	movw	r30, r24
    2058:	24 81       	ldd	r18, Z+4	; 0x04
    205a:	35 81       	ldd	r19, Z+5	; 0x05
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	9c 81       	ldd	r25, Y+4	; 0x04
    2060:	fc 01       	movw	r30, r24
    2062:	82 81       	ldd	r24, Z+2	; 0x02
    2064:	93 81       	ldd	r25, Z+3	; 0x03
    2066:	28 17       	cp	r18, r24
    2068:	39 07       	cpc	r19, r25
    206a:	08 f4       	brcc	.+2      	; 0x206e <__DATA_REGION_LENGTH__+0x6e>
    206c:	5b c0       	rjmp	.+182    	; 0x2124 <__DATA_REGION_LENGTH__+0x124>
    206e:	8b 81       	ldd	r24, Y+3	; 0x03
    2070:	9c 81       	ldd	r25, Y+4	; 0x04
    2072:	fc 01       	movw	r30, r24
    2074:	20 81       	ld	r18, Z
    2076:	31 81       	ldd	r19, Z+1	; 0x01
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	9c 81       	ldd	r25, Y+4	; 0x04
    207c:	fc 01       	movw	r30, r24
    207e:	24 83       	std	Z+4, r18	; 0x04
    2080:	35 83       	std	Z+5, r19	; 0x05
    2082:	50 c0       	rjmp	.+160    	; 0x2124 <__DATA_REGION_LENGTH__+0x124>
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	9c 81       	ldd	r25, Y+4	; 0x04
    2088:	fc 01       	movw	r30, r24
    208a:	80 a1       	ldd	r24, Z+32	; 0x20
    208c:	48 2f       	mov	r20, r24
    208e:	50 e0       	ldi	r21, 0x00	; 0
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	9c 81       	ldd	r25, Y+4	; 0x04
    2094:	fc 01       	movw	r30, r24
    2096:	86 81       	ldd	r24, Z+6	; 0x06
    2098:	97 81       	ldd	r25, Z+7	; 0x07
    209a:	2d 81       	ldd	r18, Y+5	; 0x05
    209c:	3e 81       	ldd	r19, Y+6	; 0x06
    209e:	b9 01       	movw	r22, r18
    20a0:	0e 94 d1 3d 	call	0x7ba2	; 0x7ba2 <memcpy>
    20a4:	8b 81       	ldd	r24, Y+3	; 0x03
    20a6:	9c 81       	ldd	r25, Y+4	; 0x04
    20a8:	fc 01       	movw	r30, r24
    20aa:	26 81       	ldd	r18, Z+6	; 0x06
    20ac:	37 81       	ldd	r19, Z+7	; 0x07
    20ae:	8b 81       	ldd	r24, Y+3	; 0x03
    20b0:	9c 81       	ldd	r25, Y+4	; 0x04
    20b2:	fc 01       	movw	r30, r24
    20b4:	80 a1       	ldd	r24, Z+32	; 0x20
    20b6:	88 2f       	mov	r24, r24
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	91 95       	neg	r25
    20bc:	81 95       	neg	r24
    20be:	91 09       	sbc	r25, r1
    20c0:	28 0f       	add	r18, r24
    20c2:	39 1f       	adc	r19, r25
    20c4:	8b 81       	ldd	r24, Y+3	; 0x03
    20c6:	9c 81       	ldd	r25, Y+4	; 0x04
    20c8:	fc 01       	movw	r30, r24
    20ca:	26 83       	std	Z+6, r18	; 0x06
    20cc:	37 83       	std	Z+7, r19	; 0x07
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	9c 81       	ldd	r25, Y+4	; 0x04
    20d2:	fc 01       	movw	r30, r24
    20d4:	26 81       	ldd	r18, Z+6	; 0x06
    20d6:	37 81       	ldd	r19, Z+7	; 0x07
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	9c 81       	ldd	r25, Y+4	; 0x04
    20dc:	fc 01       	movw	r30, r24
    20de:	80 81       	ld	r24, Z
    20e0:	91 81       	ldd	r25, Z+1	; 0x01
    20e2:	28 17       	cp	r18, r24
    20e4:	39 07       	cpc	r19, r25
    20e6:	a8 f4       	brcc	.+42     	; 0x2112 <__DATA_REGION_LENGTH__+0x112>
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	9c 81       	ldd	r25, Y+4	; 0x04
    20ec:	fc 01       	movw	r30, r24
    20ee:	22 81       	ldd	r18, Z+2	; 0x02
    20f0:	33 81       	ldd	r19, Z+3	; 0x03
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	fc 01       	movw	r30, r24
    20f8:	80 a1       	ldd	r24, Z+32	; 0x20
    20fa:	88 2f       	mov	r24, r24
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	91 95       	neg	r25
    2100:	81 95       	neg	r24
    2102:	91 09       	sbc	r25, r1
    2104:	28 0f       	add	r18, r24
    2106:	39 1f       	adc	r19, r25
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	9c 81       	ldd	r25, Y+4	; 0x04
    210c:	fc 01       	movw	r30, r24
    210e:	26 83       	std	Z+6, r18	; 0x06
    2110:	37 83       	std	Z+7, r19	; 0x07
    2112:	8f 81       	ldd	r24, Y+7	; 0x07
    2114:	82 30       	cpi	r24, 0x02	; 2
    2116:	31 f4       	brne	.+12     	; 0x2124 <__DATA_REGION_LENGTH__+0x124>
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	88 23       	and	r24, r24
    211c:	19 f0       	breq	.+6      	; 0x2124 <__DATA_REGION_LENGTH__+0x124>
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	81 50       	subi	r24, 0x01	; 1
    2122:	89 83       	std	Y+1, r24	; 0x01
    2124:	89 81       	ldd	r24, Y+1	; 0x01
    2126:	21 e0       	ldi	r18, 0x01	; 1
    2128:	28 0f       	add	r18, r24
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	9c 81       	ldd	r25, Y+4	; 0x04
    212e:	fc 01       	movw	r30, r24
    2130:	26 8f       	std	Z+30, r18	; 0x1e
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	27 96       	adiw	r28, 0x07	; 7
    2136:	cd bf       	out	0x3d, r28	; 61
    2138:	de bf       	out	0x3e, r29	; 62
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	08 95       	ret

00002140 <prvCopyDataFromQueue>:
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
    2144:	00 d0       	rcall	.+0      	; 0x2146 <prvCopyDataFromQueue+0x6>
    2146:	1f 92       	push	r1
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	89 83       	std	Y+1, r24	; 0x01
    214e:	9a 83       	std	Y+2, r25	; 0x02
    2150:	6b 83       	std	Y+3, r22	; 0x03
    2152:	7c 83       	std	Y+4, r23	; 0x04
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	9a 81       	ldd	r25, Y+2	; 0x02
    2158:	fc 01       	movw	r30, r24
    215a:	80 a1       	ldd	r24, Z+32	; 0x20
    215c:	88 23       	and	r24, r24
    215e:	c9 f1       	breq	.+114    	; 0x21d2 <prvCopyDataFromQueue+0x92>
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	9a 81       	ldd	r25, Y+2	; 0x02
    2164:	fc 01       	movw	r30, r24
    2166:	26 81       	ldd	r18, Z+6	; 0x06
    2168:	37 81       	ldd	r19, Z+7	; 0x07
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	9a 81       	ldd	r25, Y+2	; 0x02
    216e:	fc 01       	movw	r30, r24
    2170:	80 a1       	ldd	r24, Z+32	; 0x20
    2172:	88 2f       	mov	r24, r24
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	28 0f       	add	r18, r24
    2178:	39 1f       	adc	r19, r25
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	9a 81       	ldd	r25, Y+2	; 0x02
    217e:	fc 01       	movw	r30, r24
    2180:	26 83       	std	Z+6, r18	; 0x06
    2182:	37 83       	std	Z+7, r19	; 0x07
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	9a 81       	ldd	r25, Y+2	; 0x02
    2188:	fc 01       	movw	r30, r24
    218a:	26 81       	ldd	r18, Z+6	; 0x06
    218c:	37 81       	ldd	r19, Z+7	; 0x07
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	9a 81       	ldd	r25, Y+2	; 0x02
    2192:	fc 01       	movw	r30, r24
    2194:	82 81       	ldd	r24, Z+2	; 0x02
    2196:	93 81       	ldd	r25, Z+3	; 0x03
    2198:	28 17       	cp	r18, r24
    219a:	39 07       	cpc	r19, r25
    219c:	50 f0       	brcs	.+20     	; 0x21b2 <prvCopyDataFromQueue+0x72>
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	9a 81       	ldd	r25, Y+2	; 0x02
    21a2:	fc 01       	movw	r30, r24
    21a4:	20 81       	ld	r18, Z
    21a6:	31 81       	ldd	r19, Z+1	; 0x01
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	9a 81       	ldd	r25, Y+2	; 0x02
    21ac:	fc 01       	movw	r30, r24
    21ae:	26 83       	std	Z+6, r18	; 0x06
    21b0:	37 83       	std	Z+7, r19	; 0x07
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	9a 81       	ldd	r25, Y+2	; 0x02
    21b6:	fc 01       	movw	r30, r24
    21b8:	80 a1       	ldd	r24, Z+32	; 0x20
    21ba:	48 2f       	mov	r20, r24
    21bc:	50 e0       	ldi	r21, 0x00	; 0
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	9a 81       	ldd	r25, Y+2	; 0x02
    21c2:	fc 01       	movw	r30, r24
    21c4:	26 81       	ldd	r18, Z+6	; 0x06
    21c6:	37 81       	ldd	r19, Z+7	; 0x07
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	9c 81       	ldd	r25, Y+4	; 0x04
    21cc:	b9 01       	movw	r22, r18
    21ce:	0e 94 d1 3d 	call	0x7ba2	; 0x7ba2 <memcpy>
    21d2:	00 00       	nop
    21d4:	24 96       	adiw	r28, 0x04	; 4
    21d6:	cd bf       	out	0x3d, r28	; 61
    21d8:	de bf       	out	0x3e, r29	; 62
    21da:	df 91       	pop	r29
    21dc:	cf 91       	pop	r28
    21de:	08 95       	ret

000021e0 <prvUnlockQueue>:
    21e0:	cf 93       	push	r28
    21e2:	df 93       	push	r29
    21e4:	00 d0       	rcall	.+0      	; 0x21e6 <prvUnlockQueue+0x6>
    21e6:	1f 92       	push	r1
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
    21ec:	8b 83       	std	Y+3, r24	; 0x03
    21ee:	9c 83       	std	Y+4, r25	; 0x04
    21f0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    21f4:	ff 93       	push	r31
    21f6:	f8 7f       	andi	r31, 0xF8	; 248
    21f8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    21fc:	8b 81       	ldd	r24, Y+3	; 0x03
    21fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2200:	fc 01       	movw	r30, r24
    2202:	82 a1       	ldd	r24, Z+34	; 0x22
    2204:	89 83       	std	Y+1, r24	; 0x01
    2206:	12 c0       	rjmp	.+36     	; 0x222c <prvUnlockQueue+0x4c>
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	9c 81       	ldd	r25, Y+4	; 0x04
    220c:	fc 01       	movw	r30, r24
    220e:	83 89       	ldd	r24, Z+19	; 0x13
    2210:	88 23       	and	r24, r24
    2212:	81 f0       	breq	.+32     	; 0x2234 <prvUnlockQueue+0x54>
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	9c 81       	ldd	r25, Y+4	; 0x04
    2218:	43 96       	adiw	r24, 0x13	; 19
    221a:	0e 94 86 18 	call	0x310c	; 0x310c <xTaskRemoveFromEventList>
    221e:	88 23       	and	r24, r24
    2220:	11 f0       	breq	.+4      	; 0x2226 <prvUnlockQueue+0x46>
    2222:	0e 94 1c 1a 	call	0x3438	; 0x3438 <vTaskMissedYield>
    2226:	89 81       	ldd	r24, Y+1	; 0x01
    2228:	81 50       	subi	r24, 0x01	; 1
    222a:	89 83       	std	Y+1, r24	; 0x01
    222c:	89 81       	ldd	r24, Y+1	; 0x01
    222e:	18 16       	cp	r1, r24
    2230:	5c f3       	brlt	.-42     	; 0x2208 <prvUnlockQueue+0x28>
    2232:	01 c0       	rjmp	.+2      	; 0x2236 <prvUnlockQueue+0x56>
    2234:	00 00       	nop
    2236:	8b 81       	ldd	r24, Y+3	; 0x03
    2238:	9c 81       	ldd	r25, Y+4	; 0x04
    223a:	2f ef       	ldi	r18, 0xFF	; 255
    223c:	fc 01       	movw	r30, r24
    223e:	22 a3       	std	Z+34, r18	; 0x22
    2240:	ff 91       	pop	r31
    2242:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2246:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    224a:	ff 93       	push	r31
    224c:	f8 7f       	andi	r31, 0xF8	; 248
    224e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2252:	8b 81       	ldd	r24, Y+3	; 0x03
    2254:	9c 81       	ldd	r25, Y+4	; 0x04
    2256:	fc 01       	movw	r30, r24
    2258:	81 a1       	ldd	r24, Z+33	; 0x21
    225a:	8a 83       	std	Y+2, r24	; 0x02
    225c:	12 c0       	rjmp	.+36     	; 0x2282 <prvUnlockQueue+0xa2>
    225e:	8b 81       	ldd	r24, Y+3	; 0x03
    2260:	9c 81       	ldd	r25, Y+4	; 0x04
    2262:	fc 01       	movw	r30, r24
    2264:	80 85       	ldd	r24, Z+8	; 0x08
    2266:	88 23       	and	r24, r24
    2268:	81 f0       	breq	.+32     	; 0x228a <prvUnlockQueue+0xaa>
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	9c 81       	ldd	r25, Y+4	; 0x04
    226e:	08 96       	adiw	r24, 0x08	; 8
    2270:	0e 94 86 18 	call	0x310c	; 0x310c <xTaskRemoveFromEventList>
    2274:	88 23       	and	r24, r24
    2276:	11 f0       	breq	.+4      	; 0x227c <prvUnlockQueue+0x9c>
    2278:	0e 94 1c 1a 	call	0x3438	; 0x3438 <vTaskMissedYield>
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	81 50       	subi	r24, 0x01	; 1
    2280:	8a 83       	std	Y+2, r24	; 0x02
    2282:	8a 81       	ldd	r24, Y+2	; 0x02
    2284:	18 16       	cp	r1, r24
    2286:	5c f3       	brlt	.-42     	; 0x225e <prvUnlockQueue+0x7e>
    2288:	01 c0       	rjmp	.+2      	; 0x228c <prvUnlockQueue+0xac>
    228a:	00 00       	nop
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	9c 81       	ldd	r25, Y+4	; 0x04
    2290:	2f ef       	ldi	r18, 0xFF	; 255
    2292:	fc 01       	movw	r30, r24
    2294:	21 a3       	std	Z+33, r18	; 0x21
    2296:	ff 91       	pop	r31
    2298:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    229c:	00 00       	nop
    229e:	24 96       	adiw	r28, 0x04	; 4
    22a0:	cd bf       	out	0x3d, r28	; 61
    22a2:	de bf       	out	0x3e, r29	; 62
    22a4:	df 91       	pop	r29
    22a6:	cf 91       	pop	r28
    22a8:	08 95       	ret

000022aa <prvIsQueueEmpty>:
    22aa:	cf 93       	push	r28
    22ac:	df 93       	push	r29
    22ae:	00 d0       	rcall	.+0      	; 0x22b0 <prvIsQueueEmpty+0x6>
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
    22b4:	8a 83       	std	Y+2, r24	; 0x02
    22b6:	9b 83       	std	Y+3, r25	; 0x03
    22b8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    22bc:	ff 93       	push	r31
    22be:	f8 7f       	andi	r31, 0xF8	; 248
    22c0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    22c4:	8a 81       	ldd	r24, Y+2	; 0x02
    22c6:	9b 81       	ldd	r25, Y+3	; 0x03
    22c8:	fc 01       	movw	r30, r24
    22ca:	86 8d       	ldd	r24, Z+30	; 0x1e
    22cc:	88 23       	and	r24, r24
    22ce:	19 f4       	brne	.+6      	; 0x22d6 <prvIsQueueEmpty+0x2c>
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	89 83       	std	Y+1, r24	; 0x01
    22d4:	01 c0       	rjmp	.+2      	; 0x22d8 <prvIsQueueEmpty+0x2e>
    22d6:	19 82       	std	Y+1, r1	; 0x01
    22d8:	ff 91       	pop	r31
    22da:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	23 96       	adiw	r28, 0x03	; 3
    22e2:	cd bf       	out	0x3d, r28	; 61
    22e4:	de bf       	out	0x3e, r29	; 62
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	08 95       	ret

000022ec <prvIsQueueFull>:
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
    22f0:	00 d0       	rcall	.+0      	; 0x22f2 <prvIsQueueFull+0x6>
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    22f6:	8a 83       	std	Y+2, r24	; 0x02
    22f8:	9b 83       	std	Y+3, r25	; 0x03
    22fa:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    22fe:	ff 93       	push	r31
    2300:	f8 7f       	andi	r31, 0xF8	; 248
    2302:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2306:	8a 81       	ldd	r24, Y+2	; 0x02
    2308:	9b 81       	ldd	r25, Y+3	; 0x03
    230a:	fc 01       	movw	r30, r24
    230c:	26 8d       	ldd	r18, Z+30	; 0x1e
    230e:	8a 81       	ldd	r24, Y+2	; 0x02
    2310:	9b 81       	ldd	r25, Y+3	; 0x03
    2312:	fc 01       	movw	r30, r24
    2314:	87 8d       	ldd	r24, Z+31	; 0x1f
    2316:	28 17       	cp	r18, r24
    2318:	19 f4       	brne	.+6      	; 0x2320 <prvIsQueueFull+0x34>
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	89 83       	std	Y+1, r24	; 0x01
    231e:	01 c0       	rjmp	.+2      	; 0x2322 <prvIsQueueFull+0x36>
    2320:	19 82       	std	Y+1, r1	; 0x01
    2322:	ff 91       	pop	r31
    2324:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	23 96       	adiw	r28, 0x03	; 3
    232c:	cd bf       	out	0x3d, r28	; 61
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	df 91       	pop	r29
    2332:	cf 91       	pop	r28
    2334:	08 95       	ret

00002336 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    2336:	cf 93       	push	r28
    2338:	df 93       	push	r29
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
    233e:	29 97       	sbiw	r28, 0x09	; 9
    2340:	cd bf       	out	0x3d, r28	; 61
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	8b 83       	std	Y+3, r24	; 0x03
    2346:	9c 83       	std	Y+4, r25	; 0x04
    2348:	4d 83       	std	Y+5, r20	; 0x05
    234a:	5e 83       	std	Y+6, r21	; 0x06
    234c:	6f 83       	std	Y+7, r22	; 0x07
    234e:	78 87       	std	Y+8, r23	; 0x08
    2350:	29 87       	std	Y+9, r18	; 0x09
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	9c 81       	ldd	r25, Y+4	; 0x04
    2356:	89 83       	std	Y+1, r24	; 0x01
    2358:	9a 83       	std	Y+2, r25	; 0x02
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    235a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    235e:	ff 93       	push	r31
    2360:	f8 7f       	andi	r31, 0xF8	; 248
    2362:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	9a 81       	ldd	r25, Y+2	; 0x02
    236a:	fc 01       	movw	r30, r24
    236c:	81 a1       	ldd	r24, Z+33	; 0x21
    236e:	8f 3f       	cpi	r24, 0xFF	; 255
    2370:	21 f4       	brne	.+8      	; 0x237a <vQueueWaitForMessageRestricted+0x44>
    2372:	89 81       	ldd	r24, Y+1	; 0x01
    2374:	9a 81       	ldd	r25, Y+2	; 0x02
    2376:	fc 01       	movw	r30, r24
    2378:	11 a2       	std	Z+33, r1	; 0x21
    237a:	89 81       	ldd	r24, Y+1	; 0x01
    237c:	9a 81       	ldd	r25, Y+2	; 0x02
    237e:	fc 01       	movw	r30, r24
    2380:	82 a1       	ldd	r24, Z+34	; 0x22
    2382:	8f 3f       	cpi	r24, 0xFF	; 255
    2384:	21 f4       	brne	.+8      	; 0x238e <vQueueWaitForMessageRestricted+0x58>
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	9a 81       	ldd	r25, Y+2	; 0x02
    238a:	fc 01       	movw	r30, r24
    238c:	12 a2       	std	Z+34, r1	; 0x22
    238e:	ff 91       	pop	r31
    2390:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	9a 81       	ldd	r25, Y+2	; 0x02
    2398:	fc 01       	movw	r30, r24
    239a:	86 8d       	ldd	r24, Z+30	; 0x1e
    239c:	88 23       	and	r24, r24
    239e:	71 f4       	brne	.+28     	; 0x23bc <vQueueWaitForMessageRestricted+0x86>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    23a0:	89 81       	ldd	r24, Y+1	; 0x01
    23a2:	9a 81       	ldd	r25, Y+2	; 0x02
    23a4:	fc 01       	movw	r30, r24
    23a6:	73 96       	adiw	r30, 0x13	; 19
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	af 81       	ldd	r26, Y+7	; 0x07
    23ae:	b8 85       	ldd	r27, Y+8	; 0x08
    23b0:	29 85       	ldd	r18, Y+9	; 0x09
    23b2:	ac 01       	movw	r20, r24
    23b4:	bd 01       	movw	r22, r26
    23b6:	cf 01       	movw	r24, r30
    23b8:	0e 94 52 18 	call	0x30a4	; 0x30a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	9a 81       	ldd	r25, Y+2	; 0x02
    23c0:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <prvUnlockQueue>
	}
    23c4:	00 00       	nop
    23c6:	29 96       	adiw	r28, 0x09	; 9
    23c8:	cd bf       	out	0x3d, r28	; 61
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	df 91       	pop	r29
    23ce:	cf 91       	pop	r28
    23d0:	08 95       	ret

000023d2 <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    23d2:	8f 92       	push	r8
    23d4:	9f 92       	push	r9
    23d6:	af 92       	push	r10
    23d8:	bf 92       	push	r11
    23da:	cf 92       	push	r12
    23dc:	df 92       	push	r13
    23de:	ef 92       	push	r14
    23e0:	ff 92       	push	r15
    23e2:	0f 93       	push	r16
    23e4:	1f 93       	push	r17
    23e6:	cf 93       	push	r28
    23e8:	df 93       	push	r29
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
    23ee:	60 97       	sbiw	r28, 0x10	; 16
    23f0:	cd bf       	out	0x3d, r28	; 61
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	8e 83       	std	Y+6, r24	; 0x06
    23f6:	9f 83       	std	Y+7, r25	; 0x07
    23f8:	68 87       	std	Y+8, r22	; 0x08
    23fa:	79 87       	std	Y+9, r23	; 0x09
    23fc:	4a 87       	std	Y+10, r20	; 0x0a
    23fe:	5b 87       	std	Y+11, r21	; 0x0b
    2400:	2c 87       	std	Y+12, r18	; 0x0c
    2402:	3d 87       	std	Y+13, r19	; 0x0d
    2404:	0e 87       	std	Y+14, r16	; 0x0e
    2406:	ef 86       	std	Y+15, r14	; 0x0f
    2408:	f8 8a       	std	Y+16, r15	; 0x10
    240a:	8a 85       	ldd	r24, Y+10	; 0x0a
    240c:	9b 85       	ldd	r25, Y+11	; 0x0b
    240e:	0e 94 99 07 	call	0xf32	; 0xf32 <pvPortMalloc>
    2412:	8c 83       	std	Y+4, r24	; 0x04
    2414:	9d 83       	std	Y+5, r25	; 0x05
    2416:	8c 81       	ldd	r24, Y+4	; 0x04
    2418:	9d 81       	ldd	r25, Y+5	; 0x05
    241a:	89 2b       	or	r24, r25
    241c:	b9 f0       	breq	.+46     	; 0x244c <xTaskCreate+0x7a>
    241e:	8c e2       	ldi	r24, 0x2C	; 44
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	0e 94 99 07 	call	0xf32	; 0xf32 <pvPortMalloc>
    2426:	89 83       	std	Y+1, r24	; 0x01
    2428:	9a 83       	std	Y+2, r25	; 0x02
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	9a 81       	ldd	r25, Y+2	; 0x02
    242e:	89 2b       	or	r24, r25
    2430:	41 f0       	breq	.+16     	; 0x2442 <xTaskCreate+0x70>
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	9a 81       	ldd	r25, Y+2	; 0x02
    2436:	2c 81       	ldd	r18, Y+4	; 0x04
    2438:	3d 81       	ldd	r19, Y+5	; 0x05
    243a:	fc 01       	movw	r30, r24
    243c:	23 8f       	std	Z+27, r18	; 0x1b
    243e:	34 8f       	std	Z+28, r19	; 0x1c
    2440:	07 c0       	rjmp	.+14     	; 0x2450 <xTaskCreate+0x7e>
    2442:	8c 81       	ldd	r24, Y+4	; 0x04
    2444:	9d 81       	ldd	r25, Y+5	; 0x05
    2446:	0e 94 dd 07 	call	0xfba	; 0xfba <vPortFree>
    244a:	02 c0       	rjmp	.+4      	; 0x2450 <xTaskCreate+0x7e>
    244c:	19 82       	std	Y+1, r1	; 0x01
    244e:	1a 82       	std	Y+2, r1	; 0x02
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	9a 81       	ldd	r25, Y+2	; 0x02
    2454:	89 2b       	or	r24, r25
    2456:	09 f1       	breq	.+66     	; 0x249a <xTaskCreate+0xc8>
    2458:	8a 85       	ldd	r24, Y+10	; 0x0a
    245a:	9b 85       	ldd	r25, Y+11	; 0x0b
    245c:	cc 01       	movw	r24, r24
    245e:	a0 e0       	ldi	r26, 0x00	; 0
    2460:	b0 e0       	ldi	r27, 0x00	; 0
    2462:	09 81       	ldd	r16, Y+1	; 0x01
    2464:	1a 81       	ldd	r17, Y+2	; 0x02
    2466:	4f 85       	ldd	r20, Y+15	; 0x0f
    2468:	58 89       	ldd	r21, Y+16	; 0x10
    246a:	2c 85       	ldd	r18, Y+12	; 0x0c
    246c:	3d 85       	ldd	r19, Y+13	; 0x0d
    246e:	68 85       	ldd	r22, Y+8	; 0x08
    2470:	79 85       	ldd	r23, Y+9	; 0x09
    2472:	ee 81       	ldd	r30, Y+6	; 0x06
    2474:	ff 81       	ldd	r31, Y+7	; 0x07
    2476:	81 2c       	mov	r8, r1
    2478:	91 2c       	mov	r9, r1
    247a:	58 01       	movw	r10, r16
    247c:	6a 01       	movw	r12, r20
    247e:	ee 84       	ldd	r14, Y+14	; 0x0e
    2480:	89 01       	movw	r16, r18
    2482:	9c 01       	movw	r18, r24
    2484:	ad 01       	movw	r20, r26
    2486:	cf 01       	movw	r24, r30
    2488:	0e 94 60 12 	call	0x24c0	; 0x24c0 <prvInitialiseNewTask>
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	9a 81       	ldd	r25, Y+2	; 0x02
    2490:	0e 94 36 13 	call	0x266c	; 0x266c <prvAddNewTaskToReadyList>
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	8b 83       	std	Y+3, r24	; 0x03
    2498:	02 c0       	rjmp	.+4      	; 0x249e <xTaskCreate+0xcc>
    249a:	8f ef       	ldi	r24, 0xFF	; 255
    249c:	8b 83       	std	Y+3, r24	; 0x03
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	60 96       	adiw	r28, 0x10	; 16
    24a2:	cd bf       	out	0x3d, r28	; 61
    24a4:	de bf       	out	0x3e, r29	; 62
    24a6:	df 91       	pop	r29
    24a8:	cf 91       	pop	r28
    24aa:	1f 91       	pop	r17
    24ac:	0f 91       	pop	r16
    24ae:	ff 90       	pop	r15
    24b0:	ef 90       	pop	r14
    24b2:	df 90       	pop	r13
    24b4:	cf 90       	pop	r12
    24b6:	bf 90       	pop	r11
    24b8:	af 90       	pop	r10
    24ba:	9f 90       	pop	r9
    24bc:	8f 90       	pop	r8
    24be:	08 95       	ret

000024c0 <prvInitialiseNewTask>:
    24c0:	8f 92       	push	r8
    24c2:	9f 92       	push	r9
    24c4:	af 92       	push	r10
    24c6:	bf 92       	push	r11
    24c8:	cf 92       	push	r12
    24ca:	df 92       	push	r13
    24cc:	ef 92       	push	r14
    24ce:	ff 92       	push	r15
    24d0:	0f 93       	push	r16
    24d2:	1f 93       	push	r17
    24d4:	cf 93       	push	r28
    24d6:	df 93       	push	r29
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	64 97       	sbiw	r28, 0x14	; 20
    24de:	cd bf       	out	0x3d, r28	; 61
    24e0:	de bf       	out	0x3e, r29	; 62
    24e2:	8c 83       	std	Y+4, r24	; 0x04
    24e4:	9d 83       	std	Y+5, r25	; 0x05
    24e6:	6e 83       	std	Y+6, r22	; 0x06
    24e8:	7f 83       	std	Y+7, r23	; 0x07
    24ea:	28 87       	std	Y+8, r18	; 0x08
    24ec:	39 87       	std	Y+9, r19	; 0x09
    24ee:	4a 87       	std	Y+10, r20	; 0x0a
    24f0:	5b 87       	std	Y+11, r21	; 0x0b
    24f2:	0c 87       	std	Y+12, r16	; 0x0c
    24f4:	1d 87       	std	Y+13, r17	; 0x0d
    24f6:	ee 86       	std	Y+14, r14	; 0x0e
    24f8:	cf 86       	std	Y+15, r12	; 0x0f
    24fa:	d8 8a       	std	Y+16, r13	; 0x10
    24fc:	a9 8a       	std	Y+17, r10	; 0x11
    24fe:	ba 8a       	std	Y+18, r11	; 0x12
    2500:	8b 8a       	std	Y+19, r8	; 0x13
    2502:	9c 8a       	std	Y+20, r9	; 0x14
    2504:	28 85       	ldd	r18, Y+8	; 0x08
    2506:	39 85       	ldd	r19, Y+9	; 0x09
    2508:	89 89       	ldd	r24, Y+17	; 0x11
    250a:	9a 89       	ldd	r25, Y+18	; 0x12
    250c:	fc 01       	movw	r30, r24
    250e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2510:	94 8d       	ldd	r25, Z+28	; 0x1c
    2512:	a9 01       	movw	r20, r18
    2514:	65 ea       	ldi	r22, 0xA5	; 165
    2516:	70 e0       	ldi	r23, 0x00	; 0
    2518:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <memset>
    251c:	89 89       	ldd	r24, Y+17	; 0x11
    251e:	9a 89       	ldd	r25, Y+18	; 0x12
    2520:	fc 01       	movw	r30, r24
    2522:	23 8d       	ldd	r18, Z+27	; 0x1b
    2524:	34 8d       	ldd	r19, Z+28	; 0x1c
    2526:	88 85       	ldd	r24, Y+8	; 0x08
    2528:	99 85       	ldd	r25, Y+9	; 0x09
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	82 0f       	add	r24, r18
    252e:	93 1f       	adc	r25, r19
    2530:	8a 83       	std	Y+2, r24	; 0x02
    2532:	9b 83       	std	Y+3, r25	; 0x03
    2534:	19 82       	std	Y+1, r1	; 0x01
    2536:	21 c0       	rjmp	.+66     	; 0x257a <prvInitialiseNewTask+0xba>
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	88 2f       	mov	r24, r24
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	29 81       	ldd	r18, Y+1	; 0x01
    2540:	22 2f       	mov	r18, r18
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	4e 81       	ldd	r20, Y+6	; 0x06
    2546:	5f 81       	ldd	r21, Y+7	; 0x07
    2548:	24 0f       	add	r18, r20
    254a:	35 1f       	adc	r19, r21
    254c:	f9 01       	movw	r30, r18
    254e:	40 81       	ld	r20, Z
    2550:	29 89       	ldd	r18, Y+17	; 0x11
    2552:	3a 89       	ldd	r19, Y+18	; 0x12
    2554:	82 0f       	add	r24, r18
    2556:	93 1f       	adc	r25, r19
    2558:	4d 96       	adiw	r24, 0x1d	; 29
    255a:	fc 01       	movw	r30, r24
    255c:	40 83       	st	Z, r20
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	88 2f       	mov	r24, r24
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	2e 81       	ldd	r18, Y+6	; 0x06
    2566:	3f 81       	ldd	r19, Y+7	; 0x07
    2568:	82 0f       	add	r24, r18
    256a:	93 1f       	adc	r25, r19
    256c:	fc 01       	movw	r30, r24
    256e:	80 81       	ld	r24, Z
    2570:	88 23       	and	r24, r24
    2572:	39 f0       	breq	.+14     	; 0x2582 <prvInitialiseNewTask+0xc2>
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	8f 5f       	subi	r24, 0xFF	; 255
    2578:	89 83       	std	Y+1, r24	; 0x01
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	88 30       	cpi	r24, 0x08	; 8
    257e:	e0 f2       	brcs	.-72     	; 0x2538 <prvInitialiseNewTask+0x78>
    2580:	01 c0       	rjmp	.+2      	; 0x2584 <prvInitialiseNewTask+0xc4>
    2582:	00 00       	nop
    2584:	89 89       	ldd	r24, Y+17	; 0x11
    2586:	9a 89       	ldd	r25, Y+18	; 0x12
    2588:	fc 01       	movw	r30, r24
    258a:	14 a2       	std	Z+36, r1	; 0x24
    258c:	8e 85       	ldd	r24, Y+14	; 0x0e
    258e:	84 30       	cpi	r24, 0x04	; 4
    2590:	10 f0       	brcs	.+4      	; 0x2596 <prvInitialiseNewTask+0xd6>
    2592:	83 e0       	ldi	r24, 0x03	; 3
    2594:	8e 87       	std	Y+14, r24	; 0x0e
    2596:	89 89       	ldd	r24, Y+17	; 0x11
    2598:	9a 89       	ldd	r25, Y+18	; 0x12
    259a:	2e 85       	ldd	r18, Y+14	; 0x0e
    259c:	fc 01       	movw	r30, r24
    259e:	22 8f       	std	Z+26, r18	; 0x1a
    25a0:	89 89       	ldd	r24, Y+17	; 0x11
    25a2:	9a 89       	ldd	r25, Y+18	; 0x12
    25a4:	02 96       	adiw	r24, 0x02	; 2
    25a6:	0e 94 25 08 	call	0x104a	; 0x104a <vListInitialiseItem>
    25aa:	89 89       	ldd	r24, Y+17	; 0x11
    25ac:	9a 89       	ldd	r25, Y+18	; 0x12
    25ae:	0e 96       	adiw	r24, 0x0e	; 14
    25b0:	0e 94 25 08 	call	0x104a	; 0x104a <vListInitialiseItem>
    25b4:	89 89       	ldd	r24, Y+17	; 0x11
    25b6:	9a 89       	ldd	r25, Y+18	; 0x12
    25b8:	29 89       	ldd	r18, Y+17	; 0x11
    25ba:	3a 89       	ldd	r19, Y+18	; 0x12
    25bc:	fc 01       	movw	r30, r24
    25be:	22 87       	std	Z+10, r18	; 0x0a
    25c0:	33 87       	std	Z+11, r19	; 0x0b
    25c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    25c4:	88 2f       	mov	r24, r24
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	a0 e0       	ldi	r26, 0x00	; 0
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	24 e0       	ldi	r18, 0x04	; 4
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	40 e0       	ldi	r20, 0x00	; 0
    25d2:	50 e0       	ldi	r21, 0x00	; 0
    25d4:	79 01       	movw	r14, r18
    25d6:	8a 01       	movw	r16, r20
    25d8:	e8 1a       	sub	r14, r24
    25da:	f9 0a       	sbc	r15, r25
    25dc:	0a 0b       	sbc	r16, r26
    25de:	1b 0b       	sbc	r17, r27
    25e0:	d8 01       	movw	r26, r16
    25e2:	c7 01       	movw	r24, r14
    25e4:	29 89       	ldd	r18, Y+17	; 0x11
    25e6:	3a 89       	ldd	r19, Y+18	; 0x12
    25e8:	f9 01       	movw	r30, r18
    25ea:	86 87       	std	Z+14, r24	; 0x0e
    25ec:	97 87       	std	Z+15, r25	; 0x0f
    25ee:	a0 8b       	std	Z+16, r26	; 0x10
    25f0:	b1 8b       	std	Z+17, r27	; 0x11
    25f2:	89 89       	ldd	r24, Y+17	; 0x11
    25f4:	9a 89       	ldd	r25, Y+18	; 0x12
    25f6:	29 89       	ldd	r18, Y+17	; 0x11
    25f8:	3a 89       	ldd	r19, Y+18	; 0x12
    25fa:	fc 01       	movw	r30, r24
    25fc:	26 8b       	std	Z+22, r18	; 0x16
    25fe:	37 8b       	std	Z+23, r19	; 0x17
    2600:	89 89       	ldd	r24, Y+17	; 0x11
    2602:	9a 89       	ldd	r25, Y+18	; 0x12
    2604:	fc 01       	movw	r30, r24
    2606:	17 a2       	std	Z+39, r1	; 0x27
    2608:	10 a6       	std	Z+40, r1	; 0x28
    260a:	11 a6       	std	Z+41, r1	; 0x29
    260c:	12 a6       	std	Z+42, r1	; 0x2a
    260e:	89 89       	ldd	r24, Y+17	; 0x11
    2610:	9a 89       	ldd	r25, Y+18	; 0x12
    2612:	fc 01       	movw	r30, r24
    2614:	13 a6       	std	Z+43, r1	; 0x2b
    2616:	4c 85       	ldd	r20, Y+12	; 0x0c
    2618:	5d 85       	ldd	r21, Y+13	; 0x0d
    261a:	2c 81       	ldd	r18, Y+4	; 0x04
    261c:	3d 81       	ldd	r19, Y+5	; 0x05
    261e:	8a 81       	ldd	r24, Y+2	; 0x02
    2620:	9b 81       	ldd	r25, Y+3	; 0x03
    2622:	b9 01       	movw	r22, r18
    2624:	0e 94 71 09 	call	0x12e2	; 0x12e2 <pxPortInitialiseStack>
    2628:	9c 01       	movw	r18, r24
    262a:	89 89       	ldd	r24, Y+17	; 0x11
    262c:	9a 89       	ldd	r25, Y+18	; 0x12
    262e:	fc 01       	movw	r30, r24
    2630:	20 83       	st	Z, r18
    2632:	31 83       	std	Z+1, r19	; 0x01
    2634:	8f 85       	ldd	r24, Y+15	; 0x0f
    2636:	98 89       	ldd	r25, Y+16	; 0x10
    2638:	89 2b       	or	r24, r25
    263a:	39 f0       	breq	.+14     	; 0x264a <prvInitialiseNewTask+0x18a>
    263c:	8f 85       	ldd	r24, Y+15	; 0x0f
    263e:	98 89       	ldd	r25, Y+16	; 0x10
    2640:	29 89       	ldd	r18, Y+17	; 0x11
    2642:	3a 89       	ldd	r19, Y+18	; 0x12
    2644:	fc 01       	movw	r30, r24
    2646:	20 83       	st	Z, r18
    2648:	31 83       	std	Z+1, r19	; 0x01
    264a:	00 00       	nop
    264c:	64 96       	adiw	r28, 0x14	; 20
    264e:	cd bf       	out	0x3d, r28	; 61
    2650:	de bf       	out	0x3e, r29	; 62
    2652:	df 91       	pop	r29
    2654:	cf 91       	pop	r28
    2656:	1f 91       	pop	r17
    2658:	0f 91       	pop	r16
    265a:	ff 90       	pop	r15
    265c:	ef 90       	pop	r14
    265e:	df 90       	pop	r13
    2660:	cf 90       	pop	r12
    2662:	bf 90       	pop	r11
    2664:	af 90       	pop	r10
    2666:	9f 90       	pop	r9
    2668:	8f 90       	pop	r8
    266a:	08 95       	ret

0000266c <prvAddNewTaskToReadyList>:
    266c:	cf 93       	push	r28
    266e:	df 93       	push	r29
    2670:	1f 92       	push	r1
    2672:	1f 92       	push	r1
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
    2678:	89 83       	std	Y+1, r24	; 0x01
    267a:	9a 83       	std	Y+2, r25	; 0x02
    267c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2680:	ff 93       	push	r31
    2682:	f8 7f       	andi	r31, 0xF8	; 248
    2684:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2688:	80 91 00 35 	lds	r24, 0x3500	; 0x803500 <uxCurrentNumberOfTasks>
    268c:	8f 5f       	subi	r24, 0xFF	; 255
    268e:	80 93 00 35 	sts	0x3500, r24	; 0x803500 <uxCurrentNumberOfTasks>
    2692:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    2696:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    269a:	89 2b       	or	r24, r25
    269c:	69 f4       	brne	.+26     	; 0x26b8 <prvAddNewTaskToReadyList+0x4c>
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	9a 81       	ldd	r25, Y+2	; 0x02
    26a2:	80 93 a2 34 	sts	0x34A2, r24	; 0x8034a2 <pxCurrentTCB>
    26a6:	90 93 a3 34 	sts	0x34A3, r25	; 0x8034a3 <pxCurrentTCB+0x1>
    26aa:	80 91 00 35 	lds	r24, 0x3500	; 0x803500 <uxCurrentNumberOfTasks>
    26ae:	81 30       	cpi	r24, 0x01	; 1
    26b0:	c9 f4       	brne	.+50     	; 0x26e4 <prvAddNewTaskToReadyList+0x78>
    26b2:	0e 94 3a 1a 	call	0x3474	; 0x3474 <prvInitialiseTaskLists>
    26b6:	16 c0       	rjmp	.+44     	; 0x26e4 <prvAddNewTaskToReadyList+0x78>
    26b8:	80 91 06 35 	lds	r24, 0x3506	; 0x803506 <xSchedulerRunning>
    26bc:	88 23       	and	r24, r24
    26be:	91 f4       	brne	.+36     	; 0x26e4 <prvAddNewTaskToReadyList+0x78>
    26c0:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    26c4:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    26c8:	fc 01       	movw	r30, r24
    26ca:	22 8d       	ldd	r18, Z+26	; 0x1a
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	9a 81       	ldd	r25, Y+2	; 0x02
    26d0:	fc 01       	movw	r30, r24
    26d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    26d4:	82 17       	cp	r24, r18
    26d6:	30 f0       	brcs	.+12     	; 0x26e4 <prvAddNewTaskToReadyList+0x78>
    26d8:	89 81       	ldd	r24, Y+1	; 0x01
    26da:	9a 81       	ldd	r25, Y+2	; 0x02
    26dc:	80 93 a2 34 	sts	0x34A2, r24	; 0x8034a2 <pxCurrentTCB>
    26e0:	90 93 a3 34 	sts	0x34A3, r25	; 0x8034a3 <pxCurrentTCB+0x1>
    26e4:	80 91 0a 35 	lds	r24, 0x350A	; 0x80350a <uxTaskNumber>
    26e8:	8f 5f       	subi	r24, 0xFF	; 255
    26ea:	80 93 0a 35 	sts	0x350A, r24	; 0x80350a <uxTaskNumber>
    26ee:	20 91 0a 35 	lds	r18, 0x350A	; 0x80350a <uxTaskNumber>
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	9a 81       	ldd	r25, Y+2	; 0x02
    26f6:	fc 01       	movw	r30, r24
    26f8:	25 a3       	std	Z+37, r18	; 0x25
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	9a 81       	ldd	r25, Y+2	; 0x02
    26fe:	fc 01       	movw	r30, r24
    2700:	92 8d       	ldd	r25, Z+26	; 0x1a
    2702:	80 91 05 35 	lds	r24, 0x3505	; 0x803505 <uxTopReadyPriority>
    2706:	89 17       	cp	r24, r25
    2708:	30 f4       	brcc	.+12     	; 0x2716 <prvAddNewTaskToReadyList+0xaa>
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	9a 81       	ldd	r25, Y+2	; 0x02
    270e:	fc 01       	movw	r30, r24
    2710:	82 8d       	ldd	r24, Z+26	; 0x1a
    2712:	80 93 05 35 	sts	0x3505, r24	; 0x803505 <uxTopReadyPriority>
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	9a 81       	ldd	r25, Y+2	; 0x02
    271a:	ac 01       	movw	r20, r24
    271c:	4e 5f       	subi	r20, 0xFE	; 254
    271e:	5f 4f       	sbci	r21, 0xFF	; 255
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	9a 81       	ldd	r25, Y+2	; 0x02
    2724:	fc 01       	movw	r30, r24
    2726:	82 8d       	ldd	r24, Z+26	; 0x1a
    2728:	28 2f       	mov	r18, r24
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	6b e0       	ldi	r22, 0x0B	; 11
    272e:	62 9f       	mul	r22, r18
    2730:	c0 01       	movw	r24, r0
    2732:	63 9f       	mul	r22, r19
    2734:	90 0d       	add	r25, r0
    2736:	11 24       	eor	r1, r1
    2738:	8c 55       	subi	r24, 0x5C	; 92
    273a:	9b 4c       	sbci	r25, 0xCB	; 203
    273c:	ba 01       	movw	r22, r20
    273e:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsertEnd>
    2742:	ff 91       	pop	r31
    2744:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2748:	80 91 06 35 	lds	r24, 0x3506	; 0x803506 <xSchedulerRunning>
    274c:	88 23       	and	r24, r24
    274e:	71 f0       	breq	.+28     	; 0x276c <prvAddNewTaskToReadyList+0x100>
    2750:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    2754:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    2758:	fc 01       	movw	r30, r24
    275a:	22 8d       	ldd	r18, Z+26	; 0x1a
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	9a 81       	ldd	r25, Y+2	; 0x02
    2760:	fc 01       	movw	r30, r24
    2762:	82 8d       	ldd	r24, Z+26	; 0x1a
    2764:	28 17       	cp	r18, r24
    2766:	10 f4       	brcc	.+4      	; 0x276c <prvAddNewTaskToReadyList+0x100>
    2768:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    276c:	00 00       	nop
    276e:	0f 90       	pop	r0
    2770:	0f 90       	pop	r0
    2772:	df 91       	pop	r29
    2774:	cf 91       	pop	r28
    2776:	08 95       	ret

00002778 <vTaskDelay>:
    2778:	cf 93       	push	r28
    277a:	df 93       	push	r29
    277c:	cd b7       	in	r28, 0x3d	; 61
    277e:	de b7       	in	r29, 0x3e	; 62
    2780:	25 97       	sbiw	r28, 0x05	; 5
    2782:	cd bf       	out	0x3d, r28	; 61
    2784:	de bf       	out	0x3e, r29	; 62
    2786:	6a 83       	std	Y+2, r22	; 0x02
    2788:	7b 83       	std	Y+3, r23	; 0x03
    278a:	8c 83       	std	Y+4, r24	; 0x04
    278c:	9d 83       	std	Y+5, r25	; 0x05
    278e:	19 82       	std	Y+1, r1	; 0x01
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
    2792:	9b 81       	ldd	r25, Y+3	; 0x03
    2794:	ac 81       	ldd	r26, Y+4	; 0x04
    2796:	bd 81       	ldd	r27, Y+5	; 0x05
    2798:	89 2b       	or	r24, r25
    279a:	8a 2b       	or	r24, r26
    279c:	8b 2b       	or	r24, r27
    279e:	71 f0       	breq	.+28     	; 0x27bc <vTaskDelay+0x44>
    27a0:	0e 94 40 15 	call	0x2a80	; 0x2a80 <vTaskSuspendAll>
    27a4:	8a 81       	ldd	r24, Y+2	; 0x02
    27a6:	9b 81       	ldd	r25, Y+3	; 0x03
    27a8:	ac 81       	ldd	r26, Y+4	; 0x04
    27aa:	bd 81       	ldd	r27, Y+5	; 0x05
    27ac:	40 e0       	ldi	r20, 0x00	; 0
    27ae:	bc 01       	movw	r22, r24
    27b0:	cd 01       	movw	r24, r26
    27b2:	0e 94 17 1b 	call	0x362e	; 0x362e <prvAddCurrentTaskToDelayedList>
    27b6:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
    27ba:	89 83       	std	Y+1, r24	; 0x01
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	88 23       	and	r24, r24
    27c0:	11 f4       	brne	.+4      	; 0x27c6 <vTaskDelay+0x4e>
    27c2:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    27c6:	00 00       	nop
    27c8:	25 96       	adiw	r28, 0x05	; 5
    27ca:	cd bf       	out	0x3d, r28	; 61
    27cc:	de bf       	out	0x3e, r29	; 62
    27ce:	df 91       	pop	r29
    27d0:	cf 91       	pop	r28
    27d2:	08 95       	ret

000027d4 <vTaskSuspend>:
    27d4:	cf 93       	push	r28
    27d6:	df 93       	push	r29
    27d8:	00 d0       	rcall	.+0      	; 0x27da <vTaskSuspend+0x6>
    27da:	1f 92       	push	r1
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
    27e0:	8b 83       	std	Y+3, r24	; 0x03
    27e2:	9c 83       	std	Y+4, r25	; 0x04
    27e4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    27e8:	ff 93       	push	r31
    27ea:	f8 7f       	andi	r31, 0xF8	; 248
    27ec:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    27f0:	8b 81       	ldd	r24, Y+3	; 0x03
    27f2:	9c 81       	ldd	r25, Y+4	; 0x04
    27f4:	89 2b       	or	r24, r25
    27f6:	29 f4       	brne	.+10     	; 0x2802 <vTaskSuspend+0x2e>
    27f8:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    27fc:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    2800:	02 c0       	rjmp	.+4      	; 0x2806 <vTaskSuspend+0x32>
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	9c 81       	ldd	r25, Y+4	; 0x04
    2806:	89 83       	std	Y+1, r24	; 0x01
    2808:	9a 83       	std	Y+2, r25	; 0x02
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	9a 81       	ldd	r25, Y+2	; 0x02
    280e:	02 96       	adiw	r24, 0x02	; 2
    2810:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	9a 81       	ldd	r25, Y+2	; 0x02
    2818:	fc 01       	movw	r30, r24
    281a:	80 8d       	ldd	r24, Z+24	; 0x18
    281c:	91 8d       	ldd	r25, Z+25	; 0x19
    281e:	89 2b       	or	r24, r25
    2820:	29 f0       	breq	.+10     	; 0x282c <vTaskSuspend+0x58>
    2822:	89 81       	ldd	r24, Y+1	; 0x01
    2824:	9a 81       	ldd	r25, Y+2	; 0x02
    2826:	0e 96       	adiw	r24, 0x0e	; 14
    2828:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    282c:	89 81       	ldd	r24, Y+1	; 0x01
    282e:	9a 81       	ldd	r25, Y+2	; 0x02
    2830:	02 96       	adiw	r24, 0x02	; 2
    2832:	bc 01       	movw	r22, r24
    2834:	85 ef       	ldi	r24, 0xF5	; 245
    2836:	94 e3       	ldi	r25, 0x34	; 52
    2838:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsertEnd>
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	9a 81       	ldd	r25, Y+2	; 0x02
    2840:	fc 01       	movw	r30, r24
    2842:	83 a5       	ldd	r24, Z+43	; 0x2b
    2844:	81 30       	cpi	r24, 0x01	; 1
    2846:	21 f4       	brne	.+8      	; 0x2850 <vTaskSuspend+0x7c>
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	9a 81       	ldd	r25, Y+2	; 0x02
    284c:	fc 01       	movw	r30, r24
    284e:	13 a6       	std	Z+43, r1	; 0x2b
    2850:	ff 91       	pop	r31
    2852:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2856:	80 91 06 35 	lds	r24, 0x3506	; 0x803506 <xSchedulerRunning>
    285a:	88 23       	and	r24, r24
    285c:	59 f0       	breq	.+22     	; 0x2874 <vTaskSuspend+0xa0>
    285e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2862:	ff 93       	push	r31
    2864:	f8 7f       	andi	r31, 0xF8	; 248
    2866:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    286a:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <prvResetNextTaskUnblockTime>
    286e:	ff 91       	pop	r31
    2870:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2874:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    2878:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    287c:	29 81       	ldd	r18, Y+1	; 0x01
    287e:	3a 81       	ldd	r19, Y+2	; 0x02
    2880:	28 17       	cp	r18, r24
    2882:	39 07       	cpc	r19, r25
    2884:	a1 f4       	brne	.+40     	; 0x28ae <vTaskSuspend+0xda>
    2886:	80 91 06 35 	lds	r24, 0x3506	; 0x803506 <xSchedulerRunning>
    288a:	88 23       	and	r24, r24
    288c:	19 f0       	breq	.+6      	; 0x2894 <vTaskSuspend+0xc0>
    288e:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    2892:	0d c0       	rjmp	.+26     	; 0x28ae <vTaskSuspend+0xda>
    2894:	90 91 f5 34 	lds	r25, 0x34F5	; 0x8034f5 <xSuspendedTaskList>
    2898:	80 91 00 35 	lds	r24, 0x3500	; 0x803500 <uxCurrentNumberOfTasks>
    289c:	98 17       	cp	r25, r24
    289e:	29 f4       	brne	.+10     	; 0x28aa <vTaskSuspend+0xd6>
    28a0:	10 92 a2 34 	sts	0x34A2, r1	; 0x8034a2 <pxCurrentTCB>
    28a4:	10 92 a3 34 	sts	0x34A3, r1	; 0x8034a3 <pxCurrentTCB+0x1>
    28a8:	02 c0       	rjmp	.+4      	; 0x28ae <vTaskSuspend+0xda>
    28aa:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <vTaskSwitchContext>
    28ae:	00 00       	nop
    28b0:	24 96       	adiw	r28, 0x04	; 4
    28b2:	cd bf       	out	0x3d, r28	; 61
    28b4:	de bf       	out	0x3e, r29	; 62
    28b6:	df 91       	pop	r29
    28b8:	cf 91       	pop	r28
    28ba:	08 95       	ret

000028bc <prvTaskIsTaskSuspended>:
    28bc:	cf 93       	push	r28
    28be:	df 93       	push	r29
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
    28c4:	25 97       	sbiw	r28, 0x05	; 5
    28c6:	cd bf       	out	0x3d, r28	; 61
    28c8:	de bf       	out	0x3e, r29	; 62
    28ca:	8c 83       	std	Y+4, r24	; 0x04
    28cc:	9d 83       	std	Y+5, r25	; 0x05
    28ce:	19 82       	std	Y+1, r1	; 0x01
    28d0:	8c 81       	ldd	r24, Y+4	; 0x04
    28d2:	9d 81       	ldd	r25, Y+5	; 0x05
    28d4:	8a 83       	std	Y+2, r24	; 0x02
    28d6:	9b 83       	std	Y+3, r25	; 0x03
    28d8:	8a 81       	ldd	r24, Y+2	; 0x02
    28da:	9b 81       	ldd	r25, Y+3	; 0x03
    28dc:	fc 01       	movw	r30, r24
    28de:	84 85       	ldd	r24, Z+12	; 0x0c
    28e0:	95 85       	ldd	r25, Z+13	; 0x0d
    28e2:	85 5f       	subi	r24, 0xF5	; 245
    28e4:	94 43       	sbci	r25, 0x34	; 52
    28e6:	89 f4       	brne	.+34     	; 0x290a <prvTaskIsTaskSuspended+0x4e>
    28e8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ea:	9b 81       	ldd	r25, Y+3	; 0x03
    28ec:	fc 01       	movw	r30, r24
    28ee:	80 8d       	ldd	r24, Z+24	; 0x18
    28f0:	91 8d       	ldd	r25, Z+25	; 0x19
    28f2:	8a 5e       	subi	r24, 0xEA	; 234
    28f4:	94 43       	sbci	r25, 0x34	; 52
    28f6:	49 f0       	breq	.+18     	; 0x290a <prvTaskIsTaskSuspended+0x4e>
    28f8:	8a 81       	ldd	r24, Y+2	; 0x02
    28fa:	9b 81       	ldd	r25, Y+3	; 0x03
    28fc:	fc 01       	movw	r30, r24
    28fe:	80 8d       	ldd	r24, Z+24	; 0x18
    2900:	91 8d       	ldd	r25, Z+25	; 0x19
    2902:	89 2b       	or	r24, r25
    2904:	11 f4       	brne	.+4      	; 0x290a <prvTaskIsTaskSuspended+0x4e>
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	89 83       	std	Y+1, r24	; 0x01
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	25 96       	adiw	r28, 0x05	; 5
    290e:	cd bf       	out	0x3d, r28	; 61
    2910:	de bf       	out	0x3e, r29	; 62
    2912:	df 91       	pop	r29
    2914:	cf 91       	pop	r28
    2916:	08 95       	ret

00002918 <vTaskResume>:
    2918:	cf 93       	push	r28
    291a:	df 93       	push	r29
    291c:	00 d0       	rcall	.+0      	; 0x291e <vTaskResume+0x6>
    291e:	1f 92       	push	r1
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	8b 83       	std	Y+3, r24	; 0x03
    2926:	9c 83       	std	Y+4, r25	; 0x04
    2928:	8b 81       	ldd	r24, Y+3	; 0x03
    292a:	9c 81       	ldd	r25, Y+4	; 0x04
    292c:	89 83       	std	Y+1, r24	; 0x01
    292e:	9a 83       	std	Y+2, r25	; 0x02
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	9a 81       	ldd	r25, Y+2	; 0x02
    2934:	89 2b       	or	r24, r25
    2936:	09 f4       	brne	.+2      	; 0x293a <vTaskResume+0x22>
    2938:	50 c0       	rjmp	.+160    	; 0x29da <vTaskResume+0xc2>
    293a:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    293e:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    2942:	29 81       	ldd	r18, Y+1	; 0x01
    2944:	3a 81       	ldd	r19, Y+2	; 0x02
    2946:	28 17       	cp	r18, r24
    2948:	39 07       	cpc	r19, r25
    294a:	09 f4       	brne	.+2      	; 0x294e <vTaskResume+0x36>
    294c:	46 c0       	rjmp	.+140    	; 0x29da <vTaskResume+0xc2>
    294e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2952:	ff 93       	push	r31
    2954:	f8 7f       	andi	r31, 0xF8	; 248
    2956:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	9a 81       	ldd	r25, Y+2	; 0x02
    295e:	0e 94 5e 14 	call	0x28bc	; 0x28bc <prvTaskIsTaskSuspended>
    2962:	88 23       	and	r24, r24
    2964:	b9 f1       	breq	.+110    	; 0x29d4 <vTaskResume+0xbc>
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	9a 81       	ldd	r25, Y+2	; 0x02
    296a:	02 96       	adiw	r24, 0x02	; 2
    296c:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	9a 81       	ldd	r25, Y+2	; 0x02
    2974:	fc 01       	movw	r30, r24
    2976:	92 8d       	ldd	r25, Z+26	; 0x1a
    2978:	80 91 05 35 	lds	r24, 0x3505	; 0x803505 <uxTopReadyPriority>
    297c:	89 17       	cp	r24, r25
    297e:	30 f4       	brcc	.+12     	; 0x298c <vTaskResume+0x74>
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	9a 81       	ldd	r25, Y+2	; 0x02
    2984:	fc 01       	movw	r30, r24
    2986:	82 8d       	ldd	r24, Z+26	; 0x1a
    2988:	80 93 05 35 	sts	0x3505, r24	; 0x803505 <uxTopReadyPriority>
    298c:	89 81       	ldd	r24, Y+1	; 0x01
    298e:	9a 81       	ldd	r25, Y+2	; 0x02
    2990:	ac 01       	movw	r20, r24
    2992:	4e 5f       	subi	r20, 0xFE	; 254
    2994:	5f 4f       	sbci	r21, 0xFF	; 255
    2996:	89 81       	ldd	r24, Y+1	; 0x01
    2998:	9a 81       	ldd	r25, Y+2	; 0x02
    299a:	fc 01       	movw	r30, r24
    299c:	82 8d       	ldd	r24, Z+26	; 0x1a
    299e:	28 2f       	mov	r18, r24
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	6b e0       	ldi	r22, 0x0B	; 11
    29a4:	62 9f       	mul	r22, r18
    29a6:	c0 01       	movw	r24, r0
    29a8:	63 9f       	mul	r22, r19
    29aa:	90 0d       	add	r25, r0
    29ac:	11 24       	eor	r1, r1
    29ae:	8c 55       	subi	r24, 0x5C	; 92
    29b0:	9b 4c       	sbci	r25, 0xCB	; 203
    29b2:	ba 01       	movw	r22, r20
    29b4:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsertEnd>
    29b8:	89 81       	ldd	r24, Y+1	; 0x01
    29ba:	9a 81       	ldd	r25, Y+2	; 0x02
    29bc:	fc 01       	movw	r30, r24
    29be:	22 8d       	ldd	r18, Z+26	; 0x1a
    29c0:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    29c4:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    29c8:	fc 01       	movw	r30, r24
    29ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    29cc:	28 17       	cp	r18, r24
    29ce:	10 f0       	brcs	.+4      	; 0x29d4 <vTaskResume+0xbc>
    29d0:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    29d4:	ff 91       	pop	r31
    29d6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    29da:	00 00       	nop
    29dc:	24 96       	adiw	r28, 0x04	; 4
    29de:	cd bf       	out	0x3d, r28	; 61
    29e0:	de bf       	out	0x3e, r29	; 62
    29e2:	df 91       	pop	r29
    29e4:	cf 91       	pop	r28
    29e6:	08 95       	ret

000029e8 <vTaskStartScheduler>:
    29e8:	ef 92       	push	r14
    29ea:	ff 92       	push	r15
    29ec:	0f 93       	push	r16
    29ee:	cf 93       	push	r28
    29f0:	df 93       	push	r29
    29f2:	1f 92       	push	r1
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    29f8:	0f 2e       	mov	r0, r31
    29fa:	ff e0       	ldi	r31, 0x0F	; 15
    29fc:	ef 2e       	mov	r14, r31
    29fe:	f5 e3       	ldi	r31, 0x35	; 53
    2a00:	ff 2e       	mov	r15, r31
    2a02:	f0 2d       	mov	r31, r0
    2a04:	00 e0       	ldi	r16, 0x00	; 0
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	48 ec       	ldi	r20, 0xC8	; 200
    2a0c:	50 e0       	ldi	r21, 0x00	; 0
    2a0e:	60 e0       	ldi	r22, 0x00	; 0
    2a10:	70 e2       	ldi	r23, 0x20	; 32
    2a12:	87 e2       	ldi	r24, 0x27	; 39
    2a14:	9a e1       	ldi	r25, 0x1A	; 26
    2a16:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <xTaskCreate>
    2a1a:	89 83       	std	Y+1, r24	; 0x01
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	81 30       	cpi	r24, 0x01	; 1
    2a20:	19 f4       	brne	.+6      	; 0x2a28 <vTaskStartScheduler+0x40>
    2a22:	0e 94 b8 1b 	call	0x3770	; 0x3770 <xTimerCreateTimerTask>
    2a26:	89 83       	std	Y+1, r24	; 0x01
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	81 30       	cpi	r24, 0x01	; 1
    2a2c:	09 f5       	brne	.+66     	; 0x2a70 <vTaskStartScheduler+0x88>
    2a2e:	80 ea       	ldi	r24, 0xA0	; 160
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	20 ea       	ldi	r18, 0xA0	; 160
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	f9 01       	movw	r30, r18
    2a38:	22 81       	ldd	r18, Z+2	; 0x02
    2a3a:	28 7f       	andi	r18, 0xF8	; 248
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	22 83       	std	Z+2, r18	; 0x02
    2a40:	8f ef       	ldi	r24, 0xFF	; 255
    2a42:	9f ef       	ldi	r25, 0xFF	; 255
    2a44:	dc 01       	movw	r26, r24
    2a46:	80 93 0b 35 	sts	0x350B, r24	; 0x80350b <xNextTaskUnblockTime>
    2a4a:	90 93 0c 35 	sts	0x350C, r25	; 0x80350c <xNextTaskUnblockTime+0x1>
    2a4e:	a0 93 0d 35 	sts	0x350D, r26	; 0x80350d <xNextTaskUnblockTime+0x2>
    2a52:	b0 93 0e 35 	sts	0x350E, r27	; 0x80350e <xNextTaskUnblockTime+0x3>
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	80 93 06 35 	sts	0x3506, r24	; 0x803506 <xSchedulerRunning>
    2a5c:	10 92 01 35 	sts	0x3501, r1	; 0x803501 <xTickCount>
    2a60:	10 92 02 35 	sts	0x3502, r1	; 0x803502 <xTickCount+0x1>
    2a64:	10 92 03 35 	sts	0x3503, r1	; 0x803503 <xTickCount+0x2>
    2a68:	10 92 04 35 	sts	0x3504, r1	; 0x803504 <xTickCount+0x3>
    2a6c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <xPortStartScheduler>
    2a70:	00 00       	nop
    2a72:	0f 90       	pop	r0
    2a74:	df 91       	pop	r29
    2a76:	cf 91       	pop	r28
    2a78:	0f 91       	pop	r16
    2a7a:	ff 90       	pop	r15
    2a7c:	ef 90       	pop	r14
    2a7e:	08 95       	ret

00002a80 <vTaskSuspendAll>:
    2a80:	cf 93       	push	r28
    2a82:	df 93       	push	r29
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
    2a88:	80 91 11 35 	lds	r24, 0x3511	; 0x803511 <uxSchedulerSuspended>
    2a8c:	8f 5f       	subi	r24, 0xFF	; 255
    2a8e:	80 93 11 35 	sts	0x3511, r24	; 0x803511 <uxSchedulerSuspended>
    2a92:	00 00       	nop
    2a94:	df 91       	pop	r29
    2a96:	cf 91       	pop	r28
    2a98:	08 95       	ret

00002a9a <xTaskResumeAll>:
    2a9a:	cf 93       	push	r28
    2a9c:	df 93       	push	r29
    2a9e:	00 d0       	rcall	.+0      	; 0x2aa0 <xTaskResumeAll+0x6>
    2aa0:	1f 92       	push	r1
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
    2aa6:	19 82       	std	Y+1, r1	; 0x01
    2aa8:	1a 82       	std	Y+2, r1	; 0x02
    2aaa:	1b 82       	std	Y+3, r1	; 0x03
    2aac:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2ab0:	ff 93       	push	r31
    2ab2:	f8 7f       	andi	r31, 0xF8	; 248
    2ab4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2ab8:	80 91 11 35 	lds	r24, 0x3511	; 0x803511 <uxSchedulerSuspended>
    2abc:	81 50       	subi	r24, 0x01	; 1
    2abe:	80 93 11 35 	sts	0x3511, r24	; 0x803511 <uxSchedulerSuspended>
    2ac2:	80 91 11 35 	lds	r24, 0x3511	; 0x803511 <uxSchedulerSuspended>
    2ac6:	88 23       	and	r24, r24
    2ac8:	09 f0       	breq	.+2      	; 0x2acc <xTaskResumeAll+0x32>
    2aca:	74 c0       	rjmp	.+232    	; 0x2bb4 <xTaskResumeAll+0x11a>
    2acc:	80 91 00 35 	lds	r24, 0x3500	; 0x803500 <uxCurrentNumberOfTasks>
    2ad0:	88 23       	and	r24, r24
    2ad2:	09 f4       	brne	.+2      	; 0x2ad6 <xTaskResumeAll+0x3c>
    2ad4:	6f c0       	rjmp	.+222    	; 0x2bb4 <xTaskResumeAll+0x11a>
    2ad6:	46 c0       	rjmp	.+140    	; 0x2b64 <xTaskResumeAll+0xca>
    2ad8:	80 91 f1 34 	lds	r24, 0x34F1	; 0x8034f1 <xPendingReadyList+0x7>
    2adc:	90 91 f2 34 	lds	r25, 0x34F2	; 0x8034f2 <xPendingReadyList+0x8>
    2ae0:	fc 01       	movw	r30, r24
    2ae2:	80 85       	ldd	r24, Z+8	; 0x08
    2ae4:	91 85       	ldd	r25, Z+9	; 0x09
    2ae6:	89 83       	std	Y+1, r24	; 0x01
    2ae8:	9a 83       	std	Y+2, r25	; 0x02
    2aea:	89 81       	ldd	r24, Y+1	; 0x01
    2aec:	9a 81       	ldd	r25, Y+2	; 0x02
    2aee:	0e 96       	adiw	r24, 0x0e	; 14
    2af0:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
    2af6:	9a 81       	ldd	r25, Y+2	; 0x02
    2af8:	02 96       	adiw	r24, 0x02	; 2
    2afa:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    2afe:	89 81       	ldd	r24, Y+1	; 0x01
    2b00:	9a 81       	ldd	r25, Y+2	; 0x02
    2b02:	fc 01       	movw	r30, r24
    2b04:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b06:	80 91 05 35 	lds	r24, 0x3505	; 0x803505 <uxTopReadyPriority>
    2b0a:	89 17       	cp	r24, r25
    2b0c:	30 f4       	brcc	.+12     	; 0x2b1a <xTaskResumeAll+0x80>
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	9a 81       	ldd	r25, Y+2	; 0x02
    2b12:	fc 01       	movw	r30, r24
    2b14:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b16:	80 93 05 35 	sts	0x3505, r24	; 0x803505 <uxTopReadyPriority>
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b1e:	ac 01       	movw	r20, r24
    2b20:	4e 5f       	subi	r20, 0xFE	; 254
    2b22:	5f 4f       	sbci	r21, 0xFF	; 255
    2b24:	89 81       	ldd	r24, Y+1	; 0x01
    2b26:	9a 81       	ldd	r25, Y+2	; 0x02
    2b28:	fc 01       	movw	r30, r24
    2b2a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b2c:	28 2f       	mov	r18, r24
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	6b e0       	ldi	r22, 0x0B	; 11
    2b32:	62 9f       	mul	r22, r18
    2b34:	c0 01       	movw	r24, r0
    2b36:	63 9f       	mul	r22, r19
    2b38:	90 0d       	add	r25, r0
    2b3a:	11 24       	eor	r1, r1
    2b3c:	8c 55       	subi	r24, 0x5C	; 92
    2b3e:	9b 4c       	sbci	r25, 0xCB	; 203
    2b40:	ba 01       	movw	r22, r20
    2b42:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsertEnd>
    2b46:	89 81       	ldd	r24, Y+1	; 0x01
    2b48:	9a 81       	ldd	r25, Y+2	; 0x02
    2b4a:	fc 01       	movw	r30, r24
    2b4c:	22 8d       	ldd	r18, Z+26	; 0x1a
    2b4e:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    2b52:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    2b56:	fc 01       	movw	r30, r24
    2b58:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b5a:	28 17       	cp	r18, r24
    2b5c:	18 f0       	brcs	.+6      	; 0x2b64 <xTaskResumeAll+0xca>
    2b5e:	81 e0       	ldi	r24, 0x01	; 1
    2b60:	80 93 08 35 	sts	0x3508, r24	; 0x803508 <xYieldPending>
    2b64:	80 91 ea 34 	lds	r24, 0x34EA	; 0x8034ea <xPendingReadyList>
    2b68:	88 23       	and	r24, r24
    2b6a:	09 f0       	breq	.+2      	; 0x2b6e <xTaskResumeAll+0xd4>
    2b6c:	b5 cf       	rjmp	.-150    	; 0x2ad8 <xTaskResumeAll+0x3e>
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	9a 81       	ldd	r25, Y+2	; 0x02
    2b72:	89 2b       	or	r24, r25
    2b74:	11 f0       	breq	.+4      	; 0x2b7a <xTaskResumeAll+0xe0>
    2b76:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <prvResetNextTaskUnblockTime>
    2b7a:	80 91 07 35 	lds	r24, 0x3507	; 0x803507 <uxPendedTicks>
    2b7e:	8c 83       	std	Y+4, r24	; 0x04
    2b80:	8c 81       	ldd	r24, Y+4	; 0x04
    2b82:	88 23       	and	r24, r24
    2b84:	79 f0       	breq	.+30     	; 0x2ba4 <xTaskResumeAll+0x10a>
    2b86:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <xTaskIncrementTick>
    2b8a:	88 23       	and	r24, r24
    2b8c:	19 f0       	breq	.+6      	; 0x2b94 <xTaskResumeAll+0xfa>
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	80 93 08 35 	sts	0x3508, r24	; 0x803508 <xYieldPending>
    2b94:	8c 81       	ldd	r24, Y+4	; 0x04
    2b96:	81 50       	subi	r24, 0x01	; 1
    2b98:	8c 83       	std	Y+4, r24	; 0x04
    2b9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b9c:	88 23       	and	r24, r24
    2b9e:	99 f7       	brne	.-26     	; 0x2b86 <xTaskResumeAll+0xec>
    2ba0:	10 92 07 35 	sts	0x3507, r1	; 0x803507 <uxPendedTicks>
    2ba4:	80 91 08 35 	lds	r24, 0x3508	; 0x803508 <xYieldPending>
    2ba8:	88 23       	and	r24, r24
    2baa:	21 f0       	breq	.+8      	; 0x2bb4 <xTaskResumeAll+0x11a>
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	8b 83       	std	Y+3, r24	; 0x03
    2bb0:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    2bb4:	ff 91       	pop	r31
    2bb6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2bba:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbc:	24 96       	adiw	r28, 0x04	; 4
    2bbe:	cd bf       	out	0x3d, r28	; 61
    2bc0:	de bf       	out	0x3e, r29	; 62
    2bc2:	df 91       	pop	r29
    2bc4:	cf 91       	pop	r28
    2bc6:	08 95       	ret

00002bc8 <xTaskGetTickCount>:
    2bc8:	cf 93       	push	r28
    2bca:	df 93       	push	r29
    2bcc:	00 d0       	rcall	.+0      	; 0x2bce <xTaskGetTickCount+0x6>
    2bce:	1f 92       	push	r1
    2bd0:	cd b7       	in	r28, 0x3d	; 61
    2bd2:	de b7       	in	r29, 0x3e	; 62
    2bd4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2bd8:	ff 93       	push	r31
    2bda:	f8 7f       	andi	r31, 0xF8	; 248
    2bdc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2be0:	80 91 01 35 	lds	r24, 0x3501	; 0x803501 <xTickCount>
    2be4:	90 91 02 35 	lds	r25, 0x3502	; 0x803502 <xTickCount+0x1>
    2be8:	a0 91 03 35 	lds	r26, 0x3503	; 0x803503 <xTickCount+0x2>
    2bec:	b0 91 04 35 	lds	r27, 0x3504	; 0x803504 <xTickCount+0x3>
    2bf0:	89 83       	std	Y+1, r24	; 0x01
    2bf2:	9a 83       	std	Y+2, r25	; 0x02
    2bf4:	ab 83       	std	Y+3, r26	; 0x03
    2bf6:	bc 83       	std	Y+4, r27	; 0x04
    2bf8:	ff 91       	pop	r31
    2bfa:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
    2c00:	9a 81       	ldd	r25, Y+2	; 0x02
    2c02:	ab 81       	ldd	r26, Y+3	; 0x03
    2c04:	bc 81       	ldd	r27, Y+4	; 0x04
    2c06:	bc 01       	movw	r22, r24
    2c08:	cd 01       	movw	r24, r26
    2c0a:	24 96       	adiw	r28, 0x04	; 4
    2c0c:	cd bf       	out	0x3d, r28	; 61
    2c0e:	de bf       	out	0x3e, r29	; 62
    2c10:	df 91       	pop	r29
    2c12:	cf 91       	pop	r28
    2c14:	08 95       	ret

00002c16 <xTaskIncrementTick>:
    2c16:	cf 93       	push	r28
    2c18:	df 93       	push	r29
    2c1a:	cd b7       	in	r28, 0x3d	; 61
    2c1c:	de b7       	in	r29, 0x3e	; 62
    2c1e:	2d 97       	sbiw	r28, 0x0d	; 13
    2c20:	cd bf       	out	0x3d, r28	; 61
    2c22:	de bf       	out	0x3e, r29	; 62
    2c24:	19 82       	std	Y+1, r1	; 0x01
    2c26:	80 91 11 35 	lds	r24, 0x3511	; 0x803511 <uxSchedulerSuspended>
    2c2a:	88 23       	and	r24, r24
    2c2c:	09 f0       	breq	.+2      	; 0x2c30 <xTaskIncrementTick+0x1a>
    2c2e:	f1 c0       	rjmp	.+482    	; 0x2e12 <xTaskIncrementTick+0x1fc>
    2c30:	80 91 01 35 	lds	r24, 0x3501	; 0x803501 <xTickCount>
    2c34:	90 91 02 35 	lds	r25, 0x3502	; 0x803502 <xTickCount+0x1>
    2c38:	a0 91 03 35 	lds	r26, 0x3503	; 0x803503 <xTickCount+0x2>
    2c3c:	b0 91 04 35 	lds	r27, 0x3504	; 0x803504 <xTickCount+0x3>
    2c40:	01 96       	adiw	r24, 0x01	; 1
    2c42:	a1 1d       	adc	r26, r1
    2c44:	b1 1d       	adc	r27, r1
    2c46:	8a 83       	std	Y+2, r24	; 0x02
    2c48:	9b 83       	std	Y+3, r25	; 0x03
    2c4a:	ac 83       	std	Y+4, r26	; 0x04
    2c4c:	bd 83       	std	Y+5, r27	; 0x05
    2c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c50:	9b 81       	ldd	r25, Y+3	; 0x03
    2c52:	ac 81       	ldd	r26, Y+4	; 0x04
    2c54:	bd 81       	ldd	r27, Y+5	; 0x05
    2c56:	80 93 01 35 	sts	0x3501, r24	; 0x803501 <xTickCount>
    2c5a:	90 93 02 35 	sts	0x3502, r25	; 0x803502 <xTickCount+0x1>
    2c5e:	a0 93 03 35 	sts	0x3503, r26	; 0x803503 <xTickCount+0x2>
    2c62:	b0 93 04 35 	sts	0x3504, r27	; 0x803504 <xTickCount+0x3>
    2c66:	8a 81       	ldd	r24, Y+2	; 0x02
    2c68:	9b 81       	ldd	r25, Y+3	; 0x03
    2c6a:	ac 81       	ldd	r26, Y+4	; 0x04
    2c6c:	bd 81       	ldd	r27, Y+5	; 0x05
    2c6e:	89 2b       	or	r24, r25
    2c70:	8a 2b       	or	r24, r26
    2c72:	8b 2b       	or	r24, r27
    2c74:	d9 f4       	brne	.+54     	; 0x2cac <xTaskIncrementTick+0x96>
    2c76:	80 91 e6 34 	lds	r24, 0x34E6	; 0x8034e6 <pxDelayedTaskList>
    2c7a:	90 91 e7 34 	lds	r25, 0x34E7	; 0x8034e7 <pxDelayedTaskList+0x1>
    2c7e:	8e 83       	std	Y+6, r24	; 0x06
    2c80:	9f 83       	std	Y+7, r25	; 0x07
    2c82:	80 91 e8 34 	lds	r24, 0x34E8	; 0x8034e8 <pxOverflowDelayedTaskList>
    2c86:	90 91 e9 34 	lds	r25, 0x34E9	; 0x8034e9 <pxOverflowDelayedTaskList+0x1>
    2c8a:	80 93 e6 34 	sts	0x34E6, r24	; 0x8034e6 <pxDelayedTaskList>
    2c8e:	90 93 e7 34 	sts	0x34E7, r25	; 0x8034e7 <pxDelayedTaskList+0x1>
    2c92:	8e 81       	ldd	r24, Y+6	; 0x06
    2c94:	9f 81       	ldd	r25, Y+7	; 0x07
    2c96:	80 93 e8 34 	sts	0x34E8, r24	; 0x8034e8 <pxOverflowDelayedTaskList>
    2c9a:	90 93 e9 34 	sts	0x34E9, r25	; 0x8034e9 <pxOverflowDelayedTaskList+0x1>
    2c9e:	80 91 09 35 	lds	r24, 0x3509	; 0x803509 <xNumOfOverflows>
    2ca2:	8f 5f       	subi	r24, 0xFF	; 255
    2ca4:	80 93 09 35 	sts	0x3509, r24	; 0x803509 <xNumOfOverflows>
    2ca8:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <prvResetNextTaskUnblockTime>
    2cac:	80 91 0b 35 	lds	r24, 0x350B	; 0x80350b <xNextTaskUnblockTime>
    2cb0:	90 91 0c 35 	lds	r25, 0x350C	; 0x80350c <xNextTaskUnblockTime+0x1>
    2cb4:	a0 91 0d 35 	lds	r26, 0x350D	; 0x80350d <xNextTaskUnblockTime+0x2>
    2cb8:	b0 91 0e 35 	lds	r27, 0x350E	; 0x80350e <xNextTaskUnblockTime+0x3>
    2cbc:	2a 81       	ldd	r18, Y+2	; 0x02
    2cbe:	3b 81       	ldd	r19, Y+3	; 0x03
    2cc0:	4c 81       	ldd	r20, Y+4	; 0x04
    2cc2:	5d 81       	ldd	r21, Y+5	; 0x05
    2cc4:	28 17       	cp	r18, r24
    2cc6:	39 07       	cpc	r19, r25
    2cc8:	4a 07       	cpc	r20, r26
    2cca:	5b 07       	cpc	r21, r27
    2ccc:	08 f4       	brcc	.+2      	; 0x2cd0 <xTaskIncrementTick+0xba>
    2cce:	8a c0       	rjmp	.+276    	; 0x2de4 <xTaskIncrementTick+0x1ce>
    2cd0:	80 91 e6 34 	lds	r24, 0x34E6	; 0x8034e6 <pxDelayedTaskList>
    2cd4:	90 91 e7 34 	lds	r25, 0x34E7	; 0x8034e7 <pxDelayedTaskList+0x1>
    2cd8:	fc 01       	movw	r30, r24
    2cda:	80 81       	ld	r24, Z
    2cdc:	88 23       	and	r24, r24
    2cde:	61 f4       	brne	.+24     	; 0x2cf8 <xTaskIncrementTick+0xe2>
    2ce0:	8f ef       	ldi	r24, 0xFF	; 255
    2ce2:	9f ef       	ldi	r25, 0xFF	; 255
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	80 93 0b 35 	sts	0x350B, r24	; 0x80350b <xNextTaskUnblockTime>
    2cea:	90 93 0c 35 	sts	0x350C, r25	; 0x80350c <xNextTaskUnblockTime+0x1>
    2cee:	a0 93 0d 35 	sts	0x350D, r26	; 0x80350d <xNextTaskUnblockTime+0x2>
    2cf2:	b0 93 0e 35 	sts	0x350E, r27	; 0x80350e <xNextTaskUnblockTime+0x3>
    2cf6:	76 c0       	rjmp	.+236    	; 0x2de4 <xTaskIncrementTick+0x1ce>
    2cf8:	80 91 e6 34 	lds	r24, 0x34E6	; 0x8034e6 <pxDelayedTaskList>
    2cfc:	90 91 e7 34 	lds	r25, 0x34E7	; 0x8034e7 <pxDelayedTaskList+0x1>
    2d00:	fc 01       	movw	r30, r24
    2d02:	87 81       	ldd	r24, Z+7	; 0x07
    2d04:	90 85       	ldd	r25, Z+8	; 0x08
    2d06:	fc 01       	movw	r30, r24
    2d08:	80 85       	ldd	r24, Z+8	; 0x08
    2d0a:	91 85       	ldd	r25, Z+9	; 0x09
    2d0c:	88 87       	std	Y+8, r24	; 0x08
    2d0e:	99 87       	std	Y+9, r25	; 0x09
    2d10:	88 85       	ldd	r24, Y+8	; 0x08
    2d12:	99 85       	ldd	r25, Y+9	; 0x09
    2d14:	fc 01       	movw	r30, r24
    2d16:	82 81       	ldd	r24, Z+2	; 0x02
    2d18:	93 81       	ldd	r25, Z+3	; 0x03
    2d1a:	a4 81       	ldd	r26, Z+4	; 0x04
    2d1c:	b5 81       	ldd	r27, Z+5	; 0x05
    2d1e:	8a 87       	std	Y+10, r24	; 0x0a
    2d20:	9b 87       	std	Y+11, r25	; 0x0b
    2d22:	ac 87       	std	Y+12, r26	; 0x0c
    2d24:	bd 87       	std	Y+13, r27	; 0x0d
    2d26:	2a 81       	ldd	r18, Y+2	; 0x02
    2d28:	3b 81       	ldd	r19, Y+3	; 0x03
    2d2a:	4c 81       	ldd	r20, Y+4	; 0x04
    2d2c:	5d 81       	ldd	r21, Y+5	; 0x05
    2d2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d30:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d32:	ac 85       	ldd	r26, Y+12	; 0x0c
    2d34:	bd 85       	ldd	r27, Y+13	; 0x0d
    2d36:	28 17       	cp	r18, r24
    2d38:	39 07       	cpc	r19, r25
    2d3a:	4a 07       	cpc	r20, r26
    2d3c:	5b 07       	cpc	r21, r27
    2d3e:	68 f4       	brcc	.+26     	; 0x2d5a <xTaskIncrementTick+0x144>
    2d40:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d42:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d44:	ac 85       	ldd	r26, Y+12	; 0x0c
    2d46:	bd 85       	ldd	r27, Y+13	; 0x0d
    2d48:	80 93 0b 35 	sts	0x350B, r24	; 0x80350b <xNextTaskUnblockTime>
    2d4c:	90 93 0c 35 	sts	0x350C, r25	; 0x80350c <xNextTaskUnblockTime+0x1>
    2d50:	a0 93 0d 35 	sts	0x350D, r26	; 0x80350d <xNextTaskUnblockTime+0x2>
    2d54:	b0 93 0e 35 	sts	0x350E, r27	; 0x80350e <xNextTaskUnblockTime+0x3>
    2d58:	45 c0       	rjmp	.+138    	; 0x2de4 <xTaskIncrementTick+0x1ce>
    2d5a:	88 85       	ldd	r24, Y+8	; 0x08
    2d5c:	99 85       	ldd	r25, Y+9	; 0x09
    2d5e:	02 96       	adiw	r24, 0x02	; 2
    2d60:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    2d64:	88 85       	ldd	r24, Y+8	; 0x08
    2d66:	99 85       	ldd	r25, Y+9	; 0x09
    2d68:	fc 01       	movw	r30, r24
    2d6a:	80 8d       	ldd	r24, Z+24	; 0x18
    2d6c:	91 8d       	ldd	r25, Z+25	; 0x19
    2d6e:	89 2b       	or	r24, r25
    2d70:	29 f0       	breq	.+10     	; 0x2d7c <xTaskIncrementTick+0x166>
    2d72:	88 85       	ldd	r24, Y+8	; 0x08
    2d74:	99 85       	ldd	r25, Y+9	; 0x09
    2d76:	0e 96       	adiw	r24, 0x0e	; 14
    2d78:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    2d7c:	88 85       	ldd	r24, Y+8	; 0x08
    2d7e:	99 85       	ldd	r25, Y+9	; 0x09
    2d80:	fc 01       	movw	r30, r24
    2d82:	92 8d       	ldd	r25, Z+26	; 0x1a
    2d84:	80 91 05 35 	lds	r24, 0x3505	; 0x803505 <uxTopReadyPriority>
    2d88:	89 17       	cp	r24, r25
    2d8a:	30 f4       	brcc	.+12     	; 0x2d98 <xTaskIncrementTick+0x182>
    2d8c:	88 85       	ldd	r24, Y+8	; 0x08
    2d8e:	99 85       	ldd	r25, Y+9	; 0x09
    2d90:	fc 01       	movw	r30, r24
    2d92:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d94:	80 93 05 35 	sts	0x3505, r24	; 0x803505 <uxTopReadyPriority>
    2d98:	88 85       	ldd	r24, Y+8	; 0x08
    2d9a:	99 85       	ldd	r25, Y+9	; 0x09
    2d9c:	ac 01       	movw	r20, r24
    2d9e:	4e 5f       	subi	r20, 0xFE	; 254
    2da0:	5f 4f       	sbci	r21, 0xFF	; 255
    2da2:	88 85       	ldd	r24, Y+8	; 0x08
    2da4:	99 85       	ldd	r25, Y+9	; 0x09
    2da6:	fc 01       	movw	r30, r24
    2da8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2daa:	28 2f       	mov	r18, r24
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	6b e0       	ldi	r22, 0x0B	; 11
    2db0:	62 9f       	mul	r22, r18
    2db2:	c0 01       	movw	r24, r0
    2db4:	63 9f       	mul	r22, r19
    2db6:	90 0d       	add	r25, r0
    2db8:	11 24       	eor	r1, r1
    2dba:	8c 55       	subi	r24, 0x5C	; 92
    2dbc:	9b 4c       	sbci	r25, 0xCB	; 203
    2dbe:	ba 01       	movw	r22, r20
    2dc0:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsertEnd>
    2dc4:	88 85       	ldd	r24, Y+8	; 0x08
    2dc6:	99 85       	ldd	r25, Y+9	; 0x09
    2dc8:	fc 01       	movw	r30, r24
    2dca:	22 8d       	ldd	r18, Z+26	; 0x1a
    2dcc:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    2dd0:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    2dd4:	fc 01       	movw	r30, r24
    2dd6:	82 8d       	ldd	r24, Z+26	; 0x1a
    2dd8:	28 17       	cp	r18, r24
    2dda:	08 f4       	brcc	.+2      	; 0x2dde <xTaskIncrementTick+0x1c8>
    2ddc:	79 cf       	rjmp	.-270    	; 0x2cd0 <xTaskIncrementTick+0xba>
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	89 83       	std	Y+1, r24	; 0x01
    2de2:	76 cf       	rjmp	.-276    	; 0x2cd0 <xTaskIncrementTick+0xba>
    2de4:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    2de8:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    2dec:	fc 01       	movw	r30, r24
    2dee:	82 8d       	ldd	r24, Z+26	; 0x1a
    2df0:	28 2f       	mov	r18, r24
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	4b e0       	ldi	r20, 0x0B	; 11
    2df6:	42 9f       	mul	r20, r18
    2df8:	c0 01       	movw	r24, r0
    2dfa:	43 9f       	mul	r20, r19
    2dfc:	90 0d       	add	r25, r0
    2dfe:	11 24       	eor	r1, r1
    2e00:	8c 55       	subi	r24, 0x5C	; 92
    2e02:	9b 4c       	sbci	r25, 0xCB	; 203
    2e04:	fc 01       	movw	r30, r24
    2e06:	80 81       	ld	r24, Z
    2e08:	82 30       	cpi	r24, 0x02	; 2
    2e0a:	40 f0       	brcs	.+16     	; 0x2e1c <xTaskIncrementTick+0x206>
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	89 83       	std	Y+1, r24	; 0x01
    2e10:	05 c0       	rjmp	.+10     	; 0x2e1c <xTaskIncrementTick+0x206>
    2e12:	80 91 07 35 	lds	r24, 0x3507	; 0x803507 <uxPendedTicks>
    2e16:	8f 5f       	subi	r24, 0xFF	; 255
    2e18:	80 93 07 35 	sts	0x3507, r24	; 0x803507 <uxPendedTicks>
    2e1c:	80 91 08 35 	lds	r24, 0x3508	; 0x803508 <xYieldPending>
    2e20:	88 23       	and	r24, r24
    2e22:	11 f0       	breq	.+4      	; 0x2e28 <xTaskIncrementTick+0x212>
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	89 83       	std	Y+1, r24	; 0x01
    2e28:	89 81       	ldd	r24, Y+1	; 0x01
    2e2a:	2d 96       	adiw	r28, 0x0d	; 13
    2e2c:	cd bf       	out	0x3d, r28	; 61
    2e2e:	de bf       	out	0x3e, r29	; 62
    2e30:	df 91       	pop	r29
    2e32:	cf 91       	pop	r28
    2e34:	08 95       	ret

00002e36 <vTaskSwitchContext>:
    2e36:	cf 93       	push	r28
    2e38:	df 93       	push	r29
    2e3a:	cd b7       	in	r28, 0x3d	; 61
    2e3c:	de b7       	in	r29, 0x3e	; 62
    2e3e:	29 97       	sbiw	r28, 0x09	; 9
    2e40:	cd bf       	out	0x3d, r28	; 61
    2e42:	de bf       	out	0x3e, r29	; 62
    2e44:	80 91 11 35 	lds	r24, 0x3511	; 0x803511 <uxSchedulerSuspended>
    2e48:	88 23       	and	r24, r24
    2e4a:	21 f0       	breq	.+8      	; 0x2e54 <vTaskSwitchContext+0x1e>
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	80 93 08 35 	sts	0x3508, r24	; 0x803508 <xYieldPending>
    2e52:	ba c0       	rjmp	.+372    	; 0x2fc8 <vTaskSwitchContext+0x192>
    2e54:	10 92 08 35 	sts	0x3508, r1	; 0x803508 <xYieldPending>
    2e58:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    2e5c:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    2e60:	fc 01       	movw	r30, r24
    2e62:	83 8d       	ldd	r24, Z+27	; 0x1b
    2e64:	94 8d       	ldd	r25, Z+28	; 0x1c
    2e66:	8a 83       	std	Y+2, r24	; 0x02
    2e68:	9b 83       	std	Y+3, r25	; 0x03
    2e6a:	85 ea       	ldi	r24, 0xA5	; 165
    2e6c:	95 ea       	ldi	r25, 0xA5	; 165
    2e6e:	dc 01       	movw	r26, r24
    2e70:	8c 83       	std	Y+4, r24	; 0x04
    2e72:	9d 83       	std	Y+5, r25	; 0x05
    2e74:	ae 83       	std	Y+6, r26	; 0x06
    2e76:	bf 83       	std	Y+7, r27	; 0x07
    2e78:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e7c:	fc 01       	movw	r30, r24
    2e7e:	20 81       	ld	r18, Z
    2e80:	31 81       	ldd	r19, Z+1	; 0x01
    2e82:	42 81       	ldd	r20, Z+2	; 0x02
    2e84:	53 81       	ldd	r21, Z+3	; 0x03
    2e86:	8c 81       	ldd	r24, Y+4	; 0x04
    2e88:	9d 81       	ldd	r25, Y+5	; 0x05
    2e8a:	ae 81       	ldd	r26, Y+6	; 0x06
    2e8c:	bf 81       	ldd	r27, Y+7	; 0x07
    2e8e:	28 17       	cp	r18, r24
    2e90:	39 07       	cpc	r19, r25
    2e92:	4a 07       	cpc	r20, r26
    2e94:	5b 07       	cpc	r21, r27
    2e96:	99 f5       	brne	.+102    	; 0x2efe <vTaskSwitchContext+0xc8>
    2e98:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e9c:	04 96       	adiw	r24, 0x04	; 4
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	20 81       	ld	r18, Z
    2ea2:	31 81       	ldd	r19, Z+1	; 0x01
    2ea4:	42 81       	ldd	r20, Z+2	; 0x02
    2ea6:	53 81       	ldd	r21, Z+3	; 0x03
    2ea8:	8c 81       	ldd	r24, Y+4	; 0x04
    2eaa:	9d 81       	ldd	r25, Y+5	; 0x05
    2eac:	ae 81       	ldd	r26, Y+6	; 0x06
    2eae:	bf 81       	ldd	r27, Y+7	; 0x07
    2eb0:	28 17       	cp	r18, r24
    2eb2:	39 07       	cpc	r19, r25
    2eb4:	4a 07       	cpc	r20, r26
    2eb6:	5b 07       	cpc	r21, r27
    2eb8:	11 f5       	brne	.+68     	; 0x2efe <vTaskSwitchContext+0xc8>
    2eba:	8a 81       	ldd	r24, Y+2	; 0x02
    2ebc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ebe:	08 96       	adiw	r24, 0x08	; 8
    2ec0:	fc 01       	movw	r30, r24
    2ec2:	20 81       	ld	r18, Z
    2ec4:	31 81       	ldd	r19, Z+1	; 0x01
    2ec6:	42 81       	ldd	r20, Z+2	; 0x02
    2ec8:	53 81       	ldd	r21, Z+3	; 0x03
    2eca:	8c 81       	ldd	r24, Y+4	; 0x04
    2ecc:	9d 81       	ldd	r25, Y+5	; 0x05
    2ece:	ae 81       	ldd	r26, Y+6	; 0x06
    2ed0:	bf 81       	ldd	r27, Y+7	; 0x07
    2ed2:	28 17       	cp	r18, r24
    2ed4:	39 07       	cpc	r19, r25
    2ed6:	4a 07       	cpc	r20, r26
    2ed8:	5b 07       	cpc	r21, r27
    2eda:	89 f4       	brne	.+34     	; 0x2efe <vTaskSwitchContext+0xc8>
    2edc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ede:	9b 81       	ldd	r25, Y+3	; 0x03
    2ee0:	0c 96       	adiw	r24, 0x0c	; 12
    2ee2:	fc 01       	movw	r30, r24
    2ee4:	20 81       	ld	r18, Z
    2ee6:	31 81       	ldd	r19, Z+1	; 0x01
    2ee8:	42 81       	ldd	r20, Z+2	; 0x02
    2eea:	53 81       	ldd	r21, Z+3	; 0x03
    2eec:	8c 81       	ldd	r24, Y+4	; 0x04
    2eee:	9d 81       	ldd	r25, Y+5	; 0x05
    2ef0:	ae 81       	ldd	r26, Y+6	; 0x06
    2ef2:	bf 81       	ldd	r27, Y+7	; 0x07
    2ef4:	28 17       	cp	r18, r24
    2ef6:	39 07       	cpc	r19, r25
    2ef8:	4a 07       	cpc	r20, r26
    2efa:	5b 07       	cpc	r21, r27
    2efc:	71 f0       	breq	.+28     	; 0x2f1a <vTaskSwitchContext+0xe4>
    2efe:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    2f02:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    2f06:	9c 01       	movw	r18, r24
    2f08:	23 5e       	subi	r18, 0xE3	; 227
    2f0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f0c:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    2f10:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    2f14:	b9 01       	movw	r22, r18
    2f16:	0e 94 12 04 	call	0x824	; 0x824 <vApplicationStackOverflowHook>
    2f1a:	80 91 05 35 	lds	r24, 0x3505	; 0x803505 <uxTopReadyPriority>
    2f1e:	89 83       	std	Y+1, r24	; 0x01
    2f20:	03 c0       	rjmp	.+6      	; 0x2f28 <vTaskSwitchContext+0xf2>
    2f22:	89 81       	ldd	r24, Y+1	; 0x01
    2f24:	81 50       	subi	r24, 0x01	; 1
    2f26:	89 83       	std	Y+1, r24	; 0x01
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
    2f2a:	28 2f       	mov	r18, r24
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	4b e0       	ldi	r20, 0x0B	; 11
    2f30:	42 9f       	mul	r20, r18
    2f32:	c0 01       	movw	r24, r0
    2f34:	43 9f       	mul	r20, r19
    2f36:	90 0d       	add	r25, r0
    2f38:	11 24       	eor	r1, r1
    2f3a:	8c 55       	subi	r24, 0x5C	; 92
    2f3c:	9b 4c       	sbci	r25, 0xCB	; 203
    2f3e:	fc 01       	movw	r30, r24
    2f40:	80 81       	ld	r24, Z
    2f42:	88 23       	and	r24, r24
    2f44:	71 f3       	breq	.-36     	; 0x2f22 <vTaskSwitchContext+0xec>
    2f46:	89 81       	ldd	r24, Y+1	; 0x01
    2f48:	28 2f       	mov	r18, r24
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	4b e0       	ldi	r20, 0x0B	; 11
    2f4e:	42 9f       	mul	r20, r18
    2f50:	c0 01       	movw	r24, r0
    2f52:	43 9f       	mul	r20, r19
    2f54:	90 0d       	add	r25, r0
    2f56:	11 24       	eor	r1, r1
    2f58:	8c 55       	subi	r24, 0x5C	; 92
    2f5a:	9b 4c       	sbci	r25, 0xCB	; 203
    2f5c:	88 87       	std	Y+8, r24	; 0x08
    2f5e:	99 87       	std	Y+9, r25	; 0x09
    2f60:	88 85       	ldd	r24, Y+8	; 0x08
    2f62:	99 85       	ldd	r25, Y+9	; 0x09
    2f64:	fc 01       	movw	r30, r24
    2f66:	81 81       	ldd	r24, Z+1	; 0x01
    2f68:	92 81       	ldd	r25, Z+2	; 0x02
    2f6a:	fc 01       	movw	r30, r24
    2f6c:	24 81       	ldd	r18, Z+4	; 0x04
    2f6e:	35 81       	ldd	r19, Z+5	; 0x05
    2f70:	88 85       	ldd	r24, Y+8	; 0x08
    2f72:	99 85       	ldd	r25, Y+9	; 0x09
    2f74:	fc 01       	movw	r30, r24
    2f76:	21 83       	std	Z+1, r18	; 0x01
    2f78:	32 83       	std	Z+2, r19	; 0x02
    2f7a:	88 85       	ldd	r24, Y+8	; 0x08
    2f7c:	99 85       	ldd	r25, Y+9	; 0x09
    2f7e:	fc 01       	movw	r30, r24
    2f80:	21 81       	ldd	r18, Z+1	; 0x01
    2f82:	32 81       	ldd	r19, Z+2	; 0x02
    2f84:	88 85       	ldd	r24, Y+8	; 0x08
    2f86:	99 85       	ldd	r25, Y+9	; 0x09
    2f88:	03 96       	adiw	r24, 0x03	; 3
    2f8a:	28 17       	cp	r18, r24
    2f8c:	39 07       	cpc	r19, r25
    2f8e:	69 f4       	brne	.+26     	; 0x2faa <vTaskSwitchContext+0x174>
    2f90:	88 85       	ldd	r24, Y+8	; 0x08
    2f92:	99 85       	ldd	r25, Y+9	; 0x09
    2f94:	fc 01       	movw	r30, r24
    2f96:	81 81       	ldd	r24, Z+1	; 0x01
    2f98:	92 81       	ldd	r25, Z+2	; 0x02
    2f9a:	fc 01       	movw	r30, r24
    2f9c:	24 81       	ldd	r18, Z+4	; 0x04
    2f9e:	35 81       	ldd	r19, Z+5	; 0x05
    2fa0:	88 85       	ldd	r24, Y+8	; 0x08
    2fa2:	99 85       	ldd	r25, Y+9	; 0x09
    2fa4:	fc 01       	movw	r30, r24
    2fa6:	21 83       	std	Z+1, r18	; 0x01
    2fa8:	32 83       	std	Z+2, r19	; 0x02
    2faa:	88 85       	ldd	r24, Y+8	; 0x08
    2fac:	99 85       	ldd	r25, Y+9	; 0x09
    2fae:	fc 01       	movw	r30, r24
    2fb0:	81 81       	ldd	r24, Z+1	; 0x01
    2fb2:	92 81       	ldd	r25, Z+2	; 0x02
    2fb4:	fc 01       	movw	r30, r24
    2fb6:	80 85       	ldd	r24, Z+8	; 0x08
    2fb8:	91 85       	ldd	r25, Z+9	; 0x09
    2fba:	80 93 a2 34 	sts	0x34A2, r24	; 0x8034a2 <pxCurrentTCB>
    2fbe:	90 93 a3 34 	sts	0x34A3, r25	; 0x8034a3 <pxCurrentTCB+0x1>
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
    2fc4:	80 93 05 35 	sts	0x3505, r24	; 0x803505 <uxTopReadyPriority>
    2fc8:	00 00       	nop
    2fca:	29 96       	adiw	r28, 0x09	; 9
    2fcc:	cd bf       	out	0x3d, r28	; 61
    2fce:	de bf       	out	0x3e, r29	; 62
    2fd0:	df 91       	pop	r29
    2fd2:	cf 91       	pop	r28
    2fd4:	08 95       	ret

00002fd6 <vTaskPlaceOnEventList>:
    2fd6:	cf 93       	push	r28
    2fd8:	df 93       	push	r29
    2fda:	00 d0       	rcall	.+0      	; 0x2fdc <vTaskPlaceOnEventList+0x6>
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <vTaskPlaceOnEventList+0x8>
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    2fe2:	89 83       	std	Y+1, r24	; 0x01
    2fe4:	9a 83       	std	Y+2, r25	; 0x02
    2fe6:	4b 83       	std	Y+3, r20	; 0x03
    2fe8:	5c 83       	std	Y+4, r21	; 0x04
    2fea:	6d 83       	std	Y+5, r22	; 0x05
    2fec:	7e 83       	std	Y+6, r23	; 0x06
    2fee:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    2ff2:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    2ff6:	9c 01       	movw	r18, r24
    2ff8:	22 5f       	subi	r18, 0xF2	; 242
    2ffa:	3f 4f       	sbci	r19, 0xFF	; 255
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    3000:	b9 01       	movw	r22, r18
    3002:	0e 94 83 08 	call	0x1106	; 0x1106 <vListInsert>
    3006:	8b 81       	ldd	r24, Y+3	; 0x03
    3008:	9c 81       	ldd	r25, Y+4	; 0x04
    300a:	ad 81       	ldd	r26, Y+5	; 0x05
    300c:	be 81       	ldd	r27, Y+6	; 0x06
    300e:	41 e0       	ldi	r20, 0x01	; 1
    3010:	bc 01       	movw	r22, r24
    3012:	cd 01       	movw	r24, r26
    3014:	0e 94 17 1b 	call	0x362e	; 0x362e <prvAddCurrentTaskToDelayedList>
    3018:	00 00       	nop
    301a:	26 96       	adiw	r28, 0x06	; 6
    301c:	cd bf       	out	0x3d, r28	; 61
    301e:	de bf       	out	0x3e, r29	; 62
    3020:	df 91       	pop	r29
    3022:	cf 91       	pop	r28
    3024:	08 95       	ret

00003026 <vTaskPlaceOnUnorderedEventList>:
    3026:	0f 93       	push	r16
    3028:	1f 93       	push	r17
    302a:	cf 93       	push	r28
    302c:	df 93       	push	r29
    302e:	cd b7       	in	r28, 0x3d	; 61
    3030:	de b7       	in	r29, 0x3e	; 62
    3032:	2a 97       	sbiw	r28, 0x0a	; 10
    3034:	cd bf       	out	0x3d, r28	; 61
    3036:	de bf       	out	0x3e, r29	; 62
    3038:	89 83       	std	Y+1, r24	; 0x01
    303a:	9a 83       	std	Y+2, r25	; 0x02
    303c:	4b 83       	std	Y+3, r20	; 0x03
    303e:	5c 83       	std	Y+4, r21	; 0x04
    3040:	6d 83       	std	Y+5, r22	; 0x05
    3042:	7e 83       	std	Y+6, r23	; 0x06
    3044:	0f 83       	std	Y+7, r16	; 0x07
    3046:	18 87       	std	Y+8, r17	; 0x08
    3048:	29 87       	std	Y+9, r18	; 0x09
    304a:	3a 87       	std	Y+10, r19	; 0x0a
    304c:	20 91 a2 34 	lds	r18, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    3050:	30 91 a3 34 	lds	r19, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    3054:	8b 81       	ldd	r24, Y+3	; 0x03
    3056:	9c 81       	ldd	r25, Y+4	; 0x04
    3058:	ad 81       	ldd	r26, Y+5	; 0x05
    305a:	be 81       	ldd	r27, Y+6	; 0x06
    305c:	b0 68       	ori	r27, 0x80	; 128
    305e:	f9 01       	movw	r30, r18
    3060:	86 87       	std	Z+14, r24	; 0x0e
    3062:	97 87       	std	Z+15, r25	; 0x0f
    3064:	a0 8b       	std	Z+16, r26	; 0x10
    3066:	b1 8b       	std	Z+17, r27	; 0x11
    3068:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    306c:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    3070:	9c 01       	movw	r18, r24
    3072:	22 5f       	subi	r18, 0xF2	; 242
    3074:	3f 4f       	sbci	r19, 0xFF	; 255
    3076:	89 81       	ldd	r24, Y+1	; 0x01
    3078:	9a 81       	ldd	r25, Y+2	; 0x02
    307a:	b9 01       	movw	r22, r18
    307c:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsertEnd>
    3080:	8f 81       	ldd	r24, Y+7	; 0x07
    3082:	98 85       	ldd	r25, Y+8	; 0x08
    3084:	a9 85       	ldd	r26, Y+9	; 0x09
    3086:	ba 85       	ldd	r27, Y+10	; 0x0a
    3088:	41 e0       	ldi	r20, 0x01	; 1
    308a:	bc 01       	movw	r22, r24
    308c:	cd 01       	movw	r24, r26
    308e:	0e 94 17 1b 	call	0x362e	; 0x362e <prvAddCurrentTaskToDelayedList>
    3092:	00 00       	nop
    3094:	2a 96       	adiw	r28, 0x0a	; 10
    3096:	cd bf       	out	0x3d, r28	; 61
    3098:	de bf       	out	0x3e, r29	; 62
    309a:	df 91       	pop	r29
    309c:	cf 91       	pop	r28
    309e:	1f 91       	pop	r17
    30a0:	0f 91       	pop	r16
    30a2:	08 95       	ret

000030a4 <vTaskPlaceOnEventListRestricted>:
    30a4:	cf 93       	push	r28
    30a6:	df 93       	push	r29
    30a8:	cd b7       	in	r28, 0x3d	; 61
    30aa:	de b7       	in	r29, 0x3e	; 62
    30ac:	27 97       	sbiw	r28, 0x07	; 7
    30ae:	cd bf       	out	0x3d, r28	; 61
    30b0:	de bf       	out	0x3e, r29	; 62
    30b2:	89 83       	std	Y+1, r24	; 0x01
    30b4:	9a 83       	std	Y+2, r25	; 0x02
    30b6:	4b 83       	std	Y+3, r20	; 0x03
    30b8:	5c 83       	std	Y+4, r21	; 0x04
    30ba:	6d 83       	std	Y+5, r22	; 0x05
    30bc:	7e 83       	std	Y+6, r23	; 0x06
    30be:	2f 83       	std	Y+7, r18	; 0x07
    30c0:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    30c4:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    30c8:	9c 01       	movw	r18, r24
    30ca:	22 5f       	subi	r18, 0xF2	; 242
    30cc:	3f 4f       	sbci	r19, 0xFF	; 255
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
    30d0:	9a 81       	ldd	r25, Y+2	; 0x02
    30d2:	b9 01       	movw	r22, r18
    30d4:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsertEnd>
    30d8:	8f 81       	ldd	r24, Y+7	; 0x07
    30da:	88 23       	and	r24, r24
    30dc:	39 f0       	breq	.+14     	; 0x30ec <vTaskPlaceOnEventListRestricted+0x48>
    30de:	8f ef       	ldi	r24, 0xFF	; 255
    30e0:	9f ef       	ldi	r25, 0xFF	; 255
    30e2:	dc 01       	movw	r26, r24
    30e4:	8b 83       	std	Y+3, r24	; 0x03
    30e6:	9c 83       	std	Y+4, r25	; 0x04
    30e8:	ad 83       	std	Y+5, r26	; 0x05
    30ea:	be 83       	std	Y+6, r27	; 0x06
    30ec:	8b 81       	ldd	r24, Y+3	; 0x03
    30ee:	9c 81       	ldd	r25, Y+4	; 0x04
    30f0:	ad 81       	ldd	r26, Y+5	; 0x05
    30f2:	be 81       	ldd	r27, Y+6	; 0x06
    30f4:	4f 81       	ldd	r20, Y+7	; 0x07
    30f6:	bc 01       	movw	r22, r24
    30f8:	cd 01       	movw	r24, r26
    30fa:	0e 94 17 1b 	call	0x362e	; 0x362e <prvAddCurrentTaskToDelayedList>
    30fe:	00 00       	nop
    3100:	27 96       	adiw	r28, 0x07	; 7
    3102:	cd bf       	out	0x3d, r28	; 61
    3104:	de bf       	out	0x3e, r29	; 62
    3106:	df 91       	pop	r29
    3108:	cf 91       	pop	r28
    310a:	08 95       	ret

0000310c <xTaskRemoveFromEventList>:
    310c:	cf 93       	push	r28
    310e:	df 93       	push	r29
    3110:	cd b7       	in	r28, 0x3d	; 61
    3112:	de b7       	in	r29, 0x3e	; 62
    3114:	25 97       	sbiw	r28, 0x05	; 5
    3116:	cd bf       	out	0x3d, r28	; 61
    3118:	de bf       	out	0x3e, r29	; 62
    311a:	8c 83       	std	Y+4, r24	; 0x04
    311c:	9d 83       	std	Y+5, r25	; 0x05
    311e:	8c 81       	ldd	r24, Y+4	; 0x04
    3120:	9d 81       	ldd	r25, Y+5	; 0x05
    3122:	fc 01       	movw	r30, r24
    3124:	87 81       	ldd	r24, Z+7	; 0x07
    3126:	90 85       	ldd	r25, Z+8	; 0x08
    3128:	fc 01       	movw	r30, r24
    312a:	80 85       	ldd	r24, Z+8	; 0x08
    312c:	91 85       	ldd	r25, Z+9	; 0x09
    312e:	8a 83       	std	Y+2, r24	; 0x02
    3130:	9b 83       	std	Y+3, r25	; 0x03
    3132:	8a 81       	ldd	r24, Y+2	; 0x02
    3134:	9b 81       	ldd	r25, Y+3	; 0x03
    3136:	0e 96       	adiw	r24, 0x0e	; 14
    3138:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    313c:	80 91 11 35 	lds	r24, 0x3511	; 0x803511 <uxSchedulerSuspended>
    3140:	88 23       	and	r24, r24
    3142:	51 f5       	brne	.+84     	; 0x3198 <xTaskRemoveFromEventList+0x8c>
    3144:	8a 81       	ldd	r24, Y+2	; 0x02
    3146:	9b 81       	ldd	r25, Y+3	; 0x03
    3148:	02 96       	adiw	r24, 0x02	; 2
    314a:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    314e:	8a 81       	ldd	r24, Y+2	; 0x02
    3150:	9b 81       	ldd	r25, Y+3	; 0x03
    3152:	fc 01       	movw	r30, r24
    3154:	92 8d       	ldd	r25, Z+26	; 0x1a
    3156:	80 91 05 35 	lds	r24, 0x3505	; 0x803505 <uxTopReadyPriority>
    315a:	89 17       	cp	r24, r25
    315c:	30 f4       	brcc	.+12     	; 0x316a <xTaskRemoveFromEventList+0x5e>
    315e:	8a 81       	ldd	r24, Y+2	; 0x02
    3160:	9b 81       	ldd	r25, Y+3	; 0x03
    3162:	fc 01       	movw	r30, r24
    3164:	82 8d       	ldd	r24, Z+26	; 0x1a
    3166:	80 93 05 35 	sts	0x3505, r24	; 0x803505 <uxTopReadyPriority>
    316a:	8a 81       	ldd	r24, Y+2	; 0x02
    316c:	9b 81       	ldd	r25, Y+3	; 0x03
    316e:	ac 01       	movw	r20, r24
    3170:	4e 5f       	subi	r20, 0xFE	; 254
    3172:	5f 4f       	sbci	r21, 0xFF	; 255
    3174:	8a 81       	ldd	r24, Y+2	; 0x02
    3176:	9b 81       	ldd	r25, Y+3	; 0x03
    3178:	fc 01       	movw	r30, r24
    317a:	82 8d       	ldd	r24, Z+26	; 0x1a
    317c:	28 2f       	mov	r18, r24
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	6b e0       	ldi	r22, 0x0B	; 11
    3182:	62 9f       	mul	r22, r18
    3184:	c0 01       	movw	r24, r0
    3186:	63 9f       	mul	r22, r19
    3188:	90 0d       	add	r25, r0
    318a:	11 24       	eor	r1, r1
    318c:	8c 55       	subi	r24, 0x5C	; 92
    318e:	9b 4c       	sbci	r25, 0xCB	; 203
    3190:	ba 01       	movw	r22, r20
    3192:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsertEnd>
    3196:	08 c0       	rjmp	.+16     	; 0x31a8 <xTaskRemoveFromEventList+0x9c>
    3198:	8a 81       	ldd	r24, Y+2	; 0x02
    319a:	9b 81       	ldd	r25, Y+3	; 0x03
    319c:	0e 96       	adiw	r24, 0x0e	; 14
    319e:	bc 01       	movw	r22, r24
    31a0:	8a ee       	ldi	r24, 0xEA	; 234
    31a2:	94 e3       	ldi	r25, 0x34	; 52
    31a4:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsertEnd>
    31a8:	8a 81       	ldd	r24, Y+2	; 0x02
    31aa:	9b 81       	ldd	r25, Y+3	; 0x03
    31ac:	fc 01       	movw	r30, r24
    31ae:	22 8d       	ldd	r18, Z+26	; 0x1a
    31b0:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    31b4:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    31b8:	fc 01       	movw	r30, r24
    31ba:	82 8d       	ldd	r24, Z+26	; 0x1a
    31bc:	82 17       	cp	r24, r18
    31be:	30 f4       	brcc	.+12     	; 0x31cc <xTaskRemoveFromEventList+0xc0>
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	89 83       	std	Y+1, r24	; 0x01
    31c4:	81 e0       	ldi	r24, 0x01	; 1
    31c6:	80 93 08 35 	sts	0x3508, r24	; 0x803508 <xYieldPending>
    31ca:	01 c0       	rjmp	.+2      	; 0x31ce <xTaskRemoveFromEventList+0xc2>
    31cc:	19 82       	std	Y+1, r1	; 0x01
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
    31d0:	25 96       	adiw	r28, 0x05	; 5
    31d2:	cd bf       	out	0x3d, r28	; 61
    31d4:	de bf       	out	0x3e, r29	; 62
    31d6:	df 91       	pop	r29
    31d8:	cf 91       	pop	r28
    31da:	08 95       	ret

000031dc <vTaskRemoveFromUnorderedEventList>:
    31dc:	cf 93       	push	r28
    31de:	df 93       	push	r29
    31e0:	cd b7       	in	r28, 0x3d	; 61
    31e2:	de b7       	in	r29, 0x3e	; 62
    31e4:	28 97       	sbiw	r28, 0x08	; 8
    31e6:	cd bf       	out	0x3d, r28	; 61
    31e8:	de bf       	out	0x3e, r29	; 62
    31ea:	8b 83       	std	Y+3, r24	; 0x03
    31ec:	9c 83       	std	Y+4, r25	; 0x04
    31ee:	4d 83       	std	Y+5, r20	; 0x05
    31f0:	5e 83       	std	Y+6, r21	; 0x06
    31f2:	6f 83       	std	Y+7, r22	; 0x07
    31f4:	78 87       	std	Y+8, r23	; 0x08
    31f6:	8d 81       	ldd	r24, Y+5	; 0x05
    31f8:	9e 81       	ldd	r25, Y+6	; 0x06
    31fa:	af 81       	ldd	r26, Y+7	; 0x07
    31fc:	b8 85       	ldd	r27, Y+8	; 0x08
    31fe:	b0 68       	ori	r27, 0x80	; 128
    3200:	2b 81       	ldd	r18, Y+3	; 0x03
    3202:	3c 81       	ldd	r19, Y+4	; 0x04
    3204:	f9 01       	movw	r30, r18
    3206:	80 83       	st	Z, r24
    3208:	91 83       	std	Z+1, r25	; 0x01
    320a:	a2 83       	std	Z+2, r26	; 0x02
    320c:	b3 83       	std	Z+3, r27	; 0x03
    320e:	8b 81       	ldd	r24, Y+3	; 0x03
    3210:	9c 81       	ldd	r25, Y+4	; 0x04
    3212:	fc 01       	movw	r30, r24
    3214:	80 85       	ldd	r24, Z+8	; 0x08
    3216:	91 85       	ldd	r25, Z+9	; 0x09
    3218:	89 83       	std	Y+1, r24	; 0x01
    321a:	9a 83       	std	Y+2, r25	; 0x02
    321c:	8b 81       	ldd	r24, Y+3	; 0x03
    321e:	9c 81       	ldd	r25, Y+4	; 0x04
    3220:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    3224:	89 81       	ldd	r24, Y+1	; 0x01
    3226:	9a 81       	ldd	r25, Y+2	; 0x02
    3228:	02 96       	adiw	r24, 0x02	; 2
    322a:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    322e:	89 81       	ldd	r24, Y+1	; 0x01
    3230:	9a 81       	ldd	r25, Y+2	; 0x02
    3232:	fc 01       	movw	r30, r24
    3234:	92 8d       	ldd	r25, Z+26	; 0x1a
    3236:	80 91 05 35 	lds	r24, 0x3505	; 0x803505 <uxTopReadyPriority>
    323a:	89 17       	cp	r24, r25
    323c:	30 f4       	brcc	.+12     	; 0x324a <vTaskRemoveFromUnorderedEventList+0x6e>
    323e:	89 81       	ldd	r24, Y+1	; 0x01
    3240:	9a 81       	ldd	r25, Y+2	; 0x02
    3242:	fc 01       	movw	r30, r24
    3244:	82 8d       	ldd	r24, Z+26	; 0x1a
    3246:	80 93 05 35 	sts	0x3505, r24	; 0x803505 <uxTopReadyPriority>
    324a:	89 81       	ldd	r24, Y+1	; 0x01
    324c:	9a 81       	ldd	r25, Y+2	; 0x02
    324e:	ac 01       	movw	r20, r24
    3250:	4e 5f       	subi	r20, 0xFE	; 254
    3252:	5f 4f       	sbci	r21, 0xFF	; 255
    3254:	89 81       	ldd	r24, Y+1	; 0x01
    3256:	9a 81       	ldd	r25, Y+2	; 0x02
    3258:	fc 01       	movw	r30, r24
    325a:	82 8d       	ldd	r24, Z+26	; 0x1a
    325c:	28 2f       	mov	r18, r24
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	6b e0       	ldi	r22, 0x0B	; 11
    3262:	62 9f       	mul	r22, r18
    3264:	c0 01       	movw	r24, r0
    3266:	63 9f       	mul	r22, r19
    3268:	90 0d       	add	r25, r0
    326a:	11 24       	eor	r1, r1
    326c:	8c 55       	subi	r24, 0x5C	; 92
    326e:	9b 4c       	sbci	r25, 0xCB	; 203
    3270:	ba 01       	movw	r22, r20
    3272:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsertEnd>
    3276:	89 81       	ldd	r24, Y+1	; 0x01
    3278:	9a 81       	ldd	r25, Y+2	; 0x02
    327a:	fc 01       	movw	r30, r24
    327c:	22 8d       	ldd	r18, Z+26	; 0x1a
    327e:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    3282:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    3286:	fc 01       	movw	r30, r24
    3288:	82 8d       	ldd	r24, Z+26	; 0x1a
    328a:	82 17       	cp	r24, r18
    328c:	18 f4       	brcc	.+6      	; 0x3294 <vTaskRemoveFromUnorderedEventList+0xb8>
    328e:	81 e0       	ldi	r24, 0x01	; 1
    3290:	80 93 08 35 	sts	0x3508, r24	; 0x803508 <xYieldPending>
    3294:	00 00       	nop
    3296:	28 96       	adiw	r28, 0x08	; 8
    3298:	cd bf       	out	0x3d, r28	; 61
    329a:	de bf       	out	0x3e, r29	; 62
    329c:	df 91       	pop	r29
    329e:	cf 91       	pop	r28
    32a0:	08 95       	ret

000032a2 <vTaskInternalSetTimeOutState>:
    32a2:	cf 93       	push	r28
    32a4:	df 93       	push	r29
    32a6:	1f 92       	push	r1
    32a8:	1f 92       	push	r1
    32aa:	cd b7       	in	r28, 0x3d	; 61
    32ac:	de b7       	in	r29, 0x3e	; 62
    32ae:	89 83       	std	Y+1, r24	; 0x01
    32b0:	9a 83       	std	Y+2, r25	; 0x02
    32b2:	20 91 09 35 	lds	r18, 0x3509	; 0x803509 <xNumOfOverflows>
    32b6:	89 81       	ldd	r24, Y+1	; 0x01
    32b8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ba:	fc 01       	movw	r30, r24
    32bc:	20 83       	st	Z, r18
    32be:	80 91 01 35 	lds	r24, 0x3501	; 0x803501 <xTickCount>
    32c2:	90 91 02 35 	lds	r25, 0x3502	; 0x803502 <xTickCount+0x1>
    32c6:	a0 91 03 35 	lds	r26, 0x3503	; 0x803503 <xTickCount+0x2>
    32ca:	b0 91 04 35 	lds	r27, 0x3504	; 0x803504 <xTickCount+0x3>
    32ce:	29 81       	ldd	r18, Y+1	; 0x01
    32d0:	3a 81       	ldd	r19, Y+2	; 0x02
    32d2:	f9 01       	movw	r30, r18
    32d4:	81 83       	std	Z+1, r24	; 0x01
    32d6:	92 83       	std	Z+2, r25	; 0x02
    32d8:	a3 83       	std	Z+3, r26	; 0x03
    32da:	b4 83       	std	Z+4, r27	; 0x04
    32dc:	00 00       	nop
    32de:	0f 90       	pop	r0
    32e0:	0f 90       	pop	r0
    32e2:	df 91       	pop	r29
    32e4:	cf 91       	pop	r28
    32e6:	08 95       	ret

000032e8 <xTaskCheckForTimeOut>:
    32e8:	ef 92       	push	r14
    32ea:	ff 92       	push	r15
    32ec:	0f 93       	push	r16
    32ee:	1f 93       	push	r17
    32f0:	cf 93       	push	r28
    32f2:	df 93       	push	r29
    32f4:	cd b7       	in	r28, 0x3d	; 61
    32f6:	de b7       	in	r29, 0x3e	; 62
    32f8:	2d 97       	sbiw	r28, 0x0d	; 13
    32fa:	cd bf       	out	0x3d, r28	; 61
    32fc:	de bf       	out	0x3e, r29	; 62
    32fe:	8a 87       	std	Y+10, r24	; 0x0a
    3300:	9b 87       	std	Y+11, r25	; 0x0b
    3302:	6c 87       	std	Y+12, r22	; 0x0c
    3304:	7d 87       	std	Y+13, r23	; 0x0d
    3306:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    330a:	ff 93       	push	r31
    330c:	f8 7f       	andi	r31, 0xF8	; 248
    330e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    3312:	80 91 01 35 	lds	r24, 0x3501	; 0x803501 <xTickCount>
    3316:	90 91 02 35 	lds	r25, 0x3502	; 0x803502 <xTickCount+0x1>
    331a:	a0 91 03 35 	lds	r26, 0x3503	; 0x803503 <xTickCount+0x2>
    331e:	b0 91 04 35 	lds	r27, 0x3504	; 0x803504 <xTickCount+0x3>
    3322:	8a 83       	std	Y+2, r24	; 0x02
    3324:	9b 83       	std	Y+3, r25	; 0x03
    3326:	ac 83       	std	Y+4, r26	; 0x04
    3328:	bd 83       	std	Y+5, r27	; 0x05
    332a:	8a 85       	ldd	r24, Y+10	; 0x0a
    332c:	9b 85       	ldd	r25, Y+11	; 0x0b
    332e:	fc 01       	movw	r30, r24
    3330:	81 81       	ldd	r24, Z+1	; 0x01
    3332:	92 81       	ldd	r25, Z+2	; 0x02
    3334:	a3 81       	ldd	r26, Z+3	; 0x03
    3336:	b4 81       	ldd	r27, Z+4	; 0x04
    3338:	2a 81       	ldd	r18, Y+2	; 0x02
    333a:	3b 81       	ldd	r19, Y+3	; 0x03
    333c:	4c 81       	ldd	r20, Y+4	; 0x04
    333e:	5d 81       	ldd	r21, Y+5	; 0x05
    3340:	79 01       	movw	r14, r18
    3342:	8a 01       	movw	r16, r20
    3344:	e8 1a       	sub	r14, r24
    3346:	f9 0a       	sbc	r15, r25
    3348:	0a 0b       	sbc	r16, r26
    334a:	1b 0b       	sbc	r17, r27
    334c:	d8 01       	movw	r26, r16
    334e:	c7 01       	movw	r24, r14
    3350:	8e 83       	std	Y+6, r24	; 0x06
    3352:	9f 83       	std	Y+7, r25	; 0x07
    3354:	a8 87       	std	Y+8, r26	; 0x08
    3356:	b9 87       	std	Y+9, r27	; 0x09
    3358:	8c 85       	ldd	r24, Y+12	; 0x0c
    335a:	9d 85       	ldd	r25, Y+13	; 0x0d
    335c:	fc 01       	movw	r30, r24
    335e:	80 81       	ld	r24, Z
    3360:	91 81       	ldd	r25, Z+1	; 0x01
    3362:	a2 81       	ldd	r26, Z+2	; 0x02
    3364:	b3 81       	ldd	r27, Z+3	; 0x03
    3366:	8f 3f       	cpi	r24, 0xFF	; 255
    3368:	9f 4f       	sbci	r25, 0xFF	; 255
    336a:	af 4f       	sbci	r26, 0xFF	; 255
    336c:	bf 4f       	sbci	r27, 0xFF	; 255
    336e:	11 f4       	brne	.+4      	; 0x3374 <xTaskCheckForTimeOut+0x8c>
    3370:	19 82       	std	Y+1, r1	; 0x01
    3372:	54 c0       	rjmp	.+168    	; 0x341c <xTaskCheckForTimeOut+0x134>
    3374:	8a 85       	ldd	r24, Y+10	; 0x0a
    3376:	9b 85       	ldd	r25, Y+11	; 0x0b
    3378:	fc 01       	movw	r30, r24
    337a:	90 81       	ld	r25, Z
    337c:	80 91 09 35 	lds	r24, 0x3509	; 0x803509 <xNumOfOverflows>
    3380:	98 17       	cp	r25, r24
    3382:	99 f0       	breq	.+38     	; 0x33aa <xTaskCheckForTimeOut+0xc2>
    3384:	8a 85       	ldd	r24, Y+10	; 0x0a
    3386:	9b 85       	ldd	r25, Y+11	; 0x0b
    3388:	fc 01       	movw	r30, r24
    338a:	21 81       	ldd	r18, Z+1	; 0x01
    338c:	32 81       	ldd	r19, Z+2	; 0x02
    338e:	43 81       	ldd	r20, Z+3	; 0x03
    3390:	54 81       	ldd	r21, Z+4	; 0x04
    3392:	8a 81       	ldd	r24, Y+2	; 0x02
    3394:	9b 81       	ldd	r25, Y+3	; 0x03
    3396:	ac 81       	ldd	r26, Y+4	; 0x04
    3398:	bd 81       	ldd	r27, Y+5	; 0x05
    339a:	82 17       	cp	r24, r18
    339c:	93 07       	cpc	r25, r19
    339e:	a4 07       	cpc	r26, r20
    33a0:	b5 07       	cpc	r27, r21
    33a2:	18 f0       	brcs	.+6      	; 0x33aa <xTaskCheckForTimeOut+0xc2>
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	89 83       	std	Y+1, r24	; 0x01
    33a8:	39 c0       	rjmp	.+114    	; 0x341c <xTaskCheckForTimeOut+0x134>
    33aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    33ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    33ae:	fc 01       	movw	r30, r24
    33b0:	20 81       	ld	r18, Z
    33b2:	31 81       	ldd	r19, Z+1	; 0x01
    33b4:	42 81       	ldd	r20, Z+2	; 0x02
    33b6:	53 81       	ldd	r21, Z+3	; 0x03
    33b8:	8e 81       	ldd	r24, Y+6	; 0x06
    33ba:	9f 81       	ldd	r25, Y+7	; 0x07
    33bc:	a8 85       	ldd	r26, Y+8	; 0x08
    33be:	b9 85       	ldd	r27, Y+9	; 0x09
    33c0:	82 17       	cp	r24, r18
    33c2:	93 07       	cpc	r25, r19
    33c4:	a4 07       	cpc	r26, r20
    33c6:	b5 07       	cpc	r27, r21
    33c8:	00 f5       	brcc	.+64     	; 0x340a <xTaskCheckForTimeOut+0x122>
    33ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    33cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    33ce:	fc 01       	movw	r30, r24
    33d0:	20 81       	ld	r18, Z
    33d2:	31 81       	ldd	r19, Z+1	; 0x01
    33d4:	42 81       	ldd	r20, Z+2	; 0x02
    33d6:	53 81       	ldd	r21, Z+3	; 0x03
    33d8:	8e 81       	ldd	r24, Y+6	; 0x06
    33da:	9f 81       	ldd	r25, Y+7	; 0x07
    33dc:	a8 85       	ldd	r26, Y+8	; 0x08
    33de:	b9 85       	ldd	r27, Y+9	; 0x09
    33e0:	79 01       	movw	r14, r18
    33e2:	8a 01       	movw	r16, r20
    33e4:	e8 1a       	sub	r14, r24
    33e6:	f9 0a       	sbc	r15, r25
    33e8:	0a 0b       	sbc	r16, r26
    33ea:	1b 0b       	sbc	r17, r27
    33ec:	d8 01       	movw	r26, r16
    33ee:	c7 01       	movw	r24, r14
    33f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    33f2:	3d 85       	ldd	r19, Y+13	; 0x0d
    33f4:	f9 01       	movw	r30, r18
    33f6:	80 83       	st	Z, r24
    33f8:	91 83       	std	Z+1, r25	; 0x01
    33fa:	a2 83       	std	Z+2, r26	; 0x02
    33fc:	b3 83       	std	Z+3, r27	; 0x03
    33fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    3400:	9b 85       	ldd	r25, Y+11	; 0x0b
    3402:	0e 94 51 19 	call	0x32a2	; 0x32a2 <vTaskInternalSetTimeOutState>
    3406:	19 82       	std	Y+1, r1	; 0x01
    3408:	09 c0       	rjmp	.+18     	; 0x341c <xTaskCheckForTimeOut+0x134>
    340a:	8c 85       	ldd	r24, Y+12	; 0x0c
    340c:	9d 85       	ldd	r25, Y+13	; 0x0d
    340e:	fc 01       	movw	r30, r24
    3410:	10 82       	st	Z, r1
    3412:	11 82       	std	Z+1, r1	; 0x01
    3414:	12 82       	std	Z+2, r1	; 0x02
    3416:	13 82       	std	Z+3, r1	; 0x03
    3418:	81 e0       	ldi	r24, 0x01	; 1
    341a:	89 83       	std	Y+1, r24	; 0x01
    341c:	ff 91       	pop	r31
    341e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    3422:	89 81       	ldd	r24, Y+1	; 0x01
    3424:	2d 96       	adiw	r28, 0x0d	; 13
    3426:	cd bf       	out	0x3d, r28	; 61
    3428:	de bf       	out	0x3e, r29	; 62
    342a:	df 91       	pop	r29
    342c:	cf 91       	pop	r28
    342e:	1f 91       	pop	r17
    3430:	0f 91       	pop	r16
    3432:	ff 90       	pop	r15
    3434:	ef 90       	pop	r14
    3436:	08 95       	ret

00003438 <vTaskMissedYield>:
    3438:	cf 93       	push	r28
    343a:	df 93       	push	r29
    343c:	cd b7       	in	r28, 0x3d	; 61
    343e:	de b7       	in	r29, 0x3e	; 62
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	80 93 08 35 	sts	0x3508, r24	; 0x803508 <xYieldPending>
    3446:	00 00       	nop
    3448:	df 91       	pop	r29
    344a:	cf 91       	pop	r28
    344c:	08 95       	ret

0000344e <prvIdleTask>:
    344e:	cf 93       	push	r28
    3450:	df 93       	push	r29
    3452:	1f 92       	push	r1
    3454:	1f 92       	push	r1
    3456:	cd b7       	in	r28, 0x3d	; 61
    3458:	de b7       	in	r29, 0x3e	; 62
    345a:	89 83       	std	Y+1, r24	; 0x01
    345c:	9a 83       	std	Y+2, r25	; 0x02
    345e:	0e 94 75 1a 	call	0x34ea	; 0x34ea <prvCheckTasksWaitingTermination>
    3462:	80 91 a4 34 	lds	r24, 0x34A4	; 0x8034a4 <pxReadyTasksLists>
    3466:	82 30       	cpi	r24, 0x02	; 2
    3468:	10 f0       	brcs	.+4      	; 0x346e <prvIdleTask+0x20>
    346a:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    346e:	0e 94 16 21 	call	0x422c	; 0x422c <vApplicationIdleHook>
    3472:	f5 cf       	rjmp	.-22     	; 0x345e <prvIdleTask+0x10>

00003474 <prvInitialiseTaskLists>:
    3474:	cf 93       	push	r28
    3476:	df 93       	push	r29
    3478:	1f 92       	push	r1
    347a:	cd b7       	in	r28, 0x3d	; 61
    347c:	de b7       	in	r29, 0x3e	; 62
    347e:	19 82       	std	Y+1, r1	; 0x01
    3480:	10 c0       	rjmp	.+32     	; 0x34a2 <prvInitialiseTaskLists+0x2e>
    3482:	89 81       	ldd	r24, Y+1	; 0x01
    3484:	28 2f       	mov	r18, r24
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	4b e0       	ldi	r20, 0x0B	; 11
    348a:	42 9f       	mul	r20, r18
    348c:	c0 01       	movw	r24, r0
    348e:	43 9f       	mul	r20, r19
    3490:	90 0d       	add	r25, r0
    3492:	11 24       	eor	r1, r1
    3494:	8c 55       	subi	r24, 0x5C	; 92
    3496:	9b 4c       	sbci	r25, 0xCB	; 203
    3498:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vListInitialise>
    349c:	89 81       	ldd	r24, Y+1	; 0x01
    349e:	8f 5f       	subi	r24, 0xFF	; 255
    34a0:	89 83       	std	Y+1, r24	; 0x01
    34a2:	89 81       	ldd	r24, Y+1	; 0x01
    34a4:	84 30       	cpi	r24, 0x04	; 4
    34a6:	68 f3       	brcs	.-38     	; 0x3482 <prvInitialiseTaskLists+0xe>
    34a8:	80 ed       	ldi	r24, 0xD0	; 208
    34aa:	94 e3       	ldi	r25, 0x34	; 52
    34ac:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vListInitialise>
    34b0:	8b ed       	ldi	r24, 0xDB	; 219
    34b2:	94 e3       	ldi	r25, 0x34	; 52
    34b4:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vListInitialise>
    34b8:	8a ee       	ldi	r24, 0xEA	; 234
    34ba:	94 e3       	ldi	r25, 0x34	; 52
    34bc:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vListInitialise>
    34c0:	85 ef       	ldi	r24, 0xF5	; 245
    34c2:	94 e3       	ldi	r25, 0x34	; 52
    34c4:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vListInitialise>
    34c8:	80 ed       	ldi	r24, 0xD0	; 208
    34ca:	94 e3       	ldi	r25, 0x34	; 52
    34cc:	80 93 e6 34 	sts	0x34E6, r24	; 0x8034e6 <pxDelayedTaskList>
    34d0:	90 93 e7 34 	sts	0x34E7, r25	; 0x8034e7 <pxDelayedTaskList+0x1>
    34d4:	8b ed       	ldi	r24, 0xDB	; 219
    34d6:	94 e3       	ldi	r25, 0x34	; 52
    34d8:	80 93 e8 34 	sts	0x34E8, r24	; 0x8034e8 <pxOverflowDelayedTaskList>
    34dc:	90 93 e9 34 	sts	0x34E9, r25	; 0x8034e9 <pxOverflowDelayedTaskList+0x1>
    34e0:	00 00       	nop
    34e2:	0f 90       	pop	r0
    34e4:	df 91       	pop	r29
    34e6:	cf 91       	pop	r28
    34e8:	08 95       	ret

000034ea <prvCheckTasksWaitingTermination>:
    34ea:	cf 93       	push	r28
    34ec:	df 93       	push	r29
    34ee:	cd b7       	in	r28, 0x3d	; 61
    34f0:	de b7       	in	r29, 0x3e	; 62
    34f2:	00 00       	nop
    34f4:	df 91       	pop	r29
    34f6:	cf 91       	pop	r28
    34f8:	08 95       	ret

000034fa <prvResetNextTaskUnblockTime>:
    34fa:	cf 93       	push	r28
    34fc:	df 93       	push	r29
    34fe:	1f 92       	push	r1
    3500:	1f 92       	push	r1
    3502:	cd b7       	in	r28, 0x3d	; 61
    3504:	de b7       	in	r29, 0x3e	; 62
    3506:	80 91 e6 34 	lds	r24, 0x34E6	; 0x8034e6 <pxDelayedTaskList>
    350a:	90 91 e7 34 	lds	r25, 0x34E7	; 0x8034e7 <pxDelayedTaskList+0x1>
    350e:	fc 01       	movw	r30, r24
    3510:	80 81       	ld	r24, Z
    3512:	88 23       	and	r24, r24
    3514:	61 f4       	brne	.+24     	; 0x352e <prvResetNextTaskUnblockTime+0x34>
    3516:	8f ef       	ldi	r24, 0xFF	; 255
    3518:	9f ef       	ldi	r25, 0xFF	; 255
    351a:	dc 01       	movw	r26, r24
    351c:	80 93 0b 35 	sts	0x350B, r24	; 0x80350b <xNextTaskUnblockTime>
    3520:	90 93 0c 35 	sts	0x350C, r25	; 0x80350c <xNextTaskUnblockTime+0x1>
    3524:	a0 93 0d 35 	sts	0x350D, r26	; 0x80350d <xNextTaskUnblockTime+0x2>
    3528:	b0 93 0e 35 	sts	0x350E, r27	; 0x80350e <xNextTaskUnblockTime+0x3>
    352c:	1b c0       	rjmp	.+54     	; 0x3564 <prvResetNextTaskUnblockTime+0x6a>
    352e:	80 91 e6 34 	lds	r24, 0x34E6	; 0x8034e6 <pxDelayedTaskList>
    3532:	90 91 e7 34 	lds	r25, 0x34E7	; 0x8034e7 <pxDelayedTaskList+0x1>
    3536:	fc 01       	movw	r30, r24
    3538:	87 81       	ldd	r24, Z+7	; 0x07
    353a:	90 85       	ldd	r25, Z+8	; 0x08
    353c:	fc 01       	movw	r30, r24
    353e:	80 85       	ldd	r24, Z+8	; 0x08
    3540:	91 85       	ldd	r25, Z+9	; 0x09
    3542:	89 83       	std	Y+1, r24	; 0x01
    3544:	9a 83       	std	Y+2, r25	; 0x02
    3546:	89 81       	ldd	r24, Y+1	; 0x01
    3548:	9a 81       	ldd	r25, Y+2	; 0x02
    354a:	fc 01       	movw	r30, r24
    354c:	82 81       	ldd	r24, Z+2	; 0x02
    354e:	93 81       	ldd	r25, Z+3	; 0x03
    3550:	a4 81       	ldd	r26, Z+4	; 0x04
    3552:	b5 81       	ldd	r27, Z+5	; 0x05
    3554:	80 93 0b 35 	sts	0x350B, r24	; 0x80350b <xNextTaskUnblockTime>
    3558:	90 93 0c 35 	sts	0x350C, r25	; 0x80350c <xNextTaskUnblockTime+0x1>
    355c:	a0 93 0d 35 	sts	0x350D, r26	; 0x80350d <xNextTaskUnblockTime+0x2>
    3560:	b0 93 0e 35 	sts	0x350E, r27	; 0x80350e <xNextTaskUnblockTime+0x3>
    3564:	00 00       	nop
    3566:	0f 90       	pop	r0
    3568:	0f 90       	pop	r0
    356a:	df 91       	pop	r29
    356c:	cf 91       	pop	r28
    356e:	08 95       	ret

00003570 <xTaskGetSchedulerState>:
    3570:	cf 93       	push	r28
    3572:	df 93       	push	r29
    3574:	1f 92       	push	r1
    3576:	cd b7       	in	r28, 0x3d	; 61
    3578:	de b7       	in	r29, 0x3e	; 62
    357a:	80 91 06 35 	lds	r24, 0x3506	; 0x803506 <xSchedulerRunning>
    357e:	88 23       	and	r24, r24
    3580:	19 f4       	brne	.+6      	; 0x3588 <xTaskGetSchedulerState+0x18>
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	89 83       	std	Y+1, r24	; 0x01
    3586:	08 c0       	rjmp	.+16     	; 0x3598 <xTaskGetSchedulerState+0x28>
    3588:	80 91 11 35 	lds	r24, 0x3511	; 0x803511 <uxSchedulerSuspended>
    358c:	88 23       	and	r24, r24
    358e:	19 f4       	brne	.+6      	; 0x3596 <xTaskGetSchedulerState+0x26>
    3590:	82 e0       	ldi	r24, 0x02	; 2
    3592:	89 83       	std	Y+1, r24	; 0x01
    3594:	01 c0       	rjmp	.+2      	; 0x3598 <xTaskGetSchedulerState+0x28>
    3596:	19 82       	std	Y+1, r1	; 0x01
    3598:	89 81       	ldd	r24, Y+1	; 0x01
    359a:	0f 90       	pop	r0
    359c:	df 91       	pop	r29
    359e:	cf 91       	pop	r28
    35a0:	08 95       	ret

000035a2 <uxTaskResetEventItemValue>:
    35a2:	ef 92       	push	r14
    35a4:	ff 92       	push	r15
    35a6:	0f 93       	push	r16
    35a8:	1f 93       	push	r17
    35aa:	cf 93       	push	r28
    35ac:	df 93       	push	r29
    35ae:	00 d0       	rcall	.+0      	; 0x35b0 <uxTaskResetEventItemValue+0xe>
    35b0:	1f 92       	push	r1
    35b2:	cd b7       	in	r28, 0x3d	; 61
    35b4:	de b7       	in	r29, 0x3e	; 62
    35b6:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    35ba:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    35be:	fc 01       	movw	r30, r24
    35c0:	86 85       	ldd	r24, Z+14	; 0x0e
    35c2:	97 85       	ldd	r25, Z+15	; 0x0f
    35c4:	a0 89       	ldd	r26, Z+16	; 0x10
    35c6:	b1 89       	ldd	r27, Z+17	; 0x11
    35c8:	89 83       	std	Y+1, r24	; 0x01
    35ca:	9a 83       	std	Y+2, r25	; 0x02
    35cc:	ab 83       	std	Y+3, r26	; 0x03
    35ce:	bc 83       	std	Y+4, r27	; 0x04
    35d0:	60 91 a2 34 	lds	r22, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    35d4:	70 91 a3 34 	lds	r23, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    35d8:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    35dc:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    35e0:	fc 01       	movw	r30, r24
    35e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    35e4:	88 2f       	mov	r24, r24
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	a0 e0       	ldi	r26, 0x00	; 0
    35ea:	b0 e0       	ldi	r27, 0x00	; 0
    35ec:	24 e0       	ldi	r18, 0x04	; 4
    35ee:	30 e0       	ldi	r19, 0x00	; 0
    35f0:	40 e0       	ldi	r20, 0x00	; 0
    35f2:	50 e0       	ldi	r21, 0x00	; 0
    35f4:	79 01       	movw	r14, r18
    35f6:	8a 01       	movw	r16, r20
    35f8:	e8 1a       	sub	r14, r24
    35fa:	f9 0a       	sbc	r15, r25
    35fc:	0a 0b       	sbc	r16, r26
    35fe:	1b 0b       	sbc	r17, r27
    3600:	d8 01       	movw	r26, r16
    3602:	c7 01       	movw	r24, r14
    3604:	fb 01       	movw	r30, r22
    3606:	86 87       	std	Z+14, r24	; 0x0e
    3608:	97 87       	std	Z+15, r25	; 0x0f
    360a:	a0 8b       	std	Z+16, r26	; 0x10
    360c:	b1 8b       	std	Z+17, r27	; 0x11
    360e:	89 81       	ldd	r24, Y+1	; 0x01
    3610:	9a 81       	ldd	r25, Y+2	; 0x02
    3612:	ab 81       	ldd	r26, Y+3	; 0x03
    3614:	bc 81       	ldd	r27, Y+4	; 0x04
    3616:	bc 01       	movw	r22, r24
    3618:	cd 01       	movw	r24, r26
    361a:	24 96       	adiw	r28, 0x04	; 4
    361c:	cd bf       	out	0x3d, r28	; 61
    361e:	de bf       	out	0x3e, r29	; 62
    3620:	df 91       	pop	r29
    3622:	cf 91       	pop	r28
    3624:	1f 91       	pop	r17
    3626:	0f 91       	pop	r16
    3628:	ff 90       	pop	r15
    362a:	ef 90       	pop	r14
    362c:	08 95       	ret

0000362e <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    362e:	cf 93       	push	r28
    3630:	df 93       	push	r29
    3632:	cd b7       	in	r28, 0x3d	; 61
    3634:	de b7       	in	r29, 0x3e	; 62
    3636:	2d 97       	sbiw	r28, 0x0d	; 13
    3638:	cd bf       	out	0x3d, r28	; 61
    363a:	de bf       	out	0x3e, r29	; 62
    363c:	69 87       	std	Y+9, r22	; 0x09
    363e:	7a 87       	std	Y+10, r23	; 0x0a
    3640:	8b 87       	std	Y+11, r24	; 0x0b
    3642:	9c 87       	std	Y+12, r25	; 0x0c
    3644:	4d 87       	std	Y+13, r20	; 0x0d
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    3646:	80 91 01 35 	lds	r24, 0x3501	; 0x803501 <xTickCount>
    364a:	90 91 02 35 	lds	r25, 0x3502	; 0x803502 <xTickCount+0x1>
    364e:	a0 91 03 35 	lds	r26, 0x3503	; 0x803503 <xTickCount+0x2>
    3652:	b0 91 04 35 	lds	r27, 0x3504	; 0x803504 <xTickCount+0x3>
    3656:	89 83       	std	Y+1, r24	; 0x01
    3658:	9a 83       	std	Y+2, r25	; 0x02
    365a:	ab 83       	std	Y+3, r26	; 0x03
    365c:	bc 83       	std	Y+4, r27	; 0x04
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    365e:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    3662:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    3666:	02 96       	adiw	r24, 0x02	; 2
    3668:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    366c:	89 85       	ldd	r24, Y+9	; 0x09
    366e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3670:	ab 85       	ldd	r26, Y+11	; 0x0b
    3672:	bc 85       	ldd	r27, Y+12	; 0x0c
    3674:	8f 3f       	cpi	r24, 0xFF	; 255
    3676:	9f 4f       	sbci	r25, 0xFF	; 255
    3678:	af 4f       	sbci	r26, 0xFF	; 255
    367a:	bf 4f       	sbci	r27, 0xFF	; 255
    367c:	71 f4       	brne	.+28     	; 0x369a <prvAddCurrentTaskToDelayedList+0x6c>
    367e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3680:	88 23       	and	r24, r24
    3682:	59 f0       	breq	.+22     	; 0x369a <prvAddCurrentTaskToDelayedList+0x6c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3684:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    3688:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    368c:	02 96       	adiw	r24, 0x02	; 2
    368e:	bc 01       	movw	r22, r24
    3690:	85 ef       	ldi	r24, 0xF5	; 245
    3692:	94 e3       	ldi	r25, 0x34	; 52
    3694:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3698:	64 c0       	rjmp	.+200    	; 0x3762 <prvAddCurrentTaskToDelayedList+0x134>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    369a:	29 81       	ldd	r18, Y+1	; 0x01
    369c:	3a 81       	ldd	r19, Y+2	; 0x02
    369e:	4b 81       	ldd	r20, Y+3	; 0x03
    36a0:	5c 81       	ldd	r21, Y+4	; 0x04
    36a2:	89 85       	ldd	r24, Y+9	; 0x09
    36a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    36a6:	ab 85       	ldd	r26, Y+11	; 0x0b
    36a8:	bc 85       	ldd	r27, Y+12	; 0x0c
    36aa:	82 0f       	add	r24, r18
    36ac:	93 1f       	adc	r25, r19
    36ae:	a4 1f       	adc	r26, r20
    36b0:	b5 1f       	adc	r27, r21
    36b2:	8d 83       	std	Y+5, r24	; 0x05
    36b4:	9e 83       	std	Y+6, r25	; 0x06
    36b6:	af 83       	std	Y+7, r26	; 0x07
    36b8:	b8 87       	std	Y+8, r27	; 0x08

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    36ba:	20 91 a2 34 	lds	r18, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    36be:	30 91 a3 34 	lds	r19, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    36c2:	8d 81       	ldd	r24, Y+5	; 0x05
    36c4:	9e 81       	ldd	r25, Y+6	; 0x06
    36c6:	af 81       	ldd	r26, Y+7	; 0x07
    36c8:	b8 85       	ldd	r27, Y+8	; 0x08
    36ca:	f9 01       	movw	r30, r18
    36cc:	82 83       	std	Z+2, r24	; 0x02
    36ce:	93 83       	std	Z+3, r25	; 0x03
    36d0:	a4 83       	std	Z+4, r26	; 0x04
    36d2:	b5 83       	std	Z+5, r27	; 0x05

			if( xTimeToWake < xConstTickCount )
    36d4:	2d 81       	ldd	r18, Y+5	; 0x05
    36d6:	3e 81       	ldd	r19, Y+6	; 0x06
    36d8:	4f 81       	ldd	r20, Y+7	; 0x07
    36da:	58 85       	ldd	r21, Y+8	; 0x08
    36dc:	89 81       	ldd	r24, Y+1	; 0x01
    36de:	9a 81       	ldd	r25, Y+2	; 0x02
    36e0:	ab 81       	ldd	r26, Y+3	; 0x03
    36e2:	bc 81       	ldd	r27, Y+4	; 0x04
    36e4:	28 17       	cp	r18, r24
    36e6:	39 07       	cpc	r19, r25
    36e8:	4a 07       	cpc	r20, r26
    36ea:	5b 07       	cpc	r21, r27
    36ec:	78 f4       	brcc	.+30     	; 0x370c <prvAddCurrentTaskToDelayedList+0xde>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    36ee:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    36f2:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    36f6:	9c 01       	movw	r18, r24
    36f8:	2e 5f       	subi	r18, 0xFE	; 254
    36fa:	3f 4f       	sbci	r19, 0xFF	; 255
    36fc:	80 91 e8 34 	lds	r24, 0x34E8	; 0x8034e8 <pxOverflowDelayedTaskList>
    3700:	90 91 e9 34 	lds	r25, 0x34E9	; 0x8034e9 <pxOverflowDelayedTaskList+0x1>
    3704:	b9 01       	movw	r22, r18
    3706:	0e 94 83 08 	call	0x1106	; 0x1106 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    370a:	2b c0       	rjmp	.+86     	; 0x3762 <prvAddCurrentTaskToDelayedList+0x134>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    370c:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <pxCurrentTCB>
    3710:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <pxCurrentTCB+0x1>
    3714:	9c 01       	movw	r18, r24
    3716:	2e 5f       	subi	r18, 0xFE	; 254
    3718:	3f 4f       	sbci	r19, 0xFF	; 255
    371a:	80 91 e6 34 	lds	r24, 0x34E6	; 0x8034e6 <pxDelayedTaskList>
    371e:	90 91 e7 34 	lds	r25, 0x34E7	; 0x8034e7 <pxDelayedTaskList+0x1>
    3722:	b9 01       	movw	r22, r18
    3724:	0e 94 83 08 	call	0x1106	; 0x1106 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    3728:	80 91 0b 35 	lds	r24, 0x350B	; 0x80350b <xNextTaskUnblockTime>
    372c:	90 91 0c 35 	lds	r25, 0x350C	; 0x80350c <xNextTaskUnblockTime+0x1>
    3730:	a0 91 0d 35 	lds	r26, 0x350D	; 0x80350d <xNextTaskUnblockTime+0x2>
    3734:	b0 91 0e 35 	lds	r27, 0x350E	; 0x80350e <xNextTaskUnblockTime+0x3>
    3738:	2d 81       	ldd	r18, Y+5	; 0x05
    373a:	3e 81       	ldd	r19, Y+6	; 0x06
    373c:	4f 81       	ldd	r20, Y+7	; 0x07
    373e:	58 85       	ldd	r21, Y+8	; 0x08
    3740:	28 17       	cp	r18, r24
    3742:	39 07       	cpc	r19, r25
    3744:	4a 07       	cpc	r20, r26
    3746:	5b 07       	cpc	r21, r27
    3748:	60 f4       	brcc	.+24     	; 0x3762 <prvAddCurrentTaskToDelayedList+0x134>
				{
					xNextTaskUnblockTime = xTimeToWake;
    374a:	8d 81       	ldd	r24, Y+5	; 0x05
    374c:	9e 81       	ldd	r25, Y+6	; 0x06
    374e:	af 81       	ldd	r26, Y+7	; 0x07
    3750:	b8 85       	ldd	r27, Y+8	; 0x08
    3752:	80 93 0b 35 	sts	0x350B, r24	; 0x80350b <xNextTaskUnblockTime>
    3756:	90 93 0c 35 	sts	0x350C, r25	; 0x80350c <xNextTaskUnblockTime+0x1>
    375a:	a0 93 0d 35 	sts	0x350D, r26	; 0x80350d <xNextTaskUnblockTime+0x2>
    375e:	b0 93 0e 35 	sts	0x350E, r27	; 0x80350e <xNextTaskUnblockTime+0x3>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3762:	00 00       	nop
    3764:	2d 96       	adiw	r28, 0x0d	; 13
    3766:	cd bf       	out	0x3d, r28	; 61
    3768:	de bf       	out	0x3e, r29	; 62
    376a:	df 91       	pop	r29
    376c:	cf 91       	pop	r28
    376e:	08 95       	ret

00003770 <xTimerCreateTimerTask>:
	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
}
    3770:	ef 92       	push	r14
    3772:	ff 92       	push	r15
    3774:	0f 93       	push	r16
    3776:	cf 93       	push	r28
    3778:	df 93       	push	r29
    377a:	1f 92       	push	r1
    377c:	cd b7       	in	r28, 0x3d	; 61
    377e:	de b7       	in	r29, 0x3e	; 62
    3780:	19 82       	std	Y+1, r1	; 0x01
    3782:	0e 94 49 20 	call	0x4092	; 0x4092 <prvCheckForValidListAndQueue>
    3786:	80 91 2c 35 	lds	r24, 0x352C	; 0x80352c <xTimerQueue>
    378a:	90 91 2d 35 	lds	r25, 0x352D	; 0x80352d <xTimerQueue+0x1>
    378e:	89 2b       	or	r24, r25
    3790:	91 f0       	breq	.+36     	; 0x37b6 <xTimerCreateTimerTask+0x46>
    3792:	0f 2e       	mov	r0, r31
    3794:	fe e2       	ldi	r31, 0x2E	; 46
    3796:	ef 2e       	mov	r14, r31
    3798:	f5 e3       	ldi	r31, 0x35	; 53
    379a:	ff 2e       	mov	r15, r31
    379c:	f0 2d       	mov	r31, r0
    379e:	03 e0       	ldi	r16, 0x03	; 3
    37a0:	20 e0       	ldi	r18, 0x00	; 0
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	48 ec       	ldi	r20, 0xC8	; 200
    37a6:	50 e0       	ldi	r21, 0x00	; 0
    37a8:	65 e0       	ldi	r22, 0x05	; 5
    37aa:	70 e2       	ldi	r23, 0x20	; 32
    37ac:	8e ec       	ldi	r24, 0xCE	; 206
    37ae:	9c e1       	ldi	r25, 0x1C	; 28
    37b0:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <xTaskCreate>
    37b4:	89 83       	std	Y+1, r24	; 0x01
    37b6:	89 81       	ldd	r24, Y+1	; 0x01
    37b8:	0f 90       	pop	r0
    37ba:	df 91       	pop	r29
    37bc:	cf 91       	pop	r28
    37be:	0f 91       	pop	r16
    37c0:	ff 90       	pop	r15
    37c2:	ef 90       	pop	r14
    37c4:	08 95       	ret

000037c6 <xTimerGenericCommand>:
    37c6:	cf 92       	push	r12
    37c8:	df 92       	push	r13
    37ca:	ef 92       	push	r14
    37cc:	ff 92       	push	r15
    37ce:	0f 93       	push	r16
    37d0:	1f 93       	push	r17
    37d2:	cf 93       	push	r28
    37d4:	df 93       	push	r29
    37d6:	cd b7       	in	r28, 0x3d	; 61
    37d8:	de b7       	in	r29, 0x3e	; 62
    37da:	67 97       	sbiw	r28, 0x17	; 23
    37dc:	cd bf       	out	0x3d, r28	; 61
    37de:	de bf       	out	0x3e, r29	; 62
    37e0:	8b 87       	std	Y+11, r24	; 0x0b
    37e2:	9c 87       	std	Y+12, r25	; 0x0c
    37e4:	6d 87       	std	Y+13, r22	; 0x0d
    37e6:	2e 87       	std	Y+14, r18	; 0x0e
    37e8:	3f 87       	std	Y+15, r19	; 0x0f
    37ea:	48 8b       	std	Y+16, r20	; 0x10
    37ec:	59 8b       	std	Y+17, r21	; 0x11
    37ee:	0a 8b       	std	Y+18, r16	; 0x12
    37f0:	1b 8b       	std	Y+19, r17	; 0x13
    37f2:	cc 8a       	std	Y+20, r12	; 0x14
    37f4:	dd 8a       	std	Y+21, r13	; 0x15
    37f6:	ee 8a       	std	Y+22, r14	; 0x16
    37f8:	ff 8a       	std	Y+23, r15	; 0x17
    37fa:	19 82       	std	Y+1, r1	; 0x01
    37fc:	80 91 2c 35 	lds	r24, 0x352C	; 0x80352c <xTimerQueue>
    3800:	90 91 2d 35 	lds	r25, 0x352D	; 0x80352d <xTimerQueue+0x1>
    3804:	89 2b       	or	r24, r25
    3806:	09 f4       	brne	.+2      	; 0x380a <xTimerGenericCommand+0x44>
    3808:	44 c0       	rjmp	.+136    	; 0x3892 <xTimerGenericCommand+0xcc>
    380a:	8d 85       	ldd	r24, Y+13	; 0x0d
    380c:	8a 83       	std	Y+2, r24	; 0x02
    380e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3810:	9f 85       	ldd	r25, Y+15	; 0x0f
    3812:	a8 89       	ldd	r26, Y+16	; 0x10
    3814:	b9 89       	ldd	r27, Y+17	; 0x11
    3816:	8b 83       	std	Y+3, r24	; 0x03
    3818:	9c 83       	std	Y+4, r25	; 0x04
    381a:	ad 83       	std	Y+5, r26	; 0x05
    381c:	be 83       	std	Y+6, r27	; 0x06
    381e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3820:	9c 85       	ldd	r25, Y+12	; 0x0c
    3822:	8f 83       	std	Y+7, r24	; 0x07
    3824:	98 87       	std	Y+8, r25	; 0x08
    3826:	8d 85       	ldd	r24, Y+13	; 0x0d
    3828:	86 30       	cpi	r24, 0x06	; 6
    382a:	34 f5       	brge	.+76     	; 0x3878 <xTimerGenericCommand+0xb2>
    382c:	0e 94 b8 1a 	call	0x3570	; 0x3570 <xTaskGetSchedulerState>
    3830:	82 30       	cpi	r24, 0x02	; 2
    3832:	99 f4       	brne	.+38     	; 0x385a <xTimerGenericCommand+0x94>
    3834:	e0 91 2c 35 	lds	r30, 0x352C	; 0x80352c <xTimerQueue>
    3838:	f0 91 2d 35 	lds	r31, 0x352D	; 0x80352d <xTimerQueue+0x1>
    383c:	8c 89       	ldd	r24, Y+20	; 0x14
    383e:	9d 89       	ldd	r25, Y+21	; 0x15
    3840:	ae 89       	ldd	r26, Y+22	; 0x16
    3842:	bf 89       	ldd	r27, Y+23	; 0x17
    3844:	be 01       	movw	r22, r28
    3846:	6e 5f       	subi	r22, 0xFE	; 254
    3848:	7f 4f       	sbci	r23, 0xFF	; 255
    384a:	00 e0       	ldi	r16, 0x00	; 0
    384c:	9c 01       	movw	r18, r24
    384e:	ad 01       	movw	r20, r26
    3850:	cf 01       	movw	r24, r30
    3852:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <xQueueGenericSend>
    3856:	89 83       	std	Y+1, r24	; 0x01
    3858:	1c c0       	rjmp	.+56     	; 0x3892 <xTimerGenericCommand+0xcc>
    385a:	80 91 2c 35 	lds	r24, 0x352C	; 0x80352c <xTimerQueue>
    385e:	90 91 2d 35 	lds	r25, 0x352D	; 0x80352d <xTimerQueue+0x1>
    3862:	be 01       	movw	r22, r28
    3864:	6e 5f       	subi	r22, 0xFE	; 254
    3866:	7f 4f       	sbci	r23, 0xFF	; 255
    3868:	00 e0       	ldi	r16, 0x00	; 0
    386a:	20 e0       	ldi	r18, 0x00	; 0
    386c:	30 e0       	ldi	r19, 0x00	; 0
    386e:	a9 01       	movw	r20, r18
    3870:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <xQueueGenericSend>
    3874:	89 83       	std	Y+1, r24	; 0x01
    3876:	0d c0       	rjmp	.+26     	; 0x3892 <xTimerGenericCommand+0xcc>
    3878:	80 91 2c 35 	lds	r24, 0x352C	; 0x80352c <xTimerQueue>
    387c:	90 91 2d 35 	lds	r25, 0x352D	; 0x80352d <xTimerQueue+0x1>
    3880:	4a 89       	ldd	r20, Y+18	; 0x12
    3882:	5b 89       	ldd	r21, Y+19	; 0x13
    3884:	be 01       	movw	r22, r28
    3886:	6e 5f       	subi	r22, 0xFE	; 254
    3888:	7f 4f       	sbci	r23, 0xFF	; 255
    388a:	20 e0       	ldi	r18, 0x00	; 0
    388c:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <xQueueGenericSendFromISR>
    3890:	89 83       	std	Y+1, r24	; 0x01
    3892:	89 81       	ldd	r24, Y+1	; 0x01
    3894:	67 96       	adiw	r28, 0x17	; 23
    3896:	cd bf       	out	0x3d, r28	; 61
    3898:	de bf       	out	0x3e, r29	; 62
    389a:	df 91       	pop	r29
    389c:	cf 91       	pop	r28
    389e:	1f 91       	pop	r17
    38a0:	0f 91       	pop	r16
    38a2:	ff 90       	pop	r15
    38a4:	ef 90       	pop	r14
    38a6:	df 90       	pop	r13
    38a8:	cf 90       	pop	r12
    38aa:	08 95       	ret

000038ac <prvProcessExpiredTimer>:
    38ac:	cf 92       	push	r12
    38ae:	df 92       	push	r13
    38b0:	ef 92       	push	r14
    38b2:	ff 92       	push	r15
    38b4:	0f 93       	push	r16
    38b6:	1f 93       	push	r17
    38b8:	cf 93       	push	r28
    38ba:	df 93       	push	r29
    38bc:	cd b7       	in	r28, 0x3d	; 61
    38be:	de b7       	in	r29, 0x3e	; 62
    38c0:	2b 97       	sbiw	r28, 0x0b	; 11
    38c2:	cd bf       	out	0x3d, r28	; 61
    38c4:	de bf       	out	0x3e, r29	; 62
    38c6:	6c 83       	std	Y+4, r22	; 0x04
    38c8:	7d 83       	std	Y+5, r23	; 0x05
    38ca:	8e 83       	std	Y+6, r24	; 0x06
    38cc:	9f 83       	std	Y+7, r25	; 0x07
    38ce:	28 87       	std	Y+8, r18	; 0x08
    38d0:	39 87       	std	Y+9, r19	; 0x09
    38d2:	4a 87       	std	Y+10, r20	; 0x0a
    38d4:	5b 87       	std	Y+11, r21	; 0x0b
    38d6:	80 91 28 35 	lds	r24, 0x3528	; 0x803528 <pxCurrentTimerList>
    38da:	90 91 29 35 	lds	r25, 0x3529	; 0x803529 <pxCurrentTimerList+0x1>
    38de:	fc 01       	movw	r30, r24
    38e0:	87 81       	ldd	r24, Z+7	; 0x07
    38e2:	90 85       	ldd	r25, Z+8	; 0x08
    38e4:	fc 01       	movw	r30, r24
    38e6:	80 85       	ldd	r24, Z+8	; 0x08
    38e8:	91 85       	ldd	r25, Z+9	; 0x09
    38ea:	89 83       	std	Y+1, r24	; 0x01
    38ec:	9a 83       	std	Y+2, r25	; 0x02
    38ee:	89 81       	ldd	r24, Y+1	; 0x01
    38f0:	9a 81       	ldd	r25, Y+2	; 0x02
    38f2:	02 96       	adiw	r24, 0x02	; 2
    38f4:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    38f8:	89 81       	ldd	r24, Y+1	; 0x01
    38fa:	9a 81       	ldd	r25, Y+2	; 0x02
    38fc:	fc 01       	movw	r30, r24
    38fe:	82 89       	ldd	r24, Z+18	; 0x12
    3900:	81 30       	cpi	r24, 0x01	; 1
    3902:	b1 f5       	brne	.+108    	; 0x3970 <prvProcessExpiredTimer+0xc4>
    3904:	89 81       	ldd	r24, Y+1	; 0x01
    3906:	9a 81       	ldd	r25, Y+2	; 0x02
    3908:	fc 01       	movw	r30, r24
    390a:	26 85       	ldd	r18, Z+14	; 0x0e
    390c:	37 85       	ldd	r19, Z+15	; 0x0f
    390e:	40 89       	ldd	r20, Z+16	; 0x10
    3910:	51 89       	ldd	r21, Z+17	; 0x11
    3912:	8c 81       	ldd	r24, Y+4	; 0x04
    3914:	9d 81       	ldd	r25, Y+5	; 0x05
    3916:	ae 81       	ldd	r26, Y+6	; 0x06
    3918:	bf 81       	ldd	r27, Y+7	; 0x07
    391a:	82 0f       	add	r24, r18
    391c:	93 1f       	adc	r25, r19
    391e:	a4 1f       	adc	r26, r20
    3920:	b5 1f       	adc	r27, r21
    3922:	ec 80       	ldd	r14, Y+4	; 0x04
    3924:	fd 80       	ldd	r15, Y+5	; 0x05
    3926:	0e 81       	ldd	r16, Y+6	; 0x06
    3928:	1f 81       	ldd	r17, Y+7	; 0x07
    392a:	28 85       	ldd	r18, Y+8	; 0x08
    392c:	39 85       	ldd	r19, Y+9	; 0x09
    392e:	4a 85       	ldd	r20, Y+10	; 0x0a
    3930:	5b 85       	ldd	r21, Y+11	; 0x0b
    3932:	e9 81       	ldd	r30, Y+1	; 0x01
    3934:	fa 81       	ldd	r31, Y+2	; 0x02
    3936:	67 01       	movw	r12, r14
    3938:	78 01       	movw	r14, r16
    393a:	89 01       	movw	r16, r18
    393c:	9a 01       	movw	r18, r20
    393e:	ac 01       	movw	r20, r24
    3940:	bd 01       	movw	r22, r26
    3942:	cf 01       	movw	r24, r30
    3944:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <prvInsertTimerInActiveList>
    3948:	88 23       	and	r24, r24
    394a:	91 f0       	breq	.+36     	; 0x3970 <prvProcessExpiredTimer+0xc4>
    394c:	8c 81       	ldd	r24, Y+4	; 0x04
    394e:	9d 81       	ldd	r25, Y+5	; 0x05
    3950:	ae 81       	ldd	r26, Y+6	; 0x06
    3952:	bf 81       	ldd	r27, Y+7	; 0x07
    3954:	e9 81       	ldd	r30, Y+1	; 0x01
    3956:	fa 81       	ldd	r31, Y+2	; 0x02
    3958:	c1 2c       	mov	r12, r1
    395a:	d1 2c       	mov	r13, r1
    395c:	76 01       	movw	r14, r12
    395e:	00 e0       	ldi	r16, 0x00	; 0
    3960:	10 e0       	ldi	r17, 0x00	; 0
    3962:	9c 01       	movw	r18, r24
    3964:	ad 01       	movw	r20, r26
    3966:	60 e0       	ldi	r22, 0x00	; 0
    3968:	cf 01       	movw	r24, r30
    396a:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <xTimerGenericCommand>
    396e:	8b 83       	std	Y+3, r24	; 0x03
    3970:	89 81       	ldd	r24, Y+1	; 0x01
    3972:	9a 81       	ldd	r25, Y+2	; 0x02
    3974:	fc 01       	movw	r30, r24
    3976:	25 89       	ldd	r18, Z+21	; 0x15
    3978:	36 89       	ldd	r19, Z+22	; 0x16
    397a:	89 81       	ldd	r24, Y+1	; 0x01
    397c:	9a 81       	ldd	r25, Y+2	; 0x02
    397e:	f9 01       	movw	r30, r18
    3980:	19 95       	eicall
    3982:	00 00       	nop
    3984:	2b 96       	adiw	r28, 0x0b	; 11
    3986:	cd bf       	out	0x3d, r28	; 61
    3988:	de bf       	out	0x3e, r29	; 62
    398a:	df 91       	pop	r29
    398c:	cf 91       	pop	r28
    398e:	1f 91       	pop	r17
    3990:	0f 91       	pop	r16
    3992:	ff 90       	pop	r15
    3994:	ef 90       	pop	r14
    3996:	df 90       	pop	r13
    3998:	cf 90       	pop	r12
    399a:	08 95       	ret

0000399c <prvTimerTask>:
    399c:	cf 93       	push	r28
    399e:	df 93       	push	r29
    39a0:	cd b7       	in	r28, 0x3d	; 61
    39a2:	de b7       	in	r29, 0x3e	; 62
    39a4:	27 97       	sbiw	r28, 0x07	; 7
    39a6:	cd bf       	out	0x3d, r28	; 61
    39a8:	de bf       	out	0x3e, r29	; 62
    39aa:	8e 83       	std	Y+6, r24	; 0x06
    39ac:	9f 83       	std	Y+7, r25	; 0x07
    39ae:	ce 01       	movw	r24, r28
    39b0:	05 96       	adiw	r24, 0x05	; 5
    39b2:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <prvGetNextExpireTime>
    39b6:	dc 01       	movw	r26, r24
    39b8:	cb 01       	movw	r24, r22
    39ba:	89 83       	std	Y+1, r24	; 0x01
    39bc:	9a 83       	std	Y+2, r25	; 0x02
    39be:	ab 83       	std	Y+3, r26	; 0x03
    39c0:	bc 83       	std	Y+4, r27	; 0x04
    39c2:	2d 81       	ldd	r18, Y+5	; 0x05
    39c4:	89 81       	ldd	r24, Y+1	; 0x01
    39c6:	9a 81       	ldd	r25, Y+2	; 0x02
    39c8:	ab 81       	ldd	r26, Y+3	; 0x03
    39ca:	bc 81       	ldd	r27, Y+4	; 0x04
    39cc:	42 2f       	mov	r20, r18
    39ce:	bc 01       	movw	r22, r24
    39d0:	cd 01       	movw	r24, r26
    39d2:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <prvProcessTimerOrBlockTask>
    39d6:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <prvProcessReceivedCommands>
    39da:	e9 cf       	rjmp	.-46     	; 0x39ae <prvTimerTask+0x12>

000039dc <prvProcessTimerOrBlockTask>:
    39dc:	ef 92       	push	r14
    39de:	ff 92       	push	r15
    39e0:	0f 93       	push	r16
    39e2:	1f 93       	push	r17
    39e4:	cf 93       	push	r28
    39e6:	df 93       	push	r29
    39e8:	cd b7       	in	r28, 0x3d	; 61
    39ea:	de b7       	in	r29, 0x3e	; 62
    39ec:	2a 97       	sbiw	r28, 0x0a	; 10
    39ee:	cd bf       	out	0x3d, r28	; 61
    39f0:	de bf       	out	0x3e, r29	; 62
    39f2:	6e 83       	std	Y+6, r22	; 0x06
    39f4:	7f 83       	std	Y+7, r23	; 0x07
    39f6:	88 87       	std	Y+8, r24	; 0x08
    39f8:	99 87       	std	Y+9, r25	; 0x09
    39fa:	4a 87       	std	Y+10, r20	; 0x0a
    39fc:	0e 94 40 15 	call	0x2a80	; 0x2a80 <vTaskSuspendAll>
    3a00:	ce 01       	movw	r24, r28
    3a02:	05 96       	adiw	r24, 0x05	; 5
    3a04:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <prvSampleTimeNow>
    3a08:	dc 01       	movw	r26, r24
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	89 83       	std	Y+1, r24	; 0x01
    3a0e:	9a 83       	std	Y+2, r25	; 0x02
    3a10:	ab 83       	std	Y+3, r26	; 0x03
    3a12:	bc 83       	std	Y+4, r27	; 0x04
    3a14:	8d 81       	ldd	r24, Y+5	; 0x05
    3a16:	88 23       	and	r24, r24
    3a18:	09 f0       	breq	.+2      	; 0x3a1c <prvProcessTimerOrBlockTask+0x40>
    3a1a:	4e c0       	rjmp	.+156    	; 0x3ab8 <prvProcessTimerOrBlockTask+0xdc>
    3a1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a1e:	88 23       	and	r24, r24
    3a20:	e1 f4       	brne	.+56     	; 0x3a5a <prvProcessTimerOrBlockTask+0x7e>
    3a22:	2e 81       	ldd	r18, Y+6	; 0x06
    3a24:	3f 81       	ldd	r19, Y+7	; 0x07
    3a26:	48 85       	ldd	r20, Y+8	; 0x08
    3a28:	59 85       	ldd	r21, Y+9	; 0x09
    3a2a:	89 81       	ldd	r24, Y+1	; 0x01
    3a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a2e:	ab 81       	ldd	r26, Y+3	; 0x03
    3a30:	bc 81       	ldd	r27, Y+4	; 0x04
    3a32:	82 17       	cp	r24, r18
    3a34:	93 07       	cpc	r25, r19
    3a36:	a4 07       	cpc	r26, r20
    3a38:	b5 07       	cpc	r27, r21
    3a3a:	78 f0       	brcs	.+30     	; 0x3a5a <prvProcessTimerOrBlockTask+0x7e>
    3a3c:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
    3a40:	29 81       	ldd	r18, Y+1	; 0x01
    3a42:	3a 81       	ldd	r19, Y+2	; 0x02
    3a44:	4b 81       	ldd	r20, Y+3	; 0x03
    3a46:	5c 81       	ldd	r21, Y+4	; 0x04
    3a48:	8e 81       	ldd	r24, Y+6	; 0x06
    3a4a:	9f 81       	ldd	r25, Y+7	; 0x07
    3a4c:	a8 85       	ldd	r26, Y+8	; 0x08
    3a4e:	b9 85       	ldd	r27, Y+9	; 0x09
    3a50:	bc 01       	movw	r22, r24
    3a52:	cd 01       	movw	r24, r26
    3a54:	0e 94 56 1c 	call	0x38ac	; 0x38ac <prvProcessExpiredTimer>
    3a58:	31 c0       	rjmp	.+98     	; 0x3abc <prvProcessTimerOrBlockTask+0xe0>
    3a5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a5c:	88 23       	and	r24, r24
    3a5e:	59 f0       	breq	.+22     	; 0x3a76 <prvProcessTimerOrBlockTask+0x9a>
    3a60:	80 91 2a 35 	lds	r24, 0x352A	; 0x80352a <pxOverflowTimerList>
    3a64:	90 91 2b 35 	lds	r25, 0x352B	; 0x80352b <pxOverflowTimerList+0x1>
    3a68:	fc 01       	movw	r30, r24
    3a6a:	90 81       	ld	r25, Z
    3a6c:	81 e0       	ldi	r24, 0x01	; 1
    3a6e:	99 23       	and	r25, r25
    3a70:	09 f0       	breq	.+2      	; 0x3a74 <prvProcessTimerOrBlockTask+0x98>
    3a72:	80 e0       	ldi	r24, 0x00	; 0
    3a74:	8a 87       	std	Y+10, r24	; 0x0a
    3a76:	2e 81       	ldd	r18, Y+6	; 0x06
    3a78:	3f 81       	ldd	r19, Y+7	; 0x07
    3a7a:	48 85       	ldd	r20, Y+8	; 0x08
    3a7c:	59 85       	ldd	r21, Y+9	; 0x09
    3a7e:	89 81       	ldd	r24, Y+1	; 0x01
    3a80:	9a 81       	ldd	r25, Y+2	; 0x02
    3a82:	ab 81       	ldd	r26, Y+3	; 0x03
    3a84:	bc 81       	ldd	r27, Y+4	; 0x04
    3a86:	79 01       	movw	r14, r18
    3a88:	8a 01       	movw	r16, r20
    3a8a:	e8 1a       	sub	r14, r24
    3a8c:	f9 0a       	sbc	r15, r25
    3a8e:	0a 0b       	sbc	r16, r26
    3a90:	1b 0b       	sbc	r17, r27
    3a92:	d8 01       	movw	r26, r16
    3a94:	c7 01       	movw	r24, r14
    3a96:	e0 91 2c 35 	lds	r30, 0x352C	; 0x80352c <xTimerQueue>
    3a9a:	f0 91 2d 35 	lds	r31, 0x352D	; 0x80352d <xTimerQueue+0x1>
    3a9e:	2a 85       	ldd	r18, Y+10	; 0x0a
    3aa0:	ac 01       	movw	r20, r24
    3aa2:	bd 01       	movw	r22, r26
    3aa4:	cf 01       	movw	r24, r30
    3aa6:	0e 94 9b 11 	call	0x2336	; 0x2336 <vQueueWaitForMessageRestricted>
    3aaa:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
    3aae:	88 23       	and	r24, r24
    3ab0:	29 f4       	brne	.+10     	; 0x3abc <prvProcessTimerOrBlockTask+0xe0>
    3ab2:	0e 94 82 0b 	call	0x1704	; 0x1704 <vPortYield>
    3ab6:	02 c0       	rjmp	.+4      	; 0x3abc <prvProcessTimerOrBlockTask+0xe0>
    3ab8:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskResumeAll>
    3abc:	00 00       	nop
    3abe:	2a 96       	adiw	r28, 0x0a	; 10
    3ac0:	cd bf       	out	0x3d, r28	; 61
    3ac2:	de bf       	out	0x3e, r29	; 62
    3ac4:	df 91       	pop	r29
    3ac6:	cf 91       	pop	r28
    3ac8:	1f 91       	pop	r17
    3aca:	0f 91       	pop	r16
    3acc:	ff 90       	pop	r15
    3ace:	ef 90       	pop	r14
    3ad0:	08 95       	ret

00003ad2 <prvGetNextExpireTime>:
    3ad2:	cf 93       	push	r28
    3ad4:	df 93       	push	r29
    3ad6:	00 d0       	rcall	.+0      	; 0x3ad8 <prvGetNextExpireTime+0x6>
    3ad8:	00 d0       	rcall	.+0      	; 0x3ada <prvGetNextExpireTime+0x8>
    3ada:	cd b7       	in	r28, 0x3d	; 61
    3adc:	de b7       	in	r29, 0x3e	; 62
    3ade:	8d 83       	std	Y+5, r24	; 0x05
    3ae0:	9e 83       	std	Y+6, r25	; 0x06
    3ae2:	80 91 28 35 	lds	r24, 0x3528	; 0x803528 <pxCurrentTimerList>
    3ae6:	90 91 29 35 	lds	r25, 0x3529	; 0x803529 <pxCurrentTimerList+0x1>
    3aea:	fc 01       	movw	r30, r24
    3aec:	90 81       	ld	r25, Z
    3aee:	81 e0       	ldi	r24, 0x01	; 1
    3af0:	99 23       	and	r25, r25
    3af2:	09 f0       	breq	.+2      	; 0x3af6 <prvGetNextExpireTime+0x24>
    3af4:	80 e0       	ldi	r24, 0x00	; 0
    3af6:	28 2f       	mov	r18, r24
    3af8:	8d 81       	ldd	r24, Y+5	; 0x05
    3afa:	9e 81       	ldd	r25, Y+6	; 0x06
    3afc:	fc 01       	movw	r30, r24
    3afe:	20 83       	st	Z, r18
    3b00:	8d 81       	ldd	r24, Y+5	; 0x05
    3b02:	9e 81       	ldd	r25, Y+6	; 0x06
    3b04:	fc 01       	movw	r30, r24
    3b06:	80 81       	ld	r24, Z
    3b08:	88 23       	and	r24, r24
    3b0a:	89 f4       	brne	.+34     	; 0x3b2e <prvGetNextExpireTime+0x5c>
    3b0c:	80 91 28 35 	lds	r24, 0x3528	; 0x803528 <pxCurrentTimerList>
    3b10:	90 91 29 35 	lds	r25, 0x3529	; 0x803529 <pxCurrentTimerList+0x1>
    3b14:	fc 01       	movw	r30, r24
    3b16:	87 81       	ldd	r24, Z+7	; 0x07
    3b18:	90 85       	ldd	r25, Z+8	; 0x08
    3b1a:	fc 01       	movw	r30, r24
    3b1c:	80 81       	ld	r24, Z
    3b1e:	91 81       	ldd	r25, Z+1	; 0x01
    3b20:	a2 81       	ldd	r26, Z+2	; 0x02
    3b22:	b3 81       	ldd	r27, Z+3	; 0x03
    3b24:	89 83       	std	Y+1, r24	; 0x01
    3b26:	9a 83       	std	Y+2, r25	; 0x02
    3b28:	ab 83       	std	Y+3, r26	; 0x03
    3b2a:	bc 83       	std	Y+4, r27	; 0x04
    3b2c:	04 c0       	rjmp	.+8      	; 0x3b36 <prvGetNextExpireTime+0x64>
    3b2e:	19 82       	std	Y+1, r1	; 0x01
    3b30:	1a 82       	std	Y+2, r1	; 0x02
    3b32:	1b 82       	std	Y+3, r1	; 0x03
    3b34:	1c 82       	std	Y+4, r1	; 0x04
    3b36:	89 81       	ldd	r24, Y+1	; 0x01
    3b38:	9a 81       	ldd	r25, Y+2	; 0x02
    3b3a:	ab 81       	ldd	r26, Y+3	; 0x03
    3b3c:	bc 81       	ldd	r27, Y+4	; 0x04
    3b3e:	bc 01       	movw	r22, r24
    3b40:	cd 01       	movw	r24, r26
    3b42:	26 96       	adiw	r28, 0x06	; 6
    3b44:	cd bf       	out	0x3d, r28	; 61
    3b46:	de bf       	out	0x3e, r29	; 62
    3b48:	df 91       	pop	r29
    3b4a:	cf 91       	pop	r28
    3b4c:	08 95       	ret

00003b4e <prvSampleTimeNow>:
    3b4e:	cf 93       	push	r28
    3b50:	df 93       	push	r29
    3b52:	00 d0       	rcall	.+0      	; 0x3b54 <prvSampleTimeNow+0x6>
    3b54:	00 d0       	rcall	.+0      	; 0x3b56 <prvSampleTimeNow+0x8>
    3b56:	cd b7       	in	r28, 0x3d	; 61
    3b58:	de b7       	in	r29, 0x3e	; 62
    3b5a:	8d 83       	std	Y+5, r24	; 0x05
    3b5c:	9e 83       	std	Y+6, r25	; 0x06
    3b5e:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <xTaskGetTickCount>
    3b62:	dc 01       	movw	r26, r24
    3b64:	cb 01       	movw	r24, r22
    3b66:	89 83       	std	Y+1, r24	; 0x01
    3b68:	9a 83       	std	Y+2, r25	; 0x02
    3b6a:	ab 83       	std	Y+3, r26	; 0x03
    3b6c:	bc 83       	std	Y+4, r27	; 0x04
    3b6e:	80 91 30 35 	lds	r24, 0x3530	; 0x803530 <xLastTime.4745>
    3b72:	90 91 31 35 	lds	r25, 0x3531	; 0x803531 <xLastTime.4745+0x1>
    3b76:	a0 91 32 35 	lds	r26, 0x3532	; 0x803532 <xLastTime.4745+0x2>
    3b7a:	b0 91 33 35 	lds	r27, 0x3533	; 0x803533 <xLastTime.4745+0x3>
    3b7e:	29 81       	ldd	r18, Y+1	; 0x01
    3b80:	3a 81       	ldd	r19, Y+2	; 0x02
    3b82:	4b 81       	ldd	r20, Y+3	; 0x03
    3b84:	5c 81       	ldd	r21, Y+4	; 0x04
    3b86:	28 17       	cp	r18, r24
    3b88:	39 07       	cpc	r19, r25
    3b8a:	4a 07       	cpc	r20, r26
    3b8c:	5b 07       	cpc	r21, r27
    3b8e:	40 f4       	brcc	.+16     	; 0x3ba0 <prvSampleTimeNow+0x52>
    3b90:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <prvSwitchTimerLists>
    3b94:	8d 81       	ldd	r24, Y+5	; 0x05
    3b96:	9e 81       	ldd	r25, Y+6	; 0x06
    3b98:	21 e0       	ldi	r18, 0x01	; 1
    3b9a:	fc 01       	movw	r30, r24
    3b9c:	20 83       	st	Z, r18
    3b9e:	04 c0       	rjmp	.+8      	; 0x3ba8 <prvSampleTimeNow+0x5a>
    3ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba4:	fc 01       	movw	r30, r24
    3ba6:	10 82       	st	Z, r1
    3ba8:	89 81       	ldd	r24, Y+1	; 0x01
    3baa:	9a 81       	ldd	r25, Y+2	; 0x02
    3bac:	ab 81       	ldd	r26, Y+3	; 0x03
    3bae:	bc 81       	ldd	r27, Y+4	; 0x04
    3bb0:	80 93 30 35 	sts	0x3530, r24	; 0x803530 <xLastTime.4745>
    3bb4:	90 93 31 35 	sts	0x3531, r25	; 0x803531 <xLastTime.4745+0x1>
    3bb8:	a0 93 32 35 	sts	0x3532, r26	; 0x803532 <xLastTime.4745+0x2>
    3bbc:	b0 93 33 35 	sts	0x3533, r27	; 0x803533 <xLastTime.4745+0x3>
    3bc0:	89 81       	ldd	r24, Y+1	; 0x01
    3bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc4:	ab 81       	ldd	r26, Y+3	; 0x03
    3bc6:	bc 81       	ldd	r27, Y+4	; 0x04
    3bc8:	bc 01       	movw	r22, r24
    3bca:	cd 01       	movw	r24, r26
    3bcc:	26 96       	adiw	r28, 0x06	; 6
    3bce:	cd bf       	out	0x3d, r28	; 61
    3bd0:	de bf       	out	0x3e, r29	; 62
    3bd2:	df 91       	pop	r29
    3bd4:	cf 91       	pop	r28
    3bd6:	08 95       	ret

00003bd8 <prvInsertTimerInActiveList>:
    3bd8:	cf 92       	push	r12
    3bda:	df 92       	push	r13
    3bdc:	ef 92       	push	r14
    3bde:	ff 92       	push	r15
    3be0:	0f 93       	push	r16
    3be2:	1f 93       	push	r17
    3be4:	cf 93       	push	r28
    3be6:	df 93       	push	r29
    3be8:	cd b7       	in	r28, 0x3d	; 61
    3bea:	de b7       	in	r29, 0x3e	; 62
    3bec:	2f 97       	sbiw	r28, 0x0f	; 15
    3bee:	cd bf       	out	0x3d, r28	; 61
    3bf0:	de bf       	out	0x3e, r29	; 62
    3bf2:	8a 83       	std	Y+2, r24	; 0x02
    3bf4:	9b 83       	std	Y+3, r25	; 0x03
    3bf6:	4c 83       	std	Y+4, r20	; 0x04
    3bf8:	5d 83       	std	Y+5, r21	; 0x05
    3bfa:	6e 83       	std	Y+6, r22	; 0x06
    3bfc:	7f 83       	std	Y+7, r23	; 0x07
    3bfe:	08 87       	std	Y+8, r16	; 0x08
    3c00:	19 87       	std	Y+9, r17	; 0x09
    3c02:	2a 87       	std	Y+10, r18	; 0x0a
    3c04:	3b 87       	std	Y+11, r19	; 0x0b
    3c06:	cc 86       	std	Y+12, r12	; 0x0c
    3c08:	dd 86       	std	Y+13, r13	; 0x0d
    3c0a:	ee 86       	std	Y+14, r14	; 0x0e
    3c0c:	ff 86       	std	Y+15, r15	; 0x0f
    3c0e:	19 82       	std	Y+1, r1	; 0x01
    3c10:	2a 81       	ldd	r18, Y+2	; 0x02
    3c12:	3b 81       	ldd	r19, Y+3	; 0x03
    3c14:	8c 81       	ldd	r24, Y+4	; 0x04
    3c16:	9d 81       	ldd	r25, Y+5	; 0x05
    3c18:	ae 81       	ldd	r26, Y+6	; 0x06
    3c1a:	bf 81       	ldd	r27, Y+7	; 0x07
    3c1c:	f9 01       	movw	r30, r18
    3c1e:	82 83       	std	Z+2, r24	; 0x02
    3c20:	93 83       	std	Z+3, r25	; 0x03
    3c22:	a4 83       	std	Z+4, r26	; 0x04
    3c24:	b5 83       	std	Z+5, r27	; 0x05
    3c26:	8a 81       	ldd	r24, Y+2	; 0x02
    3c28:	9b 81       	ldd	r25, Y+3	; 0x03
    3c2a:	2a 81       	ldd	r18, Y+2	; 0x02
    3c2c:	3b 81       	ldd	r19, Y+3	; 0x03
    3c2e:	fc 01       	movw	r30, r24
    3c30:	22 87       	std	Z+10, r18	; 0x0a
    3c32:	33 87       	std	Z+11, r19	; 0x0b
    3c34:	2c 81       	ldd	r18, Y+4	; 0x04
    3c36:	3d 81       	ldd	r19, Y+5	; 0x05
    3c38:	4e 81       	ldd	r20, Y+6	; 0x06
    3c3a:	5f 81       	ldd	r21, Y+7	; 0x07
    3c3c:	88 85       	ldd	r24, Y+8	; 0x08
    3c3e:	99 85       	ldd	r25, Y+9	; 0x09
    3c40:	aa 85       	ldd	r26, Y+10	; 0x0a
    3c42:	bb 85       	ldd	r27, Y+11	; 0x0b
    3c44:	82 17       	cp	r24, r18
    3c46:	93 07       	cpc	r25, r19
    3c48:	a4 07       	cpc	r26, r20
    3c4a:	b5 07       	cpc	r27, r21
    3c4c:	40 f1       	brcs	.+80     	; 0x3c9e <prvInsertTimerInActiveList+0xc6>
    3c4e:	28 85       	ldd	r18, Y+8	; 0x08
    3c50:	39 85       	ldd	r19, Y+9	; 0x09
    3c52:	4a 85       	ldd	r20, Y+10	; 0x0a
    3c54:	5b 85       	ldd	r21, Y+11	; 0x0b
    3c56:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c58:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c5a:	ae 85       	ldd	r26, Y+14	; 0x0e
    3c5c:	bf 85       	ldd	r27, Y+15	; 0x0f
    3c5e:	28 1b       	sub	r18, r24
    3c60:	39 0b       	sbc	r19, r25
    3c62:	4a 0b       	sbc	r20, r26
    3c64:	5b 0b       	sbc	r21, r27
    3c66:	8a 81       	ldd	r24, Y+2	; 0x02
    3c68:	9b 81       	ldd	r25, Y+3	; 0x03
    3c6a:	fc 01       	movw	r30, r24
    3c6c:	86 85       	ldd	r24, Z+14	; 0x0e
    3c6e:	97 85       	ldd	r25, Z+15	; 0x0f
    3c70:	a0 89       	ldd	r26, Z+16	; 0x10
    3c72:	b1 89       	ldd	r27, Z+17	; 0x11
    3c74:	28 17       	cp	r18, r24
    3c76:	39 07       	cpc	r19, r25
    3c78:	4a 07       	cpc	r20, r26
    3c7a:	5b 07       	cpc	r21, r27
    3c7c:	18 f0       	brcs	.+6      	; 0x3c84 <prvInsertTimerInActiveList+0xac>
    3c7e:	81 e0       	ldi	r24, 0x01	; 1
    3c80:	89 83       	std	Y+1, r24	; 0x01
    3c82:	36 c0       	rjmp	.+108    	; 0x3cf0 <prvInsertTimerInActiveList+0x118>
    3c84:	8a 81       	ldd	r24, Y+2	; 0x02
    3c86:	9b 81       	ldd	r25, Y+3	; 0x03
    3c88:	9c 01       	movw	r18, r24
    3c8a:	2e 5f       	subi	r18, 0xFE	; 254
    3c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c8e:	80 91 2a 35 	lds	r24, 0x352A	; 0x80352a <pxOverflowTimerList>
    3c92:	90 91 2b 35 	lds	r25, 0x352B	; 0x80352b <pxOverflowTimerList+0x1>
    3c96:	b9 01       	movw	r22, r18
    3c98:	0e 94 83 08 	call	0x1106	; 0x1106 <vListInsert>
    3c9c:	29 c0       	rjmp	.+82     	; 0x3cf0 <prvInsertTimerInActiveList+0x118>
    3c9e:	28 85       	ldd	r18, Y+8	; 0x08
    3ca0:	39 85       	ldd	r19, Y+9	; 0x09
    3ca2:	4a 85       	ldd	r20, Y+10	; 0x0a
    3ca4:	5b 85       	ldd	r21, Y+11	; 0x0b
    3ca6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ca8:	9d 85       	ldd	r25, Y+13	; 0x0d
    3caa:	ae 85       	ldd	r26, Y+14	; 0x0e
    3cac:	bf 85       	ldd	r27, Y+15	; 0x0f
    3cae:	28 17       	cp	r18, r24
    3cb0:	39 07       	cpc	r19, r25
    3cb2:	4a 07       	cpc	r20, r26
    3cb4:	5b 07       	cpc	r21, r27
    3cb6:	80 f4       	brcc	.+32     	; 0x3cd8 <prvInsertTimerInActiveList+0x100>
    3cb8:	2c 81       	ldd	r18, Y+4	; 0x04
    3cba:	3d 81       	ldd	r19, Y+5	; 0x05
    3cbc:	4e 81       	ldd	r20, Y+6	; 0x06
    3cbe:	5f 81       	ldd	r21, Y+7	; 0x07
    3cc0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3cc2:	9d 85       	ldd	r25, Y+13	; 0x0d
    3cc4:	ae 85       	ldd	r26, Y+14	; 0x0e
    3cc6:	bf 85       	ldd	r27, Y+15	; 0x0f
    3cc8:	28 17       	cp	r18, r24
    3cca:	39 07       	cpc	r19, r25
    3ccc:	4a 07       	cpc	r20, r26
    3cce:	5b 07       	cpc	r21, r27
    3cd0:	18 f0       	brcs	.+6      	; 0x3cd8 <prvInsertTimerInActiveList+0x100>
    3cd2:	81 e0       	ldi	r24, 0x01	; 1
    3cd4:	89 83       	std	Y+1, r24	; 0x01
    3cd6:	0c c0       	rjmp	.+24     	; 0x3cf0 <prvInsertTimerInActiveList+0x118>
    3cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cda:	9b 81       	ldd	r25, Y+3	; 0x03
    3cdc:	9c 01       	movw	r18, r24
    3cde:	2e 5f       	subi	r18, 0xFE	; 254
    3ce0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ce2:	80 91 28 35 	lds	r24, 0x3528	; 0x803528 <pxCurrentTimerList>
    3ce6:	90 91 29 35 	lds	r25, 0x3529	; 0x803529 <pxCurrentTimerList+0x1>
    3cea:	b9 01       	movw	r22, r18
    3cec:	0e 94 83 08 	call	0x1106	; 0x1106 <vListInsert>
    3cf0:	89 81       	ldd	r24, Y+1	; 0x01
    3cf2:	2f 96       	adiw	r28, 0x0f	; 15
    3cf4:	cd bf       	out	0x3d, r28	; 61
    3cf6:	de bf       	out	0x3e, r29	; 62
    3cf8:	df 91       	pop	r29
    3cfa:	cf 91       	pop	r28
    3cfc:	1f 91       	pop	r17
    3cfe:	0f 91       	pop	r16
    3d00:	ff 90       	pop	r15
    3d02:	ef 90       	pop	r14
    3d04:	df 90       	pop	r13
    3d06:	cf 90       	pop	r12
    3d08:	08 95       	ret

00003d0a <prvProcessReceivedCommands>:
    3d0a:	cf 92       	push	r12
    3d0c:	df 92       	push	r13
    3d0e:	ef 92       	push	r14
    3d10:	ff 92       	push	r15
    3d12:	0f 93       	push	r16
    3d14:	1f 93       	push	r17
    3d16:	cf 93       	push	r28
    3d18:	df 93       	push	r29
    3d1a:	cd b7       	in	r28, 0x3d	; 61
    3d1c:	de b7       	in	r29, 0x3e	; 62
    3d1e:	65 97       	sbiw	r28, 0x15	; 21
    3d20:	cd bf       	out	0x3d, r28	; 61
    3d22:	de bf       	out	0x3e, r29	; 62
    3d24:	e0 c0       	rjmp	.+448    	; 0x3ee6 <prvProcessReceivedCommands+0x1dc>
    3d26:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d28:	88 23       	and	r24, r24
    3d2a:	fc f4       	brge	.+62     	; 0x3d6a <prvProcessReceivedCommands+0x60>
    3d2c:	ce 01       	movw	r24, r28
    3d2e:	0a 96       	adiw	r24, 0x0a	; 10
    3d30:	01 96       	adiw	r24, 0x01	; 1
    3d32:	89 83       	std	Y+1, r24	; 0x01
    3d34:	9a 83       	std	Y+2, r25	; 0x02
    3d36:	89 81       	ldd	r24, Y+1	; 0x01
    3d38:	9a 81       	ldd	r25, Y+2	; 0x02
    3d3a:	fc 01       	movw	r30, r24
    3d3c:	20 81       	ld	r18, Z
    3d3e:	31 81       	ldd	r19, Z+1	; 0x01
    3d40:	89 81       	ldd	r24, Y+1	; 0x01
    3d42:	9a 81       	ldd	r25, Y+2	; 0x02
    3d44:	fc 01       	movw	r30, r24
    3d46:	84 81       	ldd	r24, Z+4	; 0x04
    3d48:	95 81       	ldd	r25, Z+5	; 0x05
    3d4a:	a6 81       	ldd	r26, Z+6	; 0x06
    3d4c:	b7 81       	ldd	r27, Z+7	; 0x07
    3d4e:	49 81       	ldd	r20, Y+1	; 0x01
    3d50:	5a 81       	ldd	r21, Y+2	; 0x02
    3d52:	fa 01       	movw	r30, r20
    3d54:	02 80       	ldd	r0, Z+2	; 0x02
    3d56:	f3 81       	ldd	r31, Z+3	; 0x03
    3d58:	e0 2d       	mov	r30, r0
    3d5a:	ec 8b       	std	Y+20, r30	; 0x14
    3d5c:	fd 8b       	std	Y+21, r31	; 0x15
    3d5e:	ac 01       	movw	r20, r24
    3d60:	bd 01       	movw	r22, r26
    3d62:	8c 89       	ldd	r24, Y+20	; 0x14
    3d64:	9d 89       	ldd	r25, Y+21	; 0x15
    3d66:	f9 01       	movw	r30, r18
    3d68:	19 95       	eicall
    3d6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d6c:	88 23       	and	r24, r24
    3d6e:	0c f4       	brge	.+2      	; 0x3d72 <prvProcessReceivedCommands+0x68>
    3d70:	ba c0       	rjmp	.+372    	; 0x3ee6 <prvProcessReceivedCommands+0x1dc>
    3d72:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d74:	98 89       	ldd	r25, Y+16	; 0x10
    3d76:	8b 83       	std	Y+3, r24	; 0x03
    3d78:	9c 83       	std	Y+4, r25	; 0x04
    3d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d7e:	fc 01       	movw	r30, r24
    3d80:	84 85       	ldd	r24, Z+12	; 0x0c
    3d82:	95 85       	ldd	r25, Z+13	; 0x0d
    3d84:	89 2b       	or	r24, r25
    3d86:	29 f0       	breq	.+10     	; 0x3d92 <prvProcessReceivedCommands+0x88>
    3d88:	8b 81       	ldd	r24, Y+3	; 0x03
    3d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d8c:	02 96       	adiw	r24, 0x02	; 2
    3d8e:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    3d92:	ce 01       	movw	r24, r28
    3d94:	43 96       	adiw	r24, 0x13	; 19
    3d96:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <prvSampleTimeNow>
    3d9a:	dc 01       	movw	r26, r24
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	8d 83       	std	Y+5, r24	; 0x05
    3da0:	9e 83       	std	Y+6, r25	; 0x06
    3da2:	af 83       	std	Y+7, r26	; 0x07
    3da4:	b8 87       	std	Y+8, r27	; 0x08
    3da6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3da8:	08 2e       	mov	r0, r24
    3daa:	00 0c       	add	r0, r0
    3dac:	99 0b       	sbc	r25, r25
    3dae:	09 2e       	mov	r0, r25
    3db0:	00 0c       	add	r0, r0
    3db2:	aa 0b       	sbc	r26, r26
    3db4:	bb 0b       	sbc	r27, r27
    3db6:	40 e0       	ldi	r20, 0x00	; 0
    3db8:	50 e0       	ldi	r21, 0x00	; 0
    3dba:	29 e0       	ldi	r18, 0x09	; 9
    3dbc:	30 e0       	ldi	r19, 0x00	; 0
    3dbe:	84 1b       	sub	r24, r20
    3dc0:	95 0b       	sbc	r25, r21
    3dc2:	28 17       	cp	r18, r24
    3dc4:	39 07       	cpc	r19, r25
    3dc6:	08 f4       	brcc	.+2      	; 0x3dca <prvProcessReceivedCommands+0xc0>
    3dc8:	8d c0       	rjmp	.+282    	; 0x3ee4 <prvProcessReceivedCommands+0x1da>
    3dca:	fc 01       	movw	r30, r24
    3dcc:	88 27       	eor	r24, r24
    3dce:	e2 50       	subi	r30, 0x02	; 2
    3dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd2:	8f 4f       	sbci	r24, 0xFF	; 255
    3dd4:	0c 94 cc 3c 	jmp	0x7998	; 0x7998 <__tablejump2__>
    3dd8:	eb 84       	ldd	r14, Y+11	; 0x0b
    3dda:	fc 84       	ldd	r15, Y+12	; 0x0c
    3ddc:	0d 85       	ldd	r16, Y+13	; 0x0d
    3dde:	1e 85       	ldd	r17, Y+14	; 0x0e
    3de0:	2b 85       	ldd	r18, Y+11	; 0x0b
    3de2:	3c 85       	ldd	r19, Y+12	; 0x0c
    3de4:	4d 85       	ldd	r20, Y+13	; 0x0d
    3de6:	5e 85       	ldd	r21, Y+14	; 0x0e
    3de8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dea:	9c 81       	ldd	r25, Y+4	; 0x04
    3dec:	fc 01       	movw	r30, r24
    3dee:	86 85       	ldd	r24, Z+14	; 0x0e
    3df0:	97 85       	ldd	r25, Z+15	; 0x0f
    3df2:	a0 89       	ldd	r26, Z+16	; 0x10
    3df4:	b1 89       	ldd	r27, Z+17	; 0x11
    3df6:	82 0f       	add	r24, r18
    3df8:	93 1f       	adc	r25, r19
    3dfa:	a4 1f       	adc	r26, r20
    3dfc:	b5 1f       	adc	r27, r21
    3dfe:	2d 81       	ldd	r18, Y+5	; 0x05
    3e00:	3e 81       	ldd	r19, Y+6	; 0x06
    3e02:	4f 81       	ldd	r20, Y+7	; 0x07
    3e04:	58 85       	ldd	r21, Y+8	; 0x08
    3e06:	eb 81       	ldd	r30, Y+3	; 0x03
    3e08:	fc 81       	ldd	r31, Y+4	; 0x04
    3e0a:	67 01       	movw	r12, r14
    3e0c:	78 01       	movw	r14, r16
    3e0e:	89 01       	movw	r16, r18
    3e10:	9a 01       	movw	r18, r20
    3e12:	ac 01       	movw	r20, r24
    3e14:	bd 01       	movw	r22, r26
    3e16:	cf 01       	movw	r24, r30
    3e18:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <prvInsertTimerInActiveList>
    3e1c:	88 23       	and	r24, r24
    3e1e:	09 f4       	brne	.+2      	; 0x3e22 <prvProcessReceivedCommands+0x118>
    3e20:	62 c0       	rjmp	.+196    	; 0x3ee6 <prvProcessReceivedCommands+0x1dc>
    3e22:	8b 81       	ldd	r24, Y+3	; 0x03
    3e24:	9c 81       	ldd	r25, Y+4	; 0x04
    3e26:	fc 01       	movw	r30, r24
    3e28:	25 89       	ldd	r18, Z+21	; 0x15
    3e2a:	36 89       	ldd	r19, Z+22	; 0x16
    3e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e30:	f9 01       	movw	r30, r18
    3e32:	19 95       	eicall
    3e34:	8b 81       	ldd	r24, Y+3	; 0x03
    3e36:	9c 81       	ldd	r25, Y+4	; 0x04
    3e38:	fc 01       	movw	r30, r24
    3e3a:	82 89       	ldd	r24, Z+18	; 0x12
    3e3c:	81 30       	cpi	r24, 0x01	; 1
    3e3e:	09 f0       	breq	.+2      	; 0x3e42 <prvProcessReceivedCommands+0x138>
    3e40:	52 c0       	rjmp	.+164    	; 0x3ee6 <prvProcessReceivedCommands+0x1dc>
    3e42:	2b 85       	ldd	r18, Y+11	; 0x0b
    3e44:	3c 85       	ldd	r19, Y+12	; 0x0c
    3e46:	4d 85       	ldd	r20, Y+13	; 0x0d
    3e48:	5e 85       	ldd	r21, Y+14	; 0x0e
    3e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e4e:	fc 01       	movw	r30, r24
    3e50:	86 85       	ldd	r24, Z+14	; 0x0e
    3e52:	97 85       	ldd	r25, Z+15	; 0x0f
    3e54:	a0 89       	ldd	r26, Z+16	; 0x10
    3e56:	b1 89       	ldd	r27, Z+17	; 0x11
    3e58:	82 0f       	add	r24, r18
    3e5a:	93 1f       	adc	r25, r19
    3e5c:	a4 1f       	adc	r26, r20
    3e5e:	b5 1f       	adc	r27, r21
    3e60:	eb 81       	ldd	r30, Y+3	; 0x03
    3e62:	fc 81       	ldd	r31, Y+4	; 0x04
    3e64:	c1 2c       	mov	r12, r1
    3e66:	d1 2c       	mov	r13, r1
    3e68:	76 01       	movw	r14, r12
    3e6a:	00 e0       	ldi	r16, 0x00	; 0
    3e6c:	10 e0       	ldi	r17, 0x00	; 0
    3e6e:	9c 01       	movw	r18, r24
    3e70:	ad 01       	movw	r20, r26
    3e72:	60 e0       	ldi	r22, 0x00	; 0
    3e74:	cf 01       	movw	r24, r30
    3e76:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <xTimerGenericCommand>
    3e7a:	89 87       	std	Y+9, r24	; 0x09
    3e7c:	34 c0       	rjmp	.+104    	; 0x3ee6 <prvProcessReceivedCommands+0x1dc>
    3e7e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e80:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e82:	ad 85       	ldd	r26, Y+13	; 0x0d
    3e84:	be 85       	ldd	r27, Y+14	; 0x0e
    3e86:	2b 81       	ldd	r18, Y+3	; 0x03
    3e88:	3c 81       	ldd	r19, Y+4	; 0x04
    3e8a:	f9 01       	movw	r30, r18
    3e8c:	86 87       	std	Z+14, r24	; 0x0e
    3e8e:	97 87       	std	Z+15, r25	; 0x0f
    3e90:	a0 8b       	std	Z+16, r26	; 0x10
    3e92:	b1 8b       	std	Z+17, r27	; 0x11
    3e94:	8b 81       	ldd	r24, Y+3	; 0x03
    3e96:	9c 81       	ldd	r25, Y+4	; 0x04
    3e98:	fc 01       	movw	r30, r24
    3e9a:	26 85       	ldd	r18, Z+14	; 0x0e
    3e9c:	37 85       	ldd	r19, Z+15	; 0x0f
    3e9e:	40 89       	ldd	r20, Z+16	; 0x10
    3ea0:	51 89       	ldd	r21, Z+17	; 0x11
    3ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ea6:	af 81       	ldd	r26, Y+7	; 0x07
    3ea8:	b8 85       	ldd	r27, Y+8	; 0x08
    3eaa:	82 0f       	add	r24, r18
    3eac:	93 1f       	adc	r25, r19
    3eae:	a4 1f       	adc	r26, r20
    3eb0:	b5 1f       	adc	r27, r21
    3eb2:	ed 80       	ldd	r14, Y+5	; 0x05
    3eb4:	fe 80       	ldd	r15, Y+6	; 0x06
    3eb6:	0f 81       	ldd	r16, Y+7	; 0x07
    3eb8:	18 85       	ldd	r17, Y+8	; 0x08
    3eba:	2d 81       	ldd	r18, Y+5	; 0x05
    3ebc:	3e 81       	ldd	r19, Y+6	; 0x06
    3ebe:	4f 81       	ldd	r20, Y+7	; 0x07
    3ec0:	58 85       	ldd	r21, Y+8	; 0x08
    3ec2:	eb 81       	ldd	r30, Y+3	; 0x03
    3ec4:	fc 81       	ldd	r31, Y+4	; 0x04
    3ec6:	67 01       	movw	r12, r14
    3ec8:	78 01       	movw	r14, r16
    3eca:	89 01       	movw	r16, r18
    3ecc:	9a 01       	movw	r18, r20
    3ece:	ac 01       	movw	r20, r24
    3ed0:	bd 01       	movw	r22, r26
    3ed2:	cf 01       	movw	r24, r30
    3ed4:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <prvInsertTimerInActiveList>
    3ed8:	06 c0       	rjmp	.+12     	; 0x3ee6 <prvProcessReceivedCommands+0x1dc>
    3eda:	8b 81       	ldd	r24, Y+3	; 0x03
    3edc:	9c 81       	ldd	r25, Y+4	; 0x04
    3ede:	0e 94 dd 07 	call	0xfba	; 0xfba <vPortFree>
    3ee2:	01 c0       	rjmp	.+2      	; 0x3ee6 <prvProcessReceivedCommands+0x1dc>
    3ee4:	00 00       	nop
    3ee6:	80 91 2c 35 	lds	r24, 0x352C	; 0x80352c <xTimerQueue>
    3eea:	90 91 2d 35 	lds	r25, 0x352D	; 0x80352d <xTimerQueue+0x1>
    3eee:	be 01       	movw	r22, r28
    3ef0:	66 5f       	subi	r22, 0xF6	; 246
    3ef2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ef4:	20 e0       	ldi	r18, 0x00	; 0
    3ef6:	30 e0       	ldi	r19, 0x00	; 0
    3ef8:	a9 01       	movw	r20, r18
    3efa:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <xQueueReceive>
    3efe:	88 23       	and	r24, r24
    3f00:	09 f0       	breq	.+2      	; 0x3f04 <prvProcessReceivedCommands+0x1fa>
    3f02:	11 cf       	rjmp	.-478    	; 0x3d26 <prvProcessReceivedCommands+0x1c>
    3f04:	00 00       	nop
    3f06:	65 96       	adiw	r28, 0x15	; 21
    3f08:	cd bf       	out	0x3d, r28	; 61
    3f0a:	de bf       	out	0x3e, r29	; 62
    3f0c:	df 91       	pop	r29
    3f0e:	cf 91       	pop	r28
    3f10:	1f 91       	pop	r17
    3f12:	0f 91       	pop	r16
    3f14:	ff 90       	pop	r15
    3f16:	ef 90       	pop	r14
    3f18:	df 90       	pop	r13
    3f1a:	cf 90       	pop	r12
    3f1c:	08 95       	ret

00003f1e <prvSwitchTimerLists>:
    3f1e:	cf 92       	push	r12
    3f20:	df 92       	push	r13
    3f22:	ef 92       	push	r14
    3f24:	ff 92       	push	r15
    3f26:	0f 93       	push	r16
    3f28:	1f 93       	push	r17
    3f2a:	cf 93       	push	r28
    3f2c:	df 93       	push	r29
    3f2e:	cd b7       	in	r28, 0x3d	; 61
    3f30:	de b7       	in	r29, 0x3e	; 62
    3f32:	2d 97       	sbiw	r28, 0x0d	; 13
    3f34:	cd bf       	out	0x3d, r28	; 61
    3f36:	de bf       	out	0x3e, r29	; 62
    3f38:	82 c0       	rjmp	.+260    	; 0x403e <__stack+0x3f>
    3f3a:	80 91 28 35 	lds	r24, 0x3528	; 0x803528 <pxCurrentTimerList>
    3f3e:	90 91 29 35 	lds	r25, 0x3529	; 0x803529 <pxCurrentTimerList+0x1>
    3f42:	fc 01       	movw	r30, r24
    3f44:	87 81       	ldd	r24, Z+7	; 0x07
    3f46:	90 85       	ldd	r25, Z+8	; 0x08
    3f48:	fc 01       	movw	r30, r24
    3f4a:	80 81       	ld	r24, Z
    3f4c:	91 81       	ldd	r25, Z+1	; 0x01
    3f4e:	a2 81       	ldd	r26, Z+2	; 0x02
    3f50:	b3 81       	ldd	r27, Z+3	; 0x03
    3f52:	89 83       	std	Y+1, r24	; 0x01
    3f54:	9a 83       	std	Y+2, r25	; 0x02
    3f56:	ab 83       	std	Y+3, r26	; 0x03
    3f58:	bc 83       	std	Y+4, r27	; 0x04
    3f5a:	80 91 28 35 	lds	r24, 0x3528	; 0x803528 <pxCurrentTimerList>
    3f5e:	90 91 29 35 	lds	r25, 0x3529	; 0x803529 <pxCurrentTimerList+0x1>
    3f62:	fc 01       	movw	r30, r24
    3f64:	87 81       	ldd	r24, Z+7	; 0x07
    3f66:	90 85       	ldd	r25, Z+8	; 0x08
    3f68:	fc 01       	movw	r30, r24
    3f6a:	80 85       	ldd	r24, Z+8	; 0x08
    3f6c:	91 85       	ldd	r25, Z+9	; 0x09
    3f6e:	8d 83       	std	Y+5, r24	; 0x05
    3f70:	9e 83       	std	Y+6, r25	; 0x06
    3f72:	8d 81       	ldd	r24, Y+5	; 0x05
    3f74:	9e 81       	ldd	r25, Y+6	; 0x06
    3f76:	02 96       	adiw	r24, 0x02	; 2
    3f78:	0e 94 04 09 	call	0x1208	; 0x1208 <uxListRemove>
    3f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f80:	fc 01       	movw	r30, r24
    3f82:	25 89       	ldd	r18, Z+21	; 0x15
    3f84:	36 89       	ldd	r19, Z+22	; 0x16
    3f86:	8d 81       	ldd	r24, Y+5	; 0x05
    3f88:	9e 81       	ldd	r25, Y+6	; 0x06
    3f8a:	f9 01       	movw	r30, r18
    3f8c:	19 95       	eicall
    3f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f90:	9e 81       	ldd	r25, Y+6	; 0x06
    3f92:	fc 01       	movw	r30, r24
    3f94:	82 89       	ldd	r24, Z+18	; 0x12
    3f96:	81 30       	cpi	r24, 0x01	; 1
    3f98:	09 f0       	breq	.+2      	; 0x3f9c <prvSwitchTimerLists+0x7e>
    3f9a:	51 c0       	rjmp	.+162    	; 0x403e <__stack+0x3f>
    3f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    3fa0:	fc 01       	movw	r30, r24
    3fa2:	26 85       	ldd	r18, Z+14	; 0x0e
    3fa4:	37 85       	ldd	r19, Z+15	; 0x0f
    3fa6:	40 89       	ldd	r20, Z+16	; 0x10
    3fa8:	51 89       	ldd	r21, Z+17	; 0x11
    3faa:	89 81       	ldd	r24, Y+1	; 0x01
    3fac:	9a 81       	ldd	r25, Y+2	; 0x02
    3fae:	ab 81       	ldd	r26, Y+3	; 0x03
    3fb0:	bc 81       	ldd	r27, Y+4	; 0x04
    3fb2:	82 0f       	add	r24, r18
    3fb4:	93 1f       	adc	r25, r19
    3fb6:	a4 1f       	adc	r26, r20
    3fb8:	b5 1f       	adc	r27, r21
    3fba:	8f 83       	std	Y+7, r24	; 0x07
    3fbc:	98 87       	std	Y+8, r25	; 0x08
    3fbe:	a9 87       	std	Y+9, r26	; 0x09
    3fc0:	ba 87       	std	Y+10, r27	; 0x0a
    3fc2:	2f 81       	ldd	r18, Y+7	; 0x07
    3fc4:	38 85       	ldd	r19, Y+8	; 0x08
    3fc6:	49 85       	ldd	r20, Y+9	; 0x09
    3fc8:	5a 85       	ldd	r21, Y+10	; 0x0a
    3fca:	89 81       	ldd	r24, Y+1	; 0x01
    3fcc:	9a 81       	ldd	r25, Y+2	; 0x02
    3fce:	ab 81       	ldd	r26, Y+3	; 0x03
    3fd0:	bc 81       	ldd	r27, Y+4	; 0x04
    3fd2:	82 17       	cp	r24, r18
    3fd4:	93 07       	cpc	r25, r19
    3fd6:	a4 07       	cpc	r26, r20
    3fd8:	b5 07       	cpc	r27, r21
    3fda:	f8 f4       	brcc	.+62     	; 0x401a <__stack+0x1b>
    3fdc:	2d 81       	ldd	r18, Y+5	; 0x05
    3fde:	3e 81       	ldd	r19, Y+6	; 0x06
    3fe0:	8f 81       	ldd	r24, Y+7	; 0x07
    3fe2:	98 85       	ldd	r25, Y+8	; 0x08
    3fe4:	a9 85       	ldd	r26, Y+9	; 0x09
    3fe6:	ba 85       	ldd	r27, Y+10	; 0x0a
    3fe8:	f9 01       	movw	r30, r18
    3fea:	82 83       	std	Z+2, r24	; 0x02
    3fec:	93 83       	std	Z+3, r25	; 0x03
    3fee:	a4 83       	std	Z+4, r26	; 0x04
    3ff0:	b5 83       	std	Z+5, r27	; 0x05
    3ff2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ff4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ff6:	2d 81       	ldd	r18, Y+5	; 0x05
    3ff8:	3e 81       	ldd	r19, Y+6	; 0x06
    3ffa:	fc 01       	movw	r30, r24
    3ffc:	22 87       	std	Z+10, r18	; 0x0a
    3ffe:	33 87       	std	Z+11, r19	; 0x0b
    4000:	8d 81       	ldd	r24, Y+5	; 0x05
    4002:	9e 81       	ldd	r25, Y+6	; 0x06
    4004:	9c 01       	movw	r18, r24
    4006:	2e 5f       	subi	r18, 0xFE	; 254
    4008:	3f 4f       	sbci	r19, 0xFF	; 255
    400a:	80 91 28 35 	lds	r24, 0x3528	; 0x803528 <pxCurrentTimerList>
    400e:	90 91 29 35 	lds	r25, 0x3529	; 0x803529 <pxCurrentTimerList+0x1>
    4012:	b9 01       	movw	r22, r18
    4014:	0e 94 83 08 	call	0x1106	; 0x1106 <vListInsert>
    4018:	12 c0       	rjmp	.+36     	; 0x403e <__stack+0x3f>
    401a:	89 81       	ldd	r24, Y+1	; 0x01
    401c:	9a 81       	ldd	r25, Y+2	; 0x02
    401e:	ab 81       	ldd	r26, Y+3	; 0x03
    4020:	bc 81       	ldd	r27, Y+4	; 0x04
    4022:	ed 81       	ldd	r30, Y+5	; 0x05
    4024:	fe 81       	ldd	r31, Y+6	; 0x06
    4026:	c1 2c       	mov	r12, r1
    4028:	d1 2c       	mov	r13, r1
    402a:	76 01       	movw	r14, r12
    402c:	00 e0       	ldi	r16, 0x00	; 0
    402e:	10 e0       	ldi	r17, 0x00	; 0
    4030:	9c 01       	movw	r18, r24
    4032:	ad 01       	movw	r20, r26
    4034:	60 e0       	ldi	r22, 0x00	; 0
    4036:	cf 01       	movw	r24, r30
    4038:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <xTimerGenericCommand>
    403c:	8b 87       	std	Y+11, r24	; 0x0b
    403e:	80 91 28 35 	lds	r24, 0x3528	; 0x803528 <pxCurrentTimerList>
    4042:	90 91 29 35 	lds	r25, 0x3529	; 0x803529 <pxCurrentTimerList+0x1>
    4046:	fc 01       	movw	r30, r24
    4048:	80 81       	ld	r24, Z
    404a:	88 23       	and	r24, r24
    404c:	09 f0       	breq	.+2      	; 0x4050 <__stack+0x51>
    404e:	75 cf       	rjmp	.-278    	; 0x3f3a <prvSwitchTimerLists+0x1c>
    4050:	80 91 28 35 	lds	r24, 0x3528	; 0x803528 <pxCurrentTimerList>
    4054:	90 91 29 35 	lds	r25, 0x3529	; 0x803529 <pxCurrentTimerList+0x1>
    4058:	8c 87       	std	Y+12, r24	; 0x0c
    405a:	9d 87       	std	Y+13, r25	; 0x0d
    405c:	80 91 2a 35 	lds	r24, 0x352A	; 0x80352a <pxOverflowTimerList>
    4060:	90 91 2b 35 	lds	r25, 0x352B	; 0x80352b <pxOverflowTimerList+0x1>
    4064:	80 93 28 35 	sts	0x3528, r24	; 0x803528 <pxCurrentTimerList>
    4068:	90 93 29 35 	sts	0x3529, r25	; 0x803529 <pxCurrentTimerList+0x1>
    406c:	8c 85       	ldd	r24, Y+12	; 0x0c
    406e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4070:	80 93 2a 35 	sts	0x352A, r24	; 0x80352a <pxOverflowTimerList>
    4074:	90 93 2b 35 	sts	0x352B, r25	; 0x80352b <pxOverflowTimerList+0x1>
    4078:	00 00       	nop
    407a:	2d 96       	adiw	r28, 0x0d	; 13
    407c:	cd bf       	out	0x3d, r28	; 61
    407e:	de bf       	out	0x3e, r29	; 62
    4080:	df 91       	pop	r29
    4082:	cf 91       	pop	r28
    4084:	1f 91       	pop	r17
    4086:	0f 91       	pop	r16
    4088:	ff 90       	pop	r15
    408a:	ef 90       	pop	r14
    408c:	df 90       	pop	r13
    408e:	cf 90       	pop	r12
    4090:	08 95       	ret

00004092 <prvCheckForValidListAndQueue>:
    4092:	cf 93       	push	r28
    4094:	df 93       	push	r29
    4096:	cd b7       	in	r28, 0x3d	; 61
    4098:	de b7       	in	r29, 0x3e	; 62
    409a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    409e:	ff 93       	push	r31
    40a0:	f8 7f       	andi	r31, 0xF8	; 248
    40a2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    40a6:	80 91 2c 35 	lds	r24, 0x352C	; 0x80352c <xTimerQueue>
    40aa:	90 91 2d 35 	lds	r25, 0x352D	; 0x80352d <xTimerQueue+0x1>
    40ae:	89 2b       	or	r24, r25
    40b0:	e9 f4       	brne	.+58     	; 0x40ec <prvCheckForValidListAndQueue+0x5a>
    40b2:	82 e1       	ldi	r24, 0x12	; 18
    40b4:	95 e3       	ldi	r25, 0x35	; 53
    40b6:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vListInitialise>
    40ba:	8d e1       	ldi	r24, 0x1D	; 29
    40bc:	95 e3       	ldi	r25, 0x35	; 53
    40be:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vListInitialise>
    40c2:	82 e1       	ldi	r24, 0x12	; 18
    40c4:	95 e3       	ldi	r25, 0x35	; 53
    40c6:	80 93 28 35 	sts	0x3528, r24	; 0x803528 <pxCurrentTimerList>
    40ca:	90 93 29 35 	sts	0x3529, r25	; 0x803529 <pxCurrentTimerList+0x1>
    40ce:	8d e1       	ldi	r24, 0x1D	; 29
    40d0:	95 e3       	ldi	r25, 0x35	; 53
    40d2:	80 93 2a 35 	sts	0x352A, r24	; 0x80352a <pxOverflowTimerList>
    40d6:	90 93 2b 35 	sts	0x352B, r25	; 0x80352b <pxOverflowTimerList+0x1>
    40da:	40 e0       	ldi	r20, 0x00	; 0
    40dc:	69 e0       	ldi	r22, 0x09	; 9
    40de:	85 e0       	ldi	r24, 0x05	; 5
    40e0:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <xQueueGenericCreate>
    40e4:	80 93 2c 35 	sts	0x352C, r24	; 0x80352c <xTimerQueue>
    40e8:	90 93 2d 35 	sts	0x352D, r25	; 0x80352d <xTimerQueue+0x1>
    40ec:	ff 91       	pop	r31
    40ee:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    40f2:	00 00       	nop
    40f4:	df 91       	pop	r29
    40f6:	cf 91       	pop	r28
    40f8:	08 95       	ret

000040fa <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    40fa:	0f 93       	push	r16
    40fc:	1f 93       	push	r17
    40fe:	cf 93       	push	r28
    4100:	df 93       	push	r29
    4102:	cd b7       	in	r28, 0x3d	; 61
    4104:	de b7       	in	r29, 0x3e	; 62
    4106:	64 97       	sbiw	r28, 0x14	; 20
    4108:	cd bf       	out	0x3d, r28	; 61
    410a:	de bf       	out	0x3e, r29	; 62
    410c:	8b 87       	std	Y+11, r24	; 0x0b
    410e:	9c 87       	std	Y+12, r25	; 0x0c
    4110:	6d 87       	std	Y+13, r22	; 0x0d
    4112:	7e 87       	std	Y+14, r23	; 0x0e
    4114:	2f 87       	std	Y+15, r18	; 0x0f
    4116:	38 8b       	std	Y+16, r19	; 0x10
    4118:	49 8b       	std	Y+17, r20	; 0x11
    411a:	5a 8b       	std	Y+18, r21	; 0x12
    411c:	0b 8b       	std	Y+19, r16	; 0x13
    411e:	1c 8b       	std	Y+20, r17	; 0x14
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    4120:	8e ef       	ldi	r24, 0xFE	; 254
    4122:	8a 83       	std	Y+2, r24	; 0x02
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    4124:	8b 85       	ldd	r24, Y+11	; 0x0b
    4126:	9c 85       	ldd	r25, Y+12	; 0x0c
    4128:	8b 83       	std	Y+3, r24	; 0x03
    412a:	9c 83       	std	Y+4, r25	; 0x04
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    412c:	8d 85       	ldd	r24, Y+13	; 0x0d
    412e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4130:	8d 83       	std	Y+5, r24	; 0x05
    4132:	9e 83       	std	Y+6, r25	; 0x06
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    4134:	8f 85       	ldd	r24, Y+15	; 0x0f
    4136:	98 89       	ldd	r25, Y+16	; 0x10
    4138:	a9 89       	ldd	r26, Y+17	; 0x11
    413a:	ba 89       	ldd	r27, Y+18	; 0x12
    413c:	8f 83       	std	Y+7, r24	; 0x07
    413e:	98 87       	std	Y+8, r25	; 0x08
    4140:	a9 87       	std	Y+9, r26	; 0x09
    4142:	ba 87       	std	Y+10, r27	; 0x0a

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    4144:	80 91 2c 35 	lds	r24, 0x352C	; 0x80352c <xTimerQueue>
    4148:	90 91 2d 35 	lds	r25, 0x352D	; 0x80352d <xTimerQueue+0x1>
    414c:	4b 89       	ldd	r20, Y+19	; 0x13
    414e:	5c 89       	ldd	r21, Y+20	; 0x14
    4150:	be 01       	movw	r22, r28
    4152:	6e 5f       	subi	r22, 0xFE	; 254
    4154:	7f 4f       	sbci	r23, 0xFF	; 255
    4156:	20 e0       	ldi	r18, 0x00	; 0
    4158:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <xQueueGenericSendFromISR>
    415c:	89 83       	std	Y+1, r24	; 0x01

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
    415e:	89 81       	ldd	r24, Y+1	; 0x01
	}
    4160:	64 96       	adiw	r28, 0x14	; 20
    4162:	cd bf       	out	0x3d, r28	; 61
    4164:	de bf       	out	0x3e, r29	; 62
    4166:	df 91       	pop	r29
    4168:	cf 91       	pop	r28
    416a:	1f 91       	pop	r17
    416c:	0f 91       	pop	r16
    416e:	08 95       	ret

00004170 <vInitClock>:
#include "init.h"
#include "clksys_driver.h"


void vInitClock(void)
{
    4170:	cf 93       	push	r28
    4172:	df 93       	push	r29
    4174:	cd b7       	in	r28, 0x3d	; 61
    4176:	de b7       	in	r29, 0x3e	; 62
	CLKSYS_Enable( OSC_RC2MEN_bm );
    4178:	80 e5       	ldi	r24, 0x50	; 80
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	20 e5       	ldi	r18, 0x50	; 80
    417e:	30 e0       	ldi	r19, 0x00	; 0
    4180:	f9 01       	movw	r30, r18
    4182:	20 81       	ld	r18, Z
    4184:	21 60       	ori	r18, 0x01	; 1
    4186:	fc 01       	movw	r30, r24
    4188:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    418a:	80 e5       	ldi	r24, 0x50	; 80
    418c:	90 e0       	ldi	r25, 0x00	; 0
    418e:	fc 01       	movw	r30, r24
    4190:	81 81       	ldd	r24, Z+1	; 0x01
    4192:	88 2f       	mov	r24, r24
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	81 70       	andi	r24, 0x01	; 1
    4198:	99 27       	eor	r25, r25
    419a:	89 2b       	or	r24, r25
    419c:	b1 f3       	breq	.-20     	; 0x418a <vInitClock+0x1a>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    419e:	80 e0       	ldi	r24, 0x00	; 0
    41a0:	0e 94 9c 03 	call	0x738	; 0x738 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    41a4:	8e e1       	ldi	r24, 0x1E	; 30
    41a6:	0e 94 65 03 	call	0x6ca	; 0x6ca <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    41aa:	60 e0       	ldi	r22, 0x00	; 0
    41ac:	80 e0       	ldi	r24, 0x00	; 0
    41ae:	0e 94 85 03 	call	0x70a	; 0x70a <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    41b2:	43 e0       	ldi	r20, 0x03	; 3
    41b4:	60 e0       	ldi	r22, 0x00	; 0
    41b6:	80 e4       	ldi	r24, 0x40	; 64
    41b8:	0e 94 30 03 	call	0x660	; 0x660 <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    41bc:	80 e5       	ldi	r24, 0x50	; 80
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	20 e5       	ldi	r18, 0x50	; 80
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	f9 01       	movw	r30, r18
    41c6:	20 81       	ld	r18, Z
    41c8:	28 60       	ori	r18, 0x08	; 8
    41ca:	fc 01       	movw	r30, r24
    41cc:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    41ce:	80 e5       	ldi	r24, 0x50	; 80
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	fc 01       	movw	r30, r24
    41d4:	81 81       	ldd	r24, Z+1	; 0x01
    41d6:	88 2f       	mov	r24, r24
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	88 70       	andi	r24, 0x08	; 8
    41dc:	99 27       	eor	r25, r25
    41de:	89 2b       	or	r24, r25
    41e0:	b1 f3       	breq	.-20     	; 0x41ce <vInitClock+0x5e>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    41e2:	64 e0       	ldi	r22, 0x04	; 4
    41e4:	80 ec       	ldi	r24, 0xC0	; 192
    41e6:	0e 94 4d 03 	call	0x69a	; 0x69a <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    41ea:	80 e5       	ldi	r24, 0x50	; 80
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	20 e5       	ldi	r18, 0x50	; 80
    41f0:	30 e0       	ldi	r19, 0x00	; 0
    41f2:	f9 01       	movw	r30, r18
    41f4:	20 81       	ld	r18, Z
    41f6:	20 61       	ori	r18, 0x10	; 16
    41f8:	fc 01       	movw	r30, r24
    41fa:	20 83       	st	Z, r18
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    41fc:	60 e0       	ldi	r22, 0x00	; 0
    41fe:	80 e0       	ldi	r24, 0x00	; 0
    4200:	0e 94 85 03 	call	0x70a	; 0x70a <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    4204:	80 e5       	ldi	r24, 0x50	; 80
    4206:	90 e0       	ldi	r25, 0x00	; 0
    4208:	fc 01       	movw	r30, r24
    420a:	81 81       	ldd	r24, Z+1	; 0x01
    420c:	88 2f       	mov	r24, r24
    420e:	90 e0       	ldi	r25, 0x00	; 0
    4210:	80 71       	andi	r24, 0x10	; 16
    4212:	99 27       	eor	r25, r25
    4214:	89 2b       	or	r24, r25
    4216:	b1 f3       	breq	.-20     	; 0x4204 <vInitClock+0x94>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    4218:	84 e0       	ldi	r24, 0x04	; 4
    421a:	0e 94 9c 03 	call	0x738	; 0x738 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    421e:	87 e0       	ldi	r24, 0x07	; 7
    4220:	0e 94 65 03 	call	0x6ca	; 0x6ca <CLKSYS_Disable>
    4224:	00 00       	nop
    4226:	df 91       	pop	r29
    4228:	cf 91       	pop	r28
    422a:	08 95       	ret

0000422c <vApplicationIdleHook>:

//////////////////////////////////////////////////////////////////////////
//						Idle Hook Application							//
//////////////////////////////////////////////////////////////////////////

void vApplicationIdleHook(void){
    422c:	cf 93       	push	r28
    422e:	df 93       	push	r29
    4230:	cd b7       	in	r28, 0x3d	; 61
    4232:	de b7       	in	r29, 0x3e	; 62
	
}
    4234:	00 00       	nop
    4236:	df 91       	pop	r29
    4238:	cf 91       	pop	r28
    423a:	08 95       	ret

0000423c <main>:

//////////////////////////////////////////////////////////////////////////
//								Main									//
//////////////////////////////////////////////////////////////////////////

int main(void){
    423c:	ef 92       	push	r14
    423e:	ff 92       	push	r15
    4240:	0f 93       	push	r16
    4242:	cf 93       	push	r28
    4244:	df 93       	push	r29
    4246:	cd b7       	in	r28, 0x3d	; 61
    4248:	de b7       	in	r29, 0x3e	; 62
	vInitClock();
    424a:	0e 94 b8 20 	call	0x4170	; 0x4170 <vInitClock>
	vInitDisplay();
    424e:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <vInitDisplay>

	evStartStopEvents = xEventGroupCreate();
    4252:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <xEventGroupCreate>
    4256:	80 93 72 35 	sts	0x3572, r24	; 0x803572 <evStartStopEvents>
    425a:	90 93 73 35 	sts	0x3573, r25	; 0x803573 <evStartStopEvents+0x1>
	evButtonEvents = xEventGroupCreate();
    425e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <xEventGroupCreate>
    4262:	80 93 92 35 	sts	0x3592, r24	; 0x803592 <evButtonEvents>
    4266:	90 93 93 35 	sts	0x3593, r25	; 0x803593 <evButtonEvents+0x1>

	xTaskCreate(vUserInterface, (const char *) "ControlTask", configMINIMAL_STACK_SIZE+150, NULL, 3, NULL);
    426a:	e1 2c       	mov	r14, r1
    426c:	f1 2c       	mov	r15, r1
    426e:	03 e0       	ldi	r16, 0x03	; 3
    4270:	20 e0       	ldi	r18, 0x00	; 0
    4272:	30 e0       	ldi	r19, 0x00	; 0
    4274:	4e e5       	ldi	r20, 0x5E	; 94
    4276:	51 e0       	ldi	r21, 0x01	; 1
    4278:	6d e0       	ldi	r22, 0x0D	; 13
    427a:	70 e2       	ldi	r23, 0x20	; 32
    427c:	8f e7       	ldi	r24, 0x7F	; 127
    427e:	91 e2       	ldi	r25, 0x21	; 33
    4280:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <xTaskCreate>
	xTaskCreate(vButtonHandler, (const char*) "ButtonTask", configMINIMAL_STACK_SIZE+30, NULL, 2, &ButtonTask);
    4284:	0f 2e       	mov	r0, r31
    4286:	f9 e9       	ldi	r31, 0x99	; 153
    4288:	ef 2e       	mov	r14, r31
    428a:	f5 e3       	ldi	r31, 0x35	; 53
    428c:	ff 2e       	mov	r15, r31
    428e:	f0 2d       	mov	r31, r0
    4290:	02 e0       	ldi	r16, 0x02	; 2
    4292:	20 e0       	ldi	r18, 0x00	; 0
    4294:	30 e0       	ldi	r19, 0x00	; 0
    4296:	46 ee       	ldi	r20, 0xE6	; 230
    4298:	50 e0       	ldi	r21, 0x00	; 0
    429a:	69 e1       	ldi	r22, 0x19	; 25
    429c:	70 e2       	ldi	r23, 0x20	; 32
    429e:	84 e7       	ldi	r24, 0x74	; 116
    42a0:	97 e2       	ldi	r25, 0x27	; 39
    42a2:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <xTaskCreate>
	xTaskCreate(vLeibniz, (const char *) "Leibniz-Folge-Task", configMINIMAL_STACK_SIZE+100, NULL, 1, &LeibnizTask);
    42a6:	0f 2e       	mov	r0, r31
    42a8:	f6 e6       	ldi	r31, 0x66	; 102
    42aa:	ef 2e       	mov	r14, r31
    42ac:	f5 e3       	ldi	r31, 0x35	; 53
    42ae:	ff 2e       	mov	r15, r31
    42b0:	f0 2d       	mov	r31, r0
    42b2:	01 e0       	ldi	r16, 0x01	; 1
    42b4:	20 e0       	ldi	r18, 0x00	; 0
    42b6:	30 e0       	ldi	r19, 0x00	; 0
    42b8:	4c e2       	ldi	r20, 0x2C	; 44
    42ba:	51 e0       	ldi	r21, 0x01	; 1
    42bc:	64 e2       	ldi	r22, 0x24	; 36
    42be:	70 e2       	ldi	r23, 0x20	; 32
    42c0:	8f ef       	ldi	r24, 0xFF	; 255
    42c2:	97 e2       	ldi	r25, 0x27	; 39
    42c4:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <xTaskCreate>
	xTaskCreate(vNilakantha, (const char *) "Nilakantha-Folge-Task", configMINIMAL_STACK_SIZE+300, NULL, 1, &NilakanthaTask);
    42c8:	0f 2e       	mov	r0, r31
    42ca:	f7 e9       	ldi	r31, 0x97	; 151
    42cc:	ef 2e       	mov	r14, r31
    42ce:	f5 e3       	ldi	r31, 0x35	; 53
    42d0:	ff 2e       	mov	r15, r31
    42d2:	f0 2d       	mov	r31, r0
    42d4:	01 e0       	ldi	r16, 0x01	; 1
    42d6:	20 e0       	ldi	r18, 0x00	; 0
    42d8:	30 e0       	ldi	r19, 0x00	; 0
    42da:	44 ef       	ldi	r20, 0xF4	; 244
    42dc:	51 e0       	ldi	r21, 0x01	; 1
    42de:	67 e3       	ldi	r22, 0x37	; 55
    42e0:	70 e2       	ldi	r23, 0x20	; 32
    42e2:	87 eb       	ldi	r24, 0xB7	; 183
    42e4:	9a e2       	ldi	r25, 0x2A	; 42
    42e6:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <xTaskCreate>

	vTaskStartScheduler();
    42ea:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <vTaskStartScheduler>
	
	return 0;
    42ee:	80 e0       	ldi	r24, 0x00	; 0
    42f0:	90 e0       	ldi	r25, 0x00	; 0
}
    42f2:	df 91       	pop	r29
    42f4:	cf 91       	pop	r28
    42f6:	0f 91       	pop	r16
    42f8:	ff 90       	pop	r15
    42fa:	ef 90       	pop	r14
    42fc:	08 95       	ret

000042fe <vUserInterface>:

//////////////////////////////////////////////////////////////////////////
//						Controller-/Interface-Task						//
//////////////////////////////////////////////////////////////////////////

void vUserInterface(void* pvParameters){
    42fe:	cf 93       	push	r28
    4300:	df 93       	push	r29
    4302:	cd b7       	in	r28, 0x3d	; 61
    4304:	de b7       	in	r29, 0x3e	; 62
    4306:	66 97       	sbiw	r28, 0x16	; 22
    4308:	cd bf       	out	0x3d, r28	; 61
    430a:	de bf       	out	0x3e, r29	; 62
    430c:	8d 8b       	std	Y+21, r24	; 0x15
    430e:	9e 8b       	std	Y+22, r25	; 0x16
	vDisplayClear();
    4310:	0e 94 73 31 	call	0x62e6	; 0x62e6 <vDisplayClear>
	vTaskDelay(500);
    4314:	64 ef       	ldi	r22, 0xF4	; 244
    4316:	71 e0       	ldi	r23, 0x01	; 1
    4318:	80 e0       	ldi	r24, 0x00	; 0
    431a:	90 e0       	ldi	r25, 0x00	; 0
    431c:	0e 94 bc 13 	call	0x2778	; 0x2778 <vTaskDelay>
	initButtons();
    4320:	0e 94 cd 01 	call	0x39a	; 0x39a <initButtons>
	uint32_t DisplayUpdateCounter = 50;
    4324:	82 e3       	ldi	r24, 0x32	; 50
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	a0 e0       	ldi	r26, 0x00	; 0
    432a:	b0 e0       	ldi	r27, 0x00	; 0
    432c:	89 83       	std	Y+1, r24	; 0x01
    432e:	9a 83       	std	Y+2, r25	; 0x02
    4330:	ab 83       	std	Y+3, r26	; 0x03
    4332:	bc 83       	std	Y+4, r27	; 0x04
	for(;;){
		uint32_t ButtonState = (xEventGroupGetBits(evButtonEvents)) & 0x000000FF; //Read Button States from EventGroup
    4334:	80 91 92 35 	lds	r24, 0x3592	; 0x803592 <evButtonEvents>
    4338:	90 91 93 35 	lds	r25, 0x3593	; 0x803593 <evButtonEvents+0x1>
    433c:	40 e0       	ldi	r20, 0x00	; 0
    433e:	50 e0       	ldi	r21, 0x00	; 0
    4340:	ba 01       	movw	r22, r20
    4342:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    4346:	dc 01       	movw	r26, r24
    4348:	cb 01       	movw	r24, r22
    434a:	99 27       	eor	r25, r25
    434c:	aa 27       	eor	r26, r26
    434e:	bb 27       	eor	r27, r27
    4350:	8d 83       	std	Y+5, r24	; 0x05
    4352:	9e 83       	std	Y+6, r25	; 0x06
    4354:	af 83       	std	Y+7, r26	; 0x07
    4356:	b8 87       	std	Y+8, r27	; 0x08
		xEventGroupClearBits(evButtonEvents, EVBUTTONS_CLEAR); //As the Button State is saved now, we can clear the EventGroup for new Button presses
    4358:	80 91 92 35 	lds	r24, 0x3592	; 0x803592 <evButtonEvents>
    435c:	90 91 93 35 	lds	r25, 0x3593	; 0x803593 <evButtonEvents+0x1>
    4360:	4f ef       	ldi	r20, 0xFF	; 255
    4362:	50 e0       	ldi	r21, 0x00	; 0
    4364:	60 e0       	ldi	r22, 0x00	; 0
    4366:	70 e0       	ldi	r23, 0x00	; 0
    4368:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
		
		//////////////////////////////////////////////////////////////////////////
		//							User Interface								//
		//////////////////////////////////////////////////////////////////////////
		
		if (DisplayUpdateCounter == 0){
    436c:	89 81       	ldd	r24, Y+1	; 0x01
    436e:	9a 81       	ldd	r25, Y+2	; 0x02
    4370:	ab 81       	ldd	r26, Y+3	; 0x03
    4372:	bc 81       	ldd	r27, Y+4	; 0x04
    4374:	89 2b       	or	r24, r25
    4376:	8a 2b       	or	r24, r26
    4378:	8b 2b       	or	r24, r27
    437a:	09 f0       	breq	.+2      	; 0x437e <vUserInterface+0x80>
    437c:	14 c2       	rjmp	.+1064   	; 0x47a6 <vUserInterface+0x4a8>
			if(Menu == Menu_Main){	//Start screen
    437e:	80 91 34 35 	lds	r24, 0x3534	; 0x803534 <Menu>
    4382:	90 91 35 35 	lds	r25, 0x3535	; 0x803535 <Menu+0x1>
    4386:	89 2b       	or	r24, r25
    4388:	09 f0       	breq	.+2      	; 0x438c <vUserInterface+0x8e>
    438a:	51 c0       	rjmp	.+162    	; 0x442e <vUserInterface+0x130>
				vDisplayClear();
    438c:	0e 94 73 31 	call	0x62e6	; 0x62e6 <vDisplayClear>
				vDisplayWriteStringAtPos(0,0, "Pi-Calculator");
    4390:	8d e4       	ldi	r24, 0x4D	; 77
    4392:	90 e2       	ldi	r25, 0x20	; 32
    4394:	89 2f       	mov	r24, r25
    4396:	8f 93       	push	r24
    4398:	8d e4       	ldi	r24, 0x4D	; 77
    439a:	90 e2       	ldi	r25, 0x20	; 32
    439c:	8f 93       	push	r24
    439e:	1f 92       	push	r1
    43a0:	1f 92       	push	r1
    43a2:	1f 92       	push	r1
    43a4:	1f 92       	push	r1
    43a6:	0e 94 85 31 	call	0x630a	; 0x630a <vDisplayWriteStringAtPos>
    43aa:	0f 90       	pop	r0
    43ac:	0f 90       	pop	r0
    43ae:	0f 90       	pop	r0
    43b0:	0f 90       	pop	r0
    43b2:	0f 90       	pop	r0
    43b4:	0f 90       	pop	r0
				vDisplayWriteStringAtPos(1,0, "1: Pi aus math.h");
    43b6:	8b e5       	ldi	r24, 0x5B	; 91
    43b8:	90 e2       	ldi	r25, 0x20	; 32
    43ba:	89 2f       	mov	r24, r25
    43bc:	8f 93       	push	r24
    43be:	8b e5       	ldi	r24, 0x5B	; 91
    43c0:	90 e2       	ldi	r25, 0x20	; 32
    43c2:	8f 93       	push	r24
    43c4:	1f 92       	push	r1
    43c6:	1f 92       	push	r1
    43c8:	1f 92       	push	r1
    43ca:	81 e0       	ldi	r24, 0x01	; 1
    43cc:	8f 93       	push	r24
    43ce:	0e 94 85 31 	call	0x630a	; 0x630a <vDisplayWriteStringAtPos>
    43d2:	0f 90       	pop	r0
    43d4:	0f 90       	pop	r0
    43d6:	0f 90       	pop	r0
    43d8:	0f 90       	pop	r0
    43da:	0f 90       	pop	r0
    43dc:	0f 90       	pop	r0
				vDisplayWriteStringAtPos(2,0, "2: Leibniz-Serie");
    43de:	8c e6       	ldi	r24, 0x6C	; 108
    43e0:	90 e2       	ldi	r25, 0x20	; 32
    43e2:	89 2f       	mov	r24, r25
    43e4:	8f 93       	push	r24
    43e6:	8c e6       	ldi	r24, 0x6C	; 108
    43e8:	90 e2       	ldi	r25, 0x20	; 32
    43ea:	8f 93       	push	r24
    43ec:	1f 92       	push	r1
    43ee:	1f 92       	push	r1
    43f0:	1f 92       	push	r1
    43f2:	82 e0       	ldi	r24, 0x02	; 2
    43f4:	8f 93       	push	r24
    43f6:	0e 94 85 31 	call	0x630a	; 0x630a <vDisplayWriteStringAtPos>
    43fa:	0f 90       	pop	r0
    43fc:	0f 90       	pop	r0
    43fe:	0f 90       	pop	r0
    4400:	0f 90       	pop	r0
    4402:	0f 90       	pop	r0
    4404:	0f 90       	pop	r0
				vDisplayWriteStringAtPos(3,0, "3: Nilakantha-Serie");
    4406:	8d e7       	ldi	r24, 0x7D	; 125
    4408:	90 e2       	ldi	r25, 0x20	; 32
    440a:	89 2f       	mov	r24, r25
    440c:	8f 93       	push	r24
    440e:	8d e7       	ldi	r24, 0x7D	; 125
    4410:	90 e2       	ldi	r25, 0x20	; 32
    4412:	8f 93       	push	r24
    4414:	1f 92       	push	r1
    4416:	1f 92       	push	r1
    4418:	1f 92       	push	r1
    441a:	83 e0       	ldi	r24, 0x03	; 3
    441c:	8f 93       	push	r24
    441e:	0e 94 85 31 	call	0x630a	; 0x630a <vDisplayWriteStringAtPos>
    4422:	0f 90       	pop	r0
    4424:	0f 90       	pop	r0
    4426:	0f 90       	pop	r0
    4428:	0f 90       	pop	r0
    442a:	0f 90       	pop	r0
    442c:	0f 90       	pop	r0
			}
			if(Menu == Menu_Demo){	//Pi Demo screen
    442e:	80 91 34 35 	lds	r24, 0x3534	; 0x803534 <Menu>
    4432:	90 91 35 35 	lds	r25, 0x3535	; 0x803535 <Menu+0x1>
    4436:	01 97       	sbiw	r24, 0x01	; 1
    4438:	09 f0       	breq	.+2      	; 0x443c <vUserInterface+0x13e>
    443a:	5c c0       	rjmp	.+184    	; 0x44f4 <vUserInterface+0x1f6>
				char pistring[12];
				vDisplayClear();
    443c:	0e 94 73 31 	call	0x62e6	; 0x62e6 <vDisplayClear>
				sprintf(&pistring[0], "PI: %.8f", M_PI);
    4440:	80 e4       	ldi	r24, 0x40	; 64
    4442:	8f 93       	push	r24
    4444:	89 e4       	ldi	r24, 0x49	; 73
    4446:	8f 93       	push	r24
    4448:	8f e0       	ldi	r24, 0x0F	; 15
    444a:	8f 93       	push	r24
    444c:	8b ed       	ldi	r24, 0xDB	; 219
    444e:	8f 93       	push	r24
    4450:	81 e9       	ldi	r24, 0x91	; 145
    4452:	90 e2       	ldi	r25, 0x20	; 32
    4454:	89 2f       	mov	r24, r25
    4456:	8f 93       	push	r24
    4458:	81 e9       	ldi	r24, 0x91	; 145
    445a:	90 e2       	ldi	r25, 0x20	; 32
    445c:	8f 93       	push	r24
    445e:	ce 01       	movw	r24, r28
    4460:	09 96       	adiw	r24, 0x09	; 9
    4462:	29 2f       	mov	r18, r25
    4464:	2f 93       	push	r18
    4466:	8f 93       	push	r24
    4468:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <sprintf>
    446c:	8d b7       	in	r24, 0x3d	; 61
    446e:	9e b7       	in	r25, 0x3e	; 62
    4470:	08 96       	adiw	r24, 0x08	; 8
    4472:	cd bf       	out	0x3d, r28	; 61
    4474:	de bf       	out	0x3e, r29	; 62
				vDisplayWriteStringAtPos(0,0, "Pi aus math.h");
    4476:	8a e9       	ldi	r24, 0x9A	; 154
    4478:	90 e2       	ldi	r25, 0x20	; 32
    447a:	89 2f       	mov	r24, r25
    447c:	8f 93       	push	r24
    447e:	8a e9       	ldi	r24, 0x9A	; 154
    4480:	90 e2       	ldi	r25, 0x20	; 32
    4482:	8f 93       	push	r24
    4484:	1f 92       	push	r1
    4486:	1f 92       	push	r1
    4488:	1f 92       	push	r1
    448a:	1f 92       	push	r1
    448c:	0e 94 85 31 	call	0x630a	; 0x630a <vDisplayWriteStringAtPos>
    4490:	0f 90       	pop	r0
    4492:	0f 90       	pop	r0
    4494:	0f 90       	pop	r0
    4496:	0f 90       	pop	r0
    4498:	0f 90       	pop	r0
    449a:	0f 90       	pop	r0
				vDisplayWriteStringAtPos(1,0, "%s", pistring);
    449c:	ce 01       	movw	r24, r28
    449e:	09 96       	adiw	r24, 0x09	; 9
    44a0:	29 2f       	mov	r18, r25
    44a2:	2f 93       	push	r18
    44a4:	8f 93       	push	r24
    44a6:	88 ea       	ldi	r24, 0xA8	; 168
    44a8:	90 e2       	ldi	r25, 0x20	; 32
    44aa:	89 2f       	mov	r24, r25
    44ac:	8f 93       	push	r24
    44ae:	88 ea       	ldi	r24, 0xA8	; 168
    44b0:	90 e2       	ldi	r25, 0x20	; 32
    44b2:	8f 93       	push	r24
    44b4:	1f 92       	push	r1
    44b6:	1f 92       	push	r1
    44b8:	1f 92       	push	r1
    44ba:	81 e0       	ldi	r24, 0x01	; 1
    44bc:	8f 93       	push	r24
    44be:	0e 94 85 31 	call	0x630a	; 0x630a <vDisplayWriteStringAtPos>
    44c2:	8d b7       	in	r24, 0x3d	; 61
    44c4:	9e b7       	in	r25, 0x3e	; 62
    44c6:	08 96       	adiw	r24, 0x08	; 8
    44c8:	cd bf       	out	0x3d, r28	; 61
    44ca:	de bf       	out	0x3e, r29	; 62
				vDisplayWriteStringAtPos(3,0, "4: Back");
    44cc:	8b ea       	ldi	r24, 0xAB	; 171
    44ce:	90 e2       	ldi	r25, 0x20	; 32
    44d0:	89 2f       	mov	r24, r25
    44d2:	8f 93       	push	r24
    44d4:	8b ea       	ldi	r24, 0xAB	; 171
    44d6:	90 e2       	ldi	r25, 0x20	; 32
    44d8:	8f 93       	push	r24
    44da:	1f 92       	push	r1
    44dc:	1f 92       	push	r1
    44de:	1f 92       	push	r1
    44e0:	83 e0       	ldi	r24, 0x03	; 3
    44e2:	8f 93       	push	r24
    44e4:	0e 94 85 31 	call	0x630a	; 0x630a <vDisplayWriteStringAtPos>
    44e8:	0f 90       	pop	r0
    44ea:	0f 90       	pop	r0
    44ec:	0f 90       	pop	r0
    44ee:	0f 90       	pop	r0
    44f0:	0f 90       	pop	r0
    44f2:	0f 90       	pop	r0
			}
			if(Menu == Menu_Leibniz){	//Leibniz's Pi screen
    44f4:	80 91 34 35 	lds	r24, 0x3534	; 0x803534 <Menu>
    44f8:	90 91 35 35 	lds	r25, 0x3535	; 0x803535 <Menu+0x1>
    44fc:	02 97       	sbiw	r24, 0x02	; 2
    44fe:	09 f0       	breq	.+2      	; 0x4502 <vUserInterface+0x204>
    4500:	a1 c0       	rjmp	.+322    	; 0x4644 <vUserInterface+0x346>
				vDisplayClear();
    4502:	0e 94 73 31 	call	0x62e6	; 0x62e6 <vDisplayClear>
				vDisplayWriteStringAtPos(0,0, "%s", LeibnizPiString);
    4506:	8b e9       	ldi	r24, 0x9B	; 155
    4508:	95 e3       	ldi	r25, 0x35	; 53
    450a:	89 2f       	mov	r24, r25
    450c:	8f 93       	push	r24
    450e:	8b e9       	ldi	r24, 0x9B	; 155
    4510:	95 e3       	ldi	r25, 0x35	; 53
    4512:	8f 93       	push	r24
    4514:	88 ea       	ldi	r24, 0xA8	; 168
    4516:	90 e2       	ldi	r25, 0x20	; 32
    4518:	89 2f       	mov	r24, r25
    451a:	8f 93       	push	r24
    451c:	88 ea       	ldi	r24, 0xA8	; 168
    451e:	90 e2       	ldi	r25, 0x20	; 32
    4520:	8f 93       	push	r24
    4522:	1f 92       	push	r1
    4524:	1f 92       	push	r1
    4526:	1f 92       	push	r1
    4528:	1f 92       	push	r1
    452a:	0e 94 85 31 	call	0x630a	; 0x630a <vDisplayWriteStringAtPos>
    452e:	8d b7       	in	r24, 0x3d	; 61
    4530:	9e b7       	in	r25, 0x3e	; 62
    4532:	08 96       	adiw	r24, 0x08	; 8
    4534:	cd bf       	out	0x3d, r28	; 61
    4536:	de bf       	out	0x3e, r29	; 62
				vDisplayWriteStringAtPos(0,16, "%s", LeibnizTimeString);
    4538:	83 e6       	ldi	r24, 0x63	; 99
    453a:	95 e3       	ldi	r25, 0x35	; 53
    453c:	89 2f       	mov	r24, r25
    453e:	8f 93       	push	r24
    4540:	83 e6       	ldi	r24, 0x63	; 99
    4542:	95 e3       	ldi	r25, 0x35	; 53
    4544:	8f 93       	push	r24
    4546:	88 ea       	ldi	r24, 0xA8	; 168
    4548:	90 e2       	ldi	r25, 0x20	; 32
    454a:	89 2f       	mov	r24, r25
    454c:	8f 93       	push	r24
    454e:	88 ea       	ldi	r24, 0xA8	; 168
    4550:	90 e2       	ldi	r25, 0x20	; 32
    4552:	8f 93       	push	r24
    4554:	1f 92       	push	r1
    4556:	80 e1       	ldi	r24, 0x10	; 16
    4558:	8f 93       	push	r24
    455a:	1f 92       	push	r1
    455c:	1f 92       	push	r1
    455e:	0e 94 85 31 	call	0x630a	; 0x630a <vDisplayWriteStringAtPos>
    4562:	8d b7       	in	r24, 0x3d	; 61
    4564:	9e b7       	in	r25, 0x3e	; 62
    4566:	08 96       	adiw	r24, 0x08	; 8
    4568:	cd bf       	out	0x3d, r28	; 61
    456a:	de bf       	out	0x3e, r29	; 62
				vDisplayWriteStringAtPos(1,0, "1: Start");
    456c:	83 eb       	ldi	r24, 0xB3	; 179
    456e:	90 e2       	ldi	r25, 0x20	; 32
    4570:	89 2f       	mov	r24, r25
    4572:	8f 93       	push	r24
    4574:	83 eb       	ldi	r24, 0xB3	; 179
    4576:	90 e2       	ldi	r25, 0x20	; 32
    4578:	8f 93       	push	r24
    457a:	1f 92       	push	r1
    457c:	1f 92       	push	r1
    457e:	1f 92       	push	r1
    4580:	81 e0       	ldi	r24, 0x01	; 1
    4582:	8f 93       	push	r24
    4584:	0e 94 85 31 	call	0x630a	; 0x630a <vDisplayWriteStringAtPos>
    4588:	0f 90       	pop	r0
    458a:	0f 90       	pop	r0
    458c:	0f 90       	pop	r0
    458e:	0f 90       	pop	r0
    4590:	0f 90       	pop	r0
    4592:	0f 90       	pop	r0
				vDisplayWriteStringAtPos(1,9, "%s", LeibnizExactTime);
    4594:	88 e8       	ldi	r24, 0x88	; 136
    4596:	95 e3       	ldi	r25, 0x35	; 53
    4598:	89 2f       	mov	r24, r25
    459a:	8f 93       	push	r24
    459c:	88 e8       	ldi	r24, 0x88	; 136
    459e:	95 e3       	ldi	r25, 0x35	; 53
    45a0:	8f 93       	push	r24
    45a2:	88 ea       	ldi	r24, 0xA8	; 168
    45a4:	90 e2       	ldi	r25, 0x20	; 32
    45a6:	89 2f       	mov	r24, r25
    45a8:	8f 93       	push	r24
    45aa:	88 ea       	ldi	r24, 0xA8	; 168
    45ac:	90 e2       	ldi	r25, 0x20	; 32
    45ae:	8f 93       	push	r24
    45b0:	1f 92       	push	r1
    45b2:	89 e0       	ldi	r24, 0x09	; 9
    45b4:	8f 93       	push	r24
    45b6:	1f 92       	push	r1
    45b8:	81 e0       	ldi	r24, 0x01	; 1
    45ba:	8f 93       	push	r24
    45bc:	0e 94 85 31 	call	0x630a	; 0x630a <vDisplayWriteStringAtPos>
    45c0:	8d b7       	in	r24, 0x3d	; 61
    45c2:	9e b7       	in	r25, 0x3e	; 62
    45c4:	08 96       	adiw	r24, 0x08	; 8
    45c6:	cd bf       	out	0x3d, r28	; 61
    45c8:	de bf       	out	0x3e, r29	; 62
				vDisplayWriteStringAtPos(2,0, "2: Stop");
    45ca:	8c eb       	ldi	r24, 0xBC	; 188
    45cc:	90 e2       	ldi	r25, 0x20	; 32
    45ce:	89 2f       	mov	r24, r25
    45d0:	8f 93       	push	r24
    45d2:	8c eb       	ldi	r24, 0xBC	; 188
    45d4:	90 e2       	ldi	r25, 0x20	; 32
    45d6:	8f 93       	push	r24
    45d8:	1f 92       	push	r1
    45da:	1f 92       	push	r1
    45dc:	1f 92       	push	r1
    45de:	82 e0       	ldi	r24, 0x02	; 2
    45e0:	8f 93       	push	r24
    45e2:	0e 94 85 31 	call	0x630a	; 0x630a <vDisplayWriteStringAtPos>
    45e6:	0f 90       	pop	r0
    45e8:	0f 90       	pop	r0
    45ea:	0f 90       	pop	r0
    45ec:	0f 90       	pop	r0
    45ee:	0f 90       	pop	r0
    45f0:	0f 90       	pop	r0
				vDisplayWriteStringAtPos(2,10, "3: Reset");
    45f2:	84 ec       	ldi	r24, 0xC4	; 196
    45f4:	90 e2       	ldi	r25, 0x20	; 32
    45f6:	89 2f       	mov	r24, r25
    45f8:	8f 93       	push	r24
    45fa:	84 ec       	ldi	r24, 0xC4	; 196
    45fc:	90 e2       	ldi	r25, 0x20	; 32
    45fe:	8f 93       	push	r24
    4600:	1f 92       	push	r1
    4602:	8a e0       	ldi	r24, 0x0A	; 10
    4604:	8f 93       	push	r24
    4606:	1f 92       	push	r1
    4608:	82 e0       	ldi	r24, 0x02	; 2
    460a:	8f 93       	push	r24
    460c:	0e 94 85 31 	call	0x630a	; 0x630a <vDisplayWriteStringAtPos>
    4610:	0f 90       	pop	r0
    4612:	0f 90       	pop	r0
    4614:	0f 90       	pop	r0
    4616:	0f 90       	pop	r0
    4618:	0f 90       	pop	r0
    461a:	0f 90       	pop	r0
				vDisplayWriteStringAtPos(3,0, "4: ~ Nilakantha");
    461c:	8d ec       	ldi	r24, 0xCD	; 205
    461e:	90 e2       	ldi	r25, 0x20	; 32
    4620:	89 2f       	mov	r24, r25
    4622:	8f 93       	push	r24
    4624:	8d ec       	ldi	r24, 0xCD	; 205
    4626:	90 e2       	ldi	r25, 0x20	; 32
    4628:	8f 93       	push	r24
    462a:	1f 92       	push	r1
    462c:	1f 92       	push	r1
    462e:	1f 92       	push	r1
    4630:	83 e0       	ldi	r24, 0x03	; 3
    4632:	8f 93       	push	r24
    4634:	0e 94 85 31 	call	0x630a	; 0x630a <vDisplayWriteStringAtPos>
    4638:	0f 90       	pop	r0
    463a:	0f 90       	pop	r0
    463c:	0f 90       	pop	r0
    463e:	0f 90       	pop	r0
    4640:	0f 90       	pop	r0
    4642:	0f 90       	pop	r0
			}
			if(Menu == Menu_Nilakantha){	//Nilakantha's Pi screen
    4644:	80 91 34 35 	lds	r24, 0x3534	; 0x803534 <Menu>
    4648:	90 91 35 35 	lds	r25, 0x3535	; 0x803535 <Menu+0x1>
    464c:	03 97       	sbiw	r24, 0x03	; 3
    464e:	09 f0       	breq	.+2      	; 0x4652 <vUserInterface+0x354>
    4650:	a1 c0       	rjmp	.+322    	; 0x4794 <vUserInterface+0x496>
				vDisplayClear();
    4652:	0e 94 73 31 	call	0x62e6	; 0x62e6 <vDisplayClear>
				vDisplayWriteStringAtPos(0,0, "%s", NilakanthaPiString);
    4656:	88 e7       	ldi	r24, 0x78	; 120
    4658:	95 e3       	ldi	r25, 0x35	; 53
    465a:	89 2f       	mov	r24, r25
    465c:	8f 93       	push	r24
    465e:	88 e7       	ldi	r24, 0x78	; 120
    4660:	95 e3       	ldi	r25, 0x35	; 53
    4662:	8f 93       	push	r24
    4664:	88 ea       	ldi	r24, 0xA8	; 168
    4666:	90 e2       	ldi	r25, 0x20	; 32
    4668:	89 2f       	mov	r24, r25
    466a:	8f 93       	push	r24
    466c:	88 ea       	ldi	r24, 0xA8	; 168
    466e:	90 e2       	ldi	r25, 0x20	; 32
    4670:	8f 93       	push	r24
    4672:	1f 92       	push	r1
    4674:	1f 92       	push	r1
    4676:	1f 92       	push	r1
    4678:	1f 92       	push	r1
    467a:	0e 94 85 31 	call	0x630a	; 0x630a <vDisplayWriteStringAtPos>
    467e:	8d b7       	in	r24, 0x3d	; 61
    4680:	9e b7       	in	r25, 0x3e	; 62
    4682:	08 96       	adiw	r24, 0x08	; 8
    4684:	cd bf       	out	0x3d, r28	; 61
    4686:	de bf       	out	0x3e, r29	; 62
				vDisplayWriteStringAtPos(0,16, "%s", NilakanthaTimeString);
    4688:	84 e9       	ldi	r24, 0x94	; 148
    468a:	95 e3       	ldi	r25, 0x35	; 53
    468c:	89 2f       	mov	r24, r25
    468e:	8f 93       	push	r24
    4690:	84 e9       	ldi	r24, 0x94	; 148
    4692:	95 e3       	ldi	r25, 0x35	; 53
    4694:	8f 93       	push	r24
    4696:	88 ea       	ldi	r24, 0xA8	; 168
    4698:	90 e2       	ldi	r25, 0x20	; 32
    469a:	89 2f       	mov	r24, r25
    469c:	8f 93       	push	r24
    469e:	88 ea       	ldi	r24, 0xA8	; 168
    46a0:	90 e2       	ldi	r25, 0x20	; 32
    46a2:	8f 93       	push	r24
    46a4:	1f 92       	push	r1
    46a6:	80 e1       	ldi	r24, 0x10	; 16
    46a8:	8f 93       	push	r24
    46aa:	1f 92       	push	r1
    46ac:	1f 92       	push	r1
    46ae:	0e 94 85 31 	call	0x630a	; 0x630a <vDisplayWriteStringAtPos>
    46b2:	8d b7       	in	r24, 0x3d	; 61
    46b4:	9e b7       	in	r25, 0x3e	; 62
    46b6:	08 96       	adiw	r24, 0x08	; 8
    46b8:	cd bf       	out	0x3d, r28	; 61
    46ba:	de bf       	out	0x3e, r29	; 62
				vDisplayWriteStringAtPos(1,0, "1: Start");
    46bc:	83 eb       	ldi	r24, 0xB3	; 179
    46be:	90 e2       	ldi	r25, 0x20	; 32
    46c0:	89 2f       	mov	r24, r25
    46c2:	8f 93       	push	r24
    46c4:	83 eb       	ldi	r24, 0xB3	; 179
    46c6:	90 e2       	ldi	r25, 0x20	; 32
    46c8:	8f 93       	push	r24
    46ca:	1f 92       	push	r1
    46cc:	1f 92       	push	r1
    46ce:	1f 92       	push	r1
    46d0:	81 e0       	ldi	r24, 0x01	; 1
    46d2:	8f 93       	push	r24
    46d4:	0e 94 85 31 	call	0x630a	; 0x630a <vDisplayWriteStringAtPos>
    46d8:	0f 90       	pop	r0
    46da:	0f 90       	pop	r0
    46dc:	0f 90       	pop	r0
    46de:	0f 90       	pop	r0
    46e0:	0f 90       	pop	r0
    46e2:	0f 90       	pop	r0
				vDisplayWriteStringAtPos(1,9, "%s", NilakanthaExactTime);
    46e4:	88 e6       	ldi	r24, 0x68	; 104
    46e6:	95 e3       	ldi	r25, 0x35	; 53
    46e8:	89 2f       	mov	r24, r25
    46ea:	8f 93       	push	r24
    46ec:	88 e6       	ldi	r24, 0x68	; 104
    46ee:	95 e3       	ldi	r25, 0x35	; 53
    46f0:	8f 93       	push	r24
    46f2:	88 ea       	ldi	r24, 0xA8	; 168
    46f4:	90 e2       	ldi	r25, 0x20	; 32
    46f6:	89 2f       	mov	r24, r25
    46f8:	8f 93       	push	r24
    46fa:	88 ea       	ldi	r24, 0xA8	; 168
    46fc:	90 e2       	ldi	r25, 0x20	; 32
    46fe:	8f 93       	push	r24
    4700:	1f 92       	push	r1
    4702:	89 e0       	ldi	r24, 0x09	; 9
    4704:	8f 93       	push	r24
    4706:	1f 92       	push	r1
    4708:	81 e0       	ldi	r24, 0x01	; 1
    470a:	8f 93       	push	r24
    470c:	0e 94 85 31 	call	0x630a	; 0x630a <vDisplayWriteStringAtPos>
    4710:	8d b7       	in	r24, 0x3d	; 61
    4712:	9e b7       	in	r25, 0x3e	; 62
    4714:	08 96       	adiw	r24, 0x08	; 8
    4716:	cd bf       	out	0x3d, r28	; 61
    4718:	de bf       	out	0x3e, r29	; 62
				vDisplayWriteStringAtPos(2,0, "2: Stop");
    471a:	8c eb       	ldi	r24, 0xBC	; 188
    471c:	90 e2       	ldi	r25, 0x20	; 32
    471e:	89 2f       	mov	r24, r25
    4720:	8f 93       	push	r24
    4722:	8c eb       	ldi	r24, 0xBC	; 188
    4724:	90 e2       	ldi	r25, 0x20	; 32
    4726:	8f 93       	push	r24
    4728:	1f 92       	push	r1
    472a:	1f 92       	push	r1
    472c:	1f 92       	push	r1
    472e:	82 e0       	ldi	r24, 0x02	; 2
    4730:	8f 93       	push	r24
    4732:	0e 94 85 31 	call	0x630a	; 0x630a <vDisplayWriteStringAtPos>
    4736:	0f 90       	pop	r0
    4738:	0f 90       	pop	r0
    473a:	0f 90       	pop	r0
    473c:	0f 90       	pop	r0
    473e:	0f 90       	pop	r0
    4740:	0f 90       	pop	r0
				vDisplayWriteStringAtPos(2,10, "3: Reset");
    4742:	84 ec       	ldi	r24, 0xC4	; 196
    4744:	90 e2       	ldi	r25, 0x20	; 32
    4746:	89 2f       	mov	r24, r25
    4748:	8f 93       	push	r24
    474a:	84 ec       	ldi	r24, 0xC4	; 196
    474c:	90 e2       	ldi	r25, 0x20	; 32
    474e:	8f 93       	push	r24
    4750:	1f 92       	push	r1
    4752:	8a e0       	ldi	r24, 0x0A	; 10
    4754:	8f 93       	push	r24
    4756:	1f 92       	push	r1
    4758:	82 e0       	ldi	r24, 0x02	; 2
    475a:	8f 93       	push	r24
    475c:	0e 94 85 31 	call	0x630a	; 0x630a <vDisplayWriteStringAtPos>
    4760:	0f 90       	pop	r0
    4762:	0f 90       	pop	r0
    4764:	0f 90       	pop	r0
    4766:	0f 90       	pop	r0
    4768:	0f 90       	pop	r0
    476a:	0f 90       	pop	r0
				vDisplayWriteStringAtPos(3,0, "4: ~ Leibniz");
    476c:	8d ed       	ldi	r24, 0xDD	; 221
    476e:	90 e2       	ldi	r25, 0x20	; 32
    4770:	89 2f       	mov	r24, r25
    4772:	8f 93       	push	r24
    4774:	8d ed       	ldi	r24, 0xDD	; 221
    4776:	90 e2       	ldi	r25, 0x20	; 32
    4778:	8f 93       	push	r24
    477a:	1f 92       	push	r1
    477c:	1f 92       	push	r1
    477e:	1f 92       	push	r1
    4780:	83 e0       	ldi	r24, 0x03	; 3
    4782:	8f 93       	push	r24
    4784:	0e 94 85 31 	call	0x630a	; 0x630a <vDisplayWriteStringAtPos>
    4788:	0f 90       	pop	r0
    478a:	0f 90       	pop	r0
    478c:	0f 90       	pop	r0
    478e:	0f 90       	pop	r0
    4790:	0f 90       	pop	r0
    4792:	0f 90       	pop	r0
			}
			DisplayUpdateCounter = 50;	//Refreshing Time (50*10ms=500ms)	
    4794:	82 e3       	ldi	r24, 0x32	; 50
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	a0 e0       	ldi	r26, 0x00	; 0
    479a:	b0 e0       	ldi	r27, 0x00	; 0
    479c:	89 83       	std	Y+1, r24	; 0x01
    479e:	9a 83       	std	Y+2, r25	; 0x02
    47a0:	ab 83       	std	Y+3, r26	; 0x03
    47a2:	bc 83       	std	Y+4, r27	; 0x04
    47a4:	0b c0       	rjmp	.+22     	; 0x47bc <vUserInterface+0x4be>
		}
		else{
			DisplayUpdateCounter --;	//Refreshing counter
    47a6:	89 81       	ldd	r24, Y+1	; 0x01
    47a8:	9a 81       	ldd	r25, Y+2	; 0x02
    47aa:	ab 81       	ldd	r26, Y+3	; 0x03
    47ac:	bc 81       	ldd	r27, Y+4	; 0x04
    47ae:	01 97       	sbiw	r24, 0x01	; 1
    47b0:	a1 09       	sbc	r26, r1
    47b2:	b1 09       	sbc	r27, r1
    47b4:	89 83       	std	Y+1, r24	; 0x01
    47b6:	9a 83       	std	Y+2, r25	; 0x02
    47b8:	ab 83       	std	Y+3, r26	; 0x03
    47ba:	bc 83       	std	Y+4, r27	; 0x04
		
		//////////////////////////////////////////////////////////////////////////
		//							Menu selection								//
		//////////////////////////////////////////////////////////////////////////
		
		if (Menu == Menu_Main){
    47bc:	80 91 34 35 	lds	r24, 0x3534	; 0x803534 <Menu>
    47c0:	90 91 35 35 	lds	r25, 0x3535	; 0x803535 <Menu+0x1>
    47c4:	89 2b       	or	r24, r25
    47c6:	39 f5       	brne	.+78     	; 0x4816 <vUserInterface+0x518>
			switch(ButtonState){
    47c8:	8d 81       	ldd	r24, Y+5	; 0x05
    47ca:	9e 81       	ldd	r25, Y+6	; 0x06
    47cc:	af 81       	ldd	r26, Y+7	; 0x07
    47ce:	b8 85       	ldd	r27, Y+8	; 0x08
    47d0:	82 30       	cpi	r24, 0x02	; 2
    47d2:	91 05       	cpc	r25, r1
    47d4:	a1 05       	cpc	r26, r1
    47d6:	b1 05       	cpc	r27, r1
    47d8:	81 f0       	breq	.+32     	; 0x47fa <vUserInterface+0x4fc>
    47da:	84 30       	cpi	r24, 0x04	; 4
    47dc:	91 05       	cpc	r25, r1
    47de:	a1 05       	cpc	r26, r1
    47e0:	b1 05       	cpc	r27, r1
    47e2:	91 f0       	breq	.+36     	; 0x4808 <vUserInterface+0x50a>
    47e4:	01 97       	sbiw	r24, 0x01	; 1
    47e6:	a1 05       	cpc	r26, r1
    47e8:	b1 05       	cpc	r27, r1
    47ea:	a9 f4       	brne	.+42     	; 0x4816 <vUserInterface+0x518>
				case 1:
					Menu = Menu_Demo;
    47ec:	81 e0       	ldi	r24, 0x01	; 1
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	80 93 34 35 	sts	0x3534, r24	; 0x803534 <Menu>
    47f4:	90 93 35 35 	sts	0x3535, r25	; 0x803535 <Menu+0x1>
				break;
    47f8:	0e c0       	rjmp	.+28     	; 0x4816 <vUserInterface+0x518>
					
				case 2:
					Menu = Menu_Leibniz;
    47fa:	82 e0       	ldi	r24, 0x02	; 2
    47fc:	90 e0       	ldi	r25, 0x00	; 0
    47fe:	80 93 34 35 	sts	0x3534, r24	; 0x803534 <Menu>
    4802:	90 93 35 35 	sts	0x3535, r25	; 0x803535 <Menu+0x1>
				break;
    4806:	07 c0       	rjmp	.+14     	; 0x4816 <vUserInterface+0x518>
					
				case 4:
					Menu = Menu_Nilakantha;
    4808:	83 e0       	ldi	r24, 0x03	; 3
    480a:	90 e0       	ldi	r25, 0x00	; 0
    480c:	80 93 34 35 	sts	0x3534, r24	; 0x803534 <Menu>
    4810:	90 93 35 35 	sts	0x3535, r25	; 0x803535 <Menu+0x1>
				break;
    4814:	00 00       	nop

		//////////////////////////////////////////////////////////////////////////
		//							Pi Demo functions							//
		//////////////////////////////////////////////////////////////////////////
		
		if (Menu == Menu_Demo){
    4816:	80 91 34 35 	lds	r24, 0x3534	; 0x803534 <Menu>
    481a:	90 91 35 35 	lds	r25, 0x3535	; 0x803535 <Menu+0x1>
    481e:	01 97       	sbiw	r24, 0x01	; 1
    4820:	61 f4       	brne	.+24     	; 0x483a <vUserInterface+0x53c>
			if (ButtonState == 8) {	//Leave Demo - back to Start screen
    4822:	8d 81       	ldd	r24, Y+5	; 0x05
    4824:	9e 81       	ldd	r25, Y+6	; 0x06
    4826:	af 81       	ldd	r26, Y+7	; 0x07
    4828:	b8 85       	ldd	r27, Y+8	; 0x08
    482a:	08 97       	sbiw	r24, 0x08	; 8
    482c:	a1 05       	cpc	r26, r1
    482e:	b1 05       	cpc	r27, r1
    4830:	21 f4       	brne	.+8      	; 0x483a <vUserInterface+0x53c>
					Menu = Menu_Main;
    4832:	10 92 34 35 	sts	0x3534, r1	; 0x803534 <Menu>
    4836:	10 92 35 35 	sts	0x3535, r1	; 0x803535 <Menu+0x1>
		
		//////////////////////////////////////////////////////////////////////////
		//						Leibniz's Pi functions							//
		//////////////////////////////////////////////////////////////////////////
		
		if(Menu == Menu_Leibniz){
    483a:	80 91 34 35 	lds	r24, 0x3534	; 0x803534 <Menu>
    483e:	90 91 35 35 	lds	r25, 0x3535	; 0x803535 <Menu+0x1>
    4842:	02 97       	sbiw	r24, 0x02	; 2
    4844:	09 f0       	breq	.+2      	; 0x4848 <vUserInterface+0x54a>
    4846:	a1 c1       	rjmp	.+834    	; 0x4b8a <vUserInterface+0x88c>
			switch (ButtonState){
    4848:	8d 81       	ldd	r24, Y+5	; 0x05
    484a:	9e 81       	ldd	r25, Y+6	; 0x06
    484c:	af 81       	ldd	r26, Y+7	; 0x07
    484e:	b8 85       	ldd	r27, Y+8	; 0x08
    4850:	82 30       	cpi	r24, 0x02	; 2
    4852:	91 05       	cpc	r25, r1
    4854:	a1 05       	cpc	r26, r1
    4856:	b1 05       	cpc	r27, r1
    4858:	09 f4       	brne	.+2      	; 0x485c <vUserInterface+0x55e>
    485a:	d4 c0       	rjmp	.+424    	; 0x4a04 <vUserInterface+0x706>
    485c:	83 30       	cpi	r24, 0x03	; 3
    485e:	91 05       	cpc	r25, r1
    4860:	a1 05       	cpc	r26, r1
    4862:	b1 05       	cpc	r27, r1
    4864:	28 f4       	brcc	.+10     	; 0x4870 <vUserInterface+0x572>
    4866:	01 97       	sbiw	r24, 0x01	; 1
    4868:	a1 05       	cpc	r26, r1
    486a:	b1 05       	cpc	r27, r1
    486c:	69 f0       	breq	.+26     	; 0x4888 <vUserInterface+0x58a>
    486e:	8d c1       	rjmp	.+794    	; 0x4b8a <vUserInterface+0x88c>
    4870:	84 30       	cpi	r24, 0x04	; 4
    4872:	91 05       	cpc	r25, r1
    4874:	a1 05       	cpc	r26, r1
    4876:	b1 05       	cpc	r27, r1
    4878:	09 f4       	brne	.+2      	; 0x487c <vUserInterface+0x57e>
    487a:	fd c0       	rjmp	.+506    	; 0x4a76 <vUserInterface+0x778>
    487c:	08 97       	sbiw	r24, 0x08	; 8
    487e:	a1 05       	cpc	r26, r1
    4880:	b1 05       	cpc	r27, r1
    4882:	09 f4       	brne	.+2      	; 0x4886 <vUserInterface+0x588>
    4884:	3f c1       	rjmp	.+638    	; 0x4b04 <vUserInterface+0x806>
    4886:	81 c1       	rjmp	.+770    	; 0x4b8a <vUserInterface+0x88c>
				case 1:
				if (Bits == 0){	
    4888:	80 91 74 35 	lds	r24, 0x3574	; 0x803574 <Bits>
    488c:	90 91 75 35 	lds	r25, 0x3575	; 0x803575 <Bits+0x1>
    4890:	a0 91 76 35 	lds	r26, 0x3576	; 0x803576 <Bits+0x2>
    4894:	b0 91 77 35 	lds	r27, 0x3577	; 0x803577 <Bits+0x3>
    4898:	89 2b       	or	r24, r25
    489a:	8a 2b       	or	r24, r26
    489c:	8b 2b       	or	r24, r27
    489e:	f1 f4       	brne	.+60     	; 0x48dc <vUserInterface+0x5de>
					//First start since Main screen
					xEventGroupSetBits(evStartStopEvents, EV_START_LEIBNIZ);	//Set startbit
    48a0:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    48a4:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    48a8:	41 e0       	ldi	r20, 0x01	; 1
    48aa:	50 e0       	ldi	r21, 0x00	; 0
    48ac:	60 e0       	ldi	r22, 0x00	; 0
    48ae:	70 e0       	ldi	r23, 0x00	; 0
    48b0:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
					Bits = xEventGroupGetBits(evStartStopEvents);				//Save eventbits as value
    48b4:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    48b8:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    48bc:	40 e0       	ldi	r20, 0x00	; 0
    48be:	50 e0       	ldi	r21, 0x00	; 0
    48c0:	ba 01       	movw	r22, r20
    48c2:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    48c6:	dc 01       	movw	r26, r24
    48c8:	cb 01       	movw	r24, r22
    48ca:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <Bits>
    48ce:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <Bits+0x1>
    48d2:	a0 93 76 35 	sts	0x3576, r26	; 0x803576 <Bits+0x2>
    48d6:	b0 93 77 35 	sts	0x3577, r27	; 0x803577 <Bits+0x3>
				}
				else if (Bits & EV_RESET_LEIBNIZ){	
					//Restart Leibniz after reset
					vTaskResume(LeibnizTask);									//Resume where stopped
				}
				break;
    48da:	52 c1       	rjmp	.+676    	; 0x4b80 <vUserInterface+0x882>
				if (Bits == 0){	
					//First start since Main screen
					xEventGroupSetBits(evStartStopEvents, EV_START_LEIBNIZ);	//Set startbit
					Bits = xEventGroupGetBits(evStartStopEvents);				//Save eventbits as value
				}
				else if (Bits & (EV_STOPPED_NILA | EV_STOP_NILA)){				//Start if switched from Nilakantha's Pi
    48dc:	80 91 74 35 	lds	r24, 0x3574	; 0x803574 <Bits>
    48e0:	90 91 75 35 	lds	r25, 0x3575	; 0x803575 <Bits+0x1>
    48e4:	a0 91 76 35 	lds	r26, 0x3576	; 0x803576 <Bits+0x2>
    48e8:	b0 91 77 35 	lds	r27, 0x3577	; 0x803577 <Bits+0x3>
    48ec:	88 72       	andi	r24, 0x28	; 40
    48ee:	99 27       	eor	r25, r25
    48f0:	aa 27       	eor	r26, r26
    48f2:	bb 27       	eor	r27, r27
    48f4:	89 2b       	or	r24, r25
    48f6:	8a 2b       	or	r24, r26
    48f8:	8b 2b       	or	r24, r27
    48fa:	71 f1       	breq	.+92     	; 0x4958 <vUserInterface+0x65a>
					xEventGroupClearBits(evStartStopEvents, EV_CLEAR);			//Clear all Bits from Event
    48fc:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4900:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4904:	4f ef       	ldi	r20, 0xFF	; 255
    4906:	50 e0       	ldi	r21, 0x00	; 0
    4908:	60 e0       	ldi	r22, 0x00	; 0
    490a:	70 e0       	ldi	r23, 0x00	; 0
    490c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
					xEventGroupSetBits(evStartStopEvents, EV_START_LEIBNIZ);	//Set startbit
    4910:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4914:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4918:	41 e0       	ldi	r20, 0x01	; 1
    491a:	50 e0       	ldi	r21, 0x00	; 0
    491c:	60 e0       	ldi	r22, 0x00	; 0
    491e:	70 e0       	ldi	r23, 0x00	; 0
    4920:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
					Bits = xEventGroupGetBits(evStartStopEvents);				//Save eventbits as value
    4924:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4928:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    492c:	40 e0       	ldi	r20, 0x00	; 0
    492e:	50 e0       	ldi	r21, 0x00	; 0
    4930:	ba 01       	movw	r22, r20
    4932:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    4936:	dc 01       	movw	r26, r24
    4938:	cb 01       	movw	r24, r22
    493a:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <Bits>
    493e:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <Bits+0x1>
    4942:	a0 93 76 35 	sts	0x3576, r26	; 0x803576 <Bits+0x2>
    4946:	b0 93 77 35 	sts	0x3577, r27	; 0x803577 <Bits+0x3>
					vTaskResume(LeibnizTask);									//Resume where stopped
    494a:	80 91 66 35 	lds	r24, 0x3566	; 0x803566 <LeibnizTask>
    494e:	90 91 67 35 	lds	r25, 0x3567	; 0x803567 <LeibnizTask+0x1>
    4952:	0e 94 8c 14 	call	0x2918	; 0x2918 <vTaskResume>
				}
				else if (Bits & EV_RESET_LEIBNIZ){	
					//Restart Leibniz after reset
					vTaskResume(LeibnizTask);									//Resume where stopped
				}
				break;
    4956:	14 c1       	rjmp	.+552    	; 0x4b80 <vUserInterface+0x882>
					xEventGroupClearBits(evStartStopEvents, EV_CLEAR);			//Clear all Bits from Event
					xEventGroupSetBits(evStartStopEvents, EV_START_LEIBNIZ);	//Set startbit
					Bits = xEventGroupGetBits(evStartStopEvents);				//Save eventbits as value
					vTaskResume(LeibnizTask);									//Resume where stopped
				}
				else if (Bits & (EV_STOP_LEIBNIZ | EV_STOPPED_LEIBNIZ)){ 
    4958:	80 91 74 35 	lds	r24, 0x3574	; 0x803574 <Bits>
    495c:	90 91 75 35 	lds	r25, 0x3575	; 0x803575 <Bits+0x1>
    4960:	a0 91 76 35 	lds	r26, 0x3576	; 0x803576 <Bits+0x2>
    4964:	b0 91 77 35 	lds	r27, 0x3577	; 0x803577 <Bits+0x3>
    4968:	82 71       	andi	r24, 0x12	; 18
    496a:	99 27       	eor	r25, r25
    496c:	aa 27       	eor	r26, r26
    496e:	bb 27       	eor	r27, r27
    4970:	89 2b       	or	r24, r25
    4972:	8a 2b       	or	r24, r26
    4974:	8b 2b       	or	r24, r27
    4976:	71 f1       	breq	.+92     	; 0x49d4 <vUserInterface+0x6d6>
					//Restart Leibniz calculation if stopped
					xEventGroupClearBits(evStartStopEvents, EV_CLEAR);			//Clear all Bits from Event
    4978:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    497c:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4980:	4f ef       	ldi	r20, 0xFF	; 255
    4982:	50 e0       	ldi	r21, 0x00	; 0
    4984:	60 e0       	ldi	r22, 0x00	; 0
    4986:	70 e0       	ldi	r23, 0x00	; 0
    4988:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
					xEventGroupSetBits(evStartStopEvents, EV_START_LEIBNIZ);	//Set startbit
    498c:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4990:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4994:	41 e0       	ldi	r20, 0x01	; 1
    4996:	50 e0       	ldi	r21, 0x00	; 0
    4998:	60 e0       	ldi	r22, 0x00	; 0
    499a:	70 e0       	ldi	r23, 0x00	; 0
    499c:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
					Bits = xEventGroupGetBits(evStartStopEvents);				//Save eventbits as value
    49a0:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    49a4:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    49a8:	40 e0       	ldi	r20, 0x00	; 0
    49aa:	50 e0       	ldi	r21, 0x00	; 0
    49ac:	ba 01       	movw	r22, r20
    49ae:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    49b2:	dc 01       	movw	r26, r24
    49b4:	cb 01       	movw	r24, r22
    49b6:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <Bits>
    49ba:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <Bits+0x1>
    49be:	a0 93 76 35 	sts	0x3576, r26	; 0x803576 <Bits+0x2>
    49c2:	b0 93 77 35 	sts	0x3577, r27	; 0x803577 <Bits+0x3>
					vTaskResume(LeibnizTask);									//Resume where stopped
    49c6:	80 91 66 35 	lds	r24, 0x3566	; 0x803566 <LeibnizTask>
    49ca:	90 91 67 35 	lds	r25, 0x3567	; 0x803567 <LeibnizTask+0x1>
    49ce:	0e 94 8c 14 	call	0x2918	; 0x2918 <vTaskResume>
				}
				else if (Bits & EV_RESET_LEIBNIZ){	
					//Restart Leibniz after reset
					vTaskResume(LeibnizTask);									//Resume where stopped
				}
				break;
    49d2:	d6 c0       	rjmp	.+428    	; 0x4b80 <vUserInterface+0x882>
					xEventGroupClearBits(evStartStopEvents, EV_CLEAR);			//Clear all Bits from Event
					xEventGroupSetBits(evStartStopEvents, EV_START_LEIBNIZ);	//Set startbit
					Bits = xEventGroupGetBits(evStartStopEvents);				//Save eventbits as value
					vTaskResume(LeibnizTask);									//Resume where stopped
				}
				else if (Bits & EV_RESET_LEIBNIZ){	
    49d4:	80 91 74 35 	lds	r24, 0x3574	; 0x803574 <Bits>
    49d8:	90 91 75 35 	lds	r25, 0x3575	; 0x803575 <Bits+0x1>
    49dc:	a0 91 76 35 	lds	r26, 0x3576	; 0x803576 <Bits+0x2>
    49e0:	b0 91 77 35 	lds	r27, 0x3577	; 0x803577 <Bits+0x3>
    49e4:	80 74       	andi	r24, 0x40	; 64
    49e6:	99 27       	eor	r25, r25
    49e8:	aa 27       	eor	r26, r26
    49ea:	bb 27       	eor	r27, r27
    49ec:	89 2b       	or	r24, r25
    49ee:	8a 2b       	or	r24, r26
    49f0:	8b 2b       	or	r24, r27
    49f2:	09 f4       	brne	.+2      	; 0x49f6 <vUserInterface+0x6f8>
    49f4:	c5 c0       	rjmp	.+394    	; 0x4b80 <vUserInterface+0x882>
					//Restart Leibniz after reset
					vTaskResume(LeibnizTask);									//Resume where stopped
    49f6:	80 91 66 35 	lds	r24, 0x3566	; 0x803566 <LeibnizTask>
    49fa:	90 91 67 35 	lds	r25, 0x3567	; 0x803567 <LeibnizTask+0x1>
    49fe:	0e 94 8c 14 	call	0x2918	; 0x2918 <vTaskResume>
				}
				break;
    4a02:	be c0       	rjmp	.+380    	; 0x4b80 <vUserInterface+0x882>

				case 2:
				if(Bits & (EV_START_LEIBNIZ | EV_STOP_NILA)){
    4a04:	80 91 74 35 	lds	r24, 0x3574	; 0x803574 <Bits>
    4a08:	90 91 75 35 	lds	r25, 0x3575	; 0x803575 <Bits+0x1>
    4a0c:	a0 91 76 35 	lds	r26, 0x3576	; 0x803576 <Bits+0x2>
    4a10:	b0 91 77 35 	lds	r27, 0x3577	; 0x803577 <Bits+0x3>
    4a14:	89 70       	andi	r24, 0x09	; 9
    4a16:	99 27       	eor	r25, r25
    4a18:	aa 27       	eor	r26, r26
    4a1a:	bb 27       	eor	r27, r27
    4a1c:	89 2b       	or	r24, r25
    4a1e:	8a 2b       	or	r24, r26
    4a20:	8b 2b       	or	r24, r27
    4a22:	09 f4       	brne	.+2      	; 0x4a26 <vUserInterface+0x728>
    4a24:	af c0       	rjmp	.+350    	; 0x4b84 <vUserInterface+0x886>
					// Stop Leibniz calculation
					xEventGroupClearBits(evStartStopEvents, EV_CLEAR);			//Clear all Bits from Event
    4a26:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4a2a:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4a2e:	4f ef       	ldi	r20, 0xFF	; 255
    4a30:	50 e0       	ldi	r21, 0x00	; 0
    4a32:	60 e0       	ldi	r22, 0x00	; 0
    4a34:	70 e0       	ldi	r23, 0x00	; 0
    4a36:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
					xEventGroupSetBits(evStartStopEvents, EV_STOP_LEIBNIZ);		//Set Stopbit
    4a3a:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4a3e:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4a42:	42 e0       	ldi	r20, 0x02	; 2
    4a44:	50 e0       	ldi	r21, 0x00	; 0
    4a46:	60 e0       	ldi	r22, 0x00	; 0
    4a48:	70 e0       	ldi	r23, 0x00	; 0
    4a4a:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
					Bits = xEventGroupGetBits(evStartStopEvents);				//Save eventbits as value
    4a4e:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4a52:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4a56:	40 e0       	ldi	r20, 0x00	; 0
    4a58:	50 e0       	ldi	r21, 0x00	; 0
    4a5a:	ba 01       	movw	r22, r20
    4a5c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    4a60:	dc 01       	movw	r26, r24
    4a62:	cb 01       	movw	r24, r22
    4a64:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <Bits>
    4a68:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <Bits+0x1>
    4a6c:	a0 93 76 35 	sts	0x3576, r26	; 0x803576 <Bits+0x2>
    4a70:	b0 93 77 35 	sts	0x3577, r27	; 0x803577 <Bits+0x3>
				}
				break;
    4a74:	87 c0       	rjmp	.+270    	; 0x4b84 <vUserInterface+0x886>

				case 4:
				if (Bits) {
    4a76:	80 91 74 35 	lds	r24, 0x3574	; 0x803574 <Bits>
    4a7a:	90 91 75 35 	lds	r25, 0x3575	; 0x803575 <Bits+0x1>
    4a7e:	a0 91 76 35 	lds	r26, 0x3576	; 0x803576 <Bits+0x2>
    4a82:	b0 91 77 35 	lds	r27, 0x3577	; 0x803577 <Bits+0x3>
    4a86:	89 2b       	or	r24, r25
    4a88:	8a 2b       	or	r24, r26
    4a8a:	8b 2b       	or	r24, r27
    4a8c:	09 f4       	brne	.+2      	; 0x4a90 <vUserInterface+0x792>
    4a8e:	7c c0       	rjmp	.+248    	; 0x4b88 <vUserInterface+0x88a>
					// Reset - set Leibniz calculation to 0
					xEventGroupClearBits(evStartStopEvents, EV_CLEAR);			//Clear all Bits from Event
    4a90:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4a94:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4a98:	4f ef       	ldi	r20, 0xFF	; 255
    4a9a:	50 e0       	ldi	r21, 0x00	; 0
    4a9c:	60 e0       	ldi	r22, 0x00	; 0
    4a9e:	70 e0       	ldi	r23, 0x00	; 0
    4aa0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
					xEventGroupSetBits(evStartStopEvents, EV_RESET_LEIBNIZ);	//Set Resetbit
    4aa4:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4aa8:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4aac:	40 e4       	ldi	r20, 0x40	; 64
    4aae:	50 e0       	ldi	r21, 0x00	; 0
    4ab0:	60 e0       	ldi	r22, 0x00	; 0
    4ab2:	70 e0       	ldi	r23, 0x00	; 0
    4ab4:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
					Bits = xEventGroupGetBits(evStartStopEvents);				//Save eventbits as value
    4ab8:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4abc:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4ac0:	40 e0       	ldi	r20, 0x00	; 0
    4ac2:	50 e0       	ldi	r21, 0x00	; 0
    4ac4:	ba 01       	movw	r22, r20
    4ac6:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    4aca:	dc 01       	movw	r26, r24
    4acc:	cb 01       	movw	r24, r22
    4ace:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <Bits>
    4ad2:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <Bits+0x1>
    4ad6:	a0 93 76 35 	sts	0x3576, r26	; 0x803576 <Bits+0x2>
    4ada:	b0 93 77 35 	sts	0x3577, r27	; 0x803577 <Bits+0x3>
						sprintf(&LeibnizPiString[0], " ");						//Write " " into String, Display clears Line
    4ade:	80 e2       	ldi	r24, 0x20	; 32
    4ae0:	90 e0       	ldi	r25, 0x00	; 0
    4ae2:	80 93 9b 35 	sts	0x359B, r24	; 0x80359b <LeibnizPiString>
    4ae6:	90 93 9c 35 	sts	0x359C, r25	; 0x80359c <LeibnizPiString+0x1>
						sprintf(&LeibnizTimeString[0], " ");					//Write " " into String, Display clears Line
    4aea:	80 e2       	ldi	r24, 0x20	; 32
    4aec:	90 e0       	ldi	r25, 0x00	; 0
    4aee:	80 93 63 35 	sts	0x3563, r24	; 0x803563 <LeibnizTimeString>
    4af2:	90 93 64 35 	sts	0x3564, r25	; 0x803564 <LeibnizTimeString+0x1>
						sprintf(&LeibnizExactTime[0], " ");						//Write " " into String, Display clears Line
    4af6:	80 e2       	ldi	r24, 0x20	; 32
    4af8:	90 e0       	ldi	r25, 0x00	; 0
    4afa:	80 93 88 35 	sts	0x3588, r24	; 0x803588 <LeibnizExactTime>
    4afe:	90 93 89 35 	sts	0x3589, r25	; 0x803589 <LeibnizExactTime+0x1>
				}
				break;
    4b02:	42 c0       	rjmp	.+132    	; 0x4b88 <vUserInterface+0x88a>

				case 8:
					// Stop Leibniz calculation and switch to Nilakantha calculation
					xEventGroupClearBits(evStartStopEvents, EV_CLEAR);			//Clear all Bits from Event
    4b04:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4b08:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4b0c:	4f ef       	ldi	r20, 0xFF	; 255
    4b0e:	50 e0       	ldi	r21, 0x00	; 0
    4b10:	60 e0       	ldi	r22, 0x00	; 0
    4b12:	70 e0       	ldi	r23, 0x00	; 0
    4b14:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
					xEventGroupSetBits(evStartStopEvents, EV_STOP_LEIBNIZ);		//Set Stopbit
    4b18:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4b1c:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4b20:	42 e0       	ldi	r20, 0x02	; 2
    4b22:	50 e0       	ldi	r21, 0x00	; 0
    4b24:	60 e0       	ldi	r22, 0x00	; 0
    4b26:	70 e0       	ldi	r23, 0x00	; 0
    4b28:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
					Bits = xEventGroupGetBits(evStartStopEvents);				//Save eventbits as value
    4b2c:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4b30:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4b34:	40 e0       	ldi	r20, 0x00	; 0
    4b36:	50 e0       	ldi	r21, 0x00	; 0
    4b38:	ba 01       	movw	r22, r20
    4b3a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    4b3e:	dc 01       	movw	r26, r24
    4b40:	cb 01       	movw	r24, r22
    4b42:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <Bits>
    4b46:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <Bits+0x1>
    4b4a:	a0 93 76 35 	sts	0x3576, r26	; 0x803576 <Bits+0x2>
    4b4e:	b0 93 77 35 	sts	0x3577, r27	; 0x803577 <Bits+0x3>
					Menu = Menu_Nilakantha;										//Set Menu to 3 to switch to Nilakantha
    4b52:	83 e0       	ldi	r24, 0x03	; 3
    4b54:	90 e0       	ldi	r25, 0x00	; 0
    4b56:	80 93 34 35 	sts	0x3534, r24	; 0x803534 <Menu>
    4b5a:	90 93 35 35 	sts	0x3535, r25	; 0x803535 <Menu+0x1>
					ButtonState = xEventGroupClearBits(evButtonEvents, EVBUTTONS_CLEAR);	//Clear Buttonstate to avoid switching back imediatly
    4b5e:	80 91 92 35 	lds	r24, 0x3592	; 0x803592 <evButtonEvents>
    4b62:	90 91 93 35 	lds	r25, 0x3593	; 0x803593 <evButtonEvents+0x1>
    4b66:	4f ef       	ldi	r20, 0xFF	; 255
    4b68:	50 e0       	ldi	r21, 0x00	; 0
    4b6a:	60 e0       	ldi	r22, 0x00	; 0
    4b6c:	70 e0       	ldi	r23, 0x00	; 0
    4b6e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    4b72:	dc 01       	movw	r26, r24
    4b74:	cb 01       	movw	r24, r22
    4b76:	8d 83       	std	Y+5, r24	; 0x05
    4b78:	9e 83       	std	Y+6, r25	; 0x06
    4b7a:	af 83       	std	Y+7, r26	; 0x07
    4b7c:	b8 87       	std	Y+8, r27	; 0x08
				break;
    4b7e:	05 c0       	rjmp	.+10     	; 0x4b8a <vUserInterface+0x88c>
				}
				else if (Bits & EV_RESET_LEIBNIZ){	
					//Restart Leibniz after reset
					vTaskResume(LeibnizTask);									//Resume where stopped
				}
				break;
    4b80:	00 00       	nop
    4b82:	03 c0       	rjmp	.+6      	; 0x4b8a <vUserInterface+0x88c>
					// Stop Leibniz calculation
					xEventGroupClearBits(evStartStopEvents, EV_CLEAR);			//Clear all Bits from Event
					xEventGroupSetBits(evStartStopEvents, EV_STOP_LEIBNIZ);		//Set Stopbit
					Bits = xEventGroupGetBits(evStartStopEvents);				//Save eventbits as value
				}
				break;
    4b84:	00 00       	nop
    4b86:	01 c0       	rjmp	.+2      	; 0x4b8a <vUserInterface+0x88c>
					Bits = xEventGroupGetBits(evStartStopEvents);				//Save eventbits as value
						sprintf(&LeibnizPiString[0], " ");						//Write " " into String, Display clears Line
						sprintf(&LeibnizTimeString[0], " ");					//Write " " into String, Display clears Line
						sprintf(&LeibnizExactTime[0], " ");						//Write " " into String, Display clears Line
				}
				break;
    4b88:	00 00       	nop
		
		//////////////////////////////////////////////////////////////////////////
		//						Nilakantha's Pi functions						//
		//////////////////////////////////////////////////////////////////////////
		
		if (Menu == Menu_Nilakantha) {
    4b8a:	80 91 34 35 	lds	r24, 0x3534	; 0x803534 <Menu>
    4b8e:	90 91 35 35 	lds	r25, 0x3535	; 0x803535 <Menu+0x1>
    4b92:	03 97       	sbiw	r24, 0x03	; 3
    4b94:	09 f0       	breq	.+2      	; 0x4b98 <vUserInterface+0x89a>
    4b96:	a1 c1       	rjmp	.+834    	; 0x4eda <vUserInterface+0xbdc>
			switch (ButtonState) {
    4b98:	8d 81       	ldd	r24, Y+5	; 0x05
    4b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    4b9c:	af 81       	ldd	r26, Y+7	; 0x07
    4b9e:	b8 85       	ldd	r27, Y+8	; 0x08
    4ba0:	82 30       	cpi	r24, 0x02	; 2
    4ba2:	91 05       	cpc	r25, r1
    4ba4:	a1 05       	cpc	r26, r1
    4ba6:	b1 05       	cpc	r27, r1
    4ba8:	09 f4       	brne	.+2      	; 0x4bac <vUserInterface+0x8ae>
    4baa:	d4 c0       	rjmp	.+424    	; 0x4d54 <vUserInterface+0xa56>
    4bac:	83 30       	cpi	r24, 0x03	; 3
    4bae:	91 05       	cpc	r25, r1
    4bb0:	a1 05       	cpc	r26, r1
    4bb2:	b1 05       	cpc	r27, r1
    4bb4:	28 f4       	brcc	.+10     	; 0x4bc0 <vUserInterface+0x8c2>
    4bb6:	01 97       	sbiw	r24, 0x01	; 1
    4bb8:	a1 05       	cpc	r26, r1
    4bba:	b1 05       	cpc	r27, r1
    4bbc:	69 f0       	breq	.+26     	; 0x4bd8 <vUserInterface+0x8da>
    4bbe:	8d c1       	rjmp	.+794    	; 0x4eda <vUserInterface+0xbdc>
    4bc0:	84 30       	cpi	r24, 0x04	; 4
    4bc2:	91 05       	cpc	r25, r1
    4bc4:	a1 05       	cpc	r26, r1
    4bc6:	b1 05       	cpc	r27, r1
    4bc8:	09 f4       	brne	.+2      	; 0x4bcc <vUserInterface+0x8ce>
    4bca:	fd c0       	rjmp	.+506    	; 0x4dc6 <vUserInterface+0xac8>
    4bcc:	08 97       	sbiw	r24, 0x08	; 8
    4bce:	a1 05       	cpc	r26, r1
    4bd0:	b1 05       	cpc	r27, r1
    4bd2:	09 f4       	brne	.+2      	; 0x4bd6 <vUserInterface+0x8d8>
    4bd4:	3f c1       	rjmp	.+638    	; 0x4e54 <vUserInterface+0xb56>
    4bd6:	81 c1       	rjmp	.+770    	; 0x4eda <vUserInterface+0xbdc>
				case 1:
					if (Bits == 0){	//First start since Main screen
    4bd8:	80 91 74 35 	lds	r24, 0x3574	; 0x803574 <Bits>
    4bdc:	90 91 75 35 	lds	r25, 0x3575	; 0x803575 <Bits+0x1>
    4be0:	a0 91 76 35 	lds	r26, 0x3576	; 0x803576 <Bits+0x2>
    4be4:	b0 91 77 35 	lds	r27, 0x3577	; 0x803577 <Bits+0x3>
    4be8:	89 2b       	or	r24, r25
    4bea:	8a 2b       	or	r24, r26
    4bec:	8b 2b       	or	r24, r27
    4bee:	f1 f4       	brne	.+60     	; 0x4c2c <vUserInterface+0x92e>
						xEventGroupSetBits(evStartStopEvents, EV_START_NILA);	//Set startbit
    4bf0:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4bf4:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4bf8:	44 e0       	ldi	r20, 0x04	; 4
    4bfa:	50 e0       	ldi	r21, 0x00	; 0
    4bfc:	60 e0       	ldi	r22, 0x00	; 0
    4bfe:	70 e0       	ldi	r23, 0x00	; 0
    4c00:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
						Bits = xEventGroupGetBits(evStartStopEvents);			//Save eventbits as value
    4c04:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4c08:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4c0c:	40 e0       	ldi	r20, 0x00	; 0
    4c0e:	50 e0       	ldi	r21, 0x00	; 0
    4c10:	ba 01       	movw	r22, r20
    4c12:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    4c16:	dc 01       	movw	r26, r24
    4c18:	cb 01       	movw	r24, r22
    4c1a:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <Bits>
    4c1e:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <Bits+0x1>
    4c22:	a0 93 76 35 	sts	0x3576, r26	; 0x803576 <Bits+0x2>
    4c26:	b0 93 77 35 	sts	0x3577, r27	; 0x803577 <Bits+0x3>
					} 
					else if (Bits & EV_RESET_NILA) {
						// Restart Nilakantha calculation if reseted
						vTaskResume(NilakanthaTask);							//Resume where stopped
					}
					break;
    4c2a:	52 c1       	rjmp	.+676    	; 0x4ed0 <vUserInterface+0xbd2>
				case 1:
					if (Bits == 0){	//First start since Main screen
						xEventGroupSetBits(evStartStopEvents, EV_START_NILA);	//Set startbit
						Bits = xEventGroupGetBits(evStartStopEvents);			//Save eventbits as value
					}
					else if (Bits & (EV_STOP_LEIBNIZ | EV_STOPPED_LEIBNIZ)){	//Start if switched from Leibniz's's Pi
    4c2c:	80 91 74 35 	lds	r24, 0x3574	; 0x803574 <Bits>
    4c30:	90 91 75 35 	lds	r25, 0x3575	; 0x803575 <Bits+0x1>
    4c34:	a0 91 76 35 	lds	r26, 0x3576	; 0x803576 <Bits+0x2>
    4c38:	b0 91 77 35 	lds	r27, 0x3577	; 0x803577 <Bits+0x3>
    4c3c:	82 71       	andi	r24, 0x12	; 18
    4c3e:	99 27       	eor	r25, r25
    4c40:	aa 27       	eor	r26, r26
    4c42:	bb 27       	eor	r27, r27
    4c44:	89 2b       	or	r24, r25
    4c46:	8a 2b       	or	r24, r26
    4c48:	8b 2b       	or	r24, r27
    4c4a:	71 f1       	breq	.+92     	; 0x4ca8 <vUserInterface+0x9aa>
						xEventGroupClearBits(evStartStopEvents, EV_CLEAR);		//Clear all Bits from Event
    4c4c:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4c50:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4c54:	4f ef       	ldi	r20, 0xFF	; 255
    4c56:	50 e0       	ldi	r21, 0x00	; 0
    4c58:	60 e0       	ldi	r22, 0x00	; 0
    4c5a:	70 e0       	ldi	r23, 0x00	; 0
    4c5c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
						xEventGroupSetBits(evStartStopEvents, EV_START_NILA);	//Set startbit
    4c60:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4c64:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4c68:	44 e0       	ldi	r20, 0x04	; 4
    4c6a:	50 e0       	ldi	r21, 0x00	; 0
    4c6c:	60 e0       	ldi	r22, 0x00	; 0
    4c6e:	70 e0       	ldi	r23, 0x00	; 0
    4c70:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
						Bits = xEventGroupGetBits(evStartStopEvents);			//Save eventbits as value
    4c74:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4c78:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4c7c:	40 e0       	ldi	r20, 0x00	; 0
    4c7e:	50 e0       	ldi	r21, 0x00	; 0
    4c80:	ba 01       	movw	r22, r20
    4c82:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    4c86:	dc 01       	movw	r26, r24
    4c88:	cb 01       	movw	r24, r22
    4c8a:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <Bits>
    4c8e:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <Bits+0x1>
    4c92:	a0 93 76 35 	sts	0x3576, r26	; 0x803576 <Bits+0x2>
    4c96:	b0 93 77 35 	sts	0x3577, r27	; 0x803577 <Bits+0x3>
						vTaskResume(NilakanthaTask);							//Resume where stopped
    4c9a:	80 91 97 35 	lds	r24, 0x3597	; 0x803597 <NilakanthaTask>
    4c9e:	90 91 98 35 	lds	r25, 0x3598	; 0x803598 <NilakanthaTask+0x1>
    4ca2:	0e 94 8c 14 	call	0x2918	; 0x2918 <vTaskResume>
					} 
					else if (Bits & EV_RESET_NILA) {
						// Restart Nilakantha calculation if reseted
						vTaskResume(NilakanthaTask);							//Resume where stopped
					}
					break;
    4ca6:	14 c1       	rjmp	.+552    	; 0x4ed0 <vUserInterface+0xbd2>
						xEventGroupClearBits(evStartStopEvents, EV_CLEAR);		//Clear all Bits from Event
						xEventGroupSetBits(evStartStopEvents, EV_START_NILA);	//Set startbit
						Bits = xEventGroupGetBits(evStartStopEvents);			//Save eventbits as value
						vTaskResume(NilakanthaTask);							//Resume where stopped
					}
					else if (Bits & EV_STOPPED_NILA) {
    4ca8:	80 91 74 35 	lds	r24, 0x3574	; 0x803574 <Bits>
    4cac:	90 91 75 35 	lds	r25, 0x3575	; 0x803575 <Bits+0x1>
    4cb0:	a0 91 76 35 	lds	r26, 0x3576	; 0x803576 <Bits+0x2>
    4cb4:	b0 91 77 35 	lds	r27, 0x3577	; 0x803577 <Bits+0x3>
    4cb8:	80 72       	andi	r24, 0x20	; 32
    4cba:	99 27       	eor	r25, r25
    4cbc:	aa 27       	eor	r26, r26
    4cbe:	bb 27       	eor	r27, r27
    4cc0:	89 2b       	or	r24, r25
    4cc2:	8a 2b       	or	r24, r26
    4cc4:	8b 2b       	or	r24, r27
    4cc6:	71 f1       	breq	.+92     	; 0x4d24 <vUserInterface+0xa26>
						// Restart Nilakantha calculation if stopped or stopped and reset
						xEventGroupClearBits(evStartStopEvents, EV_CLEAR);		//Clear all Bits from Event
    4cc8:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4ccc:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4cd0:	4f ef       	ldi	r20, 0xFF	; 255
    4cd2:	50 e0       	ldi	r21, 0x00	; 0
    4cd4:	60 e0       	ldi	r22, 0x00	; 0
    4cd6:	70 e0       	ldi	r23, 0x00	; 0
    4cd8:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
						xEventGroupSetBits(evStartStopEvents, EV_START_NILA);	//Set startbit
    4cdc:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4ce0:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4ce4:	44 e0       	ldi	r20, 0x04	; 4
    4ce6:	50 e0       	ldi	r21, 0x00	; 0
    4ce8:	60 e0       	ldi	r22, 0x00	; 0
    4cea:	70 e0       	ldi	r23, 0x00	; 0
    4cec:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
						Bits = xEventGroupGetBits(evStartStopEvents);			//Save eventbits as value
    4cf0:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4cf4:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4cf8:	40 e0       	ldi	r20, 0x00	; 0
    4cfa:	50 e0       	ldi	r21, 0x00	; 0
    4cfc:	ba 01       	movw	r22, r20
    4cfe:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    4d02:	dc 01       	movw	r26, r24
    4d04:	cb 01       	movw	r24, r22
    4d06:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <Bits>
    4d0a:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <Bits+0x1>
    4d0e:	a0 93 76 35 	sts	0x3576, r26	; 0x803576 <Bits+0x2>
    4d12:	b0 93 77 35 	sts	0x3577, r27	; 0x803577 <Bits+0x3>
						vTaskResume(NilakanthaTask);							//Resume where stopped
    4d16:	80 91 97 35 	lds	r24, 0x3597	; 0x803597 <NilakanthaTask>
    4d1a:	90 91 98 35 	lds	r25, 0x3598	; 0x803598 <NilakanthaTask+0x1>
    4d1e:	0e 94 8c 14 	call	0x2918	; 0x2918 <vTaskResume>
					} 
					else if (Bits & EV_RESET_NILA) {
						// Restart Nilakantha calculation if reseted
						vTaskResume(NilakanthaTask);							//Resume where stopped
					}
					break;
    4d22:	d6 c0       	rjmp	.+428    	; 0x4ed0 <vUserInterface+0xbd2>
						xEventGroupClearBits(evStartStopEvents, EV_CLEAR);		//Clear all Bits from Event
						xEventGroupSetBits(evStartStopEvents, EV_START_NILA);	//Set startbit
						Bits = xEventGroupGetBits(evStartStopEvents);			//Save eventbits as value
						vTaskResume(NilakanthaTask);							//Resume where stopped
					} 
					else if (Bits & EV_RESET_NILA) {
    4d24:	80 91 74 35 	lds	r24, 0x3574	; 0x803574 <Bits>
    4d28:	90 91 75 35 	lds	r25, 0x3575	; 0x803575 <Bits+0x1>
    4d2c:	a0 91 76 35 	lds	r26, 0x3576	; 0x803576 <Bits+0x2>
    4d30:	b0 91 77 35 	lds	r27, 0x3577	; 0x803577 <Bits+0x3>
    4d34:	80 78       	andi	r24, 0x80	; 128
    4d36:	99 27       	eor	r25, r25
    4d38:	aa 27       	eor	r26, r26
    4d3a:	bb 27       	eor	r27, r27
    4d3c:	89 2b       	or	r24, r25
    4d3e:	8a 2b       	or	r24, r26
    4d40:	8b 2b       	or	r24, r27
    4d42:	09 f4       	brne	.+2      	; 0x4d46 <vUserInterface+0xa48>
    4d44:	c5 c0       	rjmp	.+394    	; 0x4ed0 <vUserInterface+0xbd2>
						// Restart Nilakantha calculation if reseted
						vTaskResume(NilakanthaTask);							//Resume where stopped
    4d46:	80 91 97 35 	lds	r24, 0x3597	; 0x803597 <NilakanthaTask>
    4d4a:	90 91 98 35 	lds	r25, 0x3598	; 0x803598 <NilakanthaTask+0x1>
    4d4e:	0e 94 8c 14 	call	0x2918	; 0x2918 <vTaskResume>
					}
					break;
    4d52:	be c0       	rjmp	.+380    	; 0x4ed0 <vUserInterface+0xbd2>

				case 2:
				if(Bits & EV_START_NILA){
    4d54:	80 91 74 35 	lds	r24, 0x3574	; 0x803574 <Bits>
    4d58:	90 91 75 35 	lds	r25, 0x3575	; 0x803575 <Bits+0x1>
    4d5c:	a0 91 76 35 	lds	r26, 0x3576	; 0x803576 <Bits+0x2>
    4d60:	b0 91 77 35 	lds	r27, 0x3577	; 0x803577 <Bits+0x3>
    4d64:	84 70       	andi	r24, 0x04	; 4
    4d66:	99 27       	eor	r25, r25
    4d68:	aa 27       	eor	r26, r26
    4d6a:	bb 27       	eor	r27, r27
    4d6c:	89 2b       	or	r24, r25
    4d6e:	8a 2b       	or	r24, r26
    4d70:	8b 2b       	or	r24, r27
    4d72:	09 f4       	brne	.+2      	; 0x4d76 <vUserInterface+0xa78>
    4d74:	af c0       	rjmp	.+350    	; 0x4ed4 <vUserInterface+0xbd6>
						// Stop Nilakantha calculation
						xEventGroupClearBits(evStartStopEvents, EV_CLEAR);		//Clear all Bits from Event
    4d76:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4d7a:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4d7e:	4f ef       	ldi	r20, 0xFF	; 255
    4d80:	50 e0       	ldi	r21, 0x00	; 0
    4d82:	60 e0       	ldi	r22, 0x00	; 0
    4d84:	70 e0       	ldi	r23, 0x00	; 0
    4d86:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
						xEventGroupSetBits(evStartStopEvents, EV_STOP_NILA);	//Set Stopbit
    4d8a:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4d8e:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4d92:	48 e0       	ldi	r20, 0x08	; 8
    4d94:	50 e0       	ldi	r21, 0x00	; 0
    4d96:	60 e0       	ldi	r22, 0x00	; 0
    4d98:	70 e0       	ldi	r23, 0x00	; 0
    4d9a:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
						Bits = xEventGroupGetBits(evStartStopEvents);			//Save eventbits as value
    4d9e:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4da2:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4da6:	40 e0       	ldi	r20, 0x00	; 0
    4da8:	50 e0       	ldi	r21, 0x00	; 0
    4daa:	ba 01       	movw	r22, r20
    4dac:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    4db0:	dc 01       	movw	r26, r24
    4db2:	cb 01       	movw	r24, r22
    4db4:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <Bits>
    4db8:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <Bits+0x1>
    4dbc:	a0 93 76 35 	sts	0x3576, r26	; 0x803576 <Bits+0x2>
    4dc0:	b0 93 77 35 	sts	0x3577, r27	; 0x803577 <Bits+0x3>
					}
					break;
    4dc4:	87 c0       	rjmp	.+270    	; 0x4ed4 <vUserInterface+0xbd6>

				case 4:
					if (Bits){
    4dc6:	80 91 74 35 	lds	r24, 0x3574	; 0x803574 <Bits>
    4dca:	90 91 75 35 	lds	r25, 0x3575	; 0x803575 <Bits+0x1>
    4dce:	a0 91 76 35 	lds	r26, 0x3576	; 0x803576 <Bits+0x2>
    4dd2:	b0 91 77 35 	lds	r27, 0x3577	; 0x803577 <Bits+0x3>
    4dd6:	89 2b       	or	r24, r25
    4dd8:	8a 2b       	or	r24, r26
    4dda:	8b 2b       	or	r24, r27
    4ddc:	09 f4       	brne	.+2      	; 0x4de0 <vUserInterface+0xae2>
    4dde:	7c c0       	rjmp	.+248    	; 0x4ed8 <vUserInterface+0xbda>
						// Reset Nilakantha calculation to 0 if reseted or stopped
						xEventGroupClearBits(evStartStopEvents, EV_CLEAR);		//Clear all Bits from Event
    4de0:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4de4:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4de8:	4f ef       	ldi	r20, 0xFF	; 255
    4dea:	50 e0       	ldi	r21, 0x00	; 0
    4dec:	60 e0       	ldi	r22, 0x00	; 0
    4dee:	70 e0       	ldi	r23, 0x00	; 0
    4df0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
						xEventGroupSetBits(evStartStopEvents, EV_RESET_NILA);	//Set Resetbit
    4df4:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4df8:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4dfc:	40 e8       	ldi	r20, 0x80	; 128
    4dfe:	50 e0       	ldi	r21, 0x00	; 0
    4e00:	60 e0       	ldi	r22, 0x00	; 0
    4e02:	70 e0       	ldi	r23, 0x00	; 0
    4e04:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
						Bits = xEventGroupGetBits(evStartStopEvents);			//Save eventbits as value
    4e08:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4e0c:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4e10:	40 e0       	ldi	r20, 0x00	; 0
    4e12:	50 e0       	ldi	r21, 0x00	; 0
    4e14:	ba 01       	movw	r22, r20
    4e16:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    4e1a:	dc 01       	movw	r26, r24
    4e1c:	cb 01       	movw	r24, r22
    4e1e:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <Bits>
    4e22:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <Bits+0x1>
    4e26:	a0 93 76 35 	sts	0x3576, r26	; 0x803576 <Bits+0x2>
    4e2a:	b0 93 77 35 	sts	0x3577, r27	; 0x803577 <Bits+0x3>
						sprintf(&NilakanthaPiString[0], " ");					//Write " " into String, Display clears Line
    4e2e:	80 e2       	ldi	r24, 0x20	; 32
    4e30:	90 e0       	ldi	r25, 0x00	; 0
    4e32:	80 93 78 35 	sts	0x3578, r24	; 0x803578 <NilakanthaPiString>
    4e36:	90 93 79 35 	sts	0x3579, r25	; 0x803579 <NilakanthaPiString+0x1>
						sprintf(&NilakanthaTimeString[0], " ");					//Write " " into String, Display clears Line
    4e3a:	80 e2       	ldi	r24, 0x20	; 32
    4e3c:	90 e0       	ldi	r25, 0x00	; 0
    4e3e:	80 93 94 35 	sts	0x3594, r24	; 0x803594 <NilakanthaTimeString>
    4e42:	90 93 95 35 	sts	0x3595, r25	; 0x803595 <NilakanthaTimeString+0x1>
						sprintf(&NilakanthaExactTime[0], " ");					//Write " " into String, Display clears Line
    4e46:	80 e2       	ldi	r24, 0x20	; 32
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    4e4a:	80 93 68 35 	sts	0x3568, r24	; 0x803568 <NilakanthaExactTime>
    4e4e:	90 93 69 35 	sts	0x3569, r25	; 0x803569 <NilakanthaExactTime+0x1>
					}
					break;
    4e52:	42 c0       	rjmp	.+132    	; 0x4ed8 <vUserInterface+0xbda>

				case 8:
						// Stop Nikalantha calculation and switch to Leibniz calculation
						xEventGroupClearBits(evStartStopEvents, EV_CLEAR);		//Clear all Bits from Event
    4e54:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4e58:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4e5c:	4f ef       	ldi	r20, 0xFF	; 255
    4e5e:	50 e0       	ldi	r21, 0x00	; 0
    4e60:	60 e0       	ldi	r22, 0x00	; 0
    4e62:	70 e0       	ldi	r23, 0x00	; 0
    4e64:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
						xEventGroupSetBits(evStartStopEvents, EV_STOP_NILA);	//Set Stopbit
    4e68:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4e6c:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4e70:	48 e0       	ldi	r20, 0x08	; 8
    4e72:	50 e0       	ldi	r21, 0x00	; 0
    4e74:	60 e0       	ldi	r22, 0x00	; 0
    4e76:	70 e0       	ldi	r23, 0x00	; 0
    4e78:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
						Bits = xEventGroupGetBits(evStartStopEvents);			//Save eventbits as value
    4e7c:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    4e80:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    4e84:	40 e0       	ldi	r20, 0x00	; 0
    4e86:	50 e0       	ldi	r21, 0x00	; 0
    4e88:	ba 01       	movw	r22, r20
    4e8a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    4e8e:	dc 01       	movw	r26, r24
    4e90:	cb 01       	movw	r24, r22
    4e92:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <Bits>
    4e96:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <Bits+0x1>
    4e9a:	a0 93 76 35 	sts	0x3576, r26	; 0x803576 <Bits+0x2>
    4e9e:	b0 93 77 35 	sts	0x3577, r27	; 0x803577 <Bits+0x3>
						Menu = Menu_Leibniz;									//Set Menu to 2 to switch to Leibniz
    4ea2:	82 e0       	ldi	r24, 0x02	; 2
    4ea4:	90 e0       	ldi	r25, 0x00	; 0
    4ea6:	80 93 34 35 	sts	0x3534, r24	; 0x803534 <Menu>
    4eaa:	90 93 35 35 	sts	0x3535, r25	; 0x803535 <Menu+0x1>
						ButtonState = xEventGroupClearBits(evButtonEvents, EVBUTTONS_CLEAR);	//Clear Buttonstate to avoid switching back imediatly
    4eae:	80 91 92 35 	lds	r24, 0x3592	; 0x803592 <evButtonEvents>
    4eb2:	90 91 93 35 	lds	r25, 0x3593	; 0x803593 <evButtonEvents+0x1>
    4eb6:	4f ef       	ldi	r20, 0xFF	; 255
    4eb8:	50 e0       	ldi	r21, 0x00	; 0
    4eba:	60 e0       	ldi	r22, 0x00	; 0
    4ebc:	70 e0       	ldi	r23, 0x00	; 0
    4ebe:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    4ec2:	dc 01       	movw	r26, r24
    4ec4:	cb 01       	movw	r24, r22
    4ec6:	8d 83       	std	Y+5, r24	; 0x05
    4ec8:	9e 83       	std	Y+6, r25	; 0x06
    4eca:	af 83       	std	Y+7, r26	; 0x07
    4ecc:	b8 87       	std	Y+8, r27	; 0x08
					break;
    4ece:	05 c0       	rjmp	.+10     	; 0x4eda <vUserInterface+0xbdc>
					} 
					else if (Bits & EV_RESET_NILA) {
						// Restart Nilakantha calculation if reseted
						vTaskResume(NilakanthaTask);							//Resume where stopped
					}
					break;
    4ed0:	00 00       	nop
    4ed2:	03 c0       	rjmp	.+6      	; 0x4eda <vUserInterface+0xbdc>
						// Stop Nilakantha calculation
						xEventGroupClearBits(evStartStopEvents, EV_CLEAR);		//Clear all Bits from Event
						xEventGroupSetBits(evStartStopEvents, EV_STOP_NILA);	//Set Stopbit
						Bits = xEventGroupGetBits(evStartStopEvents);			//Save eventbits as value
					}
					break;
    4ed4:	00 00       	nop
    4ed6:	01 c0       	rjmp	.+2      	; 0x4eda <vUserInterface+0xbdc>
						Bits = xEventGroupGetBits(evStartStopEvents);			//Save eventbits as value
						sprintf(&NilakanthaPiString[0], " ");					//Write " " into String, Display clears Line
						sprintf(&NilakanthaTimeString[0], " ");					//Write " " into String, Display clears Line
						sprintf(&NilakanthaExactTime[0], " ");					//Write " " into String, Display clears Line
					}
					break;
    4ed8:	00 00       	nop
						Menu = Menu_Leibniz;									//Set Menu to 2 to switch to Leibniz
						ButtonState = xEventGroupClearBits(evButtonEvents, EVBUTTONS_CLEAR);	//Clear Buttonstate to avoid switching back imediatly
					break;
			}
		}
		vTaskDelay(10/portTICK_RATE_MS);
    4eda:	6a e0       	ldi	r22, 0x0A	; 10
    4edc:	70 e0       	ldi	r23, 0x00	; 0
    4ede:	80 e0       	ldi	r24, 0x00	; 0
    4ee0:	90 e0       	ldi	r25, 0x00	; 0
    4ee2:	0e 94 bc 13 	call	0x2778	; 0x2778 <vTaskDelay>
	}	
    4ee6:	26 ca       	rjmp	.-2996   	; 0x4334 <vUserInterface+0x36>

00004ee8 <vButtonHandler>:

//////////////////////////////////////////////////////////////////////////
//							Button-Task									//
//////////////////////////////////////////////////////////////////////////

void vButtonHandler(void* pvParamter) {
    4ee8:	cf 93       	push	r28
    4eea:	df 93       	push	r29
    4eec:	1f 92       	push	r1
    4eee:	1f 92       	push	r1
    4ef0:	cd b7       	in	r28, 0x3d	; 61
    4ef2:	de b7       	in	r29, 0x3e	; 62
    4ef4:	89 83       	std	Y+1, r24	; 0x01
    4ef6:	9a 83       	std	Y+2, r25	; 0x02
	initButtons(); //Initialize Buttonhandler
    4ef8:	0e 94 cd 01 	call	0x39a	; 0x39a <initButtons>
	for(;;) {
		updateButtons(); //Update Button States
    4efc:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <updateButtons>
		
		//Read Button State and set EventBits in EventGroup
		if(getButtonPress(BUTTON1) == SHORT_PRESSED) {
    4f00:	80 e0       	ldi	r24, 0x00	; 0
    4f02:	0e 94 db 02 	call	0x5b6	; 0x5b6 <getButtonPress>
    4f06:	81 30       	cpi	r24, 0x01	; 1
    4f08:	51 f4       	brne	.+20     	; 0x4f1e <vButtonHandler+0x36>
			xEventGroupSetBits(evButtonEvents, EVBUTTONS_S1);
    4f0a:	80 91 92 35 	lds	r24, 0x3592	; 0x803592 <evButtonEvents>
    4f0e:	90 91 93 35 	lds	r25, 0x3593	; 0x803593 <evButtonEvents+0x1>
    4f12:	41 e0       	ldi	r20, 0x01	; 1
    4f14:	50 e0       	ldi	r21, 0x00	; 0
    4f16:	60 e0       	ldi	r22, 0x00	; 0
    4f18:	70 e0       	ldi	r23, 0x00	; 0
    4f1a:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
		}
		if(getButtonPress(BUTTON2) == SHORT_PRESSED) {
    4f1e:	81 e0       	ldi	r24, 0x01	; 1
    4f20:	0e 94 db 02 	call	0x5b6	; 0x5b6 <getButtonPress>
    4f24:	81 30       	cpi	r24, 0x01	; 1
    4f26:	51 f4       	brne	.+20     	; 0x4f3c <vButtonHandler+0x54>
			xEventGroupSetBits(evButtonEvents, EVBUTTONS_S2);
    4f28:	80 91 92 35 	lds	r24, 0x3592	; 0x803592 <evButtonEvents>
    4f2c:	90 91 93 35 	lds	r25, 0x3593	; 0x803593 <evButtonEvents+0x1>
    4f30:	42 e0       	ldi	r20, 0x02	; 2
    4f32:	50 e0       	ldi	r21, 0x00	; 0
    4f34:	60 e0       	ldi	r22, 0x00	; 0
    4f36:	70 e0       	ldi	r23, 0x00	; 0
    4f38:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
		}
		if(getButtonPress(BUTTON3) == SHORT_PRESSED) {
    4f3c:	82 e0       	ldi	r24, 0x02	; 2
    4f3e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <getButtonPress>
    4f42:	81 30       	cpi	r24, 0x01	; 1
    4f44:	51 f4       	brne	.+20     	; 0x4f5a <vButtonHandler+0x72>
			xEventGroupSetBits(evButtonEvents, EVBUTTONS_S3);
    4f46:	80 91 92 35 	lds	r24, 0x3592	; 0x803592 <evButtonEvents>
    4f4a:	90 91 93 35 	lds	r25, 0x3593	; 0x803593 <evButtonEvents+0x1>
    4f4e:	44 e0       	ldi	r20, 0x04	; 4
    4f50:	50 e0       	ldi	r21, 0x00	; 0
    4f52:	60 e0       	ldi	r22, 0x00	; 0
    4f54:	70 e0       	ldi	r23, 0x00	; 0
    4f56:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
		}
		if(getButtonPress(BUTTON4) == SHORT_PRESSED) {
    4f5a:	83 e0       	ldi	r24, 0x03	; 3
    4f5c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <getButtonPress>
    4f60:	81 30       	cpi	r24, 0x01	; 1
    4f62:	51 f4       	brne	.+20     	; 0x4f78 <vButtonHandler+0x90>
			xEventGroupSetBits(evButtonEvents, EVBUTTONS_S4);
    4f64:	80 91 92 35 	lds	r24, 0x3592	; 0x803592 <evButtonEvents>
    4f68:	90 91 93 35 	lds	r25, 0x3593	; 0x803593 <evButtonEvents+0x1>
    4f6c:	48 e0       	ldi	r20, 0x08	; 8
    4f6e:	50 e0       	ldi	r21, 0x00	; 0
    4f70:	60 e0       	ldi	r22, 0x00	; 0
    4f72:	70 e0       	ldi	r23, 0x00	; 0
    4f74:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
		}
		if(getButtonPress(BUTTON1) == LONG_PRESSED) {
    4f78:	80 e0       	ldi	r24, 0x00	; 0
    4f7a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <getButtonPress>
    4f7e:	88 23       	and	r24, r24
    4f80:	51 f4       	brne	.+20     	; 0x4f96 <vButtonHandler+0xae>
			xEventGroupSetBits(evButtonEvents, EVBUTTONS_L1);
    4f82:	80 91 92 35 	lds	r24, 0x3592	; 0x803592 <evButtonEvents>
    4f86:	90 91 93 35 	lds	r25, 0x3593	; 0x803593 <evButtonEvents+0x1>
    4f8a:	40 e1       	ldi	r20, 0x10	; 16
    4f8c:	50 e0       	ldi	r21, 0x00	; 0
    4f8e:	60 e0       	ldi	r22, 0x00	; 0
    4f90:	70 e0       	ldi	r23, 0x00	; 0
    4f92:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
		}
		if(getButtonPress(BUTTON2) == LONG_PRESSED) {
    4f96:	81 e0       	ldi	r24, 0x01	; 1
    4f98:	0e 94 db 02 	call	0x5b6	; 0x5b6 <getButtonPress>
    4f9c:	88 23       	and	r24, r24
    4f9e:	51 f4       	brne	.+20     	; 0x4fb4 <vButtonHandler+0xcc>
			xEventGroupSetBits(evButtonEvents, EVBUTTONS_L2);
    4fa0:	80 91 92 35 	lds	r24, 0x3592	; 0x803592 <evButtonEvents>
    4fa4:	90 91 93 35 	lds	r25, 0x3593	; 0x803593 <evButtonEvents+0x1>
    4fa8:	40 e2       	ldi	r20, 0x20	; 32
    4faa:	50 e0       	ldi	r21, 0x00	; 0
    4fac:	60 e0       	ldi	r22, 0x00	; 0
    4fae:	70 e0       	ldi	r23, 0x00	; 0
    4fb0:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
		}
		if(getButtonPress(BUTTON3) == LONG_PRESSED) {
    4fb4:	82 e0       	ldi	r24, 0x02	; 2
    4fb6:	0e 94 db 02 	call	0x5b6	; 0x5b6 <getButtonPress>
    4fba:	88 23       	and	r24, r24
    4fbc:	51 f4       	brne	.+20     	; 0x4fd2 <vButtonHandler+0xea>
			xEventGroupSetBits(evButtonEvents, EVBUTTONS_L3);
    4fbe:	80 91 92 35 	lds	r24, 0x3592	; 0x803592 <evButtonEvents>
    4fc2:	90 91 93 35 	lds	r25, 0x3593	; 0x803593 <evButtonEvents+0x1>
    4fc6:	40 e4       	ldi	r20, 0x40	; 64
    4fc8:	50 e0       	ldi	r21, 0x00	; 0
    4fca:	60 e0       	ldi	r22, 0x00	; 0
    4fcc:	70 e0       	ldi	r23, 0x00	; 0
    4fce:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
		}
		if(getButtonPress(BUTTON4) == LONG_PRESSED) {
    4fd2:	83 e0       	ldi	r24, 0x03	; 3
    4fd4:	0e 94 db 02 	call	0x5b6	; 0x5b6 <getButtonPress>
    4fd8:	88 23       	and	r24, r24
    4fda:	51 f4       	brne	.+20     	; 0x4ff0 <vButtonHandler+0x108>
			xEventGroupSetBits(evButtonEvents, EVBUTTONS_L4);
    4fdc:	80 91 92 35 	lds	r24, 0x3592	; 0x803592 <evButtonEvents>
    4fe0:	90 91 93 35 	lds	r25, 0x3593	; 0x803593 <evButtonEvents+0x1>
    4fe4:	40 e8       	ldi	r20, 0x80	; 128
    4fe6:	50 e0       	ldi	r21, 0x00	; 0
    4fe8:	60 e0       	ldi	r22, 0x00	; 0
    4fea:	70 e0       	ldi	r23, 0x00	; 0
    4fec:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
		}
		vTaskDelay((1000/BUTTON_UPDATE_FREQUENCY_HZ)/portTICK_RATE_MS); //Buttonupdate Delay
    4ff0:	6a e0       	ldi	r22, 0x0A	; 10
    4ff2:	70 e0       	ldi	r23, 0x00	; 0
    4ff4:	80 e0       	ldi	r24, 0x00	; 0
    4ff6:	90 e0       	ldi	r25, 0x00	; 0
    4ff8:	0e 94 bc 13 	call	0x2778	; 0x2778 <vTaskDelay>
	}
    4ffc:	7f cf       	rjmp	.-258    	; 0x4efc <vButtonHandler+0x14>

00004ffe <vLeibniz>:

//////////////////////////////////////////////////////////////////////////
//						Leibniz calculation								//
//////////////////////////////////////////////////////////////////////////

void vLeibniz(void *pvParameter){
    4ffe:	cf 92       	push	r12
    5000:	df 92       	push	r13
    5002:	ef 92       	push	r14
    5004:	ff 92       	push	r15
    5006:	0f 93       	push	r16
    5008:	1f 93       	push	r17
    500a:	cf 93       	push	r28
    500c:	df 93       	push	r29
    500e:	cd b7       	in	r28, 0x3d	; 61
    5010:	de b7       	in	r29, 0x3e	; 62
    5012:	ac 97       	sbiw	r28, 0x2c	; 44
    5014:	cd bf       	out	0x3d, r28	; 61
    5016:	de bf       	out	0x3e, r29	; 62
    5018:	8b a7       	std	Y+43, r24	; 0x2b
    501a:	9c a7       	std	Y+44, r25	; 0x2c
	(void) pvParameter; 
	//Set Local variables
	float32_t PI;
	float32_t Summe;
	
	xEventGroupWaitBits(evStartStopEvents, EV_START_LEIBNIZ, pdFALSE, pdTRUE, portMAX_DELAY);	//Task waits for Eventbit to start
    501c:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    5020:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    5024:	cc 24       	eor	r12, r12
    5026:	ca 94       	dec	r12
    5028:	dc 2c       	mov	r13, r12
    502a:	76 01       	movw	r14, r12
    502c:	01 e0       	ldi	r16, 0x01	; 1
    502e:	20 e0       	ldi	r18, 0x00	; 0
    5030:	41 e0       	ldi	r20, 0x01	; 1
    5032:	50 e0       	ldi	r21, 0x00	; 0
    5034:	60 e0       	ldi	r22, 0x00	; 0
    5036:	70 e0       	ldi	r23, 0x00	; 0
    5038:	0e 94 7f 04 	call	0x8fe	; 0x8fe <xEventGroupWaitBits>
	TickType_t Endtime;
	
	start_here:	//Startpoint after reset calculation
	
	//Local Variables with startvalue, 
	PI = 0;
    503c:	1b 8e       	std	Y+27, r1	; 0x1b
    503e:	1c 8e       	std	Y+28, r1	; 0x1c
    5040:	1d 8e       	std	Y+29, r1	; 0x1d
    5042:	1e 8e       	std	Y+30, r1	; 0x1e
	Summe = 0.0;
    5044:	19 82       	std	Y+1, r1	; 0x01
    5046:	1a 82       	std	Y+2, r1	; 0x02
    5048:	1b 82       	std	Y+3, r1	; 0x03
    504a:	1c 82       	std	Y+4, r1	; 0x04
	TickType_t lastExecutionTime = xTaskGetTickCount();
    504c:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <xTaskGetTickCount>
    5050:	dc 01       	movw	r26, r24
    5052:	cb 01       	movw	r24, r22
    5054:	89 87       	std	Y+9, r24	; 0x09
    5056:	9a 87       	std	Y+10, r25	; 0x0a
    5058:	ab 87       	std	Y+11, r26	; 0x0b
    505a:	bc 87       	std	Y+12, r27	; 0x0c
	uint32_t i = -1;
    505c:	8f ef       	ldi	r24, 0xFF	; 255
    505e:	9f ef       	ldi	r25, 0xFF	; 255
    5060:	dc 01       	movw	r26, r24
    5062:	8d 87       	std	Y+13, r24	; 0x0d
    5064:	9e 87       	std	Y+14, r25	; 0x0e
    5066:	af 87       	std	Y+15, r26	; 0x0f
    5068:	b8 8b       	std	Y+16, r27	; 0x10
	uint32_t n = 1;	
    506a:	81 e0       	ldi	r24, 0x01	; 1
    506c:	90 e0       	ldi	r25, 0x00	; 0
    506e:	a0 e0       	ldi	r26, 0x00	; 0
    5070:	b0 e0       	ldi	r27, 0x00	; 0
    5072:	89 8b       	std	Y+17, r24	; 0x11
    5074:	9a 8b       	std	Y+18, r25	; 0x12
    5076:	ab 8b       	std	Y+19, r26	; 0x13
    5078:	bc 8b       	std	Y+20, r27	; 0x14
	int Elapsedtime = 0;
    507a:	1d 8a       	std	Y+21, r1	; 0x15
    507c:	1e 8a       	std	Y+22, r1	; 0x16
	int elapsedSeconds = 0;
    507e:	1f 8a       	std	Y+23, r1	; 0x17
    5080:	18 8e       	std	Y+24, r1	; 0x18
	uint32_t currentTime = 0;
    5082:	1f 8e       	std	Y+31, r1	; 0x1f
    5084:	18 a2       	std	Y+32, r1	; 0x20
    5086:	19 a2       	std	Y+33, r1	; 0x21
    5088:	1a a2       	std	Y+34, r1	; 0x22
	uint32_t Elapsedcounter = 0;
    508a:	1b a2       	std	Y+35, r1	; 0x23
    508c:	1c a2       	std	Y+36, r1	; 0x24
    508e:	1d a2       	std	Y+37, r1	; 0x25
    5090:	1e a2       	std	Y+38, r1	; 0x26
	int Codeblocker = 0;
    5092:	19 8e       	std	Y+25, r1	; 0x19
    5094:	1a 8e       	std	Y+26, r1	; 0x1a
	Starttime  = xTaskGetTickCount();
    5096:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <xTaskGetTickCount>
    509a:	dc 01       	movw	r26, r24
    509c:	cb 01       	movw	r24, r22
    509e:	8d 83       	std	Y+5, r24	; 0x05
    50a0:	9e 83       	std	Y+6, r25	; 0x06
    50a2:	af 83       	std	Y+7, r26	; 0x07
    50a4:	b8 87       	std	Y+8, r27	; 0x08
	
	for(i = 0; i < n; i ++){
    50a6:	1d 86       	std	Y+13, r1	; 0x0d
    50a8:	1e 86       	std	Y+14, r1	; 0x0e
    50aa:	1f 86       	std	Y+15, r1	; 0x0f
    50ac:	18 8a       	std	Y+16, r1	; 0x10
    50ae:	44 c2       	rjmp	.+1160   	; 0x5538 <vLeibniz+0x53a>
		currentTime = xTaskGetTickCount();
    50b0:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <xTaskGetTickCount>
    50b4:	dc 01       	movw	r26, r24
    50b6:	cb 01       	movw	r24, r22
    50b8:	8f 8f       	std	Y+31, r24	; 0x1f
    50ba:	98 a3       	std	Y+32, r25	; 0x20
    50bc:	a9 a3       	std	Y+33, r26	; 0x21
    50be:	ba a3       	std	Y+34, r27	; 0x22
		Elapsedcounter = currentTime - lastExecutionTime;
    50c0:	2f 8d       	ldd	r18, Y+31	; 0x1f
    50c2:	38 a1       	ldd	r19, Y+32	; 0x20
    50c4:	49 a1       	ldd	r20, Y+33	; 0x21
    50c6:	5a a1       	ldd	r21, Y+34	; 0x22
    50c8:	89 85       	ldd	r24, Y+9	; 0x09
    50ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    50cc:	ab 85       	ldd	r26, Y+11	; 0x0b
    50ce:	bc 85       	ldd	r27, Y+12	; 0x0c
    50d0:	79 01       	movw	r14, r18
    50d2:	8a 01       	movw	r16, r20
    50d4:	e8 1a       	sub	r14, r24
    50d6:	f9 0a       	sbc	r15, r25
    50d8:	0a 0b       	sbc	r16, r26
    50da:	1b 0b       	sbc	r17, r27
    50dc:	d8 01       	movw	r26, r16
    50de:	c7 01       	movw	r24, r14
    50e0:	8b a3       	std	Y+35, r24	; 0x23
    50e2:	9c a3       	std	Y+36, r25	; 0x24
    50e4:	ad a3       	std	Y+37, r26	; 0x25
    50e6:	be a3       	std	Y+38, r27	; 0x26
		if(Bits & EV_STOP_LEIBNIZ){	//Stop function
    50e8:	80 91 74 35 	lds	r24, 0x3574	; 0x803574 <Bits>
    50ec:	90 91 75 35 	lds	r25, 0x3575	; 0x803575 <Bits+0x1>
    50f0:	a0 91 76 35 	lds	r26, 0x3576	; 0x803576 <Bits+0x2>
    50f4:	b0 91 77 35 	lds	r27, 0x3577	; 0x803577 <Bits+0x3>
    50f8:	82 70       	andi	r24, 0x02	; 2
    50fa:	99 27       	eor	r25, r25
    50fc:	aa 27       	eor	r26, r26
    50fe:	bb 27       	eor	r27, r27
    5100:	89 2b       	or	r24, r25
    5102:	8a 2b       	or	r24, r26
    5104:	8b 2b       	or	r24, r27
    5106:	09 f4       	brne	.+2      	; 0x510a <vLeibniz+0x10c>
    5108:	8f c0       	rjmp	.+286    	; 0x5228 <vLeibniz+0x22a>
			Endtime = xTaskGetTickCount() - Starttime;
    510a:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <xTaskGetTickCount>
    510e:	9b 01       	movw	r18, r22
    5110:	ac 01       	movw	r20, r24
    5112:	8d 81       	ldd	r24, Y+5	; 0x05
    5114:	9e 81       	ldd	r25, Y+6	; 0x06
    5116:	af 81       	ldd	r26, Y+7	; 0x07
    5118:	b8 85       	ldd	r27, Y+8	; 0x08
    511a:	79 01       	movw	r14, r18
    511c:	8a 01       	movw	r16, r20
    511e:	e8 1a       	sub	r14, r24
    5120:	f9 0a       	sbc	r15, r25
    5122:	0a 0b       	sbc	r16, r26
    5124:	1b 0b       	sbc	r17, r27
    5126:	d8 01       	movw	r26, r16
    5128:	c7 01       	movw	r24, r14
    512a:	8f a3       	std	Y+39, r24	; 0x27
    512c:	98 a7       	std	Y+40, r25	; 0x28
    512e:	a9 a7       	std	Y+41, r26	; 0x29
    5130:	ba a7       	std	Y+42, r27	; 0x2a
			Elapsedtime += Endtime;
    5132:	2f a1       	ldd	r18, Y+39	; 0x27
    5134:	38 a5       	ldd	r19, Y+40	; 0x28
    5136:	8d 89       	ldd	r24, Y+21	; 0x15
    5138:	9e 89       	ldd	r25, Y+22	; 0x16
    513a:	82 0f       	add	r24, r18
    513c:	93 1f       	adc	r25, r19
    513e:	8d 8b       	std	Y+21, r24	; 0x15
    5140:	9e 8b       	std	Y+22, r25	; 0x16
		    xEventGroupSetBits(evStartStopEvents, EV_STOPPED_LEIBNIZ);
    5142:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    5146:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    514a:	40 e1       	ldi	r20, 0x10	; 16
    514c:	50 e0       	ldi	r21, 0x00	; 0
    514e:	60 e0       	ldi	r22, 0x00	; 0
    5150:	70 e0       	ldi	r23, 0x00	; 0
    5152:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
			Bits = xEventGroupGetBits(evStartStopEvents);
    5156:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    515a:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    515e:	40 e0       	ldi	r20, 0x00	; 0
    5160:	50 e0       	ldi	r21, 0x00	; 0
    5162:	ba 01       	movw	r22, r20
    5164:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    5168:	dc 01       	movw	r26, r24
    516a:	cb 01       	movw	r24, r22
    516c:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <Bits>
    5170:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <Bits+0x1>
    5174:	a0 93 76 35 	sts	0x3576, r26	; 0x803576 <Bits+0x2>
    5178:	b0 93 77 35 	sts	0x3577, r27	; 0x803577 <Bits+0x3>
			Bits &= (~EV_START_LEIBNIZ & ~EV_STOP_LEIBNIZ) ;  //delete EV_START_LEIBNIZ and EV_STOP_LEIBNIZ from eventgroup
    517c:	80 91 74 35 	lds	r24, 0x3574	; 0x803574 <Bits>
    5180:	90 91 75 35 	lds	r25, 0x3575	; 0x803575 <Bits+0x1>
    5184:	a0 91 76 35 	lds	r26, 0x3576	; 0x803576 <Bits+0x2>
    5188:	b0 91 77 35 	lds	r27, 0x3577	; 0x803577 <Bits+0x3>
    518c:	8c 7f       	andi	r24, 0xFC	; 252
    518e:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <Bits>
    5192:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <Bits+0x1>
    5196:	a0 93 76 35 	sts	0x3576, r26	; 0x803576 <Bits+0x2>
    519a:	b0 93 77 35 	sts	0x3577, r27	; 0x803577 <Bits+0x3>
            vTaskSuspend(NULL);
    519e:	80 e0       	ldi	r24, 0x00	; 0
    51a0:	90 e0       	ldi	r25, 0x00	; 0
    51a2:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <vTaskSuspend>
			if (Bits & EV_RESET_LEIBNIZ){	//Reset function
    51a6:	80 91 74 35 	lds	r24, 0x3574	; 0x803574 <Bits>
    51aa:	90 91 75 35 	lds	r25, 0x3575	; 0x803575 <Bits+0x1>
    51ae:	a0 91 76 35 	lds	r26, 0x3576	; 0x803576 <Bits+0x2>
    51b2:	b0 91 77 35 	lds	r27, 0x3577	; 0x803577 <Bits+0x3>
    51b6:	80 74       	andi	r24, 0x40	; 64
    51b8:	99 27       	eor	r25, r25
    51ba:	aa 27       	eor	r26, r26
    51bc:	bb 27       	eor	r27, r27
    51be:	89 2b       	or	r24, r25
    51c0:	8a 2b       	or	r24, r26
    51c2:	8b 2b       	or	r24, r27
    51c4:	41 f1       	breq	.+80     	; 0x5216 <vLeibniz+0x218>
				xEventGroupClearBits(evStartStopEvents, EV_CLEAR);
    51c6:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    51ca:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    51ce:	4f ef       	ldi	r20, 0xFF	; 255
    51d0:	50 e0       	ldi	r21, 0x00	; 0
    51d2:	60 e0       	ldi	r22, 0x00	; 0
    51d4:	70 e0       	ldi	r23, 0x00	; 0
    51d6:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
				xEventGroupSetBits(evStartStopEvents, EV_START_LEIBNIZ);
    51da:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    51de:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    51e2:	41 e0       	ldi	r20, 0x01	; 1
    51e4:	50 e0       	ldi	r21, 0x00	; 0
    51e6:	60 e0       	ldi	r22, 0x00	; 0
    51e8:	70 e0       	ldi	r23, 0x00	; 0
    51ea:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
				Bits = xEventGroupGetBits(evStartStopEvents);
    51ee:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    51f2:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    51f6:	40 e0       	ldi	r20, 0x00	; 0
    51f8:	50 e0       	ldi	r21, 0x00	; 0
    51fa:	ba 01       	movw	r22, r20
    51fc:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    5200:	dc 01       	movw	r26, r24
    5202:	cb 01       	movw	r24, r22
    5204:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <Bits>
    5208:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <Bits+0x1>
    520c:	a0 93 76 35 	sts	0x3576, r26	; 0x803576 <Bits+0x2>
    5210:	b0 93 77 35 	sts	0x3577, r27	; 0x803577 <Bits+0x3>
				goto start_here;
    5214:	13 cf       	rjmp	.-474    	; 0x503c <vLeibniz+0x3e>
			}
			Starttime  = xTaskGetTickCount();
    5216:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <xTaskGetTickCount>
    521a:	dc 01       	movw	r26, r24
    521c:	cb 01       	movw	r24, r22
    521e:	8d 83       	std	Y+5, r24	; 0x05
    5220:	9e 83       	std	Y+6, r25	; 0x06
    5222:	af 83       	std	Y+7, r26	; 0x07
    5224:	b8 87       	std	Y+8, r27	; 0x08
    5226:	55 c0       	rjmp	.+170    	; 0x52d2 <vLeibniz+0x2d4>
		}
		else if (Bits & EV_RESET_LEIBNIZ){	//Reset function
    5228:	80 91 74 35 	lds	r24, 0x3574	; 0x803574 <Bits>
    522c:	90 91 75 35 	lds	r25, 0x3575	; 0x803575 <Bits+0x1>
    5230:	a0 91 76 35 	lds	r26, 0x3576	; 0x803576 <Bits+0x2>
    5234:	b0 91 77 35 	lds	r27, 0x3577	; 0x803577 <Bits+0x3>
    5238:	80 74       	andi	r24, 0x40	; 64
    523a:	99 27       	eor	r25, r25
    523c:	aa 27       	eor	r26, r26
    523e:	bb 27       	eor	r27, r27
    5240:	89 2b       	or	r24, r25
    5242:	8a 2b       	or	r24, r26
    5244:	8b 2b       	or	r24, r27
    5246:	09 f4       	brne	.+2      	; 0x524a <vLeibniz+0x24c>
    5248:	44 c0       	rjmp	.+136    	; 0x52d2 <vLeibniz+0x2d4>
			xEventGroupClearBits(evStartStopEvents, EV_CLEAR);
    524a:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    524e:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    5252:	4f ef       	ldi	r20, 0xFF	; 255
    5254:	50 e0       	ldi	r21, 0x00	; 0
    5256:	60 e0       	ldi	r22, 0x00	; 0
    5258:	70 e0       	ldi	r23, 0x00	; 0
    525a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
            xEventGroupSetBits(evStartStopEvents, EV_STOPPED_LEIBNIZ);
    525e:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    5262:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    5266:	40 e1       	ldi	r20, 0x10	; 16
    5268:	50 e0       	ldi	r21, 0x00	; 0
    526a:	60 e0       	ldi	r22, 0x00	; 0
    526c:	70 e0       	ldi	r23, 0x00	; 0
    526e:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
			Bits = xEventGroupGetBits(evStartStopEvents);
    5272:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    5276:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    527a:	40 e0       	ldi	r20, 0x00	; 0
    527c:	50 e0       	ldi	r21, 0x00	; 0
    527e:	ba 01       	movw	r22, r20
    5280:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    5284:	dc 01       	movw	r26, r24
    5286:	cb 01       	movw	r24, r22
    5288:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <Bits>
    528c:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <Bits+0x1>
    5290:	a0 93 76 35 	sts	0x3576, r26	; 0x803576 <Bits+0x2>
    5294:	b0 93 77 35 	sts	0x3577, r27	; 0x803577 <Bits+0x3>
			memset(LeibnizPiString, 0, sizeof(LeibnizPiString));		//String gets emptied
    5298:	40 e1       	ldi	r20, 0x10	; 16
    529a:	50 e0       	ldi	r21, 0x00	; 0
    529c:	60 e0       	ldi	r22, 0x00	; 0
    529e:	70 e0       	ldi	r23, 0x00	; 0
    52a0:	8b e9       	ldi	r24, 0x9B	; 155
    52a2:	95 e3       	ldi	r25, 0x35	; 53
    52a4:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <memset>
			memset(LeibnizTimeString, 0, sizeof(LeibnizTimeString));	//String gets emptied
    52a8:	43 e0       	ldi	r20, 0x03	; 3
    52aa:	50 e0       	ldi	r21, 0x00	; 0
    52ac:	60 e0       	ldi	r22, 0x00	; 0
    52ae:	70 e0       	ldi	r23, 0x00	; 0
    52b0:	83 e6       	ldi	r24, 0x63	; 99
    52b2:	95 e3       	ldi	r25, 0x35	; 53
    52b4:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <memset>
			memset(LeibnizExactTime, 0, sizeof(LeibnizExactTime));		//String gets emptied
    52b8:	4a e0       	ldi	r20, 0x0A	; 10
    52ba:	50 e0       	ldi	r21, 0x00	; 0
    52bc:	60 e0       	ldi	r22, 0x00	; 0
    52be:	70 e0       	ldi	r23, 0x00	; 0
    52c0:	88 e8       	ldi	r24, 0x88	; 136
    52c2:	95 e3       	ldi	r25, 0x35	; 53
    52c4:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <memset>
			vTaskSuspend(NULL);
    52c8:	80 e0       	ldi	r24, 0x00	; 0
    52ca:	90 e0       	ldi	r25, 0x00	; 0
    52cc:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <vTaskSuspend>
			goto start_here;
    52d0:	b5 ce       	rjmp	.-662    	; 0x503c <vLeibniz+0x3e>
		}
		
		//Leibniz algorithm
		Summe += (i % 2 == 0 ? 1 : -1) / (2.0 * i + 1);
    52d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    52d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    52d6:	af 85       	ldd	r26, Y+15	; 0x0f
    52d8:	b8 89       	ldd	r27, Y+16	; 0x10
    52da:	81 70       	andi	r24, 0x01	; 1
    52dc:	99 27       	eor	r25, r25
    52de:	aa 27       	eor	r26, r26
    52e0:	bb 27       	eor	r27, r27
    52e2:	89 2b       	or	r24, r25
    52e4:	8a 2b       	or	r24, r26
    52e6:	8b 2b       	or	r24, r27
    52e8:	49 f4       	brne	.+18     	; 0x52fc <vLeibniz+0x2fe>
    52ea:	0f 2e       	mov	r0, r31
    52ec:	c1 2c       	mov	r12, r1
    52ee:	d1 2c       	mov	r13, r1
    52f0:	f0 e8       	ldi	r31, 0x80	; 128
    52f2:	ef 2e       	mov	r14, r31
    52f4:	ff e3       	ldi	r31, 0x3F	; 63
    52f6:	ff 2e       	mov	r15, r31
    52f8:	f0 2d       	mov	r31, r0
    52fa:	08 c0       	rjmp	.+16     	; 0x530c <vLeibniz+0x30e>
    52fc:	0f 2e       	mov	r0, r31
    52fe:	c1 2c       	mov	r12, r1
    5300:	d1 2c       	mov	r13, r1
    5302:	f0 e8       	ldi	r31, 0x80	; 128
    5304:	ef 2e       	mov	r14, r31
    5306:	ff eb       	ldi	r31, 0xBF	; 191
    5308:	ff 2e       	mov	r15, r31
    530a:	f0 2d       	mov	r31, r0
    530c:	6d 85       	ldd	r22, Y+13	; 0x0d
    530e:	7e 85       	ldd	r23, Y+14	; 0x0e
    5310:	8f 85       	ldd	r24, Y+15	; 0x0f
    5312:	98 89       	ldd	r25, Y+16	; 0x10
    5314:	0e 94 f8 37 	call	0x6ff0	; 0x6ff0 <__floatunsisf>
    5318:	dc 01       	movw	r26, r24
    531a:	cb 01       	movw	r24, r22
    531c:	9c 01       	movw	r18, r24
    531e:	ad 01       	movw	r20, r26
    5320:	bc 01       	movw	r22, r24
    5322:	cd 01       	movw	r24, r26
    5324:	0e 94 df 36 	call	0x6dbe	; 0x6dbe <__addsf3>
    5328:	dc 01       	movw	r26, r24
    532a:	cb 01       	movw	r24, r22
    532c:	20 e0       	ldi	r18, 0x00	; 0
    532e:	30 e0       	ldi	r19, 0x00	; 0
    5330:	40 e8       	ldi	r20, 0x80	; 128
    5332:	5f e3       	ldi	r21, 0x3F	; 63
    5334:	bc 01       	movw	r22, r24
    5336:	cd 01       	movw	r24, r26
    5338:	0e 94 df 36 	call	0x6dbe	; 0x6dbe <__addsf3>
    533c:	dc 01       	movw	r26, r24
    533e:	cb 01       	movw	r24, r22
    5340:	9c 01       	movw	r18, r24
    5342:	ad 01       	movw	r20, r26
    5344:	c7 01       	movw	r24, r14
    5346:	b6 01       	movw	r22, r12
    5348:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <__divsf3>
    534c:	dc 01       	movw	r26, r24
    534e:	cb 01       	movw	r24, r22
    5350:	9c 01       	movw	r18, r24
    5352:	ad 01       	movw	r20, r26
    5354:	69 81       	ldd	r22, Y+1	; 0x01
    5356:	7a 81       	ldd	r23, Y+2	; 0x02
    5358:	8b 81       	ldd	r24, Y+3	; 0x03
    535a:	9c 81       	ldd	r25, Y+4	; 0x04
    535c:	0e 94 df 36 	call	0x6dbe	; 0x6dbe <__addsf3>
    5360:	dc 01       	movw	r26, r24
    5362:	cb 01       	movw	r24, r22
    5364:	89 83       	std	Y+1, r24	; 0x01
    5366:	9a 83       	std	Y+2, r25	; 0x02
    5368:	ab 83       	std	Y+3, r26	; 0x03
    536a:	bc 83       	std	Y+4, r27	; 0x04
		PI = 4 * Summe;
    536c:	20 e0       	ldi	r18, 0x00	; 0
    536e:	30 e0       	ldi	r19, 0x00	; 0
    5370:	40 e8       	ldi	r20, 0x80	; 128
    5372:	50 e4       	ldi	r21, 0x40	; 64
    5374:	69 81       	ldd	r22, Y+1	; 0x01
    5376:	7a 81       	ldd	r23, Y+2	; 0x02
    5378:	8b 81       	ldd	r24, Y+3	; 0x03
    537a:	9c 81       	ldd	r25, Y+4	; 0x04
    537c:	0e 94 af 38 	call	0x715e	; 0x715e <__mulsf3>
    5380:	dc 01       	movw	r26, r24
    5382:	cb 01       	movw	r24, r22
    5384:	8b 8f       	std	Y+27, r24	; 0x1b
    5386:	9c 8f       	std	Y+28, r25	; 0x1c
    5388:	ad 8f       	std	Y+29, r26	; 0x1d
    538a:	be 8f       	std	Y+30, r27	; 0x1e
		n ++;
    538c:	89 89       	ldd	r24, Y+17	; 0x11
    538e:	9a 89       	ldd	r25, Y+18	; 0x12
    5390:	ab 89       	ldd	r26, Y+19	; 0x13
    5392:	bc 89       	ldd	r27, Y+20	; 0x14
    5394:	01 96       	adiw	r24, 0x01	; 1
    5396:	a1 1d       	adc	r26, r1
    5398:	b1 1d       	adc	r27, r1
    539a:	89 8b       	std	Y+17, r24	; 0x11
    539c:	9a 8b       	std	Y+18, r25	; 0x12
    539e:	ab 8b       	std	Y+19, r26	; 0x13
    53a0:	bc 8b       	std	Y+20, r27	; 0x14
		
		//Writes every 500ms Pi and elapsed Time into Strings
		if (Elapsedcounter >= pdMS_TO_TICKS(500)) {
    53a2:	8b a1       	ldd	r24, Y+35	; 0x23
    53a4:	9c a1       	ldd	r25, Y+36	; 0x24
    53a6:	ad a1       	ldd	r26, Y+37	; 0x25
    53a8:	be a1       	ldd	r27, Y+38	; 0x26
    53aa:	84 3f       	cpi	r24, 0xF4	; 244
    53ac:	91 40       	sbci	r25, 0x01	; 1
    53ae:	a1 05       	cpc	r26, r1
    53b0:	b1 05       	cpc	r27, r1
    53b2:	08 f4       	brcc	.+2      	; 0x53b6 <vLeibniz+0x3b8>
    53b4:	4a c0       	rjmp	.+148    	; 0x544a <vLeibniz+0x44c>
			sprintf(&LeibnizPiString[0], "PI is %.7f", PI);
    53b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    53b8:	8f 93       	push	r24
    53ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53bc:	8f 93       	push	r24
    53be:	8c 8d       	ldd	r24, Y+28	; 0x1c
    53c0:	8f 93       	push	r24
    53c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    53c4:	8f 93       	push	r24
    53c6:	8a ee       	ldi	r24, 0xEA	; 234
    53c8:	90 e2       	ldi	r25, 0x20	; 32
    53ca:	89 2f       	mov	r24, r25
    53cc:	8f 93       	push	r24
    53ce:	8a ee       	ldi	r24, 0xEA	; 234
    53d0:	90 e2       	ldi	r25, 0x20	; 32
    53d2:	8f 93       	push	r24
    53d4:	8b e9       	ldi	r24, 0x9B	; 155
    53d6:	95 e3       	ldi	r25, 0x35	; 53
    53d8:	89 2f       	mov	r24, r25
    53da:	8f 93       	push	r24
    53dc:	8b e9       	ldi	r24, 0x9B	; 155
    53de:	95 e3       	ldi	r25, 0x35	; 53
    53e0:	8f 93       	push	r24
    53e2:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <sprintf>
    53e6:	8d b7       	in	r24, 0x3d	; 61
    53e8:	9e b7       	in	r25, 0x3e	; 62
    53ea:	08 96       	adiw	r24, 0x08	; 8
    53ec:	cd bf       	out	0x3d, r28	; 61
    53ee:	de bf       	out	0x3e, r29	; 62
			sprintf(&LeibnizTimeString[0], "%ds", (elapsedSeconds / 2));
    53f0:	8f 89       	ldd	r24, Y+23	; 0x17
    53f2:	98 8d       	ldd	r25, Y+24	; 0x18
    53f4:	99 23       	and	r25, r25
    53f6:	0c f4       	brge	.+2      	; 0x53fa <vLeibniz+0x3fc>
    53f8:	01 96       	adiw	r24, 0x01	; 1
    53fa:	95 95       	asr	r25
    53fc:	87 95       	ror	r24
    53fe:	29 2f       	mov	r18, r25
    5400:	2f 93       	push	r18
    5402:	8f 93       	push	r24
    5404:	85 ef       	ldi	r24, 0xF5	; 245
    5406:	90 e2       	ldi	r25, 0x20	; 32
    5408:	89 2f       	mov	r24, r25
    540a:	8f 93       	push	r24
    540c:	85 ef       	ldi	r24, 0xF5	; 245
    540e:	90 e2       	ldi	r25, 0x20	; 32
    5410:	8f 93       	push	r24
    5412:	83 e6       	ldi	r24, 0x63	; 99
    5414:	95 e3       	ldi	r25, 0x35	; 53
    5416:	89 2f       	mov	r24, r25
    5418:	8f 93       	push	r24
    541a:	83 e6       	ldi	r24, 0x63	; 99
    541c:	95 e3       	ldi	r25, 0x35	; 53
    541e:	8f 93       	push	r24
    5420:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <sprintf>
    5424:	0f 90       	pop	r0
    5426:	0f 90       	pop	r0
    5428:	0f 90       	pop	r0
    542a:	0f 90       	pop	r0
    542c:	0f 90       	pop	r0
    542e:	0f 90       	pop	r0
			lastExecutionTime = currentTime;
    5430:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5432:	98 a1       	ldd	r25, Y+32	; 0x20
    5434:	a9 a1       	ldd	r26, Y+33	; 0x21
    5436:	ba a1       	ldd	r27, Y+34	; 0x22
    5438:	89 87       	std	Y+9, r24	; 0x09
    543a:	9a 87       	std	Y+10, r25	; 0x0a
    543c:	ab 87       	std	Y+11, r26	; 0x0b
    543e:	bc 87       	std	Y+12, r27	; 0x0c
			elapsedSeconds ++;
    5440:	8f 89       	ldd	r24, Y+23	; 0x17
    5442:	98 8d       	ldd	r25, Y+24	; 0x18
    5444:	01 96       	adiw	r24, 0x01	; 1
    5446:	8f 8b       	std	Y+23, r24	; 0x17
    5448:	98 8f       	std	Y+24, r25	; 0x18
		}
		
		//Writes exact Time into String when Pi has reached 5 digits precise, can only happen once trough Codeblock
		if(Codeblocker == 0 && (uint32_t)((PI*100000) > 314159 && (PI*100000) < 314160)){		
    544a:	89 8d       	ldd	r24, Y+25	; 0x19
    544c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    544e:	89 2b       	or	r24, r25
    5450:	09 f0       	breq	.+2      	; 0x5454 <vLeibniz+0x456>
    5452:	67 c0       	rjmp	.+206    	; 0x5522 <vLeibniz+0x524>
    5454:	20 e0       	ldi	r18, 0x00	; 0
    5456:	30 e5       	ldi	r19, 0x50	; 80
    5458:	43 ec       	ldi	r20, 0xC3	; 195
    545a:	57 e4       	ldi	r21, 0x47	; 71
    545c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    545e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    5460:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5462:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5464:	0e 94 af 38 	call	0x715e	; 0x715e <__mulsf3>
    5468:	dc 01       	movw	r26, r24
    546a:	cb 01       	movw	r24, r22
    546c:	20 ee       	ldi	r18, 0xE0	; 224
    546e:	35 e6       	ldi	r19, 0x65	; 101
    5470:	49 e9       	ldi	r20, 0x99	; 153
    5472:	58 e4       	ldi	r21, 0x48	; 72
    5474:	bc 01       	movw	r22, r24
    5476:	cd 01       	movw	r24, r26
    5478:	0e 94 aa 38 	call	0x7154	; 0x7154 <__gesf2>
    547c:	18 16       	cp	r1, r24
    547e:	0c f0       	brlt	.+2      	; 0x5482 <vLeibniz+0x484>
    5480:	50 c0       	rjmp	.+160    	; 0x5522 <vLeibniz+0x524>
    5482:	20 e0       	ldi	r18, 0x00	; 0
    5484:	30 e5       	ldi	r19, 0x50	; 80
    5486:	43 ec       	ldi	r20, 0xC3	; 195
    5488:	57 e4       	ldi	r21, 0x47	; 71
    548a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    548c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    548e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5490:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5492:	0e 94 af 38 	call	0x715e	; 0x715e <__mulsf3>
    5496:	dc 01       	movw	r26, r24
    5498:	cb 01       	movw	r24, r22
    549a:	20 e0       	ldi	r18, 0x00	; 0
    549c:	36 e6       	ldi	r19, 0x66	; 102
    549e:	49 e9       	ldi	r20, 0x99	; 153
    54a0:	58 e4       	ldi	r21, 0x48	; 72
    54a2:	bc 01       	movw	r22, r24
    54a4:	cd 01       	movw	r24, r26
    54a6:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <__cmpsf2>
    54aa:	88 23       	and	r24, r24
    54ac:	d4 f5       	brge	.+116    	; 0x5522 <vLeibniz+0x524>
			Endtime = xTaskGetTickCount() - Starttime;
    54ae:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <xTaskGetTickCount>
    54b2:	9b 01       	movw	r18, r22
    54b4:	ac 01       	movw	r20, r24
    54b6:	8d 81       	ldd	r24, Y+5	; 0x05
    54b8:	9e 81       	ldd	r25, Y+6	; 0x06
    54ba:	af 81       	ldd	r26, Y+7	; 0x07
    54bc:	b8 85       	ldd	r27, Y+8	; 0x08
    54be:	79 01       	movw	r14, r18
    54c0:	8a 01       	movw	r16, r20
    54c2:	e8 1a       	sub	r14, r24
    54c4:	f9 0a       	sbc	r15, r25
    54c6:	0a 0b       	sbc	r16, r26
    54c8:	1b 0b       	sbc	r17, r27
    54ca:	d8 01       	movw	r26, r16
    54cc:	c7 01       	movw	r24, r14
    54ce:	8f a3       	std	Y+39, r24	; 0x27
    54d0:	98 a7       	std	Y+40, r25	; 0x28
    54d2:	a9 a7       	std	Y+41, r26	; 0x29
    54d4:	ba a7       	std	Y+42, r27	; 0x2a
			Elapsedtime += Endtime;
    54d6:	2f a1       	ldd	r18, Y+39	; 0x27
    54d8:	38 a5       	ldd	r19, Y+40	; 0x28
    54da:	8d 89       	ldd	r24, Y+21	; 0x15
    54dc:	9e 89       	ldd	r25, Y+22	; 0x16
    54de:	82 0f       	add	r24, r18
    54e0:	93 1f       	adc	r25, r19
    54e2:	8d 8b       	std	Y+21, r24	; 0x15
    54e4:	9e 8b       	std	Y+22, r25	; 0x16
			sprintf(&LeibnizExactTime[0], "Pi %dms", Elapsedtime);
    54e6:	8e 89       	ldd	r24, Y+22	; 0x16
    54e8:	8f 93       	push	r24
    54ea:	8d 89       	ldd	r24, Y+21	; 0x15
    54ec:	8f 93       	push	r24
    54ee:	89 ef       	ldi	r24, 0xF9	; 249
    54f0:	90 e2       	ldi	r25, 0x20	; 32
    54f2:	89 2f       	mov	r24, r25
    54f4:	8f 93       	push	r24
    54f6:	89 ef       	ldi	r24, 0xF9	; 249
    54f8:	90 e2       	ldi	r25, 0x20	; 32
    54fa:	8f 93       	push	r24
    54fc:	88 e8       	ldi	r24, 0x88	; 136
    54fe:	95 e3       	ldi	r25, 0x35	; 53
    5500:	89 2f       	mov	r24, r25
    5502:	8f 93       	push	r24
    5504:	88 e8       	ldi	r24, 0x88	; 136
    5506:	95 e3       	ldi	r25, 0x35	; 53
    5508:	8f 93       	push	r24
    550a:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <sprintf>
    550e:	0f 90       	pop	r0
    5510:	0f 90       	pop	r0
    5512:	0f 90       	pop	r0
    5514:	0f 90       	pop	r0
    5516:	0f 90       	pop	r0
    5518:	0f 90       	pop	r0
			Codeblocker = 1;
    551a:	81 e0       	ldi	r24, 0x01	; 1
    551c:	90 e0       	ldi	r25, 0x00	; 0
    551e:	89 8f       	std	Y+25, r24	; 0x19
    5520:	9a 8f       	std	Y+26, r25	; 0x1a
	uint32_t currentTime = 0;
	uint32_t Elapsedcounter = 0;
	int Codeblocker = 0;
	Starttime  = xTaskGetTickCount();
	
	for(i = 0; i < n; i ++){
    5522:	8d 85       	ldd	r24, Y+13	; 0x0d
    5524:	9e 85       	ldd	r25, Y+14	; 0x0e
    5526:	af 85       	ldd	r26, Y+15	; 0x0f
    5528:	b8 89       	ldd	r27, Y+16	; 0x10
    552a:	01 96       	adiw	r24, 0x01	; 1
    552c:	a1 1d       	adc	r26, r1
    552e:	b1 1d       	adc	r27, r1
    5530:	8d 87       	std	Y+13, r24	; 0x0d
    5532:	9e 87       	std	Y+14, r25	; 0x0e
    5534:	af 87       	std	Y+15, r26	; 0x0f
    5536:	b8 8b       	std	Y+16, r27	; 0x10
    5538:	2d 85       	ldd	r18, Y+13	; 0x0d
    553a:	3e 85       	ldd	r19, Y+14	; 0x0e
    553c:	4f 85       	ldd	r20, Y+15	; 0x0f
    553e:	58 89       	ldd	r21, Y+16	; 0x10
    5540:	89 89       	ldd	r24, Y+17	; 0x11
    5542:	9a 89       	ldd	r25, Y+18	; 0x12
    5544:	ab 89       	ldd	r26, Y+19	; 0x13
    5546:	bc 89       	ldd	r27, Y+20	; 0x14
    5548:	28 17       	cp	r18, r24
    554a:	39 07       	cpc	r19, r25
    554c:	4a 07       	cpc	r20, r26
    554e:	5b 07       	cpc	r21, r27
    5550:	08 f4       	brcc	.+2      	; 0x5554 <vLeibniz+0x556>
    5552:	ae cd       	rjmp	.-1188   	; 0x50b0 <vLeibniz+0xb2>
			Elapsedtime += Endtime;
			sprintf(&LeibnizExactTime[0], "Pi %dms", Elapsedtime);
			Codeblocker = 1;
		}
	}
}
    5554:	00 00       	nop
    5556:	ac 96       	adiw	r28, 0x2c	; 44
    5558:	cd bf       	out	0x3d, r28	; 61
    555a:	de bf       	out	0x3e, r29	; 62
    555c:	df 91       	pop	r29
    555e:	cf 91       	pop	r28
    5560:	1f 91       	pop	r17
    5562:	0f 91       	pop	r16
    5564:	ff 90       	pop	r15
    5566:	ef 90       	pop	r14
    5568:	df 90       	pop	r13
    556a:	cf 90       	pop	r12
    556c:	08 95       	ret

0000556e <vNilakantha>:

//////////////////////////////////////////////////////////////////////////
//						Nilakantha calculation							//
//////////////////////////////////////////////////////////////////////////

void vNilakantha(void *pvParameter){
    556e:	cf 92       	push	r12
    5570:	df 92       	push	r13
    5572:	ef 92       	push	r14
    5574:	ff 92       	push	r15
    5576:	0f 93       	push	r16
    5578:	1f 93       	push	r17
    557a:	cf 93       	push	r28
    557c:	df 93       	push	r29
    557e:	cd b7       	in	r28, 0x3d	; 61
    5580:	de b7       	in	r29, 0x3e	; 62
    5582:	ac 97       	sbiw	r28, 0x2c	; 44
    5584:	cd bf       	out	0x3d, r28	; 61
    5586:	de bf       	out	0x3e, r29	; 62
    5588:	8b a7       	std	Y+43, r24	; 0x2b
    558a:	9c a7       	std	Y+44, r25	; 0x2c
	//Set Local variables
	TickType_t Starttime;
	TickType_t Endtime;
	double Zaehler;
	
	xEventGroupWaitBits(evStartStopEvents, EV_START_NILA, pdFALSE, pdTRUE, portMAX_DELAY);	//Task waits for Eventbit to start
    558c:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    5590:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    5594:	cc 24       	eor	r12, r12
    5596:	ca 94       	dec	r12
    5598:	dc 2c       	mov	r13, r12
    559a:	76 01       	movw	r14, r12
    559c:	01 e0       	ldi	r16, 0x01	; 1
    559e:	20 e0       	ldi	r18, 0x00	; 0
    55a0:	44 e0       	ldi	r20, 0x04	; 4
    55a2:	50 e0       	ldi	r21, 0x00	; 0
    55a4:	60 e0       	ldi	r22, 0x00	; 0
    55a6:	70 e0       	ldi	r23, 0x00	; 0
    55a8:	0e 94 7f 04 	call	0x8fe	; 0x8fe <xEventGroupWaitBits>
	
    while (1) {
        start_here:	//Startpoint after reset calculation
		xEventGroupClearBits(evStartStopEvents, EV_CLEAR);
    55ac:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    55b0:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    55b4:	4f ef       	ldi	r20, 0xFF	; 255
    55b6:	50 e0       	ldi	r21, 0x00	; 0
    55b8:	60 e0       	ldi	r22, 0x00	; 0
    55ba:	70 e0       	ldi	r23, 0x00	; 0
    55bc:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
        Bits = xEventGroupSetBits(evStartStopEvents, EV_START_NILA);
    55c0:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    55c4:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    55c8:	44 e0       	ldi	r20, 0x04	; 4
    55ca:	50 e0       	ldi	r21, 0x00	; 0
    55cc:	60 e0       	ldi	r22, 0x00	; 0
    55ce:	70 e0       	ldi	r23, 0x00	; 0
    55d0:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
    55d4:	dc 01       	movw	r26, r24
    55d6:	cb 01       	movw	r24, r22
    55d8:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <Bits>
    55dc:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <Bits+0x1>
    55e0:	a0 93 76 35 	sts	0x3576, r26	; 0x803576 <Bits+0x2>
    55e4:	b0 93 77 35 	sts	0x3577, r27	; 0x803577 <Bits+0x3>
		
		//Local Variables with startvalue, 
		int Elapsedtime = 0;
    55e8:	1d 82       	std	Y+5, r1	; 0x05
    55ea:	1e 82       	std	Y+6, r1	; 0x06
        float32_t PI = 0;
    55ec:	1f 82       	std	Y+7, r1	; 0x07
    55ee:	18 86       	std	Y+8, r1	; 0x08
    55f0:	19 86       	std	Y+9, r1	; 0x09
    55f2:	1a 86       	std	Y+10, r1	; 0x0a
		TickType_t lastExecutionTime = xTaskGetTickCount();
    55f4:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <xTaskGetTickCount>
    55f8:	dc 01       	movw	r26, r24
    55fa:	cb 01       	movw	r24, r22
    55fc:	8b 87       	std	Y+11, r24	; 0x0b
    55fe:	9c 87       	std	Y+12, r25	; 0x0c
    5600:	ad 87       	std	Y+13, r26	; 0x0d
    5602:	be 87       	std	Y+14, r27	; 0x0e
        long int i = 0;
    5604:	1f 86       	std	Y+15, r1	; 0x0f
    5606:	18 8a       	std	Y+16, r1	; 0x10
    5608:	19 8a       	std	Y+17, r1	; 0x11
    560a:	1a 8a       	std	Y+18, r1	; 0x12
		long int n = 2;
    560c:	82 e0       	ldi	r24, 0x02	; 2
    560e:	90 e0       	ldi	r25, 0x00	; 0
    5610:	a0 e0       	ldi	r26, 0x00	; 0
    5612:	b0 e0       	ldi	r27, 0x00	; 0
    5614:	8b 8b       	std	Y+19, r24	; 0x13
    5616:	9c 8b       	std	Y+20, r25	; 0x14
    5618:	ad 8b       	std	Y+21, r26	; 0x15
    561a:	be 8b       	std	Y+22, r27	; 0x16
		int elapsedSeconds = 0;
    561c:	1f 8a       	std	Y+23, r1	; 0x17
    561e:	18 8e       	std	Y+24, r1	; 0x18
		uint32_t currentTime = 0;
    5620:	1b 8e       	std	Y+27, r1	; 0x1b
    5622:	1c 8e       	std	Y+28, r1	; 0x1c
    5624:	1d 8e       	std	Y+29, r1	; 0x1d
    5626:	1e 8e       	std	Y+30, r1	; 0x1e
		uint32_t Elapsedcounter = 0;
    5628:	1f 8e       	std	Y+31, r1	; 0x1f
    562a:	18 a2       	std	Y+32, r1	; 0x20
    562c:	19 a2       	std	Y+33, r1	; 0x21
    562e:	1a a2       	std	Y+34, r1	; 0x22
		int codeblock = 0;
    5630:	19 8e       	std	Y+25, r1	; 0x19
    5632:	1a 8e       	std	Y+26, r1	; 0x1a
		Zaehler = -1;
    5634:	80 e0       	ldi	r24, 0x00	; 0
    5636:	90 e0       	ldi	r25, 0x00	; 0
    5638:	a0 e8       	ldi	r26, 0x80	; 128
    563a:	bf eb       	ldi	r27, 0xBF	; 191
    563c:	89 83       	std	Y+1, r24	; 0x01
    563e:	9a 83       	std	Y+2, r25	; 0x02
    5640:	ab 83       	std	Y+3, r26	; 0x03
    5642:	bc 83       	std	Y+4, r27	; 0x04
		Starttime  = xTaskGetTickCount();
    5644:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <xTaskGetTickCount>
    5648:	dc 01       	movw	r26, r24
    564a:	cb 01       	movw	r24, r22
    564c:	8b a3       	std	Y+35, r24	; 0x23
    564e:	9c a3       	std	Y+36, r25	; 0x24
    5650:	ad a3       	std	Y+37, r26	; 0x25
    5652:	be a3       	std	Y+38, r27	; 0x26
		
        if (i == 0) {
    5654:	8f 85       	ldd	r24, Y+15	; 0x0f
    5656:	98 89       	ldd	r25, Y+16	; 0x10
    5658:	a9 89       	ldd	r26, Y+17	; 0x11
    565a:	ba 89       	ldd	r27, Y+18	; 0x12
    565c:	89 2b       	or	r24, r25
    565e:	8a 2b       	or	r24, r26
    5660:	8b 2b       	or	r24, r27
    5662:	09 f0       	breq	.+2      	; 0x5666 <vNilakantha+0xf8>
    5664:	72 c0       	rjmp	.+228    	; 0x574a <vNilakantha+0x1dc>
            //First calculation
            PI = 3;
    5666:	80 e0       	ldi	r24, 0x00	; 0
    5668:	90 e0       	ldi	r25, 0x00	; 0
    566a:	a0 e4       	ldi	r26, 0x40	; 64
    566c:	b0 e4       	ldi	r27, 0x40	; 64
    566e:	8f 83       	std	Y+7, r24	; 0x07
    5670:	98 87       	std	Y+8, r25	; 0x08
    5672:	a9 87       	std	Y+9, r26	; 0x09
    5674:	ba 87       	std	Y+10, r27	; 0x0a
            Zaehler *= -1;
    5676:	89 81       	ldd	r24, Y+1	; 0x01
    5678:	9a 81       	ldd	r25, Y+2	; 0x02
    567a:	ab 81       	ldd	r26, Y+3	; 0x03
    567c:	bc 81       	ldd	r27, Y+4	; 0x04
    567e:	b0 58       	subi	r27, 0x80	; 128
    5680:	89 83       	std	Y+1, r24	; 0x01
    5682:	9a 83       	std	Y+2, r25	; 0x02
    5684:	ab 83       	std	Y+3, r26	; 0x03
    5686:	bc 83       	std	Y+4, r27	; 0x04
            PI = PI + (Zaehler * 4 / (n * (n + 1) * (n + 2)));
    5688:	20 e0       	ldi	r18, 0x00	; 0
    568a:	30 e0       	ldi	r19, 0x00	; 0
    568c:	40 e8       	ldi	r20, 0x80	; 128
    568e:	50 e4       	ldi	r21, 0x40	; 64
    5690:	69 81       	ldd	r22, Y+1	; 0x01
    5692:	7a 81       	ldd	r23, Y+2	; 0x02
    5694:	8b 81       	ldd	r24, Y+3	; 0x03
    5696:	9c 81       	ldd	r25, Y+4	; 0x04
    5698:	0e 94 af 38 	call	0x715e	; 0x715e <__mulsf3>
    569c:	dc 01       	movw	r26, r24
    569e:	cb 01       	movw	r24, r22
    56a0:	6c 01       	movw	r12, r24
    56a2:	7d 01       	movw	r14, r26
    56a4:	8b 89       	ldd	r24, Y+19	; 0x13
    56a6:	9c 89       	ldd	r25, Y+20	; 0x14
    56a8:	ad 89       	ldd	r26, Y+21	; 0x15
    56aa:	be 89       	ldd	r27, Y+22	; 0x16
    56ac:	9c 01       	movw	r18, r24
    56ae:	ad 01       	movw	r20, r26
    56b0:	2f 5f       	subi	r18, 0xFF	; 255
    56b2:	3f 4f       	sbci	r19, 0xFF	; 255
    56b4:	4f 4f       	sbci	r20, 0xFF	; 255
    56b6:	5f 4f       	sbci	r21, 0xFF	; 255
    56b8:	8b 89       	ldd	r24, Y+19	; 0x13
    56ba:	9c 89       	ldd	r25, Y+20	; 0x14
    56bc:	ad 89       	ldd	r26, Y+21	; 0x15
    56be:	be 89       	ldd	r27, Y+22	; 0x16
    56c0:	bc 01       	movw	r22, r24
    56c2:	cd 01       	movw	r24, r26
    56c4:	0e 94 bc 3c 	call	0x7978	; 0x7978 <__mulsi3>
    56c8:	9b 01       	movw	r18, r22
    56ca:	ac 01       	movw	r20, r24
    56cc:	8b 89       	ldd	r24, Y+19	; 0x13
    56ce:	9c 89       	ldd	r25, Y+20	; 0x14
    56d0:	ad 89       	ldd	r26, Y+21	; 0x15
    56d2:	be 89       	ldd	r27, Y+22	; 0x16
    56d4:	02 96       	adiw	r24, 0x02	; 2
    56d6:	a1 1d       	adc	r26, r1
    56d8:	b1 1d       	adc	r27, r1
    56da:	bc 01       	movw	r22, r24
    56dc:	cd 01       	movw	r24, r26
    56de:	0e 94 bc 3c 	call	0x7978	; 0x7978 <__mulsi3>
    56e2:	dc 01       	movw	r26, r24
    56e4:	cb 01       	movw	r24, r22
    56e6:	bc 01       	movw	r22, r24
    56e8:	cd 01       	movw	r24, r26
    56ea:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <__floatsisf>
    56ee:	dc 01       	movw	r26, r24
    56f0:	cb 01       	movw	r24, r22
    56f2:	9c 01       	movw	r18, r24
    56f4:	ad 01       	movw	r20, r26
    56f6:	c7 01       	movw	r24, r14
    56f8:	b6 01       	movw	r22, r12
    56fa:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <__divsf3>
    56fe:	dc 01       	movw	r26, r24
    5700:	cb 01       	movw	r24, r22
    5702:	9c 01       	movw	r18, r24
    5704:	ad 01       	movw	r20, r26
    5706:	6f 81       	ldd	r22, Y+7	; 0x07
    5708:	78 85       	ldd	r23, Y+8	; 0x08
    570a:	89 85       	ldd	r24, Y+9	; 0x09
    570c:	9a 85       	ldd	r25, Y+10	; 0x0a
    570e:	0e 94 df 36 	call	0x6dbe	; 0x6dbe <__addsf3>
    5712:	dc 01       	movw	r26, r24
    5714:	cb 01       	movw	r24, r22
    5716:	8f 83       	std	Y+7, r24	; 0x07
    5718:	98 87       	std	Y+8, r25	; 0x08
    571a:	a9 87       	std	Y+9, r26	; 0x09
    571c:	ba 87       	std	Y+10, r27	; 0x0a
            n += 2;
    571e:	8b 89       	ldd	r24, Y+19	; 0x13
    5720:	9c 89       	ldd	r25, Y+20	; 0x14
    5722:	ad 89       	ldd	r26, Y+21	; 0x15
    5724:	be 89       	ldd	r27, Y+22	; 0x16
    5726:	02 96       	adiw	r24, 0x02	; 2
    5728:	a1 1d       	adc	r26, r1
    572a:	b1 1d       	adc	r27, r1
    572c:	8b 8b       	std	Y+19, r24	; 0x13
    572e:	9c 8b       	std	Y+20, r25	; 0x14
    5730:	ad 8b       	std	Y+21, r26	; 0x15
    5732:	be 8b       	std	Y+22, r27	; 0x16
            i += 1;
    5734:	8f 85       	ldd	r24, Y+15	; 0x0f
    5736:	98 89       	ldd	r25, Y+16	; 0x10
    5738:	a9 89       	ldd	r26, Y+17	; 0x11
    573a:	ba 89       	ldd	r27, Y+18	; 0x12
    573c:	01 96       	adiw	r24, 0x01	; 1
    573e:	a1 1d       	adc	r26, r1
    5740:	b1 1d       	adc	r27, r1
    5742:	8f 87       	std	Y+15, r24	; 0x0f
    5744:	98 8b       	std	Y+16, r25	; 0x10
    5746:	a9 8b       	std	Y+17, r26	; 0x11
    5748:	ba 8b       	std	Y+18, r27	; 0x12
        }

        for (i = 1; i < n; i++) {
    574a:	81 e0       	ldi	r24, 0x01	; 1
    574c:	90 e0       	ldi	r25, 0x00	; 0
    574e:	a0 e0       	ldi	r26, 0x00	; 0
    5750:	b0 e0       	ldi	r27, 0x00	; 0
    5752:	8f 87       	std	Y+15, r24	; 0x0f
    5754:	98 8b       	std	Y+16, r25	; 0x10
    5756:	a9 8b       	std	Y+17, r26	; 0x11
    5758:	ba 8b       	std	Y+18, r27	; 0x12
    575a:	d6 c1       	rjmp	.+940    	; 0x5b08 <vNilakantha+0x59a>
			currentTime = xTaskGetTickCount();
    575c:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <xTaskGetTickCount>
    5760:	dc 01       	movw	r26, r24
    5762:	cb 01       	movw	r24, r22
    5764:	8b 8f       	std	Y+27, r24	; 0x1b
    5766:	9c 8f       	std	Y+28, r25	; 0x1c
    5768:	ad 8f       	std	Y+29, r26	; 0x1d
    576a:	be 8f       	std	Y+30, r27	; 0x1e
			Elapsedcounter = currentTime - lastExecutionTime;
    576c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    576e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    5770:	4d 8d       	ldd	r20, Y+29	; 0x1d
    5772:	5e 8d       	ldd	r21, Y+30	; 0x1e
    5774:	8b 85       	ldd	r24, Y+11	; 0x0b
    5776:	9c 85       	ldd	r25, Y+12	; 0x0c
    5778:	ad 85       	ldd	r26, Y+13	; 0x0d
    577a:	be 85       	ldd	r27, Y+14	; 0x0e
    577c:	79 01       	movw	r14, r18
    577e:	8a 01       	movw	r16, r20
    5780:	e8 1a       	sub	r14, r24
    5782:	f9 0a       	sbc	r15, r25
    5784:	0a 0b       	sbc	r16, r26
    5786:	1b 0b       	sbc	r17, r27
    5788:	d8 01       	movw	r26, r16
    578a:	c7 01       	movw	r24, r14
    578c:	8f 8f       	std	Y+31, r24	; 0x1f
    578e:	98 a3       	std	Y+32, r25	; 0x20
    5790:	a9 a3       	std	Y+33, r26	; 0x21
    5792:	ba a3       	std	Y+34, r27	; 0x22
            if (Bits & EV_STOP_NILA) { //Stop function
    5794:	80 91 74 35 	lds	r24, 0x3574	; 0x803574 <Bits>
    5798:	90 91 75 35 	lds	r25, 0x3575	; 0x803575 <Bits+0x1>
    579c:	a0 91 76 35 	lds	r26, 0x3576	; 0x803576 <Bits+0x2>
    57a0:	b0 91 77 35 	lds	r27, 0x3577	; 0x803577 <Bits+0x3>
    57a4:	88 70       	andi	r24, 0x08	; 8
    57a6:	99 27       	eor	r25, r25
    57a8:	aa 27       	eor	r26, r26
    57aa:	bb 27       	eor	r27, r27
    57ac:	89 2b       	or	r24, r25
    57ae:	8a 2b       	or	r24, r26
    57b0:	8b 2b       	or	r24, r27
    57b2:	59 f1       	breq	.+86     	; 0x580a <vNilakantha+0x29c>
				xEventGroupClearBits(evStartStopEvents, EV_CLEAR);
    57b4:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    57b8:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    57bc:	4f ef       	ldi	r20, 0xFF	; 255
    57be:	50 e0       	ldi	r21, 0x00	; 0
    57c0:	60 e0       	ldi	r22, 0x00	; 0
    57c2:	70 e0       	ldi	r23, 0x00	; 0
    57c4:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
                xEventGroupSetBits(evStartStopEvents, EV_STOPPED_NILA);
    57c8:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    57cc:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    57d0:	40 e2       	ldi	r20, 0x20	; 32
    57d2:	50 e0       	ldi	r21, 0x00	; 0
    57d4:	60 e0       	ldi	r22, 0x00	; 0
    57d6:	70 e0       	ldi	r23, 0x00	; 0
    57d8:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
				Bits = xEventGroupGetBits(evStartStopEvents);
    57dc:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    57e0:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    57e4:	40 e0       	ldi	r20, 0x00	; 0
    57e6:	50 e0       	ldi	r21, 0x00	; 0
    57e8:	ba 01       	movw	r22, r20
    57ea:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    57ee:	dc 01       	movw	r26, r24
    57f0:	cb 01       	movw	r24, r22
    57f2:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <Bits>
    57f6:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <Bits+0x1>
    57fa:	a0 93 76 35 	sts	0x3576, r26	; 0x803576 <Bits+0x2>
    57fe:	b0 93 77 35 	sts	0x3577, r27	; 0x803577 <Bits+0x3>
                vTaskSuspend(NULL);
    5802:	80 e0       	ldi	r24, 0x00	; 0
    5804:	90 e0       	ldi	r25, 0x00	; 0
    5806:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <vTaskSuspend>
            }
            if (Bits & EV_RESET_NILA) {	//Reset function
    580a:	80 91 74 35 	lds	r24, 0x3574	; 0x803574 <Bits>
    580e:	90 91 75 35 	lds	r25, 0x3575	; 0x803575 <Bits+0x1>
    5812:	a0 91 76 35 	lds	r26, 0x3576	; 0x803576 <Bits+0x2>
    5816:	b0 91 77 35 	lds	r27, 0x3577	; 0x803577 <Bits+0x3>
    581a:	80 78       	andi	r24, 0x80	; 128
    581c:	99 27       	eor	r25, r25
    581e:	aa 27       	eor	r26, r26
    5820:	bb 27       	eor	r27, r27
    5822:	89 2b       	or	r24, r25
    5824:	8a 2b       	or	r24, r26
    5826:	8b 2b       	or	r24, r27
    5828:	09 f4       	brne	.+2      	; 0x582c <vNilakantha+0x2be>
    582a:	44 c0       	rjmp	.+136    	; 0x58b4 <vNilakantha+0x346>
				xEventGroupClearBits(evStartStopEvents, EV_CLEAR);
    582c:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    5830:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    5834:	4f ef       	ldi	r20, 0xFF	; 255
    5836:	50 e0       	ldi	r21, 0x00	; 0
    5838:	60 e0       	ldi	r22, 0x00	; 0
    583a:	70 e0       	ldi	r23, 0x00	; 0
    583c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
                xEventGroupSetBits(evStartStopEvents, EV_STOPPED_NILA);
    5840:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    5844:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    5848:	40 e2       	ldi	r20, 0x20	; 32
    584a:	50 e0       	ldi	r21, 0x00	; 0
    584c:	60 e0       	ldi	r22, 0x00	; 0
    584e:	70 e0       	ldi	r23, 0x00	; 0
    5850:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
				memset(NilakanthaPiString, 0, sizeof(NilakanthaPiString));			//String gets emptied
    5854:	40 e1       	ldi	r20, 0x10	; 16
    5856:	50 e0       	ldi	r21, 0x00	; 0
    5858:	60 e0       	ldi	r22, 0x00	; 0
    585a:	70 e0       	ldi	r23, 0x00	; 0
    585c:	88 e7       	ldi	r24, 0x78	; 120
    585e:	95 e3       	ldi	r25, 0x35	; 53
    5860:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <memset>
				memset(NilakanthaTimeString, 0, sizeof(NilakanthaTimeString));		//String gets emptied
    5864:	43 e0       	ldi	r20, 0x03	; 3
    5866:	50 e0       	ldi	r21, 0x00	; 0
    5868:	60 e0       	ldi	r22, 0x00	; 0
    586a:	70 e0       	ldi	r23, 0x00	; 0
    586c:	84 e9       	ldi	r24, 0x94	; 148
    586e:	95 e3       	ldi	r25, 0x35	; 53
    5870:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <memset>
				memset(NilakanthaExactTime, 0, sizeof(NilakanthaExactTime));		//String gets emptied
    5874:	4a e0       	ldi	r20, 0x0A	; 10
    5876:	50 e0       	ldi	r21, 0x00	; 0
    5878:	60 e0       	ldi	r22, 0x00	; 0
    587a:	70 e0       	ldi	r23, 0x00	; 0
    587c:	88 e6       	ldi	r24, 0x68	; 104
    587e:	95 e3       	ldi	r25, 0x35	; 53
    5880:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <memset>
				Bits = xEventGroupGetBits(evStartStopEvents);
    5884:	80 91 72 35 	lds	r24, 0x3572	; 0x803572 <evStartStopEvents>
    5888:	90 91 73 35 	lds	r25, 0x3573	; 0x803573 <evStartStopEvents+0x1>
    588c:	40 e0       	ldi	r20, 0x00	; 0
    588e:	50 e0       	ldi	r21, 0x00	; 0
    5890:	ba 01       	movw	r22, r20
    5892:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    5896:	dc 01       	movw	r26, r24
    5898:	cb 01       	movw	r24, r22
    589a:	80 93 74 35 	sts	0x3574, r24	; 0x803574 <Bits>
    589e:	90 93 75 35 	sts	0x3575, r25	; 0x803575 <Bits+0x1>
    58a2:	a0 93 76 35 	sts	0x3576, r26	; 0x803576 <Bits+0x2>
    58a6:	b0 93 77 35 	sts	0x3577, r27	; 0x803577 <Bits+0x3>
				vTaskSuspend(NULL);
    58aa:	80 e0       	ldi	r24, 0x00	; 0
    58ac:	90 e0       	ldi	r25, 0x00	; 0
    58ae:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <vTaskSuspend>
                goto start_here;
    58b2:	7c ce       	rjmp	.-776    	; 0x55ac <vNilakantha+0x3e>
            }
			
			//Nilakantha Algorithm
			Zaehler *= -1;	
    58b4:	89 81       	ldd	r24, Y+1	; 0x01
    58b6:	9a 81       	ldd	r25, Y+2	; 0x02
    58b8:	ab 81       	ldd	r26, Y+3	; 0x03
    58ba:	bc 81       	ldd	r27, Y+4	; 0x04
    58bc:	b0 58       	subi	r27, 0x80	; 128
    58be:	89 83       	std	Y+1, r24	; 0x01
    58c0:	9a 83       	std	Y+2, r25	; 0x02
    58c2:	ab 83       	std	Y+3, r26	; 0x03
    58c4:	bc 83       	std	Y+4, r27	; 0x04
			PI += (Zaehler * 4 / (n * (n + 1) * (n + 2)));
    58c6:	20 e0       	ldi	r18, 0x00	; 0
    58c8:	30 e0       	ldi	r19, 0x00	; 0
    58ca:	40 e8       	ldi	r20, 0x80	; 128
    58cc:	50 e4       	ldi	r21, 0x40	; 64
    58ce:	69 81       	ldd	r22, Y+1	; 0x01
    58d0:	7a 81       	ldd	r23, Y+2	; 0x02
    58d2:	8b 81       	ldd	r24, Y+3	; 0x03
    58d4:	9c 81       	ldd	r25, Y+4	; 0x04
    58d6:	0e 94 af 38 	call	0x715e	; 0x715e <__mulsf3>
    58da:	dc 01       	movw	r26, r24
    58dc:	cb 01       	movw	r24, r22
    58de:	6c 01       	movw	r12, r24
    58e0:	7d 01       	movw	r14, r26
    58e2:	8b 89       	ldd	r24, Y+19	; 0x13
    58e4:	9c 89       	ldd	r25, Y+20	; 0x14
    58e6:	ad 89       	ldd	r26, Y+21	; 0x15
    58e8:	be 89       	ldd	r27, Y+22	; 0x16
    58ea:	9c 01       	movw	r18, r24
    58ec:	ad 01       	movw	r20, r26
    58ee:	2f 5f       	subi	r18, 0xFF	; 255
    58f0:	3f 4f       	sbci	r19, 0xFF	; 255
    58f2:	4f 4f       	sbci	r20, 0xFF	; 255
    58f4:	5f 4f       	sbci	r21, 0xFF	; 255
    58f6:	8b 89       	ldd	r24, Y+19	; 0x13
    58f8:	9c 89       	ldd	r25, Y+20	; 0x14
    58fa:	ad 89       	ldd	r26, Y+21	; 0x15
    58fc:	be 89       	ldd	r27, Y+22	; 0x16
    58fe:	bc 01       	movw	r22, r24
    5900:	cd 01       	movw	r24, r26
    5902:	0e 94 bc 3c 	call	0x7978	; 0x7978 <__mulsi3>
    5906:	9b 01       	movw	r18, r22
    5908:	ac 01       	movw	r20, r24
    590a:	8b 89       	ldd	r24, Y+19	; 0x13
    590c:	9c 89       	ldd	r25, Y+20	; 0x14
    590e:	ad 89       	ldd	r26, Y+21	; 0x15
    5910:	be 89       	ldd	r27, Y+22	; 0x16
    5912:	02 96       	adiw	r24, 0x02	; 2
    5914:	a1 1d       	adc	r26, r1
    5916:	b1 1d       	adc	r27, r1
    5918:	bc 01       	movw	r22, r24
    591a:	cd 01       	movw	r24, r26
    591c:	0e 94 bc 3c 	call	0x7978	; 0x7978 <__mulsi3>
    5920:	dc 01       	movw	r26, r24
    5922:	cb 01       	movw	r24, r22
    5924:	bc 01       	movw	r22, r24
    5926:	cd 01       	movw	r24, r26
    5928:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <__floatsisf>
    592c:	dc 01       	movw	r26, r24
    592e:	cb 01       	movw	r24, r22
    5930:	9c 01       	movw	r18, r24
    5932:	ad 01       	movw	r20, r26
    5934:	c7 01       	movw	r24, r14
    5936:	b6 01       	movw	r22, r12
    5938:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <__divsf3>
    593c:	dc 01       	movw	r26, r24
    593e:	cb 01       	movw	r24, r22
    5940:	9c 01       	movw	r18, r24
    5942:	ad 01       	movw	r20, r26
    5944:	6f 81       	ldd	r22, Y+7	; 0x07
    5946:	78 85       	ldd	r23, Y+8	; 0x08
    5948:	89 85       	ldd	r24, Y+9	; 0x09
    594a:	9a 85       	ldd	r25, Y+10	; 0x0a
    594c:	0e 94 df 36 	call	0x6dbe	; 0x6dbe <__addsf3>
    5950:	dc 01       	movw	r26, r24
    5952:	cb 01       	movw	r24, r22
    5954:	8f 83       	std	Y+7, r24	; 0x07
    5956:	98 87       	std	Y+8, r25	; 0x08
    5958:	a9 87       	std	Y+9, r26	; 0x09
    595a:	ba 87       	std	Y+10, r27	; 0x0a
			n += 2;
    595c:	8b 89       	ldd	r24, Y+19	; 0x13
    595e:	9c 89       	ldd	r25, Y+20	; 0x14
    5960:	ad 89       	ldd	r26, Y+21	; 0x15
    5962:	be 89       	ldd	r27, Y+22	; 0x16
    5964:	02 96       	adiw	r24, 0x02	; 2
    5966:	a1 1d       	adc	r26, r1
    5968:	b1 1d       	adc	r27, r1
    596a:	8b 8b       	std	Y+19, r24	; 0x13
    596c:	9c 8b       	std	Y+20, r25	; 0x14
    596e:	ad 8b       	std	Y+21, r26	; 0x15
    5970:	be 8b       	std	Y+22, r27	; 0x16
	
			//Writes every 500ms Pi and elapsed Time into Strings			
			if (Elapsedcounter >= pdMS_TO_TICKS(500)) {
    5972:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5974:	98 a1       	ldd	r25, Y+32	; 0x20
    5976:	a9 a1       	ldd	r26, Y+33	; 0x21
    5978:	ba a1       	ldd	r27, Y+34	; 0x22
    597a:	84 3f       	cpi	r24, 0xF4	; 244
    597c:	91 40       	sbci	r25, 0x01	; 1
    597e:	a1 05       	cpc	r26, r1
    5980:	b1 05       	cpc	r27, r1
    5982:	08 f4       	brcc	.+2      	; 0x5986 <vNilakantha+0x418>
    5984:	4a c0       	rjmp	.+148    	; 0x5a1a <vNilakantha+0x4ac>
				sprintf(&NilakanthaPiString[0], "PI is %.7f", PI);
    5986:	8a 85       	ldd	r24, Y+10	; 0x0a
    5988:	8f 93       	push	r24
    598a:	89 85       	ldd	r24, Y+9	; 0x09
    598c:	8f 93       	push	r24
    598e:	88 85       	ldd	r24, Y+8	; 0x08
    5990:	8f 93       	push	r24
    5992:	8f 81       	ldd	r24, Y+7	; 0x07
    5994:	8f 93       	push	r24
    5996:	8a ee       	ldi	r24, 0xEA	; 234
    5998:	90 e2       	ldi	r25, 0x20	; 32
    599a:	89 2f       	mov	r24, r25
    599c:	8f 93       	push	r24
    599e:	8a ee       	ldi	r24, 0xEA	; 234
    59a0:	90 e2       	ldi	r25, 0x20	; 32
    59a2:	8f 93       	push	r24
    59a4:	88 e7       	ldi	r24, 0x78	; 120
    59a6:	95 e3       	ldi	r25, 0x35	; 53
    59a8:	89 2f       	mov	r24, r25
    59aa:	8f 93       	push	r24
    59ac:	88 e7       	ldi	r24, 0x78	; 120
    59ae:	95 e3       	ldi	r25, 0x35	; 53
    59b0:	8f 93       	push	r24
    59b2:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <sprintf>
    59b6:	8d b7       	in	r24, 0x3d	; 61
    59b8:	9e b7       	in	r25, 0x3e	; 62
    59ba:	08 96       	adiw	r24, 0x08	; 8
    59bc:	cd bf       	out	0x3d, r28	; 61
    59be:	de bf       	out	0x3e, r29	; 62
				sprintf(&NilakanthaTimeString[0], "%ds", (elapsedSeconds / 2));
    59c0:	8f 89       	ldd	r24, Y+23	; 0x17
    59c2:	98 8d       	ldd	r25, Y+24	; 0x18
    59c4:	99 23       	and	r25, r25
    59c6:	0c f4       	brge	.+2      	; 0x59ca <vNilakantha+0x45c>
    59c8:	01 96       	adiw	r24, 0x01	; 1
    59ca:	95 95       	asr	r25
    59cc:	87 95       	ror	r24
    59ce:	29 2f       	mov	r18, r25
    59d0:	2f 93       	push	r18
    59d2:	8f 93       	push	r24
    59d4:	85 ef       	ldi	r24, 0xF5	; 245
    59d6:	90 e2       	ldi	r25, 0x20	; 32
    59d8:	89 2f       	mov	r24, r25
    59da:	8f 93       	push	r24
    59dc:	85 ef       	ldi	r24, 0xF5	; 245
    59de:	90 e2       	ldi	r25, 0x20	; 32
    59e0:	8f 93       	push	r24
    59e2:	84 e9       	ldi	r24, 0x94	; 148
    59e4:	95 e3       	ldi	r25, 0x35	; 53
    59e6:	89 2f       	mov	r24, r25
    59e8:	8f 93       	push	r24
    59ea:	84 e9       	ldi	r24, 0x94	; 148
    59ec:	95 e3       	ldi	r25, 0x35	; 53
    59ee:	8f 93       	push	r24
    59f0:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <sprintf>
    59f4:	0f 90       	pop	r0
    59f6:	0f 90       	pop	r0
    59f8:	0f 90       	pop	r0
    59fa:	0f 90       	pop	r0
    59fc:	0f 90       	pop	r0
    59fe:	0f 90       	pop	r0
				lastExecutionTime = currentTime;
    5a00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a04:	ad 8d       	ldd	r26, Y+29	; 0x1d
    5a06:	be 8d       	ldd	r27, Y+30	; 0x1e
    5a08:	8b 87       	std	Y+11, r24	; 0x0b
    5a0a:	9c 87       	std	Y+12, r25	; 0x0c
    5a0c:	ad 87       	std	Y+13, r26	; 0x0d
    5a0e:	be 87       	std	Y+14, r27	; 0x0e
				elapsedSeconds ++;
    5a10:	8f 89       	ldd	r24, Y+23	; 0x17
    5a12:	98 8d       	ldd	r25, Y+24	; 0x18
    5a14:	01 96       	adiw	r24, 0x01	; 1
    5a16:	8f 8b       	std	Y+23, r24	; 0x17
    5a18:	98 8f       	std	Y+24, r25	; 0x18
			}
			
			//Writes exact Time into String when Pi has reached 5 digits precise, can only happen once trough Codeblock
			if(codeblock == 0 && (uint32_t)((PI*100000) > 314159 && (PI*100000) < 314160)){
    5a1a:	89 8d       	ldd	r24, Y+25	; 0x19
    5a1c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5a1e:	89 2b       	or	r24, r25
    5a20:	09 f0       	breq	.+2      	; 0x5a24 <vNilakantha+0x4b6>
    5a22:	67 c0       	rjmp	.+206    	; 0x5af2 <vNilakantha+0x584>
    5a24:	20 e0       	ldi	r18, 0x00	; 0
    5a26:	30 e5       	ldi	r19, 0x50	; 80
    5a28:	43 ec       	ldi	r20, 0xC3	; 195
    5a2a:	57 e4       	ldi	r21, 0x47	; 71
    5a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    5a2e:	78 85       	ldd	r23, Y+8	; 0x08
    5a30:	89 85       	ldd	r24, Y+9	; 0x09
    5a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a34:	0e 94 af 38 	call	0x715e	; 0x715e <__mulsf3>
    5a38:	dc 01       	movw	r26, r24
    5a3a:	cb 01       	movw	r24, r22
    5a3c:	20 ee       	ldi	r18, 0xE0	; 224
    5a3e:	35 e6       	ldi	r19, 0x65	; 101
    5a40:	49 e9       	ldi	r20, 0x99	; 153
    5a42:	58 e4       	ldi	r21, 0x48	; 72
    5a44:	bc 01       	movw	r22, r24
    5a46:	cd 01       	movw	r24, r26
    5a48:	0e 94 aa 38 	call	0x7154	; 0x7154 <__gesf2>
    5a4c:	18 16       	cp	r1, r24
    5a4e:	0c f0       	brlt	.+2      	; 0x5a52 <vNilakantha+0x4e4>
    5a50:	50 c0       	rjmp	.+160    	; 0x5af2 <vNilakantha+0x584>
    5a52:	20 e0       	ldi	r18, 0x00	; 0
    5a54:	30 e5       	ldi	r19, 0x50	; 80
    5a56:	43 ec       	ldi	r20, 0xC3	; 195
    5a58:	57 e4       	ldi	r21, 0x47	; 71
    5a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    5a5c:	78 85       	ldd	r23, Y+8	; 0x08
    5a5e:	89 85       	ldd	r24, Y+9	; 0x09
    5a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a62:	0e 94 af 38 	call	0x715e	; 0x715e <__mulsf3>
    5a66:	dc 01       	movw	r26, r24
    5a68:	cb 01       	movw	r24, r22
    5a6a:	20 e0       	ldi	r18, 0x00	; 0
    5a6c:	36 e6       	ldi	r19, 0x66	; 102
    5a6e:	49 e9       	ldi	r20, 0x99	; 153
    5a70:	58 e4       	ldi	r21, 0x48	; 72
    5a72:	bc 01       	movw	r22, r24
    5a74:	cd 01       	movw	r24, r26
    5a76:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <__cmpsf2>
    5a7a:	88 23       	and	r24, r24
    5a7c:	d4 f5       	brge	.+116    	; 0x5af2 <vNilakantha+0x584>
				Endtime = xTaskGetTickCount() - Starttime;
    5a7e:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <xTaskGetTickCount>
    5a82:	9b 01       	movw	r18, r22
    5a84:	ac 01       	movw	r20, r24
    5a86:	8b a1       	ldd	r24, Y+35	; 0x23
    5a88:	9c a1       	ldd	r25, Y+36	; 0x24
    5a8a:	ad a1       	ldd	r26, Y+37	; 0x25
    5a8c:	be a1       	ldd	r27, Y+38	; 0x26
    5a8e:	79 01       	movw	r14, r18
    5a90:	8a 01       	movw	r16, r20
    5a92:	e8 1a       	sub	r14, r24
    5a94:	f9 0a       	sbc	r15, r25
    5a96:	0a 0b       	sbc	r16, r26
    5a98:	1b 0b       	sbc	r17, r27
    5a9a:	d8 01       	movw	r26, r16
    5a9c:	c7 01       	movw	r24, r14
    5a9e:	8f a3       	std	Y+39, r24	; 0x27
    5aa0:	98 a7       	std	Y+40, r25	; 0x28
    5aa2:	a9 a7       	std	Y+41, r26	; 0x29
    5aa4:	ba a7       	std	Y+42, r27	; 0x2a
				Elapsedtime += Endtime;
    5aa6:	2f a1       	ldd	r18, Y+39	; 0x27
    5aa8:	38 a5       	ldd	r19, Y+40	; 0x28
    5aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    5aac:	9e 81       	ldd	r25, Y+6	; 0x06
    5aae:	82 0f       	add	r24, r18
    5ab0:	93 1f       	adc	r25, r19
    5ab2:	8d 83       	std	Y+5, r24	; 0x05
    5ab4:	9e 83       	std	Y+6, r25	; 0x06
				sprintf(&NilakanthaExactTime[0], "Pi %dms", Elapsedtime);
    5ab6:	8e 81       	ldd	r24, Y+6	; 0x06
    5ab8:	8f 93       	push	r24
    5aba:	8d 81       	ldd	r24, Y+5	; 0x05
    5abc:	8f 93       	push	r24
    5abe:	89 ef       	ldi	r24, 0xF9	; 249
    5ac0:	90 e2       	ldi	r25, 0x20	; 32
    5ac2:	89 2f       	mov	r24, r25
    5ac4:	8f 93       	push	r24
    5ac6:	89 ef       	ldi	r24, 0xF9	; 249
    5ac8:	90 e2       	ldi	r25, 0x20	; 32
    5aca:	8f 93       	push	r24
    5acc:	88 e6       	ldi	r24, 0x68	; 104
    5ace:	95 e3       	ldi	r25, 0x35	; 53
    5ad0:	89 2f       	mov	r24, r25
    5ad2:	8f 93       	push	r24
    5ad4:	88 e6       	ldi	r24, 0x68	; 104
    5ad6:	95 e3       	ldi	r25, 0x35	; 53
    5ad8:	8f 93       	push	r24
    5ada:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <sprintf>
    5ade:	0f 90       	pop	r0
    5ae0:	0f 90       	pop	r0
    5ae2:	0f 90       	pop	r0
    5ae4:	0f 90       	pop	r0
    5ae6:	0f 90       	pop	r0
    5ae8:	0f 90       	pop	r0
				codeblock = 1;
    5aea:	81 e0       	ldi	r24, 0x01	; 1
    5aec:	90 e0       	ldi	r25, 0x00	; 0
    5aee:	89 8f       	std	Y+25, r24	; 0x19
    5af0:	9a 8f       	std	Y+26, r25	; 0x1a
            PI = PI + (Zaehler * 4 / (n * (n + 1) * (n + 2)));
            n += 2;
            i += 1;
        }

        for (i = 1; i < n; i++) {
    5af2:	8f 85       	ldd	r24, Y+15	; 0x0f
    5af4:	98 89       	ldd	r25, Y+16	; 0x10
    5af6:	a9 89       	ldd	r26, Y+17	; 0x11
    5af8:	ba 89       	ldd	r27, Y+18	; 0x12
    5afa:	01 96       	adiw	r24, 0x01	; 1
    5afc:	a1 1d       	adc	r26, r1
    5afe:	b1 1d       	adc	r27, r1
    5b00:	8f 87       	std	Y+15, r24	; 0x0f
    5b02:	98 8b       	std	Y+16, r25	; 0x10
    5b04:	a9 8b       	std	Y+17, r26	; 0x11
    5b06:	ba 8b       	std	Y+18, r27	; 0x12
    5b08:	2f 85       	ldd	r18, Y+15	; 0x0f
    5b0a:	38 89       	ldd	r19, Y+16	; 0x10
    5b0c:	49 89       	ldd	r20, Y+17	; 0x11
    5b0e:	5a 89       	ldd	r21, Y+18	; 0x12
    5b10:	8b 89       	ldd	r24, Y+19	; 0x13
    5b12:	9c 89       	ldd	r25, Y+20	; 0x14
    5b14:	ad 89       	ldd	r26, Y+21	; 0x15
    5b16:	be 89       	ldd	r27, Y+22	; 0x16
    5b18:	28 17       	cp	r18, r24
    5b1a:	39 07       	cpc	r19, r25
    5b1c:	4a 07       	cpc	r20, r26
    5b1e:	5b 07       	cpc	r21, r27
    5b20:	0c f4       	brge	.+2      	; 0x5b24 <vNilakantha+0x5b6>
    5b22:	1c ce       	rjmp	.-968    	; 0x575c <vNilakantha+0x1ee>
				Elapsedtime += Endtime;
				sprintf(&NilakanthaExactTime[0], "Pi %dms", Elapsedtime);
				codeblock = 1;
			}
		}
	}	
    5b24:	43 cd       	rjmp	.-1402   	; 0x55ac <vNilakantha+0x3e>

00005b26 <__vector_108>:
	 command(0x02);
 }
 void _displayClear() {
	 command(0x01);
	 delayUS(2000);
 }
    5b26:	1f 92       	push	r1
    5b28:	0f 92       	push	r0
    5b2a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
    5b2e:	0f 92       	push	r0
    5b30:	11 24       	eor	r1, r1
    5b32:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
    5b36:	0f 92       	push	r0
    5b38:	2f 93       	push	r18
    5b3a:	3f 93       	push	r19
    5b3c:	4f 93       	push	r20
    5b3e:	5f 93       	push	r21
    5b40:	6f 93       	push	r22
    5b42:	7f 93       	push	r23
    5b44:	8f 93       	push	r24
    5b46:	9f 93       	push	r25
    5b48:	af 93       	push	r26
    5b4a:	bf 93       	push	r27
    5b4c:	ef 93       	push	r30
    5b4e:	ff 93       	push	r31
    5b50:	cf 93       	push	r28
    5b52:	df 93       	push	r29
    5b54:	1f 92       	push	r1
    5b56:	cd b7       	in	r28, 0x3d	; 61
    5b58:	de b7       	in	r29, 0x3e	; 62
    5b5a:	19 82       	std	Y+1, r1	; 0x01
    5b5c:	80 91 ad 35 	lds	r24, 0x35AD	; 0x8035ad <egDisplayTiming>
    5b60:	90 91 ae 35 	lds	r25, 0x35AE	; 0x8035ae <egDisplayTiming+0x1>
    5b64:	9e 01       	movw	r18, r28
    5b66:	2f 5f       	subi	r18, 0xFF	; 255
    5b68:	3f 4f       	sbci	r19, 0xFF	; 255
    5b6a:	41 e0       	ldi	r20, 0x01	; 1
    5b6c:	50 e0       	ldi	r21, 0x00	; 0
    5b6e:	60 e0       	ldi	r22, 0x00	; 0
    5b70:	70 e0       	ldi	r23, 0x00	; 0
    5b72:	0e 94 6f 07 	call	0xede	; 0xede <xEventGroupSetBitsFromISR>
    5b76:	60 e0       	ldi	r22, 0x00	; 0
    5b78:	80 e0       	ldi	r24, 0x00	; 0
    5b7a:	9b e0       	ldi	r25, 0x0B	; 11
    5b7c:	0e 94 be 03 	call	0x77c	; 0x77c <TC0_ConfigClockSource>
    5b80:	80 e0       	ldi	r24, 0x00	; 0
    5b82:	9b e0       	ldi	r25, 0x0B	; 11
    5b84:	fc 01       	movw	r30, r24
    5b86:	16 82       	std	Z+6, r1	; 0x06
    5b88:	00 00       	nop
    5b8a:	0f 90       	pop	r0
    5b8c:	df 91       	pop	r29
    5b8e:	cf 91       	pop	r28
    5b90:	ff 91       	pop	r31
    5b92:	ef 91       	pop	r30
    5b94:	bf 91       	pop	r27
    5b96:	af 91       	pop	r26
    5b98:	9f 91       	pop	r25
    5b9a:	8f 91       	pop	r24
    5b9c:	7f 91       	pop	r23
    5b9e:	6f 91       	pop	r22
    5ba0:	5f 91       	pop	r21
    5ba2:	4f 91       	pop	r20
    5ba4:	3f 91       	pop	r19
    5ba6:	2f 91       	pop	r18
    5ba8:	0f 90       	pop	r0
    5baa:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
    5bae:	0f 90       	pop	r0
    5bb0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
    5bb4:	0f 90       	pop	r0
    5bb6:	1f 90       	pop	r1
    5bb8:	18 95       	reti

00005bba <delayUS>:
    5bba:	cf 92       	push	r12
    5bbc:	df 92       	push	r13
    5bbe:	ef 92       	push	r14
    5bc0:	ff 92       	push	r15
    5bc2:	0f 93       	push	r16
    5bc4:	cf 93       	push	r28
    5bc6:	df 93       	push	r29
    5bc8:	00 d0       	rcall	.+0      	; 0x5bca <delayUS+0x10>
    5bca:	1f 92       	push	r1
    5bcc:	cd b7       	in	r28, 0x3d	; 61
    5bce:	de b7       	in	r29, 0x3e	; 62
    5bd0:	69 83       	std	Y+1, r22	; 0x01
    5bd2:	7a 83       	std	Y+2, r23	; 0x02
    5bd4:	8b 83       	std	Y+3, r24	; 0x03
    5bd6:	9c 83       	std	Y+4, r25	; 0x04
    5bd8:	89 81       	ldd	r24, Y+1	; 0x01
    5bda:	9a 81       	ldd	r25, Y+2	; 0x02
    5bdc:	ab 81       	ldd	r26, Y+3	; 0x03
    5bde:	bc 81       	ldd	r27, Y+4	; 0x04
    5be0:	02 97       	sbiw	r24, 0x02	; 2
    5be2:	a1 05       	cpc	r26, r1
    5be4:	b1 05       	cpc	r27, r1
    5be6:	40 f4       	brcc	.+16     	; 0x5bf8 <delayUS+0x3e>
    5be8:	82 e0       	ldi	r24, 0x02	; 2
    5bea:	90 e0       	ldi	r25, 0x00	; 0
    5bec:	a0 e0       	ldi	r26, 0x00	; 0
    5bee:	b0 e0       	ldi	r27, 0x00	; 0
    5bf0:	89 83       	std	Y+1, r24	; 0x01
    5bf2:	9a 83       	std	Y+2, r25	; 0x02
    5bf4:	ab 83       	std	Y+3, r26	; 0x03
    5bf6:	bc 83       	std	Y+4, r27	; 0x04
    5bf8:	80 e0       	ldi	r24, 0x00	; 0
    5bfa:	9b e0       	ldi	r25, 0x0B	; 11
    5bfc:	21 e0       	ldi	r18, 0x01	; 1
    5bfe:	fc 01       	movw	r30, r24
    5c00:	26 83       	std	Z+6, r18	; 0x06
    5c02:	80 e0       	ldi	r24, 0x00	; 0
    5c04:	9b e0       	ldi	r25, 0x0B	; 11
    5c06:	fc 01       	movw	r30, r24
    5c08:	10 a2       	std	Z+32, r1	; 0x20
    5c0a:	11 a2       	std	Z+33, r1	; 0x21
    5c0c:	60 e0       	ldi	r22, 0x00	; 0
    5c0e:	80 e0       	ldi	r24, 0x00	; 0
    5c10:	9b e0       	ldi	r25, 0x0B	; 11
    5c12:	0e 94 da 03 	call	0x7b4	; 0x7b4 <TC0_ConfigWGM>
    5c16:	89 81       	ldd	r24, Y+1	; 0x01
    5c18:	9a 81       	ldd	r25, Y+2	; 0x02
    5c1a:	ab 81       	ldd	r26, Y+3	; 0x03
    5c1c:	bc 81       	ldd	r27, Y+4	; 0x04
    5c1e:	8e 3f       	cpi	r24, 0xFE	; 254
    5c20:	9f 4f       	sbci	r25, 0xFF	; 255
    5c22:	a1 05       	cpc	r26, r1
    5c24:	b1 05       	cpc	r27, r1
    5c26:	98 f4       	brcc	.+38     	; 0x5c4e <delayUS+0x94>
    5c28:	20 e0       	ldi	r18, 0x00	; 0
    5c2a:	3b e0       	ldi	r19, 0x0B	; 11
    5c2c:	89 81       	ldd	r24, Y+1	; 0x01
    5c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    5c30:	ab 81       	ldd	r26, Y+3	; 0x03
    5c32:	bc 81       	ldd	r27, Y+4	; 0x04
    5c34:	b6 95       	lsr	r27
    5c36:	a7 95       	ror	r26
    5c38:	97 95       	ror	r25
    5c3a:	87 95       	ror	r24
    5c3c:	f9 01       	movw	r30, r18
    5c3e:	86 a3       	std	Z+38, r24	; 0x26
    5c40:	97 a3       	std	Z+39, r25	; 0x27
    5c42:	65 e0       	ldi	r22, 0x05	; 5
    5c44:	80 e0       	ldi	r24, 0x00	; 0
    5c46:	9b e0       	ldi	r25, 0x0B	; 11
    5c48:	0e 94 be 03 	call	0x77c	; 0x77c <TC0_ConfigClockSource>
    5c4c:	1f c0       	rjmp	.+62     	; 0x5c8c <delayUS+0xd2>
    5c4e:	89 81       	ldd	r24, Y+1	; 0x01
    5c50:	9a 81       	ldd	r25, Y+2	; 0x02
    5c52:	ab 81       	ldd	r26, Y+3	; 0x03
    5c54:	bc 81       	ldd	r27, Y+4	; 0x04
    5c56:	80 34       	cpi	r24, 0x40	; 64
    5c58:	92 44       	sbci	r25, 0x42	; 66
    5c5a:	af 40       	sbci	r26, 0x0F	; 15
    5c5c:	b1 05       	cpc	r27, r1
    5c5e:	b0 f4       	brcc	.+44     	; 0x5c8c <delayUS+0xd2>
    5c60:	20 e0       	ldi	r18, 0x00	; 0
    5c62:	3b e0       	ldi	r19, 0x0B	; 11
    5c64:	89 81       	ldd	r24, Y+1	; 0x01
    5c66:	9a 81       	ldd	r25, Y+2	; 0x02
    5c68:	ab 81       	ldd	r26, Y+3	; 0x03
    5c6a:	bc 81       	ldd	r27, Y+4	; 0x04
    5c6c:	68 94       	set
    5c6e:	14 f8       	bld	r1, 4
    5c70:	b6 95       	lsr	r27
    5c72:	a7 95       	ror	r26
    5c74:	97 95       	ror	r25
    5c76:	87 95       	ror	r24
    5c78:	16 94       	lsr	r1
    5c7a:	d1 f7       	brne	.-12     	; 0x5c70 <delayUS+0xb6>
    5c7c:	f9 01       	movw	r30, r18
    5c7e:	86 a3       	std	Z+38, r24	; 0x26
    5c80:	97 a3       	std	Z+39, r25	; 0x27
    5c82:	67 e0       	ldi	r22, 0x07	; 7
    5c84:	80 e0       	ldi	r24, 0x00	; 0
    5c86:	9b e0       	ldi	r25, 0x0B	; 11
    5c88:	0e 94 be 03 	call	0x77c	; 0x77c <TC0_ConfigClockSource>
    5c8c:	80 91 ad 35 	lds	r24, 0x35AD	; 0x8035ad <egDisplayTiming>
    5c90:	90 91 ae 35 	lds	r25, 0x35AE	; 0x8035ae <egDisplayTiming+0x1>
    5c94:	0f 2e       	mov	r0, r31
    5c96:	f4 ef       	ldi	r31, 0xF4	; 244
    5c98:	cf 2e       	mov	r12, r31
    5c9a:	dd 24       	eor	r13, r13
    5c9c:	d3 94       	inc	r13
    5c9e:	e1 2c       	mov	r14, r1
    5ca0:	f1 2c       	mov	r15, r1
    5ca2:	f0 2d       	mov	r31, r0
    5ca4:	00 e0       	ldi	r16, 0x00	; 0
    5ca6:	21 e0       	ldi	r18, 0x01	; 1
    5ca8:	41 e0       	ldi	r20, 0x01	; 1
    5caa:	50 e0       	ldi	r21, 0x00	; 0
    5cac:	60 e0       	ldi	r22, 0x00	; 0
    5cae:	70 e0       	ldi	r23, 0x00	; 0
    5cb0:	0e 94 7f 04 	call	0x8fe	; 0x8fe <xEventGroupWaitBits>
    5cb4:	00 00       	nop
    5cb6:	24 96       	adiw	r28, 0x04	; 4
    5cb8:	cd bf       	out	0x3d, r28	; 61
    5cba:	de bf       	out	0x3e, r29	; 62
    5cbc:	df 91       	pop	r29
    5cbe:	cf 91       	pop	r28
    5cc0:	0f 91       	pop	r16
    5cc2:	ff 90       	pop	r15
    5cc4:	ef 90       	pop	r14
    5cc6:	df 90       	pop	r13
    5cc8:	cf 90       	pop	r12
    5cca:	08 95       	ret

00005ccc <setPort>:
    5ccc:	cf 93       	push	r28
    5cce:	df 93       	push	r29
    5cd0:	1f 92       	push	r1
    5cd2:	cd b7       	in	r28, 0x3d	; 61
    5cd4:	de b7       	in	r29, 0x3e	; 62
    5cd6:	89 83       	std	Y+1, r24	; 0x01
    5cd8:	89 81       	ldd	r24, Y+1	; 0x01
    5cda:	8f 70       	andi	r24, 0x0F	; 15
    5cdc:	89 83       	std	Y+1, r24	; 0x01
    5cde:	89 81       	ldd	r24, Y+1	; 0x01
    5ce0:	82 95       	swap	r24
    5ce2:	80 7f       	andi	r24, 0xF0	; 240
    5ce4:	89 83       	std	Y+1, r24	; 0x01
    5ce6:	80 e0       	ldi	r24, 0x00	; 0
    5ce8:	96 e0       	ldi	r25, 0x06	; 6
    5cea:	20 e0       	ldi	r18, 0x00	; 0
    5cec:	36 e0       	ldi	r19, 0x06	; 6
    5cee:	f9 01       	movw	r30, r18
    5cf0:	34 81       	ldd	r19, Z+4	; 0x04
    5cf2:	29 81       	ldd	r18, Y+1	; 0x01
    5cf4:	2f 60       	ori	r18, 0x0F	; 15
    5cf6:	23 23       	and	r18, r19
    5cf8:	fc 01       	movw	r30, r24
    5cfa:	24 83       	std	Z+4, r18	; 0x04
    5cfc:	80 e0       	ldi	r24, 0x00	; 0
    5cfe:	96 e0       	ldi	r25, 0x06	; 6
    5d00:	20 e0       	ldi	r18, 0x00	; 0
    5d02:	36 e0       	ldi	r19, 0x06	; 6
    5d04:	f9 01       	movw	r30, r18
    5d06:	34 81       	ldd	r19, Z+4	; 0x04
    5d08:	29 81       	ldd	r18, Y+1	; 0x01
    5d0a:	23 2b       	or	r18, r19
    5d0c:	fc 01       	movw	r30, r24
    5d0e:	24 83       	std	Z+4, r18	; 0x04
    5d10:	00 00       	nop
    5d12:	0f 90       	pop	r0
    5d14:	df 91       	pop	r29
    5d16:	cf 91       	pop	r28
    5d18:	08 95       	ret

00005d1a <setRS>:
    5d1a:	cf 93       	push	r28
    5d1c:	df 93       	push	r29
    5d1e:	1f 92       	push	r1
    5d20:	cd b7       	in	r28, 0x3d	; 61
    5d22:	de b7       	in	r29, 0x3e	; 62
    5d24:	89 83       	std	Y+1, r24	; 0x01
    5d26:	89 81       	ldd	r24, Y+1	; 0x01
    5d28:	88 23       	and	r24, r24
    5d2a:	31 f0       	breq	.+12     	; 0x5d38 <setRS+0x1e>
    5d2c:	80 e6       	ldi	r24, 0x60	; 96
    5d2e:	96 e0       	ldi	r25, 0x06	; 6
    5d30:	21 e0       	ldi	r18, 0x01	; 1
    5d32:	fc 01       	movw	r30, r24
    5d34:	25 83       	std	Z+5, r18	; 0x05
    5d36:	05 c0       	rjmp	.+10     	; 0x5d42 <setRS+0x28>
    5d38:	80 e6       	ldi	r24, 0x60	; 96
    5d3a:	96 e0       	ldi	r25, 0x06	; 6
    5d3c:	21 e0       	ldi	r18, 0x01	; 1
    5d3e:	fc 01       	movw	r30, r24
    5d40:	26 83       	std	Z+6, r18	; 0x06
    5d42:	00 00       	nop
    5d44:	0f 90       	pop	r0
    5d46:	df 91       	pop	r29
    5d48:	cf 91       	pop	r28
    5d4a:	08 95       	ret

00005d4c <setRW>:
    5d4c:	cf 93       	push	r28
    5d4e:	df 93       	push	r29
    5d50:	1f 92       	push	r1
    5d52:	cd b7       	in	r28, 0x3d	; 61
    5d54:	de b7       	in	r29, 0x3e	; 62
    5d56:	89 83       	std	Y+1, r24	; 0x01
    5d58:	89 81       	ldd	r24, Y+1	; 0x01
    5d5a:	88 23       	and	r24, r24
    5d5c:	31 f0       	breq	.+12     	; 0x5d6a <setRW+0x1e>
    5d5e:	80 e6       	ldi	r24, 0x60	; 96
    5d60:	96 e0       	ldi	r25, 0x06	; 6
    5d62:	22 e0       	ldi	r18, 0x02	; 2
    5d64:	fc 01       	movw	r30, r24
    5d66:	25 83       	std	Z+5, r18	; 0x05
    5d68:	05 c0       	rjmp	.+10     	; 0x5d74 <setRW+0x28>
    5d6a:	80 e6       	ldi	r24, 0x60	; 96
    5d6c:	96 e0       	ldi	r25, 0x06	; 6
    5d6e:	22 e0       	ldi	r18, 0x02	; 2
    5d70:	fc 01       	movw	r30, r24
    5d72:	26 83       	std	Z+6, r18	; 0x06
    5d74:	00 00       	nop
    5d76:	0f 90       	pop	r0
    5d78:	df 91       	pop	r29
    5d7a:	cf 91       	pop	r28
    5d7c:	08 95       	ret

00005d7e <setE>:
    5d7e:	cf 93       	push	r28
    5d80:	df 93       	push	r29
    5d82:	1f 92       	push	r1
    5d84:	cd b7       	in	r28, 0x3d	; 61
    5d86:	de b7       	in	r29, 0x3e	; 62
    5d88:	89 83       	std	Y+1, r24	; 0x01
    5d8a:	89 81       	ldd	r24, Y+1	; 0x01
    5d8c:	88 23       	and	r24, r24
    5d8e:	31 f0       	breq	.+12     	; 0x5d9c <setE+0x1e>
    5d90:	80 e6       	ldi	r24, 0x60	; 96
    5d92:	96 e0       	ldi	r25, 0x06	; 6
    5d94:	24 e0       	ldi	r18, 0x04	; 4
    5d96:	fc 01       	movw	r30, r24
    5d98:	25 83       	std	Z+5, r18	; 0x05
    5d9a:	05 c0       	rjmp	.+10     	; 0x5da6 <setE+0x28>
    5d9c:	80 e6       	ldi	r24, 0x60	; 96
    5d9e:	96 e0       	ldi	r25, 0x06	; 6
    5da0:	24 e0       	ldi	r18, 0x04	; 4
    5da2:	fc 01       	movw	r30, r24
    5da4:	26 83       	std	Z+6, r18	; 0x06
    5da6:	00 00       	nop
    5da8:	0f 90       	pop	r0
    5daa:	df 91       	pop	r29
    5dac:	cf 91       	pop	r28
    5dae:	08 95       	ret

00005db0 <Nybble>:
    5db0:	cf 93       	push	r28
    5db2:	df 93       	push	r29
    5db4:	cd b7       	in	r28, 0x3d	; 61
    5db6:	de b7       	in	r29, 0x3e	; 62
    5db8:	81 e0       	ldi	r24, 0x01	; 1
    5dba:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <setE>
    5dbe:	61 e0       	ldi	r22, 0x01	; 1
    5dc0:	70 e0       	ldi	r23, 0x00	; 0
    5dc2:	80 e0       	ldi	r24, 0x00	; 0
    5dc4:	90 e0       	ldi	r25, 0x00	; 0
    5dc6:	0e 94 dd 2d 	call	0x5bba	; 0x5bba <delayUS>
    5dca:	80 e0       	ldi	r24, 0x00	; 0
    5dcc:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <setE>
    5dd0:	00 00       	nop
    5dd2:	df 91       	pop	r29
    5dd4:	cf 91       	pop	r28
    5dd6:	08 95       	ret

00005dd8 <command>:
    5dd8:	cf 93       	push	r28
    5dda:	df 93       	push	r29
    5ddc:	1f 92       	push	r1
    5dde:	cd b7       	in	r28, 0x3d	; 61
    5de0:	de b7       	in	r29, 0x3e	; 62
    5de2:	89 83       	std	Y+1, r24	; 0x01
    5de4:	89 81       	ldd	r24, Y+1	; 0x01
    5de6:	82 95       	swap	r24
    5de8:	8f 70       	andi	r24, 0x0F	; 15
    5dea:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <setPort>
    5dee:	80 e0       	ldi	r24, 0x00	; 0
    5df0:	0e 94 8d 2e 	call	0x5d1a	; 0x5d1a <setRS>
    5df4:	80 e0       	ldi	r24, 0x00	; 0
    5df6:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <setRW>
    5dfa:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <Nybble>
    5dfe:	89 81       	ldd	r24, Y+1	; 0x01
    5e00:	8f 70       	andi	r24, 0x0F	; 15
    5e02:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <setPort>
    5e06:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <Nybble>
    5e0a:	00 00       	nop
    5e0c:	0f 90       	pop	r0
    5e0e:	df 91       	pop	r29
    5e10:	cf 91       	pop	r28
    5e12:	08 95       	ret

00005e14 <write>:
    5e14:	cf 93       	push	r28
    5e16:	df 93       	push	r29
    5e18:	1f 92       	push	r1
    5e1a:	cd b7       	in	r28, 0x3d	; 61
    5e1c:	de b7       	in	r29, 0x3e	; 62
    5e1e:	89 83       	std	Y+1, r24	; 0x01
    5e20:	89 81       	ldd	r24, Y+1	; 0x01
    5e22:	82 95       	swap	r24
    5e24:	8f 70       	andi	r24, 0x0F	; 15
    5e26:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <setPort>
    5e2a:	81 e0       	ldi	r24, 0x01	; 1
    5e2c:	0e 94 8d 2e 	call	0x5d1a	; 0x5d1a <setRS>
    5e30:	80 e0       	ldi	r24, 0x00	; 0
    5e32:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <setRW>
    5e36:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <Nybble>
    5e3a:	89 81       	ldd	r24, Y+1	; 0x01
    5e3c:	8f 70       	andi	r24, 0x0F	; 15
    5e3e:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <setPort>
    5e42:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <Nybble>
    5e46:	00 00       	nop
    5e48:	0f 90       	pop	r0
    5e4a:	df 91       	pop	r29
    5e4c:	cf 91       	pop	r28
    5e4e:	08 95       	ret

00005e50 <vInitDisplay>:
 
 void vInitDisplay() {
    5e50:	ef 92       	push	r14
    5e52:	ff 92       	push	r15
    5e54:	0f 93       	push	r16
    5e56:	cf 93       	push	r28
    5e58:	df 93       	push	r29
    5e5a:	cd b7       	in	r28, 0x3d	; 61
    5e5c:	de b7       	in	r29, 0x3e	; 62
	PORTA.DIRSET = PIN4_bm;
    5e5e:	80 e0       	ldi	r24, 0x00	; 0
    5e60:	96 e0       	ldi	r25, 0x06	; 6
    5e62:	20 e1       	ldi	r18, 0x10	; 16
    5e64:	fc 01       	movw	r30, r24
    5e66:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN5_bm;
    5e68:	80 e0       	ldi	r24, 0x00	; 0
    5e6a:	96 e0       	ldi	r25, 0x06	; 6
    5e6c:	20 e2       	ldi	r18, 0x20	; 32
    5e6e:	fc 01       	movw	r30, r24
    5e70:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN6_bm;
    5e72:	80 e0       	ldi	r24, 0x00	; 0
    5e74:	96 e0       	ldi	r25, 0x06	; 6
    5e76:	20 e4       	ldi	r18, 0x40	; 64
    5e78:	fc 01       	movw	r30, r24
    5e7a:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN7_bm;
    5e7c:	80 e0       	ldi	r24, 0x00	; 0
    5e7e:	96 e0       	ldi	r25, 0x06	; 6
    5e80:	20 e8       	ldi	r18, 0x80	; 128
    5e82:	fc 01       	movw	r30, r24
    5e84:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN0_bm;
    5e86:	80 e6       	ldi	r24, 0x60	; 96
    5e88:	96 e0       	ldi	r25, 0x06	; 6
    5e8a:	21 e0       	ldi	r18, 0x01	; 1
    5e8c:	fc 01       	movw	r30, r24
    5e8e:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN1_bm;
    5e90:	80 e6       	ldi	r24, 0x60	; 96
    5e92:	96 e0       	ldi	r25, 0x06	; 6
    5e94:	22 e0       	ldi	r18, 0x02	; 2
    5e96:	fc 01       	movw	r30, r24
    5e98:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN2_bm;
    5e9a:	80 e6       	ldi	r24, 0x60	; 96
    5e9c:	96 e0       	ldi	r25, 0x06	; 6
    5e9e:	24 e0       	ldi	r18, 0x04	; 4
    5ea0:	fc 01       	movw	r30, r24
    5ea2:	21 83       	std	Z+1, r18	; 0x01
	PORTA.OUT &= 0x0F;
    5ea4:	80 e0       	ldi	r24, 0x00	; 0
    5ea6:	96 e0       	ldi	r25, 0x06	; 6
    5ea8:	20 e0       	ldi	r18, 0x00	; 0
    5eaa:	36 e0       	ldi	r19, 0x06	; 6
    5eac:	f9 01       	movw	r30, r18
    5eae:	24 81       	ldd	r18, Z+4	; 0x04
    5eb0:	2f 70       	andi	r18, 0x0F	; 15
    5eb2:	fc 01       	movw	r30, r24
    5eb4:	24 83       	std	Z+4, r18	; 0x04
	PORTD.OUT &= 0xF8;
    5eb6:	80 e6       	ldi	r24, 0x60	; 96
    5eb8:	96 e0       	ldi	r25, 0x06	; 6
    5eba:	20 e6       	ldi	r18, 0x60	; 96
    5ebc:	36 e0       	ldi	r19, 0x06	; 6
    5ebe:	f9 01       	movw	r30, r18
    5ec0:	24 81       	ldd	r18, Z+4	; 0x04
    5ec2:	28 7f       	andi	r18, 0xF8	; 248
    5ec4:	fc 01       	movw	r30, r24
    5ec6:	24 83       	std	Z+4, r18	; 0x04

	if((displayLineQueue = xQueueCreate(DISPLAY_QUEUE_DEPTH, sizeof(displayLine_t))) == NULL)
    5ec8:	40 e0       	ldi	r20, 0x00	; 0
    5eca:	66 e1       	ldi	r22, 0x16	; 22
    5ecc:	88 e0       	ldi	r24, 0x08	; 8
    5ece:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <xQueueGenericCreate>
    5ed2:	80 93 ab 35 	sts	0x35AB, r24	; 0x8035ab <displayLineQueue>
    5ed6:	90 93 ac 35 	sts	0x35AC, r25	; 0x8035ac <displayLineQueue+0x1>
	{
		//error(ERR_QUEUE_CREATE_HANDLE_NULL);
	}
	
	egDisplayTiming = xEventGroupCreate();
    5eda:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <xEventGroupCreate>
    5ede:	80 93 ad 35 	sts	0x35AD, r24	; 0x8035ad <egDisplayTiming>
    5ee2:	90 93 ae 35 	sts	0x35AE, r25	; 0x8035ae <egDisplayTiming+0x1>
	

	xTaskCreate(vDisplayUpdateTask, (const char*) "dispUpdate", configMINIMAL_STACK_SIZE+150, NULL, 1, NULL);	
    5ee6:	e1 2c       	mov	r14, r1
    5ee8:	f1 2c       	mov	r15, r1
    5eea:	01 e0       	ldi	r16, 0x01	; 1
    5eec:	20 e0       	ldi	r18, 0x00	; 0
    5eee:	30 e0       	ldi	r19, 0x00	; 0
    5ef0:	4e e5       	ldi	r20, 0x5E	; 94
    5ef2:	51 e0       	ldi	r21, 0x01	; 1
    5ef4:	61 e0       	ldi	r22, 0x01	; 1
    5ef6:	71 e2       	ldi	r23, 0x21	; 33
    5ef8:	86 e2       	ldi	r24, 0x26	; 38
    5efa:	90 e3       	ldi	r25, 0x30	; 48
    5efc:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <xTaskCreate>
 }
    5f00:	00 00       	nop
    5f02:	df 91       	pop	r29
    5f04:	cf 91       	pop	r28
    5f06:	0f 91       	pop	r16
    5f08:	ff 90       	pop	r15
    5f0a:	ef 90       	pop	r14
    5f0c:	08 95       	ret

00005f0e <_displaySetPos>:
 
 void _displaySetPos(int line, int pos) {
    5f0e:	cf 93       	push	r28
    5f10:	df 93       	push	r29
    5f12:	00 d0       	rcall	.+0      	; 0x5f14 <_displaySetPos+0x6>
    5f14:	1f 92       	push	r1
    5f16:	cd b7       	in	r28, 0x3d	; 61
    5f18:	de b7       	in	r29, 0x3e	; 62
    5f1a:	89 83       	std	Y+1, r24	; 0x01
    5f1c:	9a 83       	std	Y+2, r25	; 0x02
    5f1e:	6b 83       	std	Y+3, r22	; 0x03
    5f20:	7c 83       	std	Y+4, r23	; 0x04
	 switch(line) {
    5f22:	89 81       	ldd	r24, Y+1	; 0x01
    5f24:	9a 81       	ldd	r25, Y+2	; 0x02
    5f26:	81 30       	cpi	r24, 0x01	; 1
    5f28:	91 05       	cpc	r25, r1
    5f2a:	89 f0       	breq	.+34     	; 0x5f4e <_displaySetPos+0x40>
    5f2c:	82 30       	cpi	r24, 0x02	; 2
    5f2e:	91 05       	cpc	r25, r1
    5f30:	1c f4       	brge	.+6      	; 0x5f38 <_displaySetPos+0x2a>
    5f32:	89 2b       	or	r24, r25
    5f34:	39 f0       	breq	.+14     	; 0x5f44 <_displaySetPos+0x36>
    5f36:	1a c0       	rjmp	.+52     	; 0x5f6c <_displaySetPos+0x5e>
    5f38:	82 30       	cpi	r24, 0x02	; 2
    5f3a:	91 05       	cpc	r25, r1
    5f3c:	69 f0       	breq	.+26     	; 0x5f58 <_displaySetPos+0x4a>
    5f3e:	03 97       	sbiw	r24, 0x03	; 3
    5f40:	81 f0       	breq	.+32     	; 0x5f62 <_displaySetPos+0x54>
    5f42:	14 c0       	rjmp	.+40     	; 0x5f6c <_displaySetPos+0x5e>
		 case 0:
		 command(0x80 + 0x00 + pos);
    5f44:	8b 81       	ldd	r24, Y+3	; 0x03
    5f46:	80 58       	subi	r24, 0x80	; 128
    5f48:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <command>
		 break;
    5f4c:	0f c0       	rjmp	.+30     	; 0x5f6c <_displaySetPos+0x5e>
		 case 1:
		 command(0x80 + 0x40 + pos);
    5f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    5f50:	80 54       	subi	r24, 0x40	; 64
    5f52:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <command>
		 break;
    5f56:	0a c0       	rjmp	.+20     	; 0x5f6c <_displaySetPos+0x5e>
		 case 2:
		 command(0x80 + 0x14 + pos);
    5f58:	8b 81       	ldd	r24, Y+3	; 0x03
    5f5a:	8c 56       	subi	r24, 0x6C	; 108
    5f5c:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <command>
		 break;
    5f60:	05 c0       	rjmp	.+10     	; 0x5f6c <_displaySetPos+0x5e>
		 case 3:
		 command(0x80 + 0x54 + pos);
    5f62:	8b 81       	ldd	r24, Y+3	; 0x03
    5f64:	8c 52       	subi	r24, 0x2C	; 44
    5f66:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <command>
		 break;
    5f6a:	00 00       	nop
	 }
	 delayUS(39);
    5f6c:	67 e2       	ldi	r22, 0x27	; 39
    5f6e:	70 e0       	ldi	r23, 0x00	; 0
    5f70:	80 e0       	ldi	r24, 0x00	; 0
    5f72:	90 e0       	ldi	r25, 0x00	; 0
    5f74:	0e 94 dd 2d 	call	0x5bba	; 0x5bba <delayUS>
 }
    5f78:	00 00       	nop
    5f7a:	24 96       	adiw	r28, 0x04	; 4
    5f7c:	cd bf       	out	0x3d, r28	; 61
    5f7e:	de bf       	out	0x3e, r29	; 62
    5f80:	df 91       	pop	r29
    5f82:	cf 91       	pop	r28
    5f84:	08 95       	ret

00005f86 <_displayWriteChar>:

 void _displayWriteChar(char c) {
    5f86:	cf 93       	push	r28
    5f88:	df 93       	push	r29
    5f8a:	1f 92       	push	r1
    5f8c:	cd b7       	in	r28, 0x3d	; 61
    5f8e:	de b7       	in	r29, 0x3e	; 62
    5f90:	89 83       	std	Y+1, r24	; 0x01
	 write(c);
    5f92:	89 81       	ldd	r24, Y+1	; 0x01
    5f94:	0e 94 0a 2f 	call	0x5e14	; 0x5e14 <write>
	 delayUS(43);
    5f98:	6b e2       	ldi	r22, 0x2B	; 43
    5f9a:	70 e0       	ldi	r23, 0x00	; 0
    5f9c:	80 e0       	ldi	r24, 0x00	; 0
    5f9e:	90 e0       	ldi	r25, 0x00	; 0
    5fa0:	0e 94 dd 2d 	call	0x5bba	; 0x5bba <delayUS>
 }
    5fa4:	00 00       	nop
    5fa6:	0f 90       	pop	r0
    5fa8:	df 91       	pop	r29
    5faa:	cf 91       	pop	r28
    5fac:	08 95       	ret

00005fae <_displayWriteString>:
 
 void _displayWriteString(char* s) {
    5fae:	cf 93       	push	r28
    5fb0:	df 93       	push	r29
    5fb2:	00 d0       	rcall	.+0      	; 0x5fb4 <_displayWriteString+0x6>
    5fb4:	1f 92       	push	r1
    5fb6:	cd b7       	in	r28, 0x3d	; 61
    5fb8:	de b7       	in	r29, 0x3e	; 62
    5fba:	8b 83       	std	Y+3, r24	; 0x03
    5fbc:	9c 83       	std	Y+4, r25	; 0x04
	 for(int i = 0; i < 20; i++) {
    5fbe:	19 82       	std	Y+1, r1	; 0x01
    5fc0:	1a 82       	std	Y+2, r1	; 0x02
    5fc2:	19 c0       	rjmp	.+50     	; 0x5ff6 <_displayWriteString+0x48>
		 if(s[i] == '\0') {
    5fc4:	89 81       	ldd	r24, Y+1	; 0x01
    5fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    5fc8:	2b 81       	ldd	r18, Y+3	; 0x03
    5fca:	3c 81       	ldd	r19, Y+4	; 0x04
    5fcc:	82 0f       	add	r24, r18
    5fce:	93 1f       	adc	r25, r19
    5fd0:	fc 01       	movw	r30, r24
    5fd2:	80 81       	ld	r24, Z
    5fd4:	88 23       	and	r24, r24
    5fd6:	a1 f0       	breq	.+40     	; 0x6000 <_displayWriteString+0x52>
			 break;
		 }
		 _displayWriteChar(s[i]);
    5fd8:	89 81       	ldd	r24, Y+1	; 0x01
    5fda:	9a 81       	ldd	r25, Y+2	; 0x02
    5fdc:	2b 81       	ldd	r18, Y+3	; 0x03
    5fde:	3c 81       	ldd	r19, Y+4	; 0x04
    5fe0:	82 0f       	add	r24, r18
    5fe2:	93 1f       	adc	r25, r19
    5fe4:	fc 01       	movw	r30, r24
    5fe6:	80 81       	ld	r24, Z
    5fe8:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <_displayWriteChar>
	 write(c);
	 delayUS(43);
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
    5fec:	89 81       	ldd	r24, Y+1	; 0x01
    5fee:	9a 81       	ldd	r25, Y+2	; 0x02
    5ff0:	01 96       	adiw	r24, 0x01	; 1
    5ff2:	89 83       	std	Y+1, r24	; 0x01
    5ff4:	9a 83       	std	Y+2, r25	; 0x02
    5ff6:	89 81       	ldd	r24, Y+1	; 0x01
    5ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    5ffa:	44 97       	sbiw	r24, 0x14	; 20
    5ffc:	1c f3       	brlt	.-58     	; 0x5fc4 <_displayWriteString+0x16>
		 if(s[i] == '\0') {
			 break;
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    5ffe:	01 c0       	rjmp	.+2      	; 0x6002 <_displayWriteString+0x54>
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
		 if(s[i] == '\0') {
			 break;
    6000:	00 00       	nop
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    6002:	00 00       	nop
    6004:	24 96       	adiw	r28, 0x04	; 4
    6006:	cd bf       	out	0x3d, r28	; 61
    6008:	de bf       	out	0x3e, r29	; 62
    600a:	df 91       	pop	r29
    600c:	cf 91       	pop	r28
    600e:	08 95       	ret

00006010 <_displayWriteStringAtPos>:

 void _displayWriteStringAtPos(int line, int pos, char* s) {
    6010:	cf 93       	push	r28
    6012:	df 93       	push	r29
    6014:	00 d0       	rcall	.+0      	; 0x6016 <_displayWriteStringAtPos+0x6>
    6016:	00 d0       	rcall	.+0      	; 0x6018 <_displayWriteStringAtPos+0x8>
    6018:	cd b7       	in	r28, 0x3d	; 61
    601a:	de b7       	in	r29, 0x3e	; 62
    601c:	89 83       	std	Y+1, r24	; 0x01
    601e:	9a 83       	std	Y+2, r25	; 0x02
    6020:	6b 83       	std	Y+3, r22	; 0x03
    6022:	7c 83       	std	Y+4, r23	; 0x04
    6024:	4d 83       	std	Y+5, r20	; 0x05
    6026:	5e 83       	std	Y+6, r21	; 0x06
	 _displaySetPos(line, pos);
    6028:	2b 81       	ldd	r18, Y+3	; 0x03
    602a:	3c 81       	ldd	r19, Y+4	; 0x04
    602c:	89 81       	ldd	r24, Y+1	; 0x01
    602e:	9a 81       	ldd	r25, Y+2	; 0x02
    6030:	b9 01       	movw	r22, r18
    6032:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <_displaySetPos>
	 _displayWriteString(s);
    6036:	8d 81       	ldd	r24, Y+5	; 0x05
    6038:	9e 81       	ldd	r25, Y+6	; 0x06
    603a:	0e 94 d7 2f 	call	0x5fae	; 0x5fae <_displayWriteString>
 }
    603e:	00 00       	nop
    6040:	26 96       	adiw	r28, 0x06	; 6
    6042:	cd bf       	out	0x3d, r28	; 61
    6044:	de bf       	out	0x3e, r29	; 62
    6046:	df 91       	pop	r29
    6048:	cf 91       	pop	r28
    604a:	08 95       	ret

0000604c <vDisplayUpdateTask>:

 void vDisplayUpdateTask(void *pvParameters) {
    604c:	cf 93       	push	r28
    604e:	df 93       	push	r29
    6050:	cd b7       	in	r28, 0x3d	; 61
    6052:	de b7       	in	r29, 0x3e	; 62
    6054:	c0 57       	subi	r28, 0x70	; 112
    6056:	d1 09       	sbc	r29, r1
    6058:	cd bf       	out	0x3d, r28	; 61
    605a:	de bf       	out	0x3e, r29	; 62
    605c:	9e 01       	movw	r18, r28
    605e:	21 59       	subi	r18, 0x91	; 145
    6060:	3f 4f       	sbci	r19, 0xFF	; 255
    6062:	f9 01       	movw	r30, r18
    6064:	80 83       	st	Z, r24
    6066:	91 83       	std	Z+1, r25	; 0x01
	 int i = 0;
    6068:	19 82       	std	Y+1, r1	; 0x01
    606a:	1a 82       	std	Y+2, r1	; 0x02
	 int j = 0;
    606c:	1b 82       	std	Y+3, r1	; 0x03
    606e:	1c 82       	std	Y+4, r1	; 0x04
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    6070:	1d 82       	std	Y+5, r1	; 0x05
    6072:	1e 82       	std	Y+6, r1	; 0x06
    6074:	26 c0       	rjmp	.+76     	; 0x60c2 <vDisplayUpdateTask+0x76>
		for(int j = 0; j < 20; j ++) {
    6076:	1f 82       	std	Y+7, r1	; 0x07
    6078:	18 86       	std	Y+8, r1	; 0x08
    607a:	1a c0       	rjmp	.+52     	; 0x60b0 <vDisplayUpdateTask+0x64>
			displayLines[i][j] = 0x20;
    607c:	2d 81       	ldd	r18, Y+5	; 0x05
    607e:	3e 81       	ldd	r19, Y+6	; 0x06
    6080:	44 e1       	ldi	r20, 0x14	; 20
    6082:	42 9f       	mul	r20, r18
    6084:	c0 01       	movw	r24, r0
    6086:	43 9f       	mul	r20, r19
    6088:	90 0d       	add	r25, r0
    608a:	11 24       	eor	r1, r1
    608c:	9e 01       	movw	r18, r28
    608e:	2f 5f       	subi	r18, 0xFF	; 255
    6090:	3f 4f       	sbci	r19, 0xFF	; 255
    6092:	28 0f       	add	r18, r24
    6094:	39 1f       	adc	r19, r25
    6096:	8f 81       	ldd	r24, Y+7	; 0x07
    6098:	98 85       	ldd	r25, Y+8	; 0x08
    609a:	82 0f       	add	r24, r18
    609c:	93 1f       	adc	r25, r19
    609e:	08 96       	adiw	r24, 0x08	; 8
    60a0:	20 e2       	ldi	r18, 0x20	; 32
    60a2:	fc 01       	movw	r30, r24
    60a4:	20 83       	st	Z, r18
 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
    60a6:	8f 81       	ldd	r24, Y+7	; 0x07
    60a8:	98 85       	ldd	r25, Y+8	; 0x08
    60aa:	01 96       	adiw	r24, 0x01	; 1
    60ac:	8f 83       	std	Y+7, r24	; 0x07
    60ae:	98 87       	std	Y+8, r25	; 0x08
    60b0:	8f 81       	ldd	r24, Y+7	; 0x07
    60b2:	98 85       	ldd	r25, Y+8	; 0x08
    60b4:	44 97       	sbiw	r24, 0x14	; 20
    60b6:	14 f3       	brlt	.-60     	; 0x607c <vDisplayUpdateTask+0x30>

 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    60b8:	8d 81       	ldd	r24, Y+5	; 0x05
    60ba:	9e 81       	ldd	r25, Y+6	; 0x06
    60bc:	01 96       	adiw	r24, 0x01	; 1
    60be:	8d 83       	std	Y+5, r24	; 0x05
    60c0:	9e 83       	std	Y+6, r25	; 0x06
    60c2:	8d 81       	ldd	r24, Y+5	; 0x05
    60c4:	9e 81       	ldd	r25, Y+6	; 0x06
    60c6:	04 97       	sbiw	r24, 0x04	; 4
    60c8:	b4 f2       	brlt	.-84     	; 0x6076 <vDisplayUpdateTask+0x2a>
			displayLines[i][j] = 0x20;
		}
	 }
	 displayLine_t newLine;

	 delayUS(40000);
    60ca:	60 e4       	ldi	r22, 0x40	; 64
    60cc:	7c e9       	ldi	r23, 0x9C	; 156
    60ce:	80 e0       	ldi	r24, 0x00	; 0
    60d0:	90 e0       	ldi	r25, 0x00	; 0
    60d2:	0e 94 dd 2d 	call	0x5bba	; 0x5bba <delayUS>
	 setPort(0x03);
    60d6:	83 e0       	ldi	r24, 0x03	; 3
    60d8:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <setPort>
	 delayUS(5000);
    60dc:	68 e8       	ldi	r22, 0x88	; 136
    60de:	73 e1       	ldi	r23, 0x13	; 19
    60e0:	80 e0       	ldi	r24, 0x00	; 0
    60e2:	90 e0       	ldi	r25, 0x00	; 0
    60e4:	0e 94 dd 2d 	call	0x5bba	; 0x5bba <delayUS>
	 Nybble();
    60e8:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <Nybble>
	 delayUS(160);
    60ec:	60 ea       	ldi	r22, 0xA0	; 160
    60ee:	70 e0       	ldi	r23, 0x00	; 0
    60f0:	80 e0       	ldi	r24, 0x00	; 0
    60f2:	90 e0       	ldi	r25, 0x00	; 0
    60f4:	0e 94 dd 2d 	call	0x5bba	; 0x5bba <delayUS>
	 Nybble();
    60f8:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <Nybble>
	 delayUS(160);
    60fc:	60 ea       	ldi	r22, 0xA0	; 160
    60fe:	70 e0       	ldi	r23, 0x00	; 0
    6100:	80 e0       	ldi	r24, 0x00	; 0
    6102:	90 e0       	ldi	r25, 0x00	; 0
    6104:	0e 94 dd 2d 	call	0x5bba	; 0x5bba <delayUS>
	 Nybble();
    6108:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <Nybble>
	 delayUS(160);
    610c:	60 ea       	ldi	r22, 0xA0	; 160
    610e:	70 e0       	ldi	r23, 0x00	; 0
    6110:	80 e0       	ldi	r24, 0x00	; 0
    6112:	90 e0       	ldi	r25, 0x00	; 0
    6114:	0e 94 dd 2d 	call	0x5bba	; 0x5bba <delayUS>
	 setPort(0x02);
    6118:	82 e0       	ldi	r24, 0x02	; 2
    611a:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <setPort>
	 Nybble();
    611e:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <Nybble>
	 command(0x28);
    6122:	88 e2       	ldi	r24, 0x28	; 40
    6124:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <command>
	 command(0x10);
    6128:	80 e1       	ldi	r24, 0x10	; 16
    612a:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <command>
	 command(0x0C); //Cursor and Blinking off
    612e:	8c e0       	ldi	r24, 0x0C	; 12
    6130:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <command>
	 command(0x06);
    6134:	86 e0       	ldi	r24, 0x06	; 6
    6136:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <command>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
    613a:	68 ec       	ldi	r22, 0xC8	; 200
    613c:	70 e0       	ldi	r23, 0x00	; 0
    613e:	80 e0       	ldi	r24, 0x00	; 0
    6140:	90 e0       	ldi	r25, 0x00	; 0
    6142:	0e 94 bc 13 	call	0x2778	; 0x2778 <vTaskDelay>
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
    6146:	80 91 ad 35 	lds	r24, 0x35AD	; 0x8035ad <egDisplayTiming>
    614a:	90 91 ae 35 	lds	r25, 0x35AE	; 0x8035ae <egDisplayTiming+0x1>
    614e:	40 e0       	ldi	r20, 0x00	; 0
    6150:	50 e0       	ldi	r21, 0x00	; 0
    6152:	ba 01       	movw	r22, r20
    6154:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
    6158:	dc 01       	movw	r26, r24
    615a:	cb 01       	movw	r24, r22
    615c:	89 2b       	or	r24, r25
    615e:	8a 2b       	or	r24, r26
    6160:	8b 2b       	or	r24, r27
    6162:	09 f4       	brne	.+2      	; 0x6166 <vDisplayUpdateTask+0x11a>
    6164:	96 c0       	rjmp	.+300    	; 0x6292 <vDisplayUpdateTask+0x246>
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    6166:	80 91 ad 35 	lds	r24, 0x35AD	; 0x8035ad <egDisplayTiming>
    616a:	90 91 ae 35 	lds	r25, 0x35AE	; 0x8035ae <egDisplayTiming+0x1>
    616e:	42 e0       	ldi	r20, 0x02	; 2
    6170:	50 e0       	ldi	r21, 0x00	; 0
    6172:	60 e0       	ldi	r22, 0x00	; 0
    6174:	70 e0       	ldi	r23, 0x00	; 0
    6176:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupClearBits>
			for(i = 0; i < 4;i++) {
    617a:	19 82       	std	Y+1, r1	; 0x01
    617c:	1a 82       	std	Y+2, r1	; 0x02
    617e:	26 c0       	rjmp	.+76     	; 0x61cc <vDisplayUpdateTask+0x180>
				for(j = 0; j < 20; j ++) {
    6180:	1b 82       	std	Y+3, r1	; 0x03
    6182:	1c 82       	std	Y+4, r1	; 0x04
    6184:	1a c0       	rjmp	.+52     	; 0x61ba <vDisplayUpdateTask+0x16e>
					displayLines[i][j] = 0x20;
    6186:	29 81       	ldd	r18, Y+1	; 0x01
    6188:	3a 81       	ldd	r19, Y+2	; 0x02
    618a:	44 e1       	ldi	r20, 0x14	; 20
    618c:	42 9f       	mul	r20, r18
    618e:	c0 01       	movw	r24, r0
    6190:	43 9f       	mul	r20, r19
    6192:	90 0d       	add	r25, r0
    6194:	11 24       	eor	r1, r1
    6196:	9e 01       	movw	r18, r28
    6198:	2f 5f       	subi	r18, 0xFF	; 255
    619a:	3f 4f       	sbci	r19, 0xFF	; 255
    619c:	28 0f       	add	r18, r24
    619e:	39 1f       	adc	r19, r25
    61a0:	8b 81       	ldd	r24, Y+3	; 0x03
    61a2:	9c 81       	ldd	r25, Y+4	; 0x04
    61a4:	82 0f       	add	r24, r18
    61a6:	93 1f       	adc	r25, r19
    61a8:	08 96       	adiw	r24, 0x08	; 8
    61aa:	20 e2       	ldi	r18, 0x20	; 32
    61ac:	fc 01       	movw	r30, r24
    61ae:	20 83       	st	Z, r18
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
    61b0:	8b 81       	ldd	r24, Y+3	; 0x03
    61b2:	9c 81       	ldd	r25, Y+4	; 0x04
    61b4:	01 96       	adiw	r24, 0x01	; 1
    61b6:	8b 83       	std	Y+3, r24	; 0x03
    61b8:	9c 83       	std	Y+4, r25	; 0x04
    61ba:	8b 81       	ldd	r24, Y+3	; 0x03
    61bc:	9c 81       	ldd	r25, Y+4	; 0x04
    61be:	44 97       	sbiw	r24, 0x14	; 20
    61c0:	14 f3       	brlt	.-60     	; 0x6186 <vDisplayUpdateTask+0x13a>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
    61c2:	89 81       	ldd	r24, Y+1	; 0x01
    61c4:	9a 81       	ldd	r25, Y+2	; 0x02
    61c6:	01 96       	adiw	r24, 0x01	; 1
    61c8:	89 83       	std	Y+1, r24	; 0x01
    61ca:	9a 83       	std	Y+2, r25	; 0x02
    61cc:	89 81       	ldd	r24, Y+1	; 0x01
    61ce:	9a 81       	ldd	r25, Y+2	; 0x02
    61d0:	04 97       	sbiw	r24, 0x04	; 4
    61d2:	b4 f2       	brlt	.-84     	; 0x6180 <vDisplayUpdateTask+0x134>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    61d4:	5e c0       	rjmp	.+188    	; 0x6292 <vDisplayUpdateTask+0x246>
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    61d6:	80 91 ab 35 	lds	r24, 0x35AB	; 0x8035ab <displayLineQueue>
    61da:	90 91 ac 35 	lds	r25, 0x35AC	; 0x8035ac <displayLineQueue+0x1>
    61de:	be 01       	movw	r22, r28
    61e0:	67 5a       	subi	r22, 0xA7	; 167
    61e2:	7f 4f       	sbci	r23, 0xFF	; 255
    61e4:	2f ef       	ldi	r18, 0xFF	; 255
    61e6:	3f ef       	ldi	r19, 0xFF	; 255
    61e8:	a9 01       	movw	r20, r18
    61ea:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <xQueueReceive>
    61ee:	88 23       	and	r24, r24
    61f0:	09 f4       	brne	.+2      	; 0x61f4 <vDisplayUpdateTask+0x1a8>
    61f2:	4f c0       	rjmp	.+158    	; 0x6292 <vDisplayUpdateTask+0x246>
				i=0;			
    61f4:	19 82       	std	Y+1, r1	; 0x01
    61f6:	1a 82       	std	Y+2, r1	; 0x02
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    61f8:	32 c0       	rjmp	.+100    	; 0x625e <vDisplayUpdateTask+0x212>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
    61fa:	ce 01       	movw	r24, r28
    61fc:	87 5a       	subi	r24, 0xA7	; 167
    61fe:	9f 4f       	sbci	r25, 0xFF	; 255
    6200:	fc 01       	movw	r30, r24
    6202:	80 81       	ld	r24, Z
    6204:	48 2f       	mov	r20, r24
    6206:	50 e0       	ldi	r21, 0x00	; 0
    6208:	ce 01       	movw	r24, r28
    620a:	87 5a       	subi	r24, 0xA7	; 167
    620c:	9f 4f       	sbci	r25, 0xFF	; 255
    620e:	fc 01       	movw	r30, r24
    6210:	81 81       	ldd	r24, Z+1	; 0x01
    6212:	28 2f       	mov	r18, r24
    6214:	30 e0       	ldi	r19, 0x00	; 0
    6216:	89 81       	ldd	r24, Y+1	; 0x01
    6218:	9a 81       	ldd	r25, Y+2	; 0x02
    621a:	82 0f       	add	r24, r18
    621c:	93 1f       	adc	r25, r19
    621e:	be 01       	movw	r22, r28
    6220:	67 5a       	subi	r22, 0xA7	; 167
    6222:	7f 4f       	sbci	r23, 0xFF	; 255
    6224:	29 81       	ldd	r18, Y+1	; 0x01
    6226:	3a 81       	ldd	r19, Y+2	; 0x02
    6228:	26 0f       	add	r18, r22
    622a:	37 1f       	adc	r19, r23
    622c:	2e 5f       	subi	r18, 0xFE	; 254
    622e:	3f 4f       	sbci	r19, 0xFF	; 255
    6230:	f9 01       	movw	r30, r18
    6232:	60 81       	ld	r22, Z
    6234:	74 e1       	ldi	r23, 0x14	; 20
    6236:	74 9f       	mul	r23, r20
    6238:	90 01       	movw	r18, r0
    623a:	75 9f       	mul	r23, r21
    623c:	30 0d       	add	r19, r0
    623e:	11 24       	eor	r1, r1
    6240:	ae 01       	movw	r20, r28
    6242:	4f 5f       	subi	r20, 0xFF	; 255
    6244:	5f 4f       	sbci	r21, 0xFF	; 255
    6246:	24 0f       	add	r18, r20
    6248:	35 1f       	adc	r19, r21
    624a:	82 0f       	add	r24, r18
    624c:	93 1f       	adc	r25, r19
    624e:	08 96       	adiw	r24, 0x08	; 8
    6250:	fc 01       	movw	r30, r24
    6252:	60 83       	st	Z, r22
					i++;
    6254:	89 81       	ldd	r24, Y+1	; 0x01
    6256:	9a 81       	ldd	r25, Y+2	; 0x02
    6258:	01 96       	adiw	r24, 0x01	; 1
    625a:	89 83       	std	Y+1, r24	; 0x01
    625c:	9a 83       	std	Y+2, r25	; 0x02
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    625e:	ce 01       	movw	r24, r28
    6260:	87 5a       	subi	r24, 0xA7	; 167
    6262:	9f 4f       	sbci	r25, 0xFF	; 255
    6264:	fc 01       	movw	r30, r24
    6266:	81 81       	ldd	r24, Z+1	; 0x01
    6268:	28 2f       	mov	r18, r24
    626a:	30 e0       	ldi	r19, 0x00	; 0
    626c:	89 81       	ldd	r24, Y+1	; 0x01
    626e:	9a 81       	ldd	r25, Y+2	; 0x02
    6270:	82 0f       	add	r24, r18
    6272:	93 1f       	adc	r25, r19
    6274:	44 97       	sbiw	r24, 0x14	; 20
    6276:	6c f4       	brge	.+26     	; 0x6292 <vDisplayUpdateTask+0x246>
    6278:	9e 01       	movw	r18, r28
    627a:	27 5a       	subi	r18, 0xA7	; 167
    627c:	3f 4f       	sbci	r19, 0xFF	; 255
    627e:	89 81       	ldd	r24, Y+1	; 0x01
    6280:	9a 81       	ldd	r25, Y+2	; 0x02
    6282:	82 0f       	add	r24, r18
    6284:	93 1f       	adc	r25, r19
    6286:	02 96       	adiw	r24, 0x02	; 2
    6288:	fc 01       	movw	r30, r24
    628a:	80 81       	ld	r24, Z
    628c:	88 23       	and	r24, r24
    628e:	09 f0       	breq	.+2      	; 0x6292 <vDisplayUpdateTask+0x246>
    6290:	b4 cf       	rjmp	.-152    	; 0x61fa <vDisplayUpdateTask+0x1ae>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    6292:	80 91 ab 35 	lds	r24, 0x35AB	; 0x8035ab <displayLineQueue>
    6296:	90 91 ac 35 	lds	r25, 0x35AC	; 0x8035ac <displayLineQueue+0x1>
    629a:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <uxQueueMessagesWaiting>
    629e:	88 23       	and	r24, r24
    62a0:	09 f0       	breq	.+2      	; 0x62a4 <vDisplayUpdateTask+0x258>
    62a2:	99 cf       	rjmp	.-206    	; 0x61d6 <vDisplayUpdateTask+0x18a>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    62a4:	19 82       	std	Y+1, r1	; 0x01
    62a6:	1a 82       	std	Y+2, r1	; 0x02
    62a8:	19 c0       	rjmp	.+50     	; 0x62dc <vDisplayUpdateTask+0x290>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
    62aa:	9e 01       	movw	r18, r28
    62ac:	27 5f       	subi	r18, 0xF7	; 247
    62ae:	3f 4f       	sbci	r19, 0xFF	; 255
    62b0:	49 81       	ldd	r20, Y+1	; 0x01
    62b2:	5a 81       	ldd	r21, Y+2	; 0x02
    62b4:	64 e1       	ldi	r22, 0x14	; 20
    62b6:	64 9f       	mul	r22, r20
    62b8:	c0 01       	movw	r24, r0
    62ba:	65 9f       	mul	r22, r21
    62bc:	90 0d       	add	r25, r0
    62be:	11 24       	eor	r1, r1
    62c0:	28 0f       	add	r18, r24
    62c2:	39 1f       	adc	r19, r25
    62c4:	89 81       	ldd	r24, Y+1	; 0x01
    62c6:	9a 81       	ldd	r25, Y+2	; 0x02
    62c8:	a9 01       	movw	r20, r18
    62ca:	60 e0       	ldi	r22, 0x00	; 0
    62cc:	70 e0       	ldi	r23, 0x00	; 0
    62ce:	0e 94 08 30 	call	0x6010	; 0x6010 <_displayWriteStringAtPos>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    62d2:	89 81       	ldd	r24, Y+1	; 0x01
    62d4:	9a 81       	ldd	r25, Y+2	; 0x02
    62d6:	01 96       	adiw	r24, 0x01	; 1
    62d8:	89 83       	std	Y+1, r24	; 0x01
    62da:	9a 83       	std	Y+2, r25	; 0x02
    62dc:	89 81       	ldd	r24, Y+1	; 0x01
    62de:	9a 81       	ldd	r25, Y+2	; 0x02
    62e0:	04 97       	sbiw	r24, 0x04	; 4
    62e2:	1c f3       	brlt	.-58     	; 0x62aa <vDisplayUpdateTask+0x25e>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
		 }
	 }
    62e4:	2a cf       	rjmp	.-428    	; 0x613a <vDisplayUpdateTask+0xee>

000062e6 <vDisplayClear>:
 }
 

void vDisplayClear() {
    62e6:	cf 93       	push	r28
    62e8:	df 93       	push	r29
    62ea:	cd b7       	in	r28, 0x3d	; 61
    62ec:	de b7       	in	r29, 0x3e	; 62
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    62ee:	80 91 ad 35 	lds	r24, 0x35AD	; 0x8035ad <egDisplayTiming>
    62f2:	90 91 ae 35 	lds	r25, 0x35AE	; 0x8035ae <egDisplayTiming+0x1>
    62f6:	42 e0       	ldi	r20, 0x02	; 2
    62f8:	50 e0       	ldi	r21, 0x00	; 0
    62fa:	60 e0       	ldi	r22, 0x00	; 0
    62fc:	70 e0       	ldi	r23, 0x00	; 0
    62fe:	0e 94 02 06 	call	0xc04	; 0xc04 <xEventGroupSetBits>
}
    6302:	00 00       	nop
    6304:	df 91       	pop	r29
    6306:	cf 91       	pop	r28
    6308:	08 95       	ret

0000630a <vDisplayWriteStringAtPos>:

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    630a:	cf 93       	push	r28
    630c:	df 93       	push	r29
    630e:	1f 92       	push	r1
    6310:	1f 92       	push	r1
    6312:	cd b7       	in	r28, 0x3d	; 61
    6314:	de b7       	in	r29, 0x3e	; 62
	va_list arg;	
	va_start(arg, fmt);
    6316:	ce 01       	movw	r24, r28
    6318:	0e 96       	adiw	r24, 0x0e	; 14
    631a:	89 83       	std	Y+1, r24	; 0x01
    631c:	9a 83       	std	Y+2, r25	; 0x02
	display_vprintf(line, pos, fmt, arg);
    631e:	29 81       	ldd	r18, Y+1	; 0x01
    6320:	3a 81       	ldd	r19, Y+2	; 0x02
    6322:	4c 85       	ldd	r20, Y+12	; 0x0c
    6324:	5d 85       	ldd	r21, Y+13	; 0x0d
    6326:	6a 85       	ldd	r22, Y+10	; 0x0a
    6328:	7b 85       	ldd	r23, Y+11	; 0x0b
    632a:	88 85       	ldd	r24, Y+8	; 0x08
    632c:	99 85       	ldd	r25, Y+9	; 0x09
    632e:	0e 94 9f 31 	call	0x633e	; 0x633e <display_vprintf>
	va_end(arg);	
}
    6332:	00 00       	nop
    6334:	0f 90       	pop	r0
    6336:	0f 90       	pop	r0
    6338:	df 91       	pop	r29
    633a:	cf 91       	pop	r28
    633c:	08 95       	ret

0000633e <display_vprintf>:
 
static int display_vprintf(int line, int pos, char const *fmt, va_list arg) {
    633e:	0f 93       	push	r16
    6340:	cf 93       	push	r28
    6342:	df 93       	push	r29
    6344:	cd b7       	in	r28, 0x3d	; 61
    6346:	de b7       	in	r29, 0x3e	; 62
    6348:	ec 97       	sbiw	r28, 0x3c	; 60
    634a:	cd bf       	out	0x3d, r28	; 61
    634c:	de bf       	out	0x3e, r29	; 62
    634e:	8d ab       	std	Y+53, r24	; 0x35
    6350:	9e ab       	std	Y+54, r25	; 0x36
    6352:	6f ab       	std	Y+55, r22	; 0x37
    6354:	78 af       	std	Y+56, r23	; 0x38
    6356:	49 af       	std	Y+57, r20	; 0x39
    6358:	5a af       	std	Y+58, r21	; 0x3a
    635a:	2b af       	std	Y+59, r18	; 0x3b
    635c:	3c af       	std	Y+60, r19	; 0x3c
	int int_temp;
	char char_temp;
	char *string_temp;
	double double_temp;
	char ch;
	int length = 0;
    635e:	19 82       	std	Y+1, r1	; 0x01
    6360:	1a 82       	std	Y+2, r1	; 0x02

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    6362:	1b 82       	std	Y+3, r1	; 0x03
    6364:	1c 82       	std	Y+4, r1	; 0x04
    6366:	0b c0       	rjmp	.+22     	; 0x637e <display_vprintf+0x40>
		buffer[i] = 0x00;
    6368:	8b 81       	ldd	r24, Y+3	; 0x03
    636a:	9c 81       	ldd	r25, Y+4	; 0x04
    636c:	8a 5c       	subi	r24, 0xCA	; 202
    636e:	9a 4c       	sbci	r25, 0xCA	; 202
    6370:	fc 01       	movw	r30, r24
    6372:	10 82       	st	Z, r1
	char ch;
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    6374:	8b 81       	ldd	r24, Y+3	; 0x03
    6376:	9c 81       	ldd	r25, Y+4	; 0x04
    6378:	01 96       	adiw	r24, 0x01	; 1
    637a:	8b 83       	std	Y+3, r24	; 0x03
    637c:	9c 83       	std	Y+4, r25	; 0x04
    637e:	8b 81       	ldd	r24, Y+3	; 0x03
    6380:	9c 81       	ldd	r25, Y+4	; 0x04
    6382:	44 97       	sbiw	r24, 0x14	; 20
    6384:	8c f3       	brlt	.-30     	; 0x6368 <display_vprintf+0x2a>
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    6386:	1d 82       	std	Y+5, r1	; 0x05
    6388:	1e 82       	std	Y+6, r1	; 0x06
    638a:	0b c0       	rjmp	.+22     	; 0x63a2 <display_vprintf+0x64>
		str[i] = 0x00;
    638c:	8d 81       	ldd	r24, Y+5	; 0x05
    638e:	9e 81       	ldd	r25, Y+6	; 0x06
    6390:	86 5b       	subi	r24, 0xB6	; 182
    6392:	9a 4c       	sbci	r25, 0xCA	; 202
    6394:	fc 01       	movw	r30, r24
    6396:	10 82       	st	Z, r1
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    6398:	8d 81       	ldd	r24, Y+5	; 0x05
    639a:	9e 81       	ldd	r25, Y+6	; 0x06
    639c:	01 96       	adiw	r24, 0x01	; 1
    639e:	8d 83       	std	Y+5, r24	; 0x05
    63a0:	9e 83       	std	Y+6, r25	; 0x06
    63a2:	8d 81       	ldd	r24, Y+5	; 0x05
    63a4:	9e 81       	ldd	r25, Y+6	; 0x06
    63a6:	44 97       	sbiw	r24, 0x14	; 20
    63a8:	8c f3       	brlt	.-30     	; 0x638c <display_vprintf+0x4e>
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    63aa:	be c1       	rjmp	.+892    	; 0x6728 <display_vprintf+0x3ea>
		if ( '%' == ch ) {
    63ac:	8d 89       	ldd	r24, Y+21	; 0x15
    63ae:	85 32       	cpi	r24, 0x25	; 37
    63b0:	09 f0       	breq	.+2      	; 0x63b4 <display_vprintf+0x76>
    63b2:	a0 c1       	rjmp	.+832    	; 0x66f4 <display_vprintf+0x3b6>
			switch (ch = *fmt++) {
    63b4:	89 ad       	ldd	r24, Y+57	; 0x39
    63b6:	9a ad       	ldd	r25, Y+58	; 0x3a
    63b8:	9c 01       	movw	r18, r24
    63ba:	2f 5f       	subi	r18, 0xFF	; 255
    63bc:	3f 4f       	sbci	r19, 0xFF	; 255
    63be:	29 af       	std	Y+57, r18	; 0x39
    63c0:	3a af       	std	Y+58, r19	; 0x3a
    63c2:	fc 01       	movw	r30, r24
    63c4:	80 81       	ld	r24, Z
    63c6:	8d 8b       	std	Y+21, r24	; 0x15
    63c8:	8d 89       	ldd	r24, Y+21	; 0x15
    63ca:	88 2f       	mov	r24, r24
    63cc:	90 e0       	ldi	r25, 0x00	; 0
    63ce:	85 36       	cpi	r24, 0x65	; 101
    63d0:	91 05       	cpc	r25, r1
    63d2:	09 f4       	brne	.+2      	; 0x63d6 <display_vprintf+0x98>
    63d4:	46 c1       	rjmp	.+652    	; 0x6662 <display_vprintf+0x324>
    63d6:	86 36       	cpi	r24, 0x66	; 102
    63d8:	91 05       	cpc	r25, r1
    63da:	54 f4       	brge	.+20     	; 0x63f0 <display_vprintf+0xb2>
    63dc:	83 36       	cpi	r24, 0x63	; 99
    63de:	91 05       	cpc	r25, r1
    63e0:	01 f1       	breq	.+64     	; 0x6422 <display_vprintf+0xe4>
    63e2:	84 36       	cpi	r24, 0x64	; 100
    63e4:	91 05       	cpc	r25, r1
    63e6:	0c f0       	brlt	.+2      	; 0x63ea <display_vprintf+0xac>
    63e8:	70 c0       	rjmp	.+224    	; 0x64ca <display_vprintf+0x18c>
    63ea:	85 97       	sbiw	r24, 0x25	; 37
    63ec:	69 f0       	breq	.+26     	; 0x6408 <display_vprintf+0xca>
    63ee:	9c c1       	rjmp	.+824    	; 0x6728 <display_vprintf+0x3ea>
    63f0:	83 37       	cpi	r24, 0x73	; 115
    63f2:	91 05       	cpc	r25, r1
    63f4:	71 f1       	breq	.+92     	; 0x6452 <display_vprintf+0x114>
    63f6:	88 37       	cpi	r24, 0x78	; 120
    63f8:	91 05       	cpc	r25, r1
    63fa:	09 f4       	brne	.+2      	; 0x63fe <display_vprintf+0xc0>
    63fc:	a8 c0       	rjmp	.+336    	; 0x654e <display_vprintf+0x210>
    63fe:	86 36       	cpi	r24, 0x66	; 102
    6400:	91 05       	cpc	r25, r1
    6402:	09 f4       	brne	.+2      	; 0x6406 <display_vprintf+0xc8>
    6404:	e6 c0       	rjmp	.+460    	; 0x65d2 <display_vprintf+0x294>
    6406:	90 c1       	rjmp	.+800    	; 0x6728 <display_vprintf+0x3ea>
				/* %% - print out a single %    */
				case '%':
				str[length] = '%';
    6408:	89 81       	ldd	r24, Y+1	; 0x01
    640a:	9a 81       	ldd	r25, Y+2	; 0x02
    640c:	86 5b       	subi	r24, 0xB6	; 182
    640e:	9a 4c       	sbci	r25, 0xCA	; 202
    6410:	25 e2       	ldi	r18, 0x25	; 37
    6412:	fc 01       	movw	r30, r24
    6414:	20 83       	st	Z, r18
				length++;
    6416:	89 81       	ldd	r24, Y+1	; 0x01
    6418:	9a 81       	ldd	r25, Y+2	; 0x02
    641a:	01 96       	adiw	r24, 0x01	; 1
    641c:	89 83       	std	Y+1, r24	; 0x01
    641e:	9a 83       	std	Y+2, r25	; 0x02
				break;
    6420:	83 c1       	rjmp	.+774    	; 0x6728 <display_vprintf+0x3ea>

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
    6422:	8b ad       	ldd	r24, Y+59	; 0x3b
    6424:	9c ad       	ldd	r25, Y+60	; 0x3c
    6426:	9c 01       	movw	r18, r24
    6428:	2e 5f       	subi	r18, 0xFE	; 254
    642a:	3f 4f       	sbci	r19, 0xFF	; 255
    642c:	2b af       	std	Y+59, r18	; 0x3b
    642e:	3c af       	std	Y+60, r19	; 0x3c
    6430:	fc 01       	movw	r30, r24
    6432:	80 81       	ld	r24, Z
    6434:	91 81       	ldd	r25, Z+1	; 0x01
    6436:	8e 8b       	std	Y+22, r24	; 0x16
				str[length] = char_temp;
    6438:	89 81       	ldd	r24, Y+1	; 0x01
    643a:	9a 81       	ldd	r25, Y+2	; 0x02
    643c:	86 5b       	subi	r24, 0xB6	; 182
    643e:	9a 4c       	sbci	r25, 0xCA	; 202
    6440:	2e 89       	ldd	r18, Y+22	; 0x16
    6442:	fc 01       	movw	r30, r24
    6444:	20 83       	st	Z, r18
				length++;
    6446:	89 81       	ldd	r24, Y+1	; 0x01
    6448:	9a 81       	ldd	r25, Y+2	; 0x02
    644a:	01 96       	adiw	r24, 0x01	; 1
    644c:	89 83       	std	Y+1, r24	; 0x01
    644e:	9a 83       	std	Y+2, r25	; 0x02
				break;
    6450:	6b c1       	rjmp	.+726    	; 0x6728 <display_vprintf+0x3ea>

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    6452:	8b ad       	ldd	r24, Y+59	; 0x3b
    6454:	9c ad       	ldd	r25, Y+60	; 0x3c
    6456:	9c 01       	movw	r18, r24
    6458:	2e 5f       	subi	r18, 0xFE	; 254
    645a:	3f 4f       	sbci	r19, 0xFF	; 255
    645c:	2b af       	std	Y+59, r18	; 0x3b
    645e:	3c af       	std	Y+60, r19	; 0x3c
    6460:	fc 01       	movw	r30, r24
    6462:	80 81       	ld	r24, Z
    6464:	91 81       	ldd	r25, Z+1	; 0x01
    6466:	8f 8b       	std	Y+23, r24	; 0x17
    6468:	98 8f       	std	Y+24, r25	; 0x18
				for(int i = 0; i < strlen(string_temp);i++) {
    646a:	1f 82       	std	Y+7, r1	; 0x07
    646c:	18 86       	std	Y+8, r1	; 0x08
    646e:	17 c0       	rjmp	.+46     	; 0x649e <display_vprintf+0x160>
					str[length+i] = string_temp[i];
    6470:	29 81       	ldd	r18, Y+1	; 0x01
    6472:	3a 81       	ldd	r19, Y+2	; 0x02
    6474:	8f 81       	ldd	r24, Y+7	; 0x07
    6476:	98 85       	ldd	r25, Y+8	; 0x08
    6478:	82 0f       	add	r24, r18
    647a:	93 1f       	adc	r25, r19
    647c:	2f 81       	ldd	r18, Y+7	; 0x07
    647e:	38 85       	ldd	r19, Y+8	; 0x08
    6480:	4f 89       	ldd	r20, Y+23	; 0x17
    6482:	58 8d       	ldd	r21, Y+24	; 0x18
    6484:	24 0f       	add	r18, r20
    6486:	35 1f       	adc	r19, r21
    6488:	f9 01       	movw	r30, r18
    648a:	20 81       	ld	r18, Z
    648c:	86 5b       	subi	r24, 0xB6	; 182
    648e:	9a 4c       	sbci	r25, 0xCA	; 202
    6490:	fc 01       	movw	r30, r24
    6492:	20 83       	st	Z, r18
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
				for(int i = 0; i < strlen(string_temp);i++) {
    6494:	8f 81       	ldd	r24, Y+7	; 0x07
    6496:	98 85       	ldd	r25, Y+8	; 0x08
    6498:	01 96       	adiw	r24, 0x01	; 1
    649a:	8f 83       	std	Y+7, r24	; 0x07
    649c:	98 87       	std	Y+8, r25	; 0x08
    649e:	8f 89       	ldd	r24, Y+23	; 0x17
    64a0:	98 8d       	ldd	r25, Y+24	; 0x18
    64a2:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <strlen>
    64a6:	9c 01       	movw	r18, r24
    64a8:	8f 81       	ldd	r24, Y+7	; 0x07
    64aa:	98 85       	ldd	r25, Y+8	; 0x08
    64ac:	82 17       	cp	r24, r18
    64ae:	93 07       	cpc	r25, r19
    64b0:	f8 f2       	brcs	.-66     	; 0x6470 <display_vprintf+0x132>
					str[length+i] = string_temp[i];
				}
				length += strlen(string_temp);
    64b2:	8f 89       	ldd	r24, Y+23	; 0x17
    64b4:	98 8d       	ldd	r25, Y+24	; 0x18
    64b6:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <strlen>
    64ba:	9c 01       	movw	r18, r24
    64bc:	89 81       	ldd	r24, Y+1	; 0x01
    64be:	9a 81       	ldd	r25, Y+2	; 0x02
    64c0:	82 0f       	add	r24, r18
    64c2:	93 1f       	adc	r25, r19
    64c4:	89 83       	std	Y+1, r24	; 0x01
    64c6:	9a 83       	std	Y+2, r25	; 0x02
				break;
    64c8:	2f c1       	rjmp	.+606    	; 0x6728 <display_vprintf+0x3ea>

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    64ca:	8b ad       	ldd	r24, Y+59	; 0x3b
    64cc:	9c ad       	ldd	r25, Y+60	; 0x3c
    64ce:	9c 01       	movw	r18, r24
    64d0:	2e 5f       	subi	r18, 0xFE	; 254
    64d2:	3f 4f       	sbci	r19, 0xFF	; 255
    64d4:	2b af       	std	Y+59, r18	; 0x3b
    64d6:	3c af       	std	Y+60, r19	; 0x3c
    64d8:	fc 01       	movw	r30, r24
    64da:	80 81       	ld	r24, Z
    64dc:	91 81       	ldd	r25, Z+1	; 0x01
    64de:	89 8f       	std	Y+25, r24	; 0x19
    64e0:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 10);
    64e2:	89 8d       	ldd	r24, Y+25	; 0x19
    64e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    64e6:	4a e0       	ldi	r20, 0x0A	; 10
    64e8:	50 e0       	ldi	r21, 0x00	; 0
    64ea:	66 e3       	ldi	r22, 0x36	; 54
    64ec:	75 e3       	ldi	r23, 0x35	; 53
    64ee:	0e 94 f5 3d 	call	0x7bea	; 0x7bea <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    64f2:	19 86       	std	Y+9, r1	; 0x09
    64f4:	1a 86       	std	Y+10, r1	; 0x0a
    64f6:	15 c0       	rjmp	.+42     	; 0x6522 <display_vprintf+0x1e4>
					str[length+i] = buffer[i];
    64f8:	29 81       	ldd	r18, Y+1	; 0x01
    64fa:	3a 81       	ldd	r19, Y+2	; 0x02
    64fc:	89 85       	ldd	r24, Y+9	; 0x09
    64fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    6500:	82 0f       	add	r24, r18
    6502:	93 1f       	adc	r25, r19
    6504:	29 85       	ldd	r18, Y+9	; 0x09
    6506:	3a 85       	ldd	r19, Y+10	; 0x0a
    6508:	2a 5c       	subi	r18, 0xCA	; 202
    650a:	3a 4c       	sbci	r19, 0xCA	; 202
    650c:	f9 01       	movw	r30, r18
    650e:	20 81       	ld	r18, Z
    6510:	86 5b       	subi	r24, 0xB6	; 182
    6512:	9a 4c       	sbci	r25, 0xCA	; 202
    6514:	fc 01       	movw	r30, r24
    6516:	20 83       	st	Z, r18

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    6518:	89 85       	ldd	r24, Y+9	; 0x09
    651a:	9a 85       	ldd	r25, Y+10	; 0x0a
    651c:	01 96       	adiw	r24, 0x01	; 1
    651e:	89 87       	std	Y+9, r24	; 0x09
    6520:	9a 87       	std	Y+10, r25	; 0x0a
    6522:	86 e3       	ldi	r24, 0x36	; 54
    6524:	95 e3       	ldi	r25, 0x35	; 53
    6526:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <strlen>
    652a:	9c 01       	movw	r18, r24
    652c:	89 85       	ldd	r24, Y+9	; 0x09
    652e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6530:	82 17       	cp	r24, r18
    6532:	93 07       	cpc	r25, r19
    6534:	08 f3       	brcs	.-62     	; 0x64f8 <display_vprintf+0x1ba>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    6536:	86 e3       	ldi	r24, 0x36	; 54
    6538:	95 e3       	ldi	r25, 0x35	; 53
    653a:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <strlen>
    653e:	9c 01       	movw	r18, r24
    6540:	89 81       	ldd	r24, Y+1	; 0x01
    6542:	9a 81       	ldd	r25, Y+2	; 0x02
    6544:	82 0f       	add	r24, r18
    6546:	93 1f       	adc	r25, r19
    6548:	89 83       	std	Y+1, r24	; 0x01
    654a:	9a 83       	std	Y+2, r25	; 0x02
				break;
    654c:	ed c0       	rjmp	.+474    	; 0x6728 <display_vprintf+0x3ea>

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    654e:	8b ad       	ldd	r24, Y+59	; 0x3b
    6550:	9c ad       	ldd	r25, Y+60	; 0x3c
    6552:	9c 01       	movw	r18, r24
    6554:	2e 5f       	subi	r18, 0xFE	; 254
    6556:	3f 4f       	sbci	r19, 0xFF	; 255
    6558:	2b af       	std	Y+59, r18	; 0x3b
    655a:	3c af       	std	Y+60, r19	; 0x3c
    655c:	fc 01       	movw	r30, r24
    655e:	80 81       	ld	r24, Z
    6560:	91 81       	ldd	r25, Z+1	; 0x01
    6562:	89 8f       	std	Y+25, r24	; 0x19
    6564:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 16);
    6566:	89 8d       	ldd	r24, Y+25	; 0x19
    6568:	9a 8d       	ldd	r25, Y+26	; 0x1a
    656a:	40 e1       	ldi	r20, 0x10	; 16
    656c:	50 e0       	ldi	r21, 0x00	; 0
    656e:	66 e3       	ldi	r22, 0x36	; 54
    6570:	75 e3       	ldi	r23, 0x35	; 53
    6572:	0e 94 f5 3d 	call	0x7bea	; 0x7bea <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    6576:	1b 86       	std	Y+11, r1	; 0x0b
    6578:	1c 86       	std	Y+12, r1	; 0x0c
    657a:	15 c0       	rjmp	.+42     	; 0x65a6 <display_vprintf+0x268>
					str[length+i] = buffer[i];
    657c:	29 81       	ldd	r18, Y+1	; 0x01
    657e:	3a 81       	ldd	r19, Y+2	; 0x02
    6580:	8b 85       	ldd	r24, Y+11	; 0x0b
    6582:	9c 85       	ldd	r25, Y+12	; 0x0c
    6584:	82 0f       	add	r24, r18
    6586:	93 1f       	adc	r25, r19
    6588:	2b 85       	ldd	r18, Y+11	; 0x0b
    658a:	3c 85       	ldd	r19, Y+12	; 0x0c
    658c:	2a 5c       	subi	r18, 0xCA	; 202
    658e:	3a 4c       	sbci	r19, 0xCA	; 202
    6590:	f9 01       	movw	r30, r18
    6592:	20 81       	ld	r18, Z
    6594:	86 5b       	subi	r24, 0xB6	; 182
    6596:	9a 4c       	sbci	r25, 0xCA	; 202
    6598:	fc 01       	movw	r30, r24
    659a:	20 83       	st	Z, r18

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    659c:	8b 85       	ldd	r24, Y+11	; 0x0b
    659e:	9c 85       	ldd	r25, Y+12	; 0x0c
    65a0:	01 96       	adiw	r24, 0x01	; 1
    65a2:	8b 87       	std	Y+11, r24	; 0x0b
    65a4:	9c 87       	std	Y+12, r25	; 0x0c
    65a6:	86 e3       	ldi	r24, 0x36	; 54
    65a8:	95 e3       	ldi	r25, 0x35	; 53
    65aa:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <strlen>
    65ae:	9c 01       	movw	r18, r24
    65b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    65b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    65b4:	82 17       	cp	r24, r18
    65b6:	93 07       	cpc	r25, r19
    65b8:	08 f3       	brcs	.-62     	; 0x657c <display_vprintf+0x23e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    65ba:	86 e3       	ldi	r24, 0x36	; 54
    65bc:	95 e3       	ldi	r25, 0x35	; 53
    65be:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <strlen>
    65c2:	9c 01       	movw	r18, r24
    65c4:	89 81       	ldd	r24, Y+1	; 0x01
    65c6:	9a 81       	ldd	r25, Y+2	; 0x02
    65c8:	82 0f       	add	r24, r18
    65ca:	93 1f       	adc	r25, r19
    65cc:	89 83       	std	Y+1, r24	; 0x01
    65ce:	9a 83       	std	Y+2, r25	; 0x02
				break;
    65d0:	ab c0       	rjmp	.+342    	; 0x6728 <display_vprintf+0x3ea>

				case 'f':
				double_temp = va_arg(arg, double);
    65d2:	8b ad       	ldd	r24, Y+59	; 0x3b
    65d4:	9c ad       	ldd	r25, Y+60	; 0x3c
    65d6:	9c 01       	movw	r18, r24
    65d8:	2c 5f       	subi	r18, 0xFC	; 252
    65da:	3f 4f       	sbci	r19, 0xFF	; 255
    65dc:	2b af       	std	Y+59, r18	; 0x3b
    65de:	3c af       	std	Y+60, r19	; 0x3c
    65e0:	fc 01       	movw	r30, r24
    65e2:	80 81       	ld	r24, Z
    65e4:	91 81       	ldd	r25, Z+1	; 0x01
    65e6:	a2 81       	ldd	r26, Z+2	; 0x02
    65e8:	b3 81       	ldd	r27, Z+3	; 0x03
    65ea:	8b 8f       	std	Y+27, r24	; 0x1b
    65ec:	9c 8f       	std	Y+28, r25	; 0x1c
    65ee:	ad 8f       	std	Y+29, r26	; 0x1d
    65f0:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_fixed(buffer, double_temp);
    65f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    65f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    65f6:	ad 8d       	ldd	r26, Y+29	; 0x1d
    65f8:	be 8d       	ldd	r27, Y+30	; 0x1e
    65fa:	ac 01       	movw	r20, r24
    65fc:	bd 01       	movw	r22, r26
    65fe:	86 e3       	ldi	r24, 0x36	; 54
    6600:	95 e3       	ldi	r25, 0x35	; 53
    6602:	0e 94 6e 34 	call	0x68dc	; 0x68dc <ftoa_fixed>
				for(int i = 0; i < strlen(buffer);i++) {
    6606:	1d 86       	std	Y+13, r1	; 0x0d
    6608:	1e 86       	std	Y+14, r1	; 0x0e
    660a:	15 c0       	rjmp	.+42     	; 0x6636 <display_vprintf+0x2f8>
					str[length+i] = buffer[i];
    660c:	29 81       	ldd	r18, Y+1	; 0x01
    660e:	3a 81       	ldd	r19, Y+2	; 0x02
    6610:	8d 85       	ldd	r24, Y+13	; 0x0d
    6612:	9e 85       	ldd	r25, Y+14	; 0x0e
    6614:	82 0f       	add	r24, r18
    6616:	93 1f       	adc	r25, r19
    6618:	2d 85       	ldd	r18, Y+13	; 0x0d
    661a:	3e 85       	ldd	r19, Y+14	; 0x0e
    661c:	2a 5c       	subi	r18, 0xCA	; 202
    661e:	3a 4c       	sbci	r19, 0xCA	; 202
    6620:	f9 01       	movw	r30, r18
    6622:	20 81       	ld	r18, Z
    6624:	86 5b       	subi	r24, 0xB6	; 182
    6626:	9a 4c       	sbci	r25, 0xCA	; 202
    6628:	fc 01       	movw	r30, r24
    662a:	20 83       	st	Z, r18
				break;

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    662c:	8d 85       	ldd	r24, Y+13	; 0x0d
    662e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6630:	01 96       	adiw	r24, 0x01	; 1
    6632:	8d 87       	std	Y+13, r24	; 0x0d
    6634:	9e 87       	std	Y+14, r25	; 0x0e
    6636:	86 e3       	ldi	r24, 0x36	; 54
    6638:	95 e3       	ldi	r25, 0x35	; 53
    663a:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <strlen>
    663e:	9c 01       	movw	r18, r24
    6640:	8d 85       	ldd	r24, Y+13	; 0x0d
    6642:	9e 85       	ldd	r25, Y+14	; 0x0e
    6644:	82 17       	cp	r24, r18
    6646:	93 07       	cpc	r25, r19
    6648:	08 f3       	brcs	.-62     	; 0x660c <display_vprintf+0x2ce>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    664a:	86 e3       	ldi	r24, 0x36	; 54
    664c:	95 e3       	ldi	r25, 0x35	; 53
    664e:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <strlen>
    6652:	9c 01       	movw	r18, r24
    6654:	89 81       	ldd	r24, Y+1	; 0x01
    6656:	9a 81       	ldd	r25, Y+2	; 0x02
    6658:	82 0f       	add	r24, r18
    665a:	93 1f       	adc	r25, r19
    665c:	89 83       	std	Y+1, r24	; 0x01
    665e:	9a 83       	std	Y+2, r25	; 0x02
				break;
    6660:	63 c0       	rjmp	.+198    	; 0x6728 <display_vprintf+0x3ea>

				case 'e':
				double_temp = va_arg(arg, double);
    6662:	8b ad       	ldd	r24, Y+59	; 0x3b
    6664:	9c ad       	ldd	r25, Y+60	; 0x3c
    6666:	9c 01       	movw	r18, r24
    6668:	2c 5f       	subi	r18, 0xFC	; 252
    666a:	3f 4f       	sbci	r19, 0xFF	; 255
    666c:	2b af       	std	Y+59, r18	; 0x3b
    666e:	3c af       	std	Y+60, r19	; 0x3c
    6670:	fc 01       	movw	r30, r24
    6672:	80 81       	ld	r24, Z
    6674:	91 81       	ldd	r25, Z+1	; 0x01
    6676:	a2 81       	ldd	r26, Z+2	; 0x02
    6678:	b3 81       	ldd	r27, Z+3	; 0x03
    667a:	8b 8f       	std	Y+27, r24	; 0x1b
    667c:	9c 8f       	std	Y+28, r25	; 0x1c
    667e:	ad 8f       	std	Y+29, r26	; 0x1d
    6680:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_sci(buffer, double_temp);
    6682:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6684:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6686:	ad 8d       	ldd	r26, Y+29	; 0x1d
    6688:	be 8d       	ldd	r27, Y+30	; 0x1e
    668a:	ac 01       	movw	r20, r24
    668c:	bd 01       	movw	r22, r26
    668e:	86 e3       	ldi	r24, 0x36	; 54
    6690:	95 e3       	ldi	r25, 0x35	; 53
    6692:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <ftoa_sci>
				for(int i = 0; i < strlen(buffer);i++) {
    6696:	1f 86       	std	Y+15, r1	; 0x0f
    6698:	18 8a       	std	Y+16, r1	; 0x10
    669a:	15 c0       	rjmp	.+42     	; 0x66c6 <display_vprintf+0x388>
					str[length+i] = buffer[i];
    669c:	29 81       	ldd	r18, Y+1	; 0x01
    669e:	3a 81       	ldd	r19, Y+2	; 0x02
    66a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    66a2:	98 89       	ldd	r25, Y+16	; 0x10
    66a4:	82 0f       	add	r24, r18
    66a6:	93 1f       	adc	r25, r19
    66a8:	2f 85       	ldd	r18, Y+15	; 0x0f
    66aa:	38 89       	ldd	r19, Y+16	; 0x10
    66ac:	2a 5c       	subi	r18, 0xCA	; 202
    66ae:	3a 4c       	sbci	r19, 0xCA	; 202
    66b0:	f9 01       	movw	r30, r18
    66b2:	20 81       	ld	r18, Z
    66b4:	86 5b       	subi	r24, 0xB6	; 182
    66b6:	9a 4c       	sbci	r25, 0xCA	; 202
    66b8:	fc 01       	movw	r30, r24
    66ba:	20 83       	st	Z, r18
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    66bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    66be:	98 89       	ldd	r25, Y+16	; 0x10
    66c0:	01 96       	adiw	r24, 0x01	; 1
    66c2:	8f 87       	std	Y+15, r24	; 0x0f
    66c4:	98 8b       	std	Y+16, r25	; 0x10
    66c6:	86 e3       	ldi	r24, 0x36	; 54
    66c8:	95 e3       	ldi	r25, 0x35	; 53
    66ca:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <strlen>
    66ce:	9c 01       	movw	r18, r24
    66d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    66d2:	98 89       	ldd	r25, Y+16	; 0x10
    66d4:	82 17       	cp	r24, r18
    66d6:	93 07       	cpc	r25, r19
    66d8:	08 f3       	brcs	.-62     	; 0x669c <display_vprintf+0x35e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    66da:	86 e3       	ldi	r24, 0x36	; 54
    66dc:	95 e3       	ldi	r25, 0x35	; 53
    66de:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <strlen>
    66e2:	9c 01       	movw	r18, r24
    66e4:	89 81       	ldd	r24, Y+1	; 0x01
    66e6:	9a 81       	ldd	r25, Y+2	; 0x02
    66e8:	82 0f       	add	r24, r18
    66ea:	93 1f       	adc	r25, r19
    66ec:	89 83       	std	Y+1, r24	; 0x01
    66ee:	9a 83       	std	Y+2, r25	; 0x02
				break;
    66f0:	00 00       	nop
    66f2:	1a c0       	rjmp	.+52     	; 0x6728 <display_vprintf+0x3ea>
			}
		}
		else {
			str[length] = ch;
    66f4:	89 81       	ldd	r24, Y+1	; 0x01
    66f6:	9a 81       	ldd	r25, Y+2	; 0x02
    66f8:	86 5b       	subi	r24, 0xB6	; 182
    66fa:	9a 4c       	sbci	r25, 0xCA	; 202
    66fc:	2d 89       	ldd	r18, Y+21	; 0x15
    66fe:	fc 01       	movw	r30, r24
    6700:	20 83       	st	Z, r18
			if(str[length] == '\n') {
    6702:	89 81       	ldd	r24, Y+1	; 0x01
    6704:	9a 81       	ldd	r25, Y+2	; 0x02
    6706:	86 5b       	subi	r24, 0xB6	; 182
    6708:	9a 4c       	sbci	r25, 0xCA	; 202
    670a:	fc 01       	movw	r30, r24
    670c:	80 81       	ld	r24, Z
    670e:	8a 30       	cpi	r24, 0x0A	; 10
    6710:	31 f4       	brne	.+12     	; 0x671e <display_vprintf+0x3e0>
				str[length] = '\0';				
    6712:	89 81       	ldd	r24, Y+1	; 0x01
    6714:	9a 81       	ldd	r25, Y+2	; 0x02
    6716:	86 5b       	subi	r24, 0xB6	; 182
    6718:	9a 4c       	sbci	r25, 0xCA	; 202
    671a:	fc 01       	movw	r30, r24
    671c:	10 82       	st	Z, r1
			}
			length++;
    671e:	89 81       	ldd	r24, Y+1	; 0x01
    6720:	9a 81       	ldd	r25, Y+2	; 0x02
    6722:	01 96       	adiw	r24, 0x01	; 1
    6724:	89 83       	std	Y+1, r24	; 0x01
    6726:	9a 83       	std	Y+2, r25	; 0x02
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    6728:	89 ad       	ldd	r24, Y+57	; 0x39
    672a:	9a ad       	ldd	r25, Y+58	; 0x3a
    672c:	9c 01       	movw	r18, r24
    672e:	2f 5f       	subi	r18, 0xFF	; 255
    6730:	3f 4f       	sbci	r19, 0xFF	; 255
    6732:	29 af       	std	Y+57, r18	; 0x39
    6734:	3a af       	std	Y+58, r19	; 0x3a
    6736:	fc 01       	movw	r30, r24
    6738:	80 81       	ld	r24, Z
    673a:	8d 8b       	std	Y+21, r24	; 0x15
    673c:	8d 89       	ldd	r24, Y+21	; 0x15
    673e:	88 23       	and	r24, r24
    6740:	09 f0       	breq	.+2      	; 0x6744 <display_vprintf+0x406>
    6742:	34 ce       	rjmp	.-920    	; 0x63ac <display_vprintf+0x6e>
				str[length] = '\0';				
			}
			length++;
		}
	}
	if(length + pos >= 20) {
    6744:	29 81       	ldd	r18, Y+1	; 0x01
    6746:	3a 81       	ldd	r19, Y+2	; 0x02
    6748:	8f a9       	ldd	r24, Y+55	; 0x37
    674a:	98 ad       	ldd	r25, Y+56	; 0x38
    674c:	82 0f       	add	r24, r18
    674e:	93 1f       	adc	r25, r19
    6750:	44 97       	sbiw	r24, 0x14	; 20
    6752:	54 f0       	brlt	.+20     	; 0x6768 <display_vprintf+0x42a>
		length = 20-pos;
    6754:	24 e1       	ldi	r18, 0x14	; 20
    6756:	30 e0       	ldi	r19, 0x00	; 0
    6758:	8f a9       	ldd	r24, Y+55	; 0x37
    675a:	98 ad       	ldd	r25, Y+56	; 0x38
    675c:	a9 01       	movw	r20, r18
    675e:	48 1b       	sub	r20, r24
    6760:	59 0b       	sbc	r21, r25
    6762:	ca 01       	movw	r24, r20
    6764:	89 83       	std	Y+1, r24	; 0x01
    6766:	9a 83       	std	Y+2, r25	; 0x02
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    6768:	19 8a       	std	Y+17, r1	; 0x11
    676a:	1a 8a       	std	Y+18, r1	; 0x12
    676c:	0e c0       	rjmp	.+28     	; 0x678a <display_vprintf+0x44c>
		newLine.displayBuffer[i] = 0x00;
    676e:	9e 01       	movw	r18, r28
    6770:	2f 5d       	subi	r18, 0xDF	; 223
    6772:	3f 4f       	sbci	r19, 0xFF	; 255
    6774:	89 89       	ldd	r24, Y+17	; 0x11
    6776:	9a 89       	ldd	r25, Y+18	; 0x12
    6778:	82 0f       	add	r24, r18
    677a:	93 1f       	adc	r25, r19
    677c:	fc 01       	movw	r30, r24
    677e:	10 82       	st	Z, r1
	}
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    6780:	89 89       	ldd	r24, Y+17	; 0x11
    6782:	9a 89       	ldd	r25, Y+18	; 0x12
    6784:	01 96       	adiw	r24, 0x01	; 1
    6786:	89 8b       	std	Y+17, r24	; 0x11
    6788:	9a 8b       	std	Y+18, r25	; 0x12
    678a:	89 89       	ldd	r24, Y+17	; 0x11
    678c:	9a 89       	ldd	r25, Y+18	; 0x12
    678e:	44 97       	sbiw	r24, 0x14	; 20
    6790:	74 f3       	brlt	.-36     	; 0x676e <display_vprintf+0x430>
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
    6792:	8d a9       	ldd	r24, Y+53	; 0x35
    6794:	8f 8f       	std	Y+31, r24	; 0x1f
	newLine.displayPos = pos;
    6796:	8f a9       	ldd	r24, Y+55	; 0x37
    6798:	88 a3       	std	Y+32, r24	; 0x20
	for(int i = 0; i < length;i++) {
    679a:	1b 8a       	std	Y+19, r1	; 0x13
    679c:	1c 8a       	std	Y+20, r1	; 0x14
    679e:	14 c0       	rjmp	.+40     	; 0x67c8 <display_vprintf+0x48a>
		newLine.displayBuffer[i] = str[i];
    67a0:	8b 89       	ldd	r24, Y+19	; 0x13
    67a2:	9c 89       	ldd	r25, Y+20	; 0x14
    67a4:	86 5b       	subi	r24, 0xB6	; 182
    67a6:	9a 4c       	sbci	r25, 0xCA	; 202
    67a8:	fc 01       	movw	r30, r24
    67aa:	40 81       	ld	r20, Z
    67ac:	9e 01       	movw	r18, r28
    67ae:	2f 5d       	subi	r18, 0xDF	; 223
    67b0:	3f 4f       	sbci	r19, 0xFF	; 255
    67b2:	8b 89       	ldd	r24, Y+19	; 0x13
    67b4:	9c 89       	ldd	r25, Y+20	; 0x14
    67b6:	82 0f       	add	r24, r18
    67b8:	93 1f       	adc	r25, r19
    67ba:	fc 01       	movw	r30, r24
    67bc:	40 83       	st	Z, r20
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
	newLine.displayPos = pos;
	for(int i = 0; i < length;i++) {
    67be:	8b 89       	ldd	r24, Y+19	; 0x13
    67c0:	9c 89       	ldd	r25, Y+20	; 0x14
    67c2:	01 96       	adiw	r24, 0x01	; 1
    67c4:	8b 8b       	std	Y+19, r24	; 0x13
    67c6:	9c 8b       	std	Y+20, r25	; 0x14
    67c8:	2b 89       	ldd	r18, Y+19	; 0x13
    67ca:	3c 89       	ldd	r19, Y+20	; 0x14
    67cc:	89 81       	ldd	r24, Y+1	; 0x01
    67ce:	9a 81       	ldd	r25, Y+2	; 0x02
    67d0:	28 17       	cp	r18, r24
    67d2:	39 07       	cpc	r19, r25
    67d4:	2c f3       	brlt	.-54     	; 0x67a0 <display_vprintf+0x462>
		newLine.displayBuffer[i] = str[i];
	}	
	xQueueSend(displayLineQueue, (void *) &newLine, portMAX_DELAY);
    67d6:	80 91 ab 35 	lds	r24, 0x35AB	; 0x8035ab <displayLineQueue>
    67da:	90 91 ac 35 	lds	r25, 0x35AC	; 0x8035ac <displayLineQueue+0x1>
    67de:	be 01       	movw	r22, r28
    67e0:	61 5e       	subi	r22, 0xE1	; 225
    67e2:	7f 4f       	sbci	r23, 0xFF	; 255
    67e4:	00 e0       	ldi	r16, 0x00	; 0
    67e6:	2f ef       	ldi	r18, 0xFF	; 255
    67e8:	3f ef       	ldi	r19, 0xFF	; 255
    67ea:	a9 01       	movw	r20, r18
    67ec:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <xQueueGenericSend>
	
	
	return length;
    67f0:	89 81       	ldd	r24, Y+1	; 0x01
    67f2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    67f4:	ec 96       	adiw	r28, 0x3c	; 60
    67f6:	cd bf       	out	0x3d, r28	; 61
    67f8:	de bf       	out	0x3e, r29	; 62
    67fa:	df 91       	pop	r29
    67fc:	cf 91       	pop	r28
    67fe:	0f 91       	pop	r16
    6800:	08 95       	ret

00006802 <normalize>:

static int normalize(double *val) {
    6802:	cf 93       	push	r28
    6804:	df 93       	push	r29
    6806:	cd b7       	in	r28, 0x3d	; 61
    6808:	de b7       	in	r29, 0x3e	; 62
    680a:	28 97       	sbiw	r28, 0x08	; 8
    680c:	cd bf       	out	0x3d, r28	; 61
    680e:	de bf       	out	0x3e, r29	; 62
    6810:	8f 83       	std	Y+7, r24	; 0x07
    6812:	98 87       	std	Y+8, r25	; 0x08
    int exponent = 0;
    6814:	19 82       	std	Y+1, r1	; 0x01
    6816:	1a 82       	std	Y+2, r1	; 0x02
    double value = *val;
    6818:	8f 81       	ldd	r24, Y+7	; 0x07
    681a:	98 85       	ldd	r25, Y+8	; 0x08
    681c:	fc 01       	movw	r30, r24
    681e:	80 81       	ld	r24, Z
    6820:	91 81       	ldd	r25, Z+1	; 0x01
    6822:	a2 81       	ldd	r26, Z+2	; 0x02
    6824:	b3 81       	ldd	r27, Z+3	; 0x03
    6826:	8b 83       	std	Y+3, r24	; 0x03
    6828:	9c 83       	std	Y+4, r25	; 0x04
    682a:	ad 83       	std	Y+5, r26	; 0x05
    682c:	be 83       	std	Y+6, r27	; 0x06

    while (value >= 1.0) {
    682e:	15 c0       	rjmp	.+42     	; 0x685a <normalize+0x58>
        value /= 10.0;
    6830:	20 e0       	ldi	r18, 0x00	; 0
    6832:	30 e0       	ldi	r19, 0x00	; 0
    6834:	40 e2       	ldi	r20, 0x20	; 32
    6836:	51 e4       	ldi	r21, 0x41	; 65
    6838:	6b 81       	ldd	r22, Y+3	; 0x03
    683a:	7c 81       	ldd	r23, Y+4	; 0x04
    683c:	8d 81       	ldd	r24, Y+5	; 0x05
    683e:	9e 81       	ldd	r25, Y+6	; 0x06
    6840:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <__divsf3>
    6844:	dc 01       	movw	r26, r24
    6846:	cb 01       	movw	r24, r22
    6848:	8b 83       	std	Y+3, r24	; 0x03
    684a:	9c 83       	std	Y+4, r25	; 0x04
    684c:	ad 83       	std	Y+5, r26	; 0x05
    684e:	be 83       	std	Y+6, r27	; 0x06
        ++exponent;
    6850:	89 81       	ldd	r24, Y+1	; 0x01
    6852:	9a 81       	ldd	r25, Y+2	; 0x02
    6854:	01 96       	adiw	r24, 0x01	; 1
    6856:	89 83       	std	Y+1, r24	; 0x01
    6858:	9a 83       	std	Y+2, r25	; 0x02

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    685a:	20 e0       	ldi	r18, 0x00	; 0
    685c:	30 e0       	ldi	r19, 0x00	; 0
    685e:	40 e8       	ldi	r20, 0x80	; 128
    6860:	5f e3       	ldi	r21, 0x3F	; 63
    6862:	6b 81       	ldd	r22, Y+3	; 0x03
    6864:	7c 81       	ldd	r23, Y+4	; 0x04
    6866:	8d 81       	ldd	r24, Y+5	; 0x05
    6868:	9e 81       	ldd	r25, Y+6	; 0x06
    686a:	0e 94 aa 38 	call	0x7154	; 0x7154 <__gesf2>
    686e:	88 23       	and	r24, r24
    6870:	fc f6       	brge	.-66     	; 0x6830 <normalize+0x2e>
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    6872:	15 c0       	rjmp	.+42     	; 0x689e <normalize+0x9c>
        value *= 10.0;
    6874:	20 e0       	ldi	r18, 0x00	; 0
    6876:	30 e0       	ldi	r19, 0x00	; 0
    6878:	40 e2       	ldi	r20, 0x20	; 32
    687a:	51 e4       	ldi	r21, 0x41	; 65
    687c:	6b 81       	ldd	r22, Y+3	; 0x03
    687e:	7c 81       	ldd	r23, Y+4	; 0x04
    6880:	8d 81       	ldd	r24, Y+5	; 0x05
    6882:	9e 81       	ldd	r25, Y+6	; 0x06
    6884:	0e 94 af 38 	call	0x715e	; 0x715e <__mulsf3>
    6888:	dc 01       	movw	r26, r24
    688a:	cb 01       	movw	r24, r22
    688c:	8b 83       	std	Y+3, r24	; 0x03
    688e:	9c 83       	std	Y+4, r25	; 0x04
    6890:	ad 83       	std	Y+5, r26	; 0x05
    6892:	be 83       	std	Y+6, r27	; 0x06
        --exponent;
    6894:	89 81       	ldd	r24, Y+1	; 0x01
    6896:	9a 81       	ldd	r25, Y+2	; 0x02
    6898:	01 97       	sbiw	r24, 0x01	; 1
    689a:	89 83       	std	Y+1, r24	; 0x01
    689c:	9a 83       	std	Y+2, r25	; 0x02
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    689e:	2d ec       	ldi	r18, 0xCD	; 205
    68a0:	3c ec       	ldi	r19, 0xCC	; 204
    68a2:	4c ec       	ldi	r20, 0xCC	; 204
    68a4:	5d e3       	ldi	r21, 0x3D	; 61
    68a6:	6b 81       	ldd	r22, Y+3	; 0x03
    68a8:	7c 81       	ldd	r23, Y+4	; 0x04
    68aa:	8d 81       	ldd	r24, Y+5	; 0x05
    68ac:	9e 81       	ldd	r25, Y+6	; 0x06
    68ae:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <__cmpsf2>
    68b2:	88 23       	and	r24, r24
    68b4:	fc f2       	brlt	.-66     	; 0x6874 <normalize+0x72>
        value *= 10.0;
        --exponent;
    }
    *val = value;
    68b6:	2f 81       	ldd	r18, Y+7	; 0x07
    68b8:	38 85       	ldd	r19, Y+8	; 0x08
    68ba:	8b 81       	ldd	r24, Y+3	; 0x03
    68bc:	9c 81       	ldd	r25, Y+4	; 0x04
    68be:	ad 81       	ldd	r26, Y+5	; 0x05
    68c0:	be 81       	ldd	r27, Y+6	; 0x06
    68c2:	f9 01       	movw	r30, r18
    68c4:	80 83       	st	Z, r24
    68c6:	91 83       	std	Z+1, r25	; 0x01
    68c8:	a2 83       	std	Z+2, r26	; 0x02
    68ca:	b3 83       	std	Z+3, r27	; 0x03
    return exponent;
    68cc:	89 81       	ldd	r24, Y+1	; 0x01
    68ce:	9a 81       	ldd	r25, Y+2	; 0x02
}
    68d0:	28 96       	adiw	r28, 0x08	; 8
    68d2:	cd bf       	out	0x3d, r28	; 61
    68d4:	de bf       	out	0x3e, r29	; 62
    68d6:	df 91       	pop	r29
    68d8:	cf 91       	pop	r28
    68da:	08 95       	ret

000068dc <ftoa_fixed>:

static void ftoa_fixed(char *buffer, double value) {  
    68dc:	cf 92       	push	r12
    68de:	df 92       	push	r13
    68e0:	ef 92       	push	r14
    68e2:	ff 92       	push	r15
    68e4:	cf 93       	push	r28
    68e6:	df 93       	push	r29
    68e8:	cd b7       	in	r28, 0x3d	; 61
    68ea:	de b7       	in	r29, 0x3e	; 62
    68ec:	2e 97       	sbiw	r28, 0x0e	; 14
    68ee:	cd bf       	out	0x3d, r28	; 61
    68f0:	de bf       	out	0x3e, r29	; 62
    68f2:	89 87       	std	Y+9, r24	; 0x09
    68f4:	9a 87       	std	Y+10, r25	; 0x0a
    68f6:	4b 87       	std	Y+11, r20	; 0x0b
    68f8:	5c 87       	std	Y+12, r21	; 0x0c
    68fa:	6d 87       	std	Y+13, r22	; 0x0d
    68fc:	7e 87       	std	Y+14, r23	; 0x0e
     * The largest value we expect is an IEEE 754 double precision real, with maximum magnitude of approximately
     * e+308. The C standard requires an implementation to allow a single conversion to produce up to 512 
     * characters, so that's what we really expect as the buffer size.     
     */

    int exponent = 0;
    68fe:	19 82       	std	Y+1, r1	; 0x01
    6900:	1a 82       	std	Y+2, r1	; 0x02
    int places = 0;
    6902:	1b 82       	std	Y+3, r1	; 0x03
    6904:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    6906:	8b 85       	ldd	r24, Y+11	; 0x0b
    6908:	9c 85       	ldd	r25, Y+12	; 0x0c
    690a:	ad 85       	ldd	r26, Y+13	; 0x0d
    690c:	be 85       	ldd	r27, Y+14	; 0x0e
    690e:	20 e0       	ldi	r18, 0x00	; 0
    6910:	30 e0       	ldi	r19, 0x00	; 0
    6912:	a9 01       	movw	r20, r18
    6914:	bc 01       	movw	r22, r24
    6916:	cd 01       	movw	r24, r26
    6918:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <__cmpsf2>
    691c:	88 23       	and	r24, r24
    691e:	59 f4       	brne	.+22     	; 0x6936 <ftoa_fixed+0x5a>
        buffer[0] = '0';
    6920:	89 85       	ldd	r24, Y+9	; 0x09
    6922:	9a 85       	ldd	r25, Y+10	; 0x0a
    6924:	20 e3       	ldi	r18, 0x30	; 48
    6926:	fc 01       	movw	r30, r24
    6928:	20 83       	st	Z, r18
        buffer[1] = '\0';
    692a:	89 85       	ldd	r24, Y+9	; 0x09
    692c:	9a 85       	ldd	r25, Y+10	; 0x0a
    692e:	01 96       	adiw	r24, 0x01	; 1
    6930:	fc 01       	movw	r30, r24
    6932:	10 82       	st	Z, r1
        return;
    6934:	18 c1       	rjmp	.+560    	; 0x6b66 <ftoa_fixed+0x28a>
    }         

    if (value < 0.0) {
    6936:	8b 85       	ldd	r24, Y+11	; 0x0b
    6938:	9c 85       	ldd	r25, Y+12	; 0x0c
    693a:	ad 85       	ldd	r26, Y+13	; 0x0d
    693c:	be 85       	ldd	r27, Y+14	; 0x0e
    693e:	20 e0       	ldi	r18, 0x00	; 0
    6940:	30 e0       	ldi	r19, 0x00	; 0
    6942:	a9 01       	movw	r20, r18
    6944:	bc 01       	movw	r22, r24
    6946:	cd 01       	movw	r24, r26
    6948:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <__cmpsf2>
    694c:	88 23       	and	r24, r24
    694e:	9c f4       	brge	.+38     	; 0x6976 <ftoa_fixed+0x9a>
        *buffer++ = '-';
    6950:	89 85       	ldd	r24, Y+9	; 0x09
    6952:	9a 85       	ldd	r25, Y+10	; 0x0a
    6954:	9c 01       	movw	r18, r24
    6956:	2f 5f       	subi	r18, 0xFF	; 255
    6958:	3f 4f       	sbci	r19, 0xFF	; 255
    695a:	29 87       	std	Y+9, r18	; 0x09
    695c:	3a 87       	std	Y+10, r19	; 0x0a
    695e:	2d e2       	ldi	r18, 0x2D	; 45
    6960:	fc 01       	movw	r30, r24
    6962:	20 83       	st	Z, r18
        value = -value;
    6964:	8b 85       	ldd	r24, Y+11	; 0x0b
    6966:	9c 85       	ldd	r25, Y+12	; 0x0c
    6968:	ad 85       	ldd	r26, Y+13	; 0x0d
    696a:	be 85       	ldd	r27, Y+14	; 0x0e
    696c:	b0 58       	subi	r27, 0x80	; 128
    696e:	8b 87       	std	Y+11, r24	; 0x0b
    6970:	9c 87       	std	Y+12, r25	; 0x0c
    6972:	ad 87       	std	Y+13, r26	; 0x0d
    6974:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    6976:	ce 01       	movw	r24, r28
    6978:	0b 96       	adiw	r24, 0x0b	; 11
    697a:	0e 94 01 34 	call	0x6802	; 0x6802 <normalize>
    697e:	89 83       	std	Y+1, r24	; 0x01
    6980:	9a 83       	std	Y+2, r25	; 0x02

    while (exponent > 0) {
    6982:	53 c0       	rjmp	.+166    	; 0x6a2a <ftoa_fixed+0x14e>
        int digit = value * 10;
    6984:	8b 85       	ldd	r24, Y+11	; 0x0b
    6986:	9c 85       	ldd	r25, Y+12	; 0x0c
    6988:	ad 85       	ldd	r26, Y+13	; 0x0d
    698a:	be 85       	ldd	r27, Y+14	; 0x0e
    698c:	20 e0       	ldi	r18, 0x00	; 0
    698e:	30 e0       	ldi	r19, 0x00	; 0
    6990:	40 e2       	ldi	r20, 0x20	; 32
    6992:	51 e4       	ldi	r21, 0x41	; 65
    6994:	bc 01       	movw	r22, r24
    6996:	cd 01       	movw	r24, r26
    6998:	0e 94 af 38 	call	0x715e	; 0x715e <__mulsf3>
    699c:	dc 01       	movw	r26, r24
    699e:	cb 01       	movw	r24, r22
    69a0:	bc 01       	movw	r22, r24
    69a2:	cd 01       	movw	r24, r26
    69a4:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__fixsfsi>
    69a8:	dc 01       	movw	r26, r24
    69aa:	cb 01       	movw	r24, r22
    69ac:	8d 83       	std	Y+5, r24	; 0x05
    69ae:	9e 83       	std	Y+6, r25	; 0x06
        *buffer++ = digit + '0';
    69b0:	89 85       	ldd	r24, Y+9	; 0x09
    69b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    69b4:	9c 01       	movw	r18, r24
    69b6:	2f 5f       	subi	r18, 0xFF	; 255
    69b8:	3f 4f       	sbci	r19, 0xFF	; 255
    69ba:	29 87       	std	Y+9, r18	; 0x09
    69bc:	3a 87       	std	Y+10, r19	; 0x0a
    69be:	2d 81       	ldd	r18, Y+5	; 0x05
    69c0:	20 5d       	subi	r18, 0xD0	; 208
    69c2:	fc 01       	movw	r30, r24
    69c4:	20 83       	st	Z, r18
        value = value * 10 - digit;
    69c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    69c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    69ca:	ad 85       	ldd	r26, Y+13	; 0x0d
    69cc:	be 85       	ldd	r27, Y+14	; 0x0e
    69ce:	20 e0       	ldi	r18, 0x00	; 0
    69d0:	30 e0       	ldi	r19, 0x00	; 0
    69d2:	40 e2       	ldi	r20, 0x20	; 32
    69d4:	51 e4       	ldi	r21, 0x41	; 65
    69d6:	bc 01       	movw	r22, r24
    69d8:	cd 01       	movw	r24, r26
    69da:	0e 94 af 38 	call	0x715e	; 0x715e <__mulsf3>
    69de:	dc 01       	movw	r26, r24
    69e0:	cb 01       	movw	r24, r22
    69e2:	6c 01       	movw	r12, r24
    69e4:	7d 01       	movw	r14, r26
    69e6:	8d 81       	ldd	r24, Y+5	; 0x05
    69e8:	9e 81       	ldd	r25, Y+6	; 0x06
    69ea:	09 2e       	mov	r0, r25
    69ec:	00 0c       	add	r0, r0
    69ee:	aa 0b       	sbc	r26, r26
    69f0:	bb 0b       	sbc	r27, r27
    69f2:	bc 01       	movw	r22, r24
    69f4:	cd 01       	movw	r24, r26
    69f6:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <__floatsisf>
    69fa:	dc 01       	movw	r26, r24
    69fc:	cb 01       	movw	r24, r22
    69fe:	9c 01       	movw	r18, r24
    6a00:	ad 01       	movw	r20, r26
    6a02:	c7 01       	movw	r24, r14
    6a04:	b6 01       	movw	r22, r12
    6a06:	0e 94 de 36 	call	0x6dbc	; 0x6dbc <__subsf3>
    6a0a:	dc 01       	movw	r26, r24
    6a0c:	cb 01       	movw	r24, r22
    6a0e:	8b 87       	std	Y+11, r24	; 0x0b
    6a10:	9c 87       	std	Y+12, r25	; 0x0c
    6a12:	ad 87       	std	Y+13, r26	; 0x0d
    6a14:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    6a16:	8b 81       	ldd	r24, Y+3	; 0x03
    6a18:	9c 81       	ldd	r25, Y+4	; 0x04
    6a1a:	01 96       	adiw	r24, 0x01	; 1
    6a1c:	8b 83       	std	Y+3, r24	; 0x03
    6a1e:	9c 83       	std	Y+4, r25	; 0x04
        --exponent;
    6a20:	89 81       	ldd	r24, Y+1	; 0x01
    6a22:	9a 81       	ldd	r25, Y+2	; 0x02
    6a24:	01 97       	sbiw	r24, 0x01	; 1
    6a26:	89 83       	std	Y+1, r24	; 0x01
    6a28:	9a 83       	std	Y+2, r25	; 0x02
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    6a2a:	89 81       	ldd	r24, Y+1	; 0x01
    6a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    6a2e:	18 16       	cp	r1, r24
    6a30:	19 06       	cpc	r1, r25
    6a32:	0c f4       	brge	.+2      	; 0x6a36 <ftoa_fixed+0x15a>
    6a34:	a7 cf       	rjmp	.-178    	; 0x6984 <ftoa_fixed+0xa8>
        value = value * 10 - digit;
        ++places;
        --exponent;
    }

    if (places == 0)
    6a36:	8b 81       	ldd	r24, Y+3	; 0x03
    6a38:	9c 81       	ldd	r25, Y+4	; 0x04
    6a3a:	89 2b       	or	r24, r25
    6a3c:	51 f4       	brne	.+20     	; 0x6a52 <ftoa_fixed+0x176>
        *buffer++ = '0';
    6a3e:	89 85       	ldd	r24, Y+9	; 0x09
    6a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a42:	9c 01       	movw	r18, r24
    6a44:	2f 5f       	subi	r18, 0xFF	; 255
    6a46:	3f 4f       	sbci	r19, 0xFF	; 255
    6a48:	29 87       	std	Y+9, r18	; 0x09
    6a4a:	3a 87       	std	Y+10, r19	; 0x0a
    6a4c:	20 e3       	ldi	r18, 0x30	; 48
    6a4e:	fc 01       	movw	r30, r24
    6a50:	20 83       	st	Z, r18

    *buffer++ = '.';
    6a52:	89 85       	ldd	r24, Y+9	; 0x09
    6a54:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a56:	9c 01       	movw	r18, r24
    6a58:	2f 5f       	subi	r18, 0xFF	; 255
    6a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    6a5c:	29 87       	std	Y+9, r18	; 0x09
    6a5e:	3a 87       	std	Y+10, r19	; 0x0a
    6a60:	2e e2       	ldi	r18, 0x2E	; 46
    6a62:	fc 01       	movw	r30, r24
    6a64:	20 83       	st	Z, r18

    while (exponent < 0 && places < width) {
    6a66:	14 c0       	rjmp	.+40     	; 0x6a90 <ftoa_fixed+0x1b4>
        *buffer++ = '0';
    6a68:	89 85       	ldd	r24, Y+9	; 0x09
    6a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a6c:	9c 01       	movw	r18, r24
    6a6e:	2f 5f       	subi	r18, 0xFF	; 255
    6a70:	3f 4f       	sbci	r19, 0xFF	; 255
    6a72:	29 87       	std	Y+9, r18	; 0x09
    6a74:	3a 87       	std	Y+10, r19	; 0x0a
    6a76:	20 e3       	ldi	r18, 0x30	; 48
    6a78:	fc 01       	movw	r30, r24
    6a7a:	20 83       	st	Z, r18
        --exponent;
    6a7c:	89 81       	ldd	r24, Y+1	; 0x01
    6a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    6a80:	01 97       	sbiw	r24, 0x01	; 1
    6a82:	89 83       	std	Y+1, r24	; 0x01
    6a84:	9a 83       	std	Y+2, r25	; 0x02
        ++places;
    6a86:	8b 81       	ldd	r24, Y+3	; 0x03
    6a88:	9c 81       	ldd	r25, Y+4	; 0x04
    6a8a:	01 96       	adiw	r24, 0x01	; 1
    6a8c:	8b 83       	std	Y+3, r24	; 0x03
    6a8e:	9c 83       	std	Y+4, r25	; 0x04
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    6a90:	89 81       	ldd	r24, Y+1	; 0x01
    6a92:	9a 81       	ldd	r25, Y+2	; 0x02
    6a94:	99 23       	and	r25, r25
    6a96:	0c f0       	brlt	.+2      	; 0x6a9a <ftoa_fixed+0x1be>
    6a98:	58 c0       	rjmp	.+176    	; 0x6b4a <ftoa_fixed+0x26e>
    6a9a:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <width.5062>
    6a9e:	90 91 0d 21 	lds	r25, 0x210D	; 0x80210d <width.5062+0x1>
    6aa2:	2b 81       	ldd	r18, Y+3	; 0x03
    6aa4:	3c 81       	ldd	r19, Y+4	; 0x04
    6aa6:	28 17       	cp	r18, r24
    6aa8:	39 07       	cpc	r19, r25
    6aaa:	f4 f2       	brlt	.-68     	; 0x6a68 <ftoa_fixed+0x18c>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    6aac:	4e c0       	rjmp	.+156    	; 0x6b4a <ftoa_fixed+0x26e>
        int digit = value * 10.0;
    6aae:	8b 85       	ldd	r24, Y+11	; 0x0b
    6ab0:	9c 85       	ldd	r25, Y+12	; 0x0c
    6ab2:	ad 85       	ldd	r26, Y+13	; 0x0d
    6ab4:	be 85       	ldd	r27, Y+14	; 0x0e
    6ab6:	20 e0       	ldi	r18, 0x00	; 0
    6ab8:	30 e0       	ldi	r19, 0x00	; 0
    6aba:	40 e2       	ldi	r20, 0x20	; 32
    6abc:	51 e4       	ldi	r21, 0x41	; 65
    6abe:	bc 01       	movw	r22, r24
    6ac0:	cd 01       	movw	r24, r26
    6ac2:	0e 94 af 38 	call	0x715e	; 0x715e <__mulsf3>
    6ac6:	dc 01       	movw	r26, r24
    6ac8:	cb 01       	movw	r24, r22
    6aca:	bc 01       	movw	r22, r24
    6acc:	cd 01       	movw	r24, r26
    6ace:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__fixsfsi>
    6ad2:	dc 01       	movw	r26, r24
    6ad4:	cb 01       	movw	r24, r22
    6ad6:	8f 83       	std	Y+7, r24	; 0x07
    6ad8:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    6ada:	89 85       	ldd	r24, Y+9	; 0x09
    6adc:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ade:	9c 01       	movw	r18, r24
    6ae0:	2f 5f       	subi	r18, 0xFF	; 255
    6ae2:	3f 4f       	sbci	r19, 0xFF	; 255
    6ae4:	29 87       	std	Y+9, r18	; 0x09
    6ae6:	3a 87       	std	Y+10, r19	; 0x0a
    6ae8:	2f 81       	ldd	r18, Y+7	; 0x07
    6aea:	20 5d       	subi	r18, 0xD0	; 208
    6aec:	fc 01       	movw	r30, r24
    6aee:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    6af0:	8b 85       	ldd	r24, Y+11	; 0x0b
    6af2:	9c 85       	ldd	r25, Y+12	; 0x0c
    6af4:	ad 85       	ldd	r26, Y+13	; 0x0d
    6af6:	be 85       	ldd	r27, Y+14	; 0x0e
    6af8:	20 e0       	ldi	r18, 0x00	; 0
    6afa:	30 e0       	ldi	r19, 0x00	; 0
    6afc:	40 e2       	ldi	r20, 0x20	; 32
    6afe:	51 e4       	ldi	r21, 0x41	; 65
    6b00:	bc 01       	movw	r22, r24
    6b02:	cd 01       	movw	r24, r26
    6b04:	0e 94 af 38 	call	0x715e	; 0x715e <__mulsf3>
    6b08:	dc 01       	movw	r26, r24
    6b0a:	cb 01       	movw	r24, r22
    6b0c:	6c 01       	movw	r12, r24
    6b0e:	7d 01       	movw	r14, r26
    6b10:	8f 81       	ldd	r24, Y+7	; 0x07
    6b12:	98 85       	ldd	r25, Y+8	; 0x08
    6b14:	09 2e       	mov	r0, r25
    6b16:	00 0c       	add	r0, r0
    6b18:	aa 0b       	sbc	r26, r26
    6b1a:	bb 0b       	sbc	r27, r27
    6b1c:	bc 01       	movw	r22, r24
    6b1e:	cd 01       	movw	r24, r26
    6b20:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <__floatsisf>
    6b24:	dc 01       	movw	r26, r24
    6b26:	cb 01       	movw	r24, r22
    6b28:	9c 01       	movw	r18, r24
    6b2a:	ad 01       	movw	r20, r26
    6b2c:	c7 01       	movw	r24, r14
    6b2e:	b6 01       	movw	r22, r12
    6b30:	0e 94 de 36 	call	0x6dbc	; 0x6dbc <__subsf3>
    6b34:	dc 01       	movw	r26, r24
    6b36:	cb 01       	movw	r24, r22
    6b38:	8b 87       	std	Y+11, r24	; 0x0b
    6b3a:	9c 87       	std	Y+12, r25	; 0x0c
    6b3c:	ad 87       	std	Y+13, r26	; 0x0d
    6b3e:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    6b40:	8b 81       	ldd	r24, Y+3	; 0x03
    6b42:	9c 81       	ldd	r25, Y+4	; 0x04
    6b44:	01 96       	adiw	r24, 0x01	; 1
    6b46:	8b 83       	std	Y+3, r24	; 0x03
    6b48:	9c 83       	std	Y+4, r25	; 0x04
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    6b4a:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <width.5062>
    6b4e:	90 91 0d 21 	lds	r25, 0x210D	; 0x80210d <width.5062+0x1>
    6b52:	2b 81       	ldd	r18, Y+3	; 0x03
    6b54:	3c 81       	ldd	r19, Y+4	; 0x04
    6b56:	28 17       	cp	r18, r24
    6b58:	39 07       	cpc	r19, r25
    6b5a:	0c f4       	brge	.+2      	; 0x6b5e <ftoa_fixed+0x282>
    6b5c:	a8 cf       	rjmp	.-176    	; 0x6aae <ftoa_fixed+0x1d2>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
        ++places;
    }
    *buffer = '\0';
    6b5e:	89 85       	ldd	r24, Y+9	; 0x09
    6b60:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b62:	fc 01       	movw	r30, r24
    6b64:	10 82       	st	Z, r1
}
    6b66:	2e 96       	adiw	r28, 0x0e	; 14
    6b68:	cd bf       	out	0x3d, r28	; 61
    6b6a:	de bf       	out	0x3e, r29	; 62
    6b6c:	df 91       	pop	r29
    6b6e:	cf 91       	pop	r28
    6b70:	ff 90       	pop	r15
    6b72:	ef 90       	pop	r14
    6b74:	df 90       	pop	r13
    6b76:	cf 90       	pop	r12
    6b78:	08 95       	ret

00006b7a <ftoa_sci>:

void ftoa_sci(char *buffer, double value) {
    6b7a:	cf 92       	push	r12
    6b7c:	df 92       	push	r13
    6b7e:	ef 92       	push	r14
    6b80:	ff 92       	push	r15
    6b82:	cf 93       	push	r28
    6b84:	df 93       	push	r29
    6b86:	cd b7       	in	r28, 0x3d	; 61
    6b88:	de b7       	in	r29, 0x3e	; 62
    6b8a:	2e 97       	sbiw	r28, 0x0e	; 14
    6b8c:	cd bf       	out	0x3d, r28	; 61
    6b8e:	de bf       	out	0x3e, r29	; 62
    6b90:	89 87       	std	Y+9, r24	; 0x09
    6b92:	9a 87       	std	Y+10, r25	; 0x0a
    6b94:	4b 87       	std	Y+11, r20	; 0x0b
    6b96:	5c 87       	std	Y+12, r21	; 0x0c
    6b98:	6d 87       	std	Y+13, r22	; 0x0d
    6b9a:	7e 87       	std	Y+14, r23	; 0x0e
    int exponent = 0;    
    6b9c:	1b 82       	std	Y+3, r1	; 0x03
    6b9e:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    6ba0:	8b 85       	ldd	r24, Y+11	; 0x0b
    6ba2:	9c 85       	ldd	r25, Y+12	; 0x0c
    6ba4:	ad 85       	ldd	r26, Y+13	; 0x0d
    6ba6:	be 85       	ldd	r27, Y+14	; 0x0e
    6ba8:	20 e0       	ldi	r18, 0x00	; 0
    6baa:	30 e0       	ldi	r19, 0x00	; 0
    6bac:	a9 01       	movw	r20, r18
    6bae:	bc 01       	movw	r22, r24
    6bb0:	cd 01       	movw	r24, r26
    6bb2:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <__cmpsf2>
    6bb6:	88 23       	and	r24, r24
    6bb8:	59 f4       	brne	.+22     	; 0x6bd0 <ftoa_sci+0x56>
        buffer[0] = '0';
    6bba:	89 85       	ldd	r24, Y+9	; 0x09
    6bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    6bbe:	20 e3       	ldi	r18, 0x30	; 48
    6bc0:	fc 01       	movw	r30, r24
    6bc2:	20 83       	st	Z, r18
        buffer[1] = '\0';
    6bc4:	89 85       	ldd	r24, Y+9	; 0x09
    6bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    6bc8:	01 96       	adiw	r24, 0x01	; 1
    6bca:	fc 01       	movw	r30, r24
    6bcc:	10 82       	st	Z, r1
        return;
    6bce:	ec c0       	rjmp	.+472    	; 0x6da8 <ftoa_sci+0x22e>
    }

    if (value < 0.0) {
    6bd0:	8b 85       	ldd	r24, Y+11	; 0x0b
    6bd2:	9c 85       	ldd	r25, Y+12	; 0x0c
    6bd4:	ad 85       	ldd	r26, Y+13	; 0x0d
    6bd6:	be 85       	ldd	r27, Y+14	; 0x0e
    6bd8:	20 e0       	ldi	r18, 0x00	; 0
    6bda:	30 e0       	ldi	r19, 0x00	; 0
    6bdc:	a9 01       	movw	r20, r18
    6bde:	bc 01       	movw	r22, r24
    6be0:	cd 01       	movw	r24, r26
    6be2:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <__cmpsf2>
    6be6:	88 23       	and	r24, r24
    6be8:	9c f4       	brge	.+38     	; 0x6c10 <ftoa_sci+0x96>
        *buffer++ = '-';
    6bea:	89 85       	ldd	r24, Y+9	; 0x09
    6bec:	9a 85       	ldd	r25, Y+10	; 0x0a
    6bee:	9c 01       	movw	r18, r24
    6bf0:	2f 5f       	subi	r18, 0xFF	; 255
    6bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    6bf4:	29 87       	std	Y+9, r18	; 0x09
    6bf6:	3a 87       	std	Y+10, r19	; 0x0a
    6bf8:	2d e2       	ldi	r18, 0x2D	; 45
    6bfa:	fc 01       	movw	r30, r24
    6bfc:	20 83       	st	Z, r18
        value = -value;
    6bfe:	8b 85       	ldd	r24, Y+11	; 0x0b
    6c00:	9c 85       	ldd	r25, Y+12	; 0x0c
    6c02:	ad 85       	ldd	r26, Y+13	; 0x0d
    6c04:	be 85       	ldd	r27, Y+14	; 0x0e
    6c06:	b0 58       	subi	r27, 0x80	; 128
    6c08:	8b 87       	std	Y+11, r24	; 0x0b
    6c0a:	9c 87       	std	Y+12, r25	; 0x0c
    6c0c:	ad 87       	std	Y+13, r26	; 0x0d
    6c0e:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    6c10:	ce 01       	movw	r24, r28
    6c12:	0b 96       	adiw	r24, 0x0b	; 11
    6c14:	0e 94 01 34 	call	0x6802	; 0x6802 <normalize>
    6c18:	8b 83       	std	Y+3, r24	; 0x03
    6c1a:	9c 83       	std	Y+4, r25	; 0x04

    int digit = value * 10.0;
    6c1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    6c1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    6c20:	ad 85       	ldd	r26, Y+13	; 0x0d
    6c22:	be 85       	ldd	r27, Y+14	; 0x0e
    6c24:	20 e0       	ldi	r18, 0x00	; 0
    6c26:	30 e0       	ldi	r19, 0x00	; 0
    6c28:	40 e2       	ldi	r20, 0x20	; 32
    6c2a:	51 e4       	ldi	r21, 0x41	; 65
    6c2c:	bc 01       	movw	r22, r24
    6c2e:	cd 01       	movw	r24, r26
    6c30:	0e 94 af 38 	call	0x715e	; 0x715e <__mulsf3>
    6c34:	dc 01       	movw	r26, r24
    6c36:	cb 01       	movw	r24, r22
    6c38:	bc 01       	movw	r22, r24
    6c3a:	cd 01       	movw	r24, r26
    6c3c:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__fixsfsi>
    6c40:	dc 01       	movw	r26, r24
    6c42:	cb 01       	movw	r24, r22
    6c44:	8d 83       	std	Y+5, r24	; 0x05
    6c46:	9e 83       	std	Y+6, r25	; 0x06
    *buffer++ = digit + '0';
    6c48:	89 85       	ldd	r24, Y+9	; 0x09
    6c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c4c:	9c 01       	movw	r18, r24
    6c4e:	2f 5f       	subi	r18, 0xFF	; 255
    6c50:	3f 4f       	sbci	r19, 0xFF	; 255
    6c52:	29 87       	std	Y+9, r18	; 0x09
    6c54:	3a 87       	std	Y+10, r19	; 0x0a
    6c56:	2d 81       	ldd	r18, Y+5	; 0x05
    6c58:	20 5d       	subi	r18, 0xD0	; 208
    6c5a:	fc 01       	movw	r30, r24
    6c5c:	20 83       	st	Z, r18
    value = value * 10.0 - digit;
    6c5e:	8b 85       	ldd	r24, Y+11	; 0x0b
    6c60:	9c 85       	ldd	r25, Y+12	; 0x0c
    6c62:	ad 85       	ldd	r26, Y+13	; 0x0d
    6c64:	be 85       	ldd	r27, Y+14	; 0x0e
    6c66:	20 e0       	ldi	r18, 0x00	; 0
    6c68:	30 e0       	ldi	r19, 0x00	; 0
    6c6a:	40 e2       	ldi	r20, 0x20	; 32
    6c6c:	51 e4       	ldi	r21, 0x41	; 65
    6c6e:	bc 01       	movw	r22, r24
    6c70:	cd 01       	movw	r24, r26
    6c72:	0e 94 af 38 	call	0x715e	; 0x715e <__mulsf3>
    6c76:	dc 01       	movw	r26, r24
    6c78:	cb 01       	movw	r24, r22
    6c7a:	6c 01       	movw	r12, r24
    6c7c:	7d 01       	movw	r14, r26
    6c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    6c80:	9e 81       	ldd	r25, Y+6	; 0x06
    6c82:	09 2e       	mov	r0, r25
    6c84:	00 0c       	add	r0, r0
    6c86:	aa 0b       	sbc	r26, r26
    6c88:	bb 0b       	sbc	r27, r27
    6c8a:	bc 01       	movw	r22, r24
    6c8c:	cd 01       	movw	r24, r26
    6c8e:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <__floatsisf>
    6c92:	dc 01       	movw	r26, r24
    6c94:	cb 01       	movw	r24, r22
    6c96:	9c 01       	movw	r18, r24
    6c98:	ad 01       	movw	r20, r26
    6c9a:	c7 01       	movw	r24, r14
    6c9c:	b6 01       	movw	r22, r12
    6c9e:	0e 94 de 36 	call	0x6dbc	; 0x6dbc <__subsf3>
    6ca2:	dc 01       	movw	r26, r24
    6ca4:	cb 01       	movw	r24, r22
    6ca6:	8b 87       	std	Y+11, r24	; 0x0b
    6ca8:	9c 87       	std	Y+12, r25	; 0x0c
    6caa:	ad 87       	std	Y+13, r26	; 0x0d
    6cac:	be 87       	std	Y+14, r27	; 0x0e
    --exponent;
    6cae:	8b 81       	ldd	r24, Y+3	; 0x03
    6cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    6cb2:	01 97       	sbiw	r24, 0x01	; 1
    6cb4:	8b 83       	std	Y+3, r24	; 0x03
    6cb6:	9c 83       	std	Y+4, r25	; 0x04

    *buffer++ = '.';
    6cb8:	89 85       	ldd	r24, Y+9	; 0x09
    6cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    6cbc:	9c 01       	movw	r18, r24
    6cbe:	2f 5f       	subi	r18, 0xFF	; 255
    6cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    6cc2:	29 87       	std	Y+9, r18	; 0x09
    6cc4:	3a 87       	std	Y+10, r19	; 0x0a
    6cc6:	2e e2       	ldi	r18, 0x2E	; 46
    6cc8:	fc 01       	movw	r30, r24
    6cca:	20 83       	st	Z, r18

    for (int i = 0; i < width; i++) {
    6ccc:	19 82       	std	Y+1, r1	; 0x01
    6cce:	1a 82       	std	Y+2, r1	; 0x02
    6cd0:	4e c0       	rjmp	.+156    	; 0x6d6e <ftoa_sci+0x1f4>
        int digit = value * 10.0;
    6cd2:	8b 85       	ldd	r24, Y+11	; 0x0b
    6cd4:	9c 85       	ldd	r25, Y+12	; 0x0c
    6cd6:	ad 85       	ldd	r26, Y+13	; 0x0d
    6cd8:	be 85       	ldd	r27, Y+14	; 0x0e
    6cda:	20 e0       	ldi	r18, 0x00	; 0
    6cdc:	30 e0       	ldi	r19, 0x00	; 0
    6cde:	40 e2       	ldi	r20, 0x20	; 32
    6ce0:	51 e4       	ldi	r21, 0x41	; 65
    6ce2:	bc 01       	movw	r22, r24
    6ce4:	cd 01       	movw	r24, r26
    6ce6:	0e 94 af 38 	call	0x715e	; 0x715e <__mulsf3>
    6cea:	dc 01       	movw	r26, r24
    6cec:	cb 01       	movw	r24, r22
    6cee:	bc 01       	movw	r22, r24
    6cf0:	cd 01       	movw	r24, r26
    6cf2:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__fixsfsi>
    6cf6:	dc 01       	movw	r26, r24
    6cf8:	cb 01       	movw	r24, r22
    6cfa:	8f 83       	std	Y+7, r24	; 0x07
    6cfc:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    6cfe:	89 85       	ldd	r24, Y+9	; 0x09
    6d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d02:	9c 01       	movw	r18, r24
    6d04:	2f 5f       	subi	r18, 0xFF	; 255
    6d06:	3f 4f       	sbci	r19, 0xFF	; 255
    6d08:	29 87       	std	Y+9, r18	; 0x09
    6d0a:	3a 87       	std	Y+10, r19	; 0x0a
    6d0c:	2f 81       	ldd	r18, Y+7	; 0x07
    6d0e:	20 5d       	subi	r18, 0xD0	; 208
    6d10:	fc 01       	movw	r30, r24
    6d12:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    6d14:	8b 85       	ldd	r24, Y+11	; 0x0b
    6d16:	9c 85       	ldd	r25, Y+12	; 0x0c
    6d18:	ad 85       	ldd	r26, Y+13	; 0x0d
    6d1a:	be 85       	ldd	r27, Y+14	; 0x0e
    6d1c:	20 e0       	ldi	r18, 0x00	; 0
    6d1e:	30 e0       	ldi	r19, 0x00	; 0
    6d20:	40 e2       	ldi	r20, 0x20	; 32
    6d22:	51 e4       	ldi	r21, 0x41	; 65
    6d24:	bc 01       	movw	r22, r24
    6d26:	cd 01       	movw	r24, r26
    6d28:	0e 94 af 38 	call	0x715e	; 0x715e <__mulsf3>
    6d2c:	dc 01       	movw	r26, r24
    6d2e:	cb 01       	movw	r24, r22
    6d30:	6c 01       	movw	r12, r24
    6d32:	7d 01       	movw	r14, r26
    6d34:	8f 81       	ldd	r24, Y+7	; 0x07
    6d36:	98 85       	ldd	r25, Y+8	; 0x08
    6d38:	09 2e       	mov	r0, r25
    6d3a:	00 0c       	add	r0, r0
    6d3c:	aa 0b       	sbc	r26, r26
    6d3e:	bb 0b       	sbc	r27, r27
    6d40:	bc 01       	movw	r22, r24
    6d42:	cd 01       	movw	r24, r26
    6d44:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <__floatsisf>
    6d48:	dc 01       	movw	r26, r24
    6d4a:	cb 01       	movw	r24, r22
    6d4c:	9c 01       	movw	r18, r24
    6d4e:	ad 01       	movw	r20, r26
    6d50:	c7 01       	movw	r24, r14
    6d52:	b6 01       	movw	r22, r12
    6d54:	0e 94 de 36 	call	0x6dbc	; 0x6dbc <__subsf3>
    6d58:	dc 01       	movw	r26, r24
    6d5a:	cb 01       	movw	r24, r22
    6d5c:	8b 87       	std	Y+11, r24	; 0x0b
    6d5e:	9c 87       	std	Y+12, r25	; 0x0c
    6d60:	ad 87       	std	Y+13, r26	; 0x0d
    6d62:	be 87       	std	Y+14, r27	; 0x0e
    value = value * 10.0 - digit;
    --exponent;

    *buffer++ = '.';

    for (int i = 0; i < width; i++) {
    6d64:	89 81       	ldd	r24, Y+1	; 0x01
    6d66:	9a 81       	ldd	r25, Y+2	; 0x02
    6d68:	01 96       	adiw	r24, 0x01	; 1
    6d6a:	89 83       	std	Y+1, r24	; 0x01
    6d6c:	9a 83       	std	Y+2, r25	; 0x02
    6d6e:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <width.5079>
    6d72:	90 91 0f 21 	lds	r25, 0x210F	; 0x80210f <width.5079+0x1>
    6d76:	29 81       	ldd	r18, Y+1	; 0x01
    6d78:	3a 81       	ldd	r19, Y+2	; 0x02
    6d7a:	28 17       	cp	r18, r24
    6d7c:	39 07       	cpc	r19, r25
    6d7e:	0c f4       	brge	.+2      	; 0x6d82 <ftoa_sci+0x208>
    6d80:	a8 cf       	rjmp	.-176    	; 0x6cd2 <ftoa_sci+0x158>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
    }

    *buffer++ = 'e';
    6d82:	89 85       	ldd	r24, Y+9	; 0x09
    6d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d86:	9c 01       	movw	r18, r24
    6d88:	2f 5f       	subi	r18, 0xFF	; 255
    6d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    6d8c:	29 87       	std	Y+9, r18	; 0x09
    6d8e:	3a 87       	std	Y+10, r19	; 0x0a
    6d90:	25 e6       	ldi	r18, 0x65	; 101
    6d92:	fc 01       	movw	r30, r24
    6d94:	20 83       	st	Z, r18
    itoa(exponent, buffer, 10);
    6d96:	29 85       	ldd	r18, Y+9	; 0x09
    6d98:	3a 85       	ldd	r19, Y+10	; 0x0a
    6d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    6d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    6d9e:	4a e0       	ldi	r20, 0x0A	; 10
    6da0:	50 e0       	ldi	r21, 0x00	; 0
    6da2:	b9 01       	movw	r22, r18
    6da4:	0e 94 f5 3d 	call	0x7bea	; 0x7bea <itoa>
}
    6da8:	2e 96       	adiw	r28, 0x0e	; 14
    6daa:	cd bf       	out	0x3d, r28	; 61
    6dac:	de bf       	out	0x3e, r29	; 62
    6dae:	df 91       	pop	r29
    6db0:	cf 91       	pop	r28
    6db2:	ff 90       	pop	r15
    6db4:	ef 90       	pop	r14
    6db6:	df 90       	pop	r13
    6db8:	cf 90       	pop	r12
    6dba:	08 95       	ret

00006dbc <__subsf3>:
    6dbc:	50 58       	subi	r21, 0x80	; 128

00006dbe <__addsf3>:
    6dbe:	bb 27       	eor	r27, r27
    6dc0:	aa 27       	eor	r26, r26
    6dc2:	0e 94 f6 36 	call	0x6dec	; 0x6dec <__addsf3x>
    6dc6:	0c 94 70 38 	jmp	0x70e0	; 0x70e0 <__fp_round>
    6dca:	0e 94 62 38 	call	0x70c4	; 0x70c4 <__fp_pscA>
    6dce:	38 f0       	brcs	.+14     	; 0x6dde <__addsf3+0x20>
    6dd0:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__fp_pscB>
    6dd4:	20 f0       	brcs	.+8      	; 0x6dde <__addsf3+0x20>
    6dd6:	39 f4       	brne	.+14     	; 0x6de6 <__addsf3+0x28>
    6dd8:	9f 3f       	cpi	r25, 0xFF	; 255
    6dda:	19 f4       	brne	.+6      	; 0x6de2 <__addsf3+0x24>
    6ddc:	26 f4       	brtc	.+8      	; 0x6de6 <__addsf3+0x28>
    6dde:	0c 94 5f 38 	jmp	0x70be	; 0x70be <__fp_nan>
    6de2:	0e f4       	brtc	.+2      	; 0x6de6 <__addsf3+0x28>
    6de4:	e0 95       	com	r30
    6de6:	e7 fb       	bst	r30, 7
    6de8:	0c 94 59 38 	jmp	0x70b2	; 0x70b2 <__fp_inf>

00006dec <__addsf3x>:
    6dec:	e9 2f       	mov	r30, r25
    6dee:	0e 94 81 38 	call	0x7102	; 0x7102 <__fp_split3>
    6df2:	58 f3       	brcs	.-42     	; 0x6dca <__addsf3+0xc>
    6df4:	ba 17       	cp	r27, r26
    6df6:	62 07       	cpc	r22, r18
    6df8:	73 07       	cpc	r23, r19
    6dfa:	84 07       	cpc	r24, r20
    6dfc:	95 07       	cpc	r25, r21
    6dfe:	20 f0       	brcs	.+8      	; 0x6e08 <__addsf3x+0x1c>
    6e00:	79 f4       	brne	.+30     	; 0x6e20 <__addsf3x+0x34>
    6e02:	a6 f5       	brtc	.+104    	; 0x6e6c <__addsf3x+0x80>
    6e04:	0c 94 a3 38 	jmp	0x7146	; 0x7146 <__fp_zero>
    6e08:	0e f4       	brtc	.+2      	; 0x6e0c <__addsf3x+0x20>
    6e0a:	e0 95       	com	r30
    6e0c:	0b 2e       	mov	r0, r27
    6e0e:	ba 2f       	mov	r27, r26
    6e10:	a0 2d       	mov	r26, r0
    6e12:	0b 01       	movw	r0, r22
    6e14:	b9 01       	movw	r22, r18
    6e16:	90 01       	movw	r18, r0
    6e18:	0c 01       	movw	r0, r24
    6e1a:	ca 01       	movw	r24, r20
    6e1c:	a0 01       	movw	r20, r0
    6e1e:	11 24       	eor	r1, r1
    6e20:	ff 27       	eor	r31, r31
    6e22:	59 1b       	sub	r21, r25
    6e24:	99 f0       	breq	.+38     	; 0x6e4c <__addsf3x+0x60>
    6e26:	59 3f       	cpi	r21, 0xF9	; 249
    6e28:	50 f4       	brcc	.+20     	; 0x6e3e <__addsf3x+0x52>
    6e2a:	50 3e       	cpi	r21, 0xE0	; 224
    6e2c:	68 f1       	brcs	.+90     	; 0x6e88 <__addsf3x+0x9c>
    6e2e:	1a 16       	cp	r1, r26
    6e30:	f0 40       	sbci	r31, 0x00	; 0
    6e32:	a2 2f       	mov	r26, r18
    6e34:	23 2f       	mov	r18, r19
    6e36:	34 2f       	mov	r19, r20
    6e38:	44 27       	eor	r20, r20
    6e3a:	58 5f       	subi	r21, 0xF8	; 248
    6e3c:	f3 cf       	rjmp	.-26     	; 0x6e24 <__addsf3x+0x38>
    6e3e:	46 95       	lsr	r20
    6e40:	37 95       	ror	r19
    6e42:	27 95       	ror	r18
    6e44:	a7 95       	ror	r26
    6e46:	f0 40       	sbci	r31, 0x00	; 0
    6e48:	53 95       	inc	r21
    6e4a:	c9 f7       	brne	.-14     	; 0x6e3e <__addsf3x+0x52>
    6e4c:	7e f4       	brtc	.+30     	; 0x6e6c <__addsf3x+0x80>
    6e4e:	1f 16       	cp	r1, r31
    6e50:	ba 0b       	sbc	r27, r26
    6e52:	62 0b       	sbc	r22, r18
    6e54:	73 0b       	sbc	r23, r19
    6e56:	84 0b       	sbc	r24, r20
    6e58:	ba f0       	brmi	.+46     	; 0x6e88 <__addsf3x+0x9c>
    6e5a:	91 50       	subi	r25, 0x01	; 1
    6e5c:	a1 f0       	breq	.+40     	; 0x6e86 <__addsf3x+0x9a>
    6e5e:	ff 0f       	add	r31, r31
    6e60:	bb 1f       	adc	r27, r27
    6e62:	66 1f       	adc	r22, r22
    6e64:	77 1f       	adc	r23, r23
    6e66:	88 1f       	adc	r24, r24
    6e68:	c2 f7       	brpl	.-16     	; 0x6e5a <__addsf3x+0x6e>
    6e6a:	0e c0       	rjmp	.+28     	; 0x6e88 <__addsf3x+0x9c>
    6e6c:	ba 0f       	add	r27, r26
    6e6e:	62 1f       	adc	r22, r18
    6e70:	73 1f       	adc	r23, r19
    6e72:	84 1f       	adc	r24, r20
    6e74:	48 f4       	brcc	.+18     	; 0x6e88 <__addsf3x+0x9c>
    6e76:	87 95       	ror	r24
    6e78:	77 95       	ror	r23
    6e7a:	67 95       	ror	r22
    6e7c:	b7 95       	ror	r27
    6e7e:	f7 95       	ror	r31
    6e80:	9e 3f       	cpi	r25, 0xFE	; 254
    6e82:	08 f0       	brcs	.+2      	; 0x6e86 <__addsf3x+0x9a>
    6e84:	b0 cf       	rjmp	.-160    	; 0x6de6 <__addsf3+0x28>
    6e86:	93 95       	inc	r25
    6e88:	88 0f       	add	r24, r24
    6e8a:	08 f0       	brcs	.+2      	; 0x6e8e <__addsf3x+0xa2>
    6e8c:	99 27       	eor	r25, r25
    6e8e:	ee 0f       	add	r30, r30
    6e90:	97 95       	ror	r25
    6e92:	87 95       	ror	r24
    6e94:	08 95       	ret

00006e96 <__cmpsf2>:
    6e96:	0e 94 35 38 	call	0x706a	; 0x706a <__fp_cmp>
    6e9a:	08 f4       	brcc	.+2      	; 0x6e9e <__cmpsf2+0x8>
    6e9c:	81 e0       	ldi	r24, 0x01	; 1
    6e9e:	08 95       	ret

00006ea0 <__divsf3>:
    6ea0:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__divsf3x>
    6ea4:	0c 94 70 38 	jmp	0x70e0	; 0x70e0 <__fp_round>
    6ea8:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__fp_pscB>
    6eac:	58 f0       	brcs	.+22     	; 0x6ec4 <__divsf3+0x24>
    6eae:	0e 94 62 38 	call	0x70c4	; 0x70c4 <__fp_pscA>
    6eb2:	40 f0       	brcs	.+16     	; 0x6ec4 <__divsf3+0x24>
    6eb4:	29 f4       	brne	.+10     	; 0x6ec0 <__divsf3+0x20>
    6eb6:	5f 3f       	cpi	r21, 0xFF	; 255
    6eb8:	29 f0       	breq	.+10     	; 0x6ec4 <__divsf3+0x24>
    6eba:	0c 94 59 38 	jmp	0x70b2	; 0x70b2 <__fp_inf>
    6ebe:	51 11       	cpse	r21, r1
    6ec0:	0c 94 a4 38 	jmp	0x7148	; 0x7148 <__fp_szero>
    6ec4:	0c 94 5f 38 	jmp	0x70be	; 0x70be <__fp_nan>

00006ec8 <__divsf3x>:
    6ec8:	0e 94 81 38 	call	0x7102	; 0x7102 <__fp_split3>
    6ecc:	68 f3       	brcs	.-38     	; 0x6ea8 <__divsf3+0x8>

00006ece <__divsf3_pse>:
    6ece:	99 23       	and	r25, r25
    6ed0:	b1 f3       	breq	.-20     	; 0x6ebe <__divsf3+0x1e>
    6ed2:	55 23       	and	r21, r21
    6ed4:	91 f3       	breq	.-28     	; 0x6eba <__divsf3+0x1a>
    6ed6:	95 1b       	sub	r25, r21
    6ed8:	55 0b       	sbc	r21, r21
    6eda:	bb 27       	eor	r27, r27
    6edc:	aa 27       	eor	r26, r26
    6ede:	62 17       	cp	r22, r18
    6ee0:	73 07       	cpc	r23, r19
    6ee2:	84 07       	cpc	r24, r20
    6ee4:	38 f0       	brcs	.+14     	; 0x6ef4 <__divsf3_pse+0x26>
    6ee6:	9f 5f       	subi	r25, 0xFF	; 255
    6ee8:	5f 4f       	sbci	r21, 0xFF	; 255
    6eea:	22 0f       	add	r18, r18
    6eec:	33 1f       	adc	r19, r19
    6eee:	44 1f       	adc	r20, r20
    6ef0:	aa 1f       	adc	r26, r26
    6ef2:	a9 f3       	breq	.-22     	; 0x6ede <__divsf3_pse+0x10>
    6ef4:	35 d0       	rcall	.+106    	; 0x6f60 <__divsf3_pse+0x92>
    6ef6:	0e 2e       	mov	r0, r30
    6ef8:	3a f0       	brmi	.+14     	; 0x6f08 <__divsf3_pse+0x3a>
    6efa:	e0 e8       	ldi	r30, 0x80	; 128
    6efc:	32 d0       	rcall	.+100    	; 0x6f62 <__divsf3_pse+0x94>
    6efe:	91 50       	subi	r25, 0x01	; 1
    6f00:	50 40       	sbci	r21, 0x00	; 0
    6f02:	e6 95       	lsr	r30
    6f04:	00 1c       	adc	r0, r0
    6f06:	ca f7       	brpl	.-14     	; 0x6efa <__divsf3_pse+0x2c>
    6f08:	2b d0       	rcall	.+86     	; 0x6f60 <__divsf3_pse+0x92>
    6f0a:	fe 2f       	mov	r31, r30
    6f0c:	29 d0       	rcall	.+82     	; 0x6f60 <__divsf3_pse+0x92>
    6f0e:	66 0f       	add	r22, r22
    6f10:	77 1f       	adc	r23, r23
    6f12:	88 1f       	adc	r24, r24
    6f14:	bb 1f       	adc	r27, r27
    6f16:	26 17       	cp	r18, r22
    6f18:	37 07       	cpc	r19, r23
    6f1a:	48 07       	cpc	r20, r24
    6f1c:	ab 07       	cpc	r26, r27
    6f1e:	b0 e8       	ldi	r27, 0x80	; 128
    6f20:	09 f0       	breq	.+2      	; 0x6f24 <__divsf3_pse+0x56>
    6f22:	bb 0b       	sbc	r27, r27
    6f24:	80 2d       	mov	r24, r0
    6f26:	bf 01       	movw	r22, r30
    6f28:	ff 27       	eor	r31, r31
    6f2a:	93 58       	subi	r25, 0x83	; 131
    6f2c:	5f 4f       	sbci	r21, 0xFF	; 255
    6f2e:	3a f0       	brmi	.+14     	; 0x6f3e <__divsf3_pse+0x70>
    6f30:	9e 3f       	cpi	r25, 0xFE	; 254
    6f32:	51 05       	cpc	r21, r1
    6f34:	78 f0       	brcs	.+30     	; 0x6f54 <__divsf3_pse+0x86>
    6f36:	0c 94 59 38 	jmp	0x70b2	; 0x70b2 <__fp_inf>
    6f3a:	0c 94 a4 38 	jmp	0x7148	; 0x7148 <__fp_szero>
    6f3e:	5f 3f       	cpi	r21, 0xFF	; 255
    6f40:	e4 f3       	brlt	.-8      	; 0x6f3a <__divsf3_pse+0x6c>
    6f42:	98 3e       	cpi	r25, 0xE8	; 232
    6f44:	d4 f3       	brlt	.-12     	; 0x6f3a <__divsf3_pse+0x6c>
    6f46:	86 95       	lsr	r24
    6f48:	77 95       	ror	r23
    6f4a:	67 95       	ror	r22
    6f4c:	b7 95       	ror	r27
    6f4e:	f7 95       	ror	r31
    6f50:	9f 5f       	subi	r25, 0xFF	; 255
    6f52:	c9 f7       	brne	.-14     	; 0x6f46 <__divsf3_pse+0x78>
    6f54:	88 0f       	add	r24, r24
    6f56:	91 1d       	adc	r25, r1
    6f58:	96 95       	lsr	r25
    6f5a:	87 95       	ror	r24
    6f5c:	97 f9       	bld	r25, 7
    6f5e:	08 95       	ret
    6f60:	e1 e0       	ldi	r30, 0x01	; 1
    6f62:	66 0f       	add	r22, r22
    6f64:	77 1f       	adc	r23, r23
    6f66:	88 1f       	adc	r24, r24
    6f68:	bb 1f       	adc	r27, r27
    6f6a:	62 17       	cp	r22, r18
    6f6c:	73 07       	cpc	r23, r19
    6f6e:	84 07       	cpc	r24, r20
    6f70:	ba 07       	cpc	r27, r26
    6f72:	20 f0       	brcs	.+8      	; 0x6f7c <__divsf3_pse+0xae>
    6f74:	62 1b       	sub	r22, r18
    6f76:	73 0b       	sbc	r23, r19
    6f78:	84 0b       	sbc	r24, r20
    6f7a:	ba 0b       	sbc	r27, r26
    6f7c:	ee 1f       	adc	r30, r30
    6f7e:	88 f7       	brcc	.-30     	; 0x6f62 <__divsf3_pse+0x94>
    6f80:	e0 95       	com	r30
    6f82:	08 95       	ret

00006f84 <__fixsfsi>:
    6f84:	0e 94 c9 37 	call	0x6f92	; 0x6f92 <__fixunssfsi>
    6f88:	68 94       	set
    6f8a:	b1 11       	cpse	r27, r1
    6f8c:	0c 94 a4 38 	jmp	0x7148	; 0x7148 <__fp_szero>
    6f90:	08 95       	ret

00006f92 <__fixunssfsi>:
    6f92:	0e 94 89 38 	call	0x7112	; 0x7112 <__fp_splitA>
    6f96:	88 f0       	brcs	.+34     	; 0x6fba <__fixunssfsi+0x28>
    6f98:	9f 57       	subi	r25, 0x7F	; 127
    6f9a:	98 f0       	brcs	.+38     	; 0x6fc2 <__fixunssfsi+0x30>
    6f9c:	b9 2f       	mov	r27, r25
    6f9e:	99 27       	eor	r25, r25
    6fa0:	b7 51       	subi	r27, 0x17	; 23
    6fa2:	b0 f0       	brcs	.+44     	; 0x6fd0 <__fixunssfsi+0x3e>
    6fa4:	e1 f0       	breq	.+56     	; 0x6fde <__fixunssfsi+0x4c>
    6fa6:	66 0f       	add	r22, r22
    6fa8:	77 1f       	adc	r23, r23
    6faa:	88 1f       	adc	r24, r24
    6fac:	99 1f       	adc	r25, r25
    6fae:	1a f0       	brmi	.+6      	; 0x6fb6 <__fixunssfsi+0x24>
    6fb0:	ba 95       	dec	r27
    6fb2:	c9 f7       	brne	.-14     	; 0x6fa6 <__fixunssfsi+0x14>
    6fb4:	14 c0       	rjmp	.+40     	; 0x6fde <__fixunssfsi+0x4c>
    6fb6:	b1 30       	cpi	r27, 0x01	; 1
    6fb8:	91 f0       	breq	.+36     	; 0x6fde <__fixunssfsi+0x4c>
    6fba:	0e 94 a3 38 	call	0x7146	; 0x7146 <__fp_zero>
    6fbe:	b1 e0       	ldi	r27, 0x01	; 1
    6fc0:	08 95       	ret
    6fc2:	0c 94 a3 38 	jmp	0x7146	; 0x7146 <__fp_zero>
    6fc6:	67 2f       	mov	r22, r23
    6fc8:	78 2f       	mov	r23, r24
    6fca:	88 27       	eor	r24, r24
    6fcc:	b8 5f       	subi	r27, 0xF8	; 248
    6fce:	39 f0       	breq	.+14     	; 0x6fde <__fixunssfsi+0x4c>
    6fd0:	b9 3f       	cpi	r27, 0xF9	; 249
    6fd2:	cc f3       	brlt	.-14     	; 0x6fc6 <__fixunssfsi+0x34>
    6fd4:	86 95       	lsr	r24
    6fd6:	77 95       	ror	r23
    6fd8:	67 95       	ror	r22
    6fda:	b3 95       	inc	r27
    6fdc:	d9 f7       	brne	.-10     	; 0x6fd4 <__fixunssfsi+0x42>
    6fde:	3e f4       	brtc	.+14     	; 0x6fee <__fixunssfsi+0x5c>
    6fe0:	90 95       	com	r25
    6fe2:	80 95       	com	r24
    6fe4:	70 95       	com	r23
    6fe6:	61 95       	neg	r22
    6fe8:	7f 4f       	sbci	r23, 0xFF	; 255
    6fea:	8f 4f       	sbci	r24, 0xFF	; 255
    6fec:	9f 4f       	sbci	r25, 0xFF	; 255
    6fee:	08 95       	ret

00006ff0 <__floatunsisf>:
    6ff0:	e8 94       	clt
    6ff2:	09 c0       	rjmp	.+18     	; 0x7006 <__floatsisf+0x12>

00006ff4 <__floatsisf>:
    6ff4:	97 fb       	bst	r25, 7
    6ff6:	3e f4       	brtc	.+14     	; 0x7006 <__floatsisf+0x12>
    6ff8:	90 95       	com	r25
    6ffa:	80 95       	com	r24
    6ffc:	70 95       	com	r23
    6ffe:	61 95       	neg	r22
    7000:	7f 4f       	sbci	r23, 0xFF	; 255
    7002:	8f 4f       	sbci	r24, 0xFF	; 255
    7004:	9f 4f       	sbci	r25, 0xFF	; 255
    7006:	99 23       	and	r25, r25
    7008:	a9 f0       	breq	.+42     	; 0x7034 <__floatsisf+0x40>
    700a:	f9 2f       	mov	r31, r25
    700c:	96 e9       	ldi	r25, 0x96	; 150
    700e:	bb 27       	eor	r27, r27
    7010:	93 95       	inc	r25
    7012:	f6 95       	lsr	r31
    7014:	87 95       	ror	r24
    7016:	77 95       	ror	r23
    7018:	67 95       	ror	r22
    701a:	b7 95       	ror	r27
    701c:	f1 11       	cpse	r31, r1
    701e:	f8 cf       	rjmp	.-16     	; 0x7010 <__floatsisf+0x1c>
    7020:	fa f4       	brpl	.+62     	; 0x7060 <__floatsisf+0x6c>
    7022:	bb 0f       	add	r27, r27
    7024:	11 f4       	brne	.+4      	; 0x702a <__floatsisf+0x36>
    7026:	60 ff       	sbrs	r22, 0
    7028:	1b c0       	rjmp	.+54     	; 0x7060 <__floatsisf+0x6c>
    702a:	6f 5f       	subi	r22, 0xFF	; 255
    702c:	7f 4f       	sbci	r23, 0xFF	; 255
    702e:	8f 4f       	sbci	r24, 0xFF	; 255
    7030:	9f 4f       	sbci	r25, 0xFF	; 255
    7032:	16 c0       	rjmp	.+44     	; 0x7060 <__floatsisf+0x6c>
    7034:	88 23       	and	r24, r24
    7036:	11 f0       	breq	.+4      	; 0x703c <__floatsisf+0x48>
    7038:	96 e9       	ldi	r25, 0x96	; 150
    703a:	11 c0       	rjmp	.+34     	; 0x705e <__floatsisf+0x6a>
    703c:	77 23       	and	r23, r23
    703e:	21 f0       	breq	.+8      	; 0x7048 <__floatsisf+0x54>
    7040:	9e e8       	ldi	r25, 0x8E	; 142
    7042:	87 2f       	mov	r24, r23
    7044:	76 2f       	mov	r23, r22
    7046:	05 c0       	rjmp	.+10     	; 0x7052 <__floatsisf+0x5e>
    7048:	66 23       	and	r22, r22
    704a:	71 f0       	breq	.+28     	; 0x7068 <__floatsisf+0x74>
    704c:	96 e8       	ldi	r25, 0x86	; 134
    704e:	86 2f       	mov	r24, r22
    7050:	70 e0       	ldi	r23, 0x00	; 0
    7052:	60 e0       	ldi	r22, 0x00	; 0
    7054:	2a f0       	brmi	.+10     	; 0x7060 <__floatsisf+0x6c>
    7056:	9a 95       	dec	r25
    7058:	66 0f       	add	r22, r22
    705a:	77 1f       	adc	r23, r23
    705c:	88 1f       	adc	r24, r24
    705e:	da f7       	brpl	.-10     	; 0x7056 <__floatsisf+0x62>
    7060:	88 0f       	add	r24, r24
    7062:	96 95       	lsr	r25
    7064:	87 95       	ror	r24
    7066:	97 f9       	bld	r25, 7
    7068:	08 95       	ret

0000706a <__fp_cmp>:
    706a:	99 0f       	add	r25, r25
    706c:	00 08       	sbc	r0, r0
    706e:	55 0f       	add	r21, r21
    7070:	aa 0b       	sbc	r26, r26
    7072:	e0 e8       	ldi	r30, 0x80	; 128
    7074:	fe ef       	ldi	r31, 0xFE	; 254
    7076:	16 16       	cp	r1, r22
    7078:	17 06       	cpc	r1, r23
    707a:	e8 07       	cpc	r30, r24
    707c:	f9 07       	cpc	r31, r25
    707e:	c0 f0       	brcs	.+48     	; 0x70b0 <__fp_cmp+0x46>
    7080:	12 16       	cp	r1, r18
    7082:	13 06       	cpc	r1, r19
    7084:	e4 07       	cpc	r30, r20
    7086:	f5 07       	cpc	r31, r21
    7088:	98 f0       	brcs	.+38     	; 0x70b0 <__fp_cmp+0x46>
    708a:	62 1b       	sub	r22, r18
    708c:	73 0b       	sbc	r23, r19
    708e:	84 0b       	sbc	r24, r20
    7090:	95 0b       	sbc	r25, r21
    7092:	39 f4       	brne	.+14     	; 0x70a2 <__fp_cmp+0x38>
    7094:	0a 26       	eor	r0, r26
    7096:	61 f0       	breq	.+24     	; 0x70b0 <__fp_cmp+0x46>
    7098:	23 2b       	or	r18, r19
    709a:	24 2b       	or	r18, r20
    709c:	25 2b       	or	r18, r21
    709e:	21 f4       	brne	.+8      	; 0x70a8 <__fp_cmp+0x3e>
    70a0:	08 95       	ret
    70a2:	0a 26       	eor	r0, r26
    70a4:	09 f4       	brne	.+2      	; 0x70a8 <__fp_cmp+0x3e>
    70a6:	a1 40       	sbci	r26, 0x01	; 1
    70a8:	a6 95       	lsr	r26
    70aa:	8f ef       	ldi	r24, 0xFF	; 255
    70ac:	81 1d       	adc	r24, r1
    70ae:	81 1d       	adc	r24, r1
    70b0:	08 95       	ret

000070b2 <__fp_inf>:
    70b2:	97 f9       	bld	r25, 7
    70b4:	9f 67       	ori	r25, 0x7F	; 127
    70b6:	80 e8       	ldi	r24, 0x80	; 128
    70b8:	70 e0       	ldi	r23, 0x00	; 0
    70ba:	60 e0       	ldi	r22, 0x00	; 0
    70bc:	08 95       	ret

000070be <__fp_nan>:
    70be:	9f ef       	ldi	r25, 0xFF	; 255
    70c0:	80 ec       	ldi	r24, 0xC0	; 192
    70c2:	08 95       	ret

000070c4 <__fp_pscA>:
    70c4:	00 24       	eor	r0, r0
    70c6:	0a 94       	dec	r0
    70c8:	16 16       	cp	r1, r22
    70ca:	17 06       	cpc	r1, r23
    70cc:	18 06       	cpc	r1, r24
    70ce:	09 06       	cpc	r0, r25
    70d0:	08 95       	ret

000070d2 <__fp_pscB>:
    70d2:	00 24       	eor	r0, r0
    70d4:	0a 94       	dec	r0
    70d6:	12 16       	cp	r1, r18
    70d8:	13 06       	cpc	r1, r19
    70da:	14 06       	cpc	r1, r20
    70dc:	05 06       	cpc	r0, r21
    70de:	08 95       	ret

000070e0 <__fp_round>:
    70e0:	09 2e       	mov	r0, r25
    70e2:	03 94       	inc	r0
    70e4:	00 0c       	add	r0, r0
    70e6:	11 f4       	brne	.+4      	; 0x70ec <__fp_round+0xc>
    70e8:	88 23       	and	r24, r24
    70ea:	52 f0       	brmi	.+20     	; 0x7100 <__fp_round+0x20>
    70ec:	bb 0f       	add	r27, r27
    70ee:	40 f4       	brcc	.+16     	; 0x7100 <__fp_round+0x20>
    70f0:	bf 2b       	or	r27, r31
    70f2:	11 f4       	brne	.+4      	; 0x70f8 <__fp_round+0x18>
    70f4:	60 ff       	sbrs	r22, 0
    70f6:	04 c0       	rjmp	.+8      	; 0x7100 <__fp_round+0x20>
    70f8:	6f 5f       	subi	r22, 0xFF	; 255
    70fa:	7f 4f       	sbci	r23, 0xFF	; 255
    70fc:	8f 4f       	sbci	r24, 0xFF	; 255
    70fe:	9f 4f       	sbci	r25, 0xFF	; 255
    7100:	08 95       	ret

00007102 <__fp_split3>:
    7102:	57 fd       	sbrc	r21, 7
    7104:	90 58       	subi	r25, 0x80	; 128
    7106:	44 0f       	add	r20, r20
    7108:	55 1f       	adc	r21, r21
    710a:	59 f0       	breq	.+22     	; 0x7122 <__fp_splitA+0x10>
    710c:	5f 3f       	cpi	r21, 0xFF	; 255
    710e:	71 f0       	breq	.+28     	; 0x712c <__fp_splitA+0x1a>
    7110:	47 95       	ror	r20

00007112 <__fp_splitA>:
    7112:	88 0f       	add	r24, r24
    7114:	97 fb       	bst	r25, 7
    7116:	99 1f       	adc	r25, r25
    7118:	61 f0       	breq	.+24     	; 0x7132 <__fp_splitA+0x20>
    711a:	9f 3f       	cpi	r25, 0xFF	; 255
    711c:	79 f0       	breq	.+30     	; 0x713c <__fp_splitA+0x2a>
    711e:	87 95       	ror	r24
    7120:	08 95       	ret
    7122:	12 16       	cp	r1, r18
    7124:	13 06       	cpc	r1, r19
    7126:	14 06       	cpc	r1, r20
    7128:	55 1f       	adc	r21, r21
    712a:	f2 cf       	rjmp	.-28     	; 0x7110 <__fp_split3+0xe>
    712c:	46 95       	lsr	r20
    712e:	f1 df       	rcall	.-30     	; 0x7112 <__fp_splitA>
    7130:	08 c0       	rjmp	.+16     	; 0x7142 <__fp_splitA+0x30>
    7132:	16 16       	cp	r1, r22
    7134:	17 06       	cpc	r1, r23
    7136:	18 06       	cpc	r1, r24
    7138:	99 1f       	adc	r25, r25
    713a:	f1 cf       	rjmp	.-30     	; 0x711e <__fp_splitA+0xc>
    713c:	86 95       	lsr	r24
    713e:	71 05       	cpc	r23, r1
    7140:	61 05       	cpc	r22, r1
    7142:	08 94       	sec
    7144:	08 95       	ret

00007146 <__fp_zero>:
    7146:	e8 94       	clt

00007148 <__fp_szero>:
    7148:	bb 27       	eor	r27, r27
    714a:	66 27       	eor	r22, r22
    714c:	77 27       	eor	r23, r23
    714e:	cb 01       	movw	r24, r22
    7150:	97 f9       	bld	r25, 7
    7152:	08 95       	ret

00007154 <__gesf2>:
    7154:	0e 94 35 38 	call	0x706a	; 0x706a <__fp_cmp>
    7158:	08 f4       	brcc	.+2      	; 0x715c <__gesf2+0x8>
    715a:	8f ef       	ldi	r24, 0xFF	; 255
    715c:	08 95       	ret

0000715e <__mulsf3>:
    715e:	0e 94 c2 38 	call	0x7184	; 0x7184 <__mulsf3x>
    7162:	0c 94 70 38 	jmp	0x70e0	; 0x70e0 <__fp_round>
    7166:	0e 94 62 38 	call	0x70c4	; 0x70c4 <__fp_pscA>
    716a:	38 f0       	brcs	.+14     	; 0x717a <__mulsf3+0x1c>
    716c:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__fp_pscB>
    7170:	20 f0       	brcs	.+8      	; 0x717a <__mulsf3+0x1c>
    7172:	95 23       	and	r25, r21
    7174:	11 f0       	breq	.+4      	; 0x717a <__mulsf3+0x1c>
    7176:	0c 94 59 38 	jmp	0x70b2	; 0x70b2 <__fp_inf>
    717a:	0c 94 5f 38 	jmp	0x70be	; 0x70be <__fp_nan>
    717e:	11 24       	eor	r1, r1
    7180:	0c 94 a4 38 	jmp	0x7148	; 0x7148 <__fp_szero>

00007184 <__mulsf3x>:
    7184:	0e 94 81 38 	call	0x7102	; 0x7102 <__fp_split3>
    7188:	70 f3       	brcs	.-36     	; 0x7166 <__mulsf3+0x8>

0000718a <__mulsf3_pse>:
    718a:	95 9f       	mul	r25, r21
    718c:	c1 f3       	breq	.-16     	; 0x717e <__mulsf3+0x20>
    718e:	95 0f       	add	r25, r21
    7190:	50 e0       	ldi	r21, 0x00	; 0
    7192:	55 1f       	adc	r21, r21
    7194:	62 9f       	mul	r22, r18
    7196:	f0 01       	movw	r30, r0
    7198:	72 9f       	mul	r23, r18
    719a:	bb 27       	eor	r27, r27
    719c:	f0 0d       	add	r31, r0
    719e:	b1 1d       	adc	r27, r1
    71a0:	63 9f       	mul	r22, r19
    71a2:	aa 27       	eor	r26, r26
    71a4:	f0 0d       	add	r31, r0
    71a6:	b1 1d       	adc	r27, r1
    71a8:	aa 1f       	adc	r26, r26
    71aa:	64 9f       	mul	r22, r20
    71ac:	66 27       	eor	r22, r22
    71ae:	b0 0d       	add	r27, r0
    71b0:	a1 1d       	adc	r26, r1
    71b2:	66 1f       	adc	r22, r22
    71b4:	82 9f       	mul	r24, r18
    71b6:	22 27       	eor	r18, r18
    71b8:	b0 0d       	add	r27, r0
    71ba:	a1 1d       	adc	r26, r1
    71bc:	62 1f       	adc	r22, r18
    71be:	73 9f       	mul	r23, r19
    71c0:	b0 0d       	add	r27, r0
    71c2:	a1 1d       	adc	r26, r1
    71c4:	62 1f       	adc	r22, r18
    71c6:	83 9f       	mul	r24, r19
    71c8:	a0 0d       	add	r26, r0
    71ca:	61 1d       	adc	r22, r1
    71cc:	22 1f       	adc	r18, r18
    71ce:	74 9f       	mul	r23, r20
    71d0:	33 27       	eor	r19, r19
    71d2:	a0 0d       	add	r26, r0
    71d4:	61 1d       	adc	r22, r1
    71d6:	23 1f       	adc	r18, r19
    71d8:	84 9f       	mul	r24, r20
    71da:	60 0d       	add	r22, r0
    71dc:	21 1d       	adc	r18, r1
    71de:	82 2f       	mov	r24, r18
    71e0:	76 2f       	mov	r23, r22
    71e2:	6a 2f       	mov	r22, r26
    71e4:	11 24       	eor	r1, r1
    71e6:	9f 57       	subi	r25, 0x7F	; 127
    71e8:	50 40       	sbci	r21, 0x00	; 0
    71ea:	9a f0       	brmi	.+38     	; 0x7212 <__mulsf3_pse+0x88>
    71ec:	f1 f0       	breq	.+60     	; 0x722a <__mulsf3_pse+0xa0>
    71ee:	88 23       	and	r24, r24
    71f0:	4a f0       	brmi	.+18     	; 0x7204 <__mulsf3_pse+0x7a>
    71f2:	ee 0f       	add	r30, r30
    71f4:	ff 1f       	adc	r31, r31
    71f6:	bb 1f       	adc	r27, r27
    71f8:	66 1f       	adc	r22, r22
    71fa:	77 1f       	adc	r23, r23
    71fc:	88 1f       	adc	r24, r24
    71fe:	91 50       	subi	r25, 0x01	; 1
    7200:	50 40       	sbci	r21, 0x00	; 0
    7202:	a9 f7       	brne	.-22     	; 0x71ee <__mulsf3_pse+0x64>
    7204:	9e 3f       	cpi	r25, 0xFE	; 254
    7206:	51 05       	cpc	r21, r1
    7208:	80 f0       	brcs	.+32     	; 0x722a <__mulsf3_pse+0xa0>
    720a:	0c 94 59 38 	jmp	0x70b2	; 0x70b2 <__fp_inf>
    720e:	0c 94 a4 38 	jmp	0x7148	; 0x7148 <__fp_szero>
    7212:	5f 3f       	cpi	r21, 0xFF	; 255
    7214:	e4 f3       	brlt	.-8      	; 0x720e <__mulsf3_pse+0x84>
    7216:	98 3e       	cpi	r25, 0xE8	; 232
    7218:	d4 f3       	brlt	.-12     	; 0x720e <__mulsf3_pse+0x84>
    721a:	86 95       	lsr	r24
    721c:	77 95       	ror	r23
    721e:	67 95       	ror	r22
    7220:	b7 95       	ror	r27
    7222:	f7 95       	ror	r31
    7224:	e7 95       	ror	r30
    7226:	9f 5f       	subi	r25, 0xFF	; 255
    7228:	c1 f7       	brne	.-16     	; 0x721a <__mulsf3_pse+0x90>
    722a:	fe 2b       	or	r31, r30
    722c:	88 0f       	add	r24, r24
    722e:	91 1d       	adc	r25, r1
    7230:	96 95       	lsr	r25
    7232:	87 95       	ror	r24
    7234:	97 f9       	bld	r25, 7
    7236:	08 95       	ret

00007238 <vfprintf>:
    7238:	2f 92       	push	r2
    723a:	3f 92       	push	r3
    723c:	4f 92       	push	r4
    723e:	5f 92       	push	r5
    7240:	6f 92       	push	r6
    7242:	7f 92       	push	r7
    7244:	8f 92       	push	r8
    7246:	9f 92       	push	r9
    7248:	af 92       	push	r10
    724a:	bf 92       	push	r11
    724c:	cf 92       	push	r12
    724e:	df 92       	push	r13
    7250:	ef 92       	push	r14
    7252:	ff 92       	push	r15
    7254:	0f 93       	push	r16
    7256:	1f 93       	push	r17
    7258:	cf 93       	push	r28
    725a:	df 93       	push	r29
    725c:	cd b7       	in	r28, 0x3d	; 61
    725e:	de b7       	in	r29, 0x3e	; 62
    7260:	60 97       	sbiw	r28, 0x10	; 16
    7262:	cd bf       	out	0x3d, r28	; 61
    7264:	de bf       	out	0x3e, r29	; 62
    7266:	7c 01       	movw	r14, r24
    7268:	1b 01       	movw	r2, r22
    726a:	6a 01       	movw	r12, r20
    726c:	fc 01       	movw	r30, r24
    726e:	16 82       	std	Z+6, r1	; 0x06
    7270:	17 82       	std	Z+7, r1	; 0x07
    7272:	83 81       	ldd	r24, Z+3	; 0x03
    7274:	81 ff       	sbrs	r24, 1
    7276:	44 c3       	rjmp	.+1672   	; 0x7900 <vfprintf+0x6c8>
    7278:	9e 01       	movw	r18, r28
    727a:	2f 5f       	subi	r18, 0xFF	; 255
    727c:	3f 4f       	sbci	r19, 0xFF	; 255
    727e:	39 01       	movw	r6, r18
    7280:	f7 01       	movw	r30, r14
    7282:	93 81       	ldd	r25, Z+3	; 0x03
    7284:	f1 01       	movw	r30, r2
    7286:	93 fd       	sbrc	r25, 3
    7288:	85 91       	lpm	r24, Z+
    728a:	93 ff       	sbrs	r25, 3
    728c:	81 91       	ld	r24, Z+
    728e:	1f 01       	movw	r2, r30
    7290:	88 23       	and	r24, r24
    7292:	09 f4       	brne	.+2      	; 0x7296 <vfprintf+0x5e>
    7294:	31 c3       	rjmp	.+1634   	; 0x78f8 <vfprintf+0x6c0>
    7296:	85 32       	cpi	r24, 0x25	; 37
    7298:	39 f4       	brne	.+14     	; 0x72a8 <vfprintf+0x70>
    729a:	93 fd       	sbrc	r25, 3
    729c:	85 91       	lpm	r24, Z+
    729e:	93 ff       	sbrs	r25, 3
    72a0:	81 91       	ld	r24, Z+
    72a2:	1f 01       	movw	r2, r30
    72a4:	85 32       	cpi	r24, 0x25	; 37
    72a6:	39 f4       	brne	.+14     	; 0x72b6 <vfprintf+0x7e>
    72a8:	b7 01       	movw	r22, r14
    72aa:	90 e0       	ldi	r25, 0x00	; 0
    72ac:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <fputc>
    72b0:	56 01       	movw	r10, r12
    72b2:	65 01       	movw	r12, r10
    72b4:	e5 cf       	rjmp	.-54     	; 0x7280 <vfprintf+0x48>
    72b6:	10 e0       	ldi	r17, 0x00	; 0
    72b8:	51 2c       	mov	r5, r1
    72ba:	91 2c       	mov	r9, r1
    72bc:	ff e1       	ldi	r31, 0x1F	; 31
    72be:	f9 15       	cp	r31, r9
    72c0:	d8 f0       	brcs	.+54     	; 0x72f8 <vfprintf+0xc0>
    72c2:	8b 32       	cpi	r24, 0x2B	; 43
    72c4:	79 f0       	breq	.+30     	; 0x72e4 <vfprintf+0xac>
    72c6:	38 f4       	brcc	.+14     	; 0x72d6 <vfprintf+0x9e>
    72c8:	80 32       	cpi	r24, 0x20	; 32
    72ca:	79 f0       	breq	.+30     	; 0x72ea <vfprintf+0xb2>
    72cc:	83 32       	cpi	r24, 0x23	; 35
    72ce:	a1 f4       	brne	.+40     	; 0x72f8 <vfprintf+0xc0>
    72d0:	f9 2d       	mov	r31, r9
    72d2:	f0 61       	ori	r31, 0x10	; 16
    72d4:	2e c0       	rjmp	.+92     	; 0x7332 <vfprintf+0xfa>
    72d6:	8d 32       	cpi	r24, 0x2D	; 45
    72d8:	61 f0       	breq	.+24     	; 0x72f2 <vfprintf+0xba>
    72da:	80 33       	cpi	r24, 0x30	; 48
    72dc:	69 f4       	brne	.+26     	; 0x72f8 <vfprintf+0xc0>
    72de:	29 2d       	mov	r18, r9
    72e0:	21 60       	ori	r18, 0x01	; 1
    72e2:	2d c0       	rjmp	.+90     	; 0x733e <vfprintf+0x106>
    72e4:	39 2d       	mov	r19, r9
    72e6:	32 60       	ori	r19, 0x02	; 2
    72e8:	93 2e       	mov	r9, r19
    72ea:	89 2d       	mov	r24, r9
    72ec:	84 60       	ori	r24, 0x04	; 4
    72ee:	98 2e       	mov	r9, r24
    72f0:	2a c0       	rjmp	.+84     	; 0x7346 <vfprintf+0x10e>
    72f2:	e9 2d       	mov	r30, r9
    72f4:	e8 60       	ori	r30, 0x08	; 8
    72f6:	15 c0       	rjmp	.+42     	; 0x7322 <vfprintf+0xea>
    72f8:	97 fc       	sbrc	r9, 7
    72fa:	2d c0       	rjmp	.+90     	; 0x7356 <vfprintf+0x11e>
    72fc:	20 ed       	ldi	r18, 0xD0	; 208
    72fe:	28 0f       	add	r18, r24
    7300:	2a 30       	cpi	r18, 0x0A	; 10
    7302:	88 f4       	brcc	.+34     	; 0x7326 <vfprintf+0xee>
    7304:	96 fe       	sbrs	r9, 6
    7306:	06 c0       	rjmp	.+12     	; 0x7314 <vfprintf+0xdc>
    7308:	3a e0       	ldi	r19, 0x0A	; 10
    730a:	13 9f       	mul	r17, r19
    730c:	20 0d       	add	r18, r0
    730e:	11 24       	eor	r1, r1
    7310:	12 2f       	mov	r17, r18
    7312:	19 c0       	rjmp	.+50     	; 0x7346 <vfprintf+0x10e>
    7314:	8a e0       	ldi	r24, 0x0A	; 10
    7316:	58 9e       	mul	r5, r24
    7318:	20 0d       	add	r18, r0
    731a:	11 24       	eor	r1, r1
    731c:	52 2e       	mov	r5, r18
    731e:	e9 2d       	mov	r30, r9
    7320:	e0 62       	ori	r30, 0x20	; 32
    7322:	9e 2e       	mov	r9, r30
    7324:	10 c0       	rjmp	.+32     	; 0x7346 <vfprintf+0x10e>
    7326:	8e 32       	cpi	r24, 0x2E	; 46
    7328:	31 f4       	brne	.+12     	; 0x7336 <vfprintf+0xfe>
    732a:	96 fc       	sbrc	r9, 6
    732c:	e5 c2       	rjmp	.+1482   	; 0x78f8 <vfprintf+0x6c0>
    732e:	f9 2d       	mov	r31, r9
    7330:	f0 64       	ori	r31, 0x40	; 64
    7332:	9f 2e       	mov	r9, r31
    7334:	08 c0       	rjmp	.+16     	; 0x7346 <vfprintf+0x10e>
    7336:	8c 36       	cpi	r24, 0x6C	; 108
    7338:	21 f4       	brne	.+8      	; 0x7342 <vfprintf+0x10a>
    733a:	29 2d       	mov	r18, r9
    733c:	20 68       	ori	r18, 0x80	; 128
    733e:	92 2e       	mov	r9, r18
    7340:	02 c0       	rjmp	.+4      	; 0x7346 <vfprintf+0x10e>
    7342:	88 36       	cpi	r24, 0x68	; 104
    7344:	41 f4       	brne	.+16     	; 0x7356 <vfprintf+0x11e>
    7346:	f1 01       	movw	r30, r2
    7348:	93 fd       	sbrc	r25, 3
    734a:	85 91       	lpm	r24, Z+
    734c:	93 ff       	sbrs	r25, 3
    734e:	81 91       	ld	r24, Z+
    7350:	1f 01       	movw	r2, r30
    7352:	81 11       	cpse	r24, r1
    7354:	b3 cf       	rjmp	.-154    	; 0x72bc <vfprintf+0x84>
    7356:	9b eb       	ldi	r25, 0xBB	; 187
    7358:	98 0f       	add	r25, r24
    735a:	93 30       	cpi	r25, 0x03	; 3
    735c:	20 f4       	brcc	.+8      	; 0x7366 <vfprintf+0x12e>
    735e:	99 2d       	mov	r25, r9
    7360:	90 61       	ori	r25, 0x10	; 16
    7362:	80 5e       	subi	r24, 0xE0	; 224
    7364:	07 c0       	rjmp	.+14     	; 0x7374 <vfprintf+0x13c>
    7366:	9b e9       	ldi	r25, 0x9B	; 155
    7368:	98 0f       	add	r25, r24
    736a:	93 30       	cpi	r25, 0x03	; 3
    736c:	08 f0       	brcs	.+2      	; 0x7370 <vfprintf+0x138>
    736e:	66 c1       	rjmp	.+716    	; 0x763c <vfprintf+0x404>
    7370:	99 2d       	mov	r25, r9
    7372:	9f 7e       	andi	r25, 0xEF	; 239
    7374:	96 ff       	sbrs	r25, 6
    7376:	16 e0       	ldi	r17, 0x06	; 6
    7378:	9f 73       	andi	r25, 0x3F	; 63
    737a:	99 2e       	mov	r9, r25
    737c:	85 36       	cpi	r24, 0x65	; 101
    737e:	19 f4       	brne	.+6      	; 0x7386 <vfprintf+0x14e>
    7380:	90 64       	ori	r25, 0x40	; 64
    7382:	99 2e       	mov	r9, r25
    7384:	08 c0       	rjmp	.+16     	; 0x7396 <vfprintf+0x15e>
    7386:	86 36       	cpi	r24, 0x66	; 102
    7388:	21 f4       	brne	.+8      	; 0x7392 <vfprintf+0x15a>
    738a:	39 2f       	mov	r19, r25
    738c:	30 68       	ori	r19, 0x80	; 128
    738e:	93 2e       	mov	r9, r19
    7390:	02 c0       	rjmp	.+4      	; 0x7396 <vfprintf+0x15e>
    7392:	11 11       	cpse	r17, r1
    7394:	11 50       	subi	r17, 0x01	; 1
    7396:	97 fe       	sbrs	r9, 7
    7398:	07 c0       	rjmp	.+14     	; 0x73a8 <vfprintf+0x170>
    739a:	1c 33       	cpi	r17, 0x3C	; 60
    739c:	50 f4       	brcc	.+20     	; 0x73b2 <vfprintf+0x17a>
    739e:	44 24       	eor	r4, r4
    73a0:	43 94       	inc	r4
    73a2:	41 0e       	add	r4, r17
    73a4:	27 e0       	ldi	r18, 0x07	; 7
    73a6:	0b c0       	rjmp	.+22     	; 0x73be <vfprintf+0x186>
    73a8:	18 30       	cpi	r17, 0x08	; 8
    73aa:	38 f0       	brcs	.+14     	; 0x73ba <vfprintf+0x182>
    73ac:	27 e0       	ldi	r18, 0x07	; 7
    73ae:	17 e0       	ldi	r17, 0x07	; 7
    73b0:	05 c0       	rjmp	.+10     	; 0x73bc <vfprintf+0x184>
    73b2:	27 e0       	ldi	r18, 0x07	; 7
    73b4:	9c e3       	ldi	r25, 0x3C	; 60
    73b6:	49 2e       	mov	r4, r25
    73b8:	02 c0       	rjmp	.+4      	; 0x73be <vfprintf+0x186>
    73ba:	21 2f       	mov	r18, r17
    73bc:	41 2c       	mov	r4, r1
    73be:	56 01       	movw	r10, r12
    73c0:	84 e0       	ldi	r24, 0x04	; 4
    73c2:	a8 0e       	add	r10, r24
    73c4:	b1 1c       	adc	r11, r1
    73c6:	f6 01       	movw	r30, r12
    73c8:	60 81       	ld	r22, Z
    73ca:	71 81       	ldd	r23, Z+1	; 0x01
    73cc:	82 81       	ldd	r24, Z+2	; 0x02
    73ce:	93 81       	ldd	r25, Z+3	; 0x03
    73d0:	04 2d       	mov	r16, r4
    73d2:	a3 01       	movw	r20, r6
    73d4:	0e 94 ee 3c 	call	0x79dc	; 0x79dc <__ftoa_engine>
    73d8:	6c 01       	movw	r12, r24
    73da:	f9 81       	ldd	r31, Y+1	; 0x01
    73dc:	fc 87       	std	Y+12, r31	; 0x0c
    73de:	f0 ff       	sbrs	r31, 0
    73e0:	02 c0       	rjmp	.+4      	; 0x73e6 <vfprintf+0x1ae>
    73e2:	f3 ff       	sbrs	r31, 3
    73e4:	06 c0       	rjmp	.+12     	; 0x73f2 <vfprintf+0x1ba>
    73e6:	91 fc       	sbrc	r9, 1
    73e8:	06 c0       	rjmp	.+12     	; 0x73f6 <vfprintf+0x1be>
    73ea:	92 fe       	sbrs	r9, 2
    73ec:	06 c0       	rjmp	.+12     	; 0x73fa <vfprintf+0x1c2>
    73ee:	00 e2       	ldi	r16, 0x20	; 32
    73f0:	05 c0       	rjmp	.+10     	; 0x73fc <vfprintf+0x1c4>
    73f2:	0d e2       	ldi	r16, 0x2D	; 45
    73f4:	03 c0       	rjmp	.+6      	; 0x73fc <vfprintf+0x1c4>
    73f6:	0b e2       	ldi	r16, 0x2B	; 43
    73f8:	01 c0       	rjmp	.+2      	; 0x73fc <vfprintf+0x1c4>
    73fa:	00 e0       	ldi	r16, 0x00	; 0
    73fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    73fe:	8c 70       	andi	r24, 0x0C	; 12
    7400:	19 f0       	breq	.+6      	; 0x7408 <vfprintf+0x1d0>
    7402:	01 11       	cpse	r16, r1
    7404:	5a c2       	rjmp	.+1204   	; 0x78ba <vfprintf+0x682>
    7406:	9b c2       	rjmp	.+1334   	; 0x793e <vfprintf+0x706>
    7408:	97 fe       	sbrs	r9, 7
    740a:	10 c0       	rjmp	.+32     	; 0x742c <vfprintf+0x1f4>
    740c:	4c 0c       	add	r4, r12
    740e:	fc 85       	ldd	r31, Y+12	; 0x0c
    7410:	f4 ff       	sbrs	r31, 4
    7412:	04 c0       	rjmp	.+8      	; 0x741c <vfprintf+0x1e4>
    7414:	8a 81       	ldd	r24, Y+2	; 0x02
    7416:	81 33       	cpi	r24, 0x31	; 49
    7418:	09 f4       	brne	.+2      	; 0x741c <vfprintf+0x1e4>
    741a:	4a 94       	dec	r4
    741c:	14 14       	cp	r1, r4
    741e:	74 f5       	brge	.+92     	; 0x747c <vfprintf+0x244>
    7420:	28 e0       	ldi	r18, 0x08	; 8
    7422:	24 15       	cp	r18, r4
    7424:	78 f5       	brcc	.+94     	; 0x7484 <vfprintf+0x24c>
    7426:	88 e0       	ldi	r24, 0x08	; 8
    7428:	48 2e       	mov	r4, r24
    742a:	2c c0       	rjmp	.+88     	; 0x7484 <vfprintf+0x24c>
    742c:	96 fc       	sbrc	r9, 6
    742e:	2a c0       	rjmp	.+84     	; 0x7484 <vfprintf+0x24c>
    7430:	81 2f       	mov	r24, r17
    7432:	90 e0       	ldi	r25, 0x00	; 0
    7434:	8c 15       	cp	r24, r12
    7436:	9d 05       	cpc	r25, r13
    7438:	9c f0       	brlt	.+38     	; 0x7460 <vfprintf+0x228>
    743a:	3c ef       	ldi	r19, 0xFC	; 252
    743c:	c3 16       	cp	r12, r19
    743e:	3f ef       	ldi	r19, 0xFF	; 255
    7440:	d3 06       	cpc	r13, r19
    7442:	74 f0       	brlt	.+28     	; 0x7460 <vfprintf+0x228>
    7444:	89 2d       	mov	r24, r9
    7446:	80 68       	ori	r24, 0x80	; 128
    7448:	98 2e       	mov	r9, r24
    744a:	0a c0       	rjmp	.+20     	; 0x7460 <vfprintf+0x228>
    744c:	e2 e0       	ldi	r30, 0x02	; 2
    744e:	f0 e0       	ldi	r31, 0x00	; 0
    7450:	ec 0f       	add	r30, r28
    7452:	fd 1f       	adc	r31, r29
    7454:	e1 0f       	add	r30, r17
    7456:	f1 1d       	adc	r31, r1
    7458:	80 81       	ld	r24, Z
    745a:	80 33       	cpi	r24, 0x30	; 48
    745c:	19 f4       	brne	.+6      	; 0x7464 <vfprintf+0x22c>
    745e:	11 50       	subi	r17, 0x01	; 1
    7460:	11 11       	cpse	r17, r1
    7462:	f4 cf       	rjmp	.-24     	; 0x744c <vfprintf+0x214>
    7464:	97 fe       	sbrs	r9, 7
    7466:	0e c0       	rjmp	.+28     	; 0x7484 <vfprintf+0x24c>
    7468:	44 24       	eor	r4, r4
    746a:	43 94       	inc	r4
    746c:	41 0e       	add	r4, r17
    746e:	81 2f       	mov	r24, r17
    7470:	90 e0       	ldi	r25, 0x00	; 0
    7472:	c8 16       	cp	r12, r24
    7474:	d9 06       	cpc	r13, r25
    7476:	2c f4       	brge	.+10     	; 0x7482 <vfprintf+0x24a>
    7478:	1c 19       	sub	r17, r12
    747a:	04 c0       	rjmp	.+8      	; 0x7484 <vfprintf+0x24c>
    747c:	44 24       	eor	r4, r4
    747e:	43 94       	inc	r4
    7480:	01 c0       	rjmp	.+2      	; 0x7484 <vfprintf+0x24c>
    7482:	10 e0       	ldi	r17, 0x00	; 0
    7484:	97 fe       	sbrs	r9, 7
    7486:	06 c0       	rjmp	.+12     	; 0x7494 <vfprintf+0x25c>
    7488:	1c 14       	cp	r1, r12
    748a:	1d 04       	cpc	r1, r13
    748c:	34 f4       	brge	.+12     	; 0x749a <vfprintf+0x262>
    748e:	c6 01       	movw	r24, r12
    7490:	01 96       	adiw	r24, 0x01	; 1
    7492:	05 c0       	rjmp	.+10     	; 0x749e <vfprintf+0x266>
    7494:	85 e0       	ldi	r24, 0x05	; 5
    7496:	90 e0       	ldi	r25, 0x00	; 0
    7498:	02 c0       	rjmp	.+4      	; 0x749e <vfprintf+0x266>
    749a:	81 e0       	ldi	r24, 0x01	; 1
    749c:	90 e0       	ldi	r25, 0x00	; 0
    749e:	01 11       	cpse	r16, r1
    74a0:	01 96       	adiw	r24, 0x01	; 1
    74a2:	11 23       	and	r17, r17
    74a4:	31 f0       	breq	.+12     	; 0x74b2 <vfprintf+0x27a>
    74a6:	21 2f       	mov	r18, r17
    74a8:	30 e0       	ldi	r19, 0x00	; 0
    74aa:	2f 5f       	subi	r18, 0xFF	; 255
    74ac:	3f 4f       	sbci	r19, 0xFF	; 255
    74ae:	82 0f       	add	r24, r18
    74b0:	93 1f       	adc	r25, r19
    74b2:	25 2d       	mov	r18, r5
    74b4:	30 e0       	ldi	r19, 0x00	; 0
    74b6:	82 17       	cp	r24, r18
    74b8:	93 07       	cpc	r25, r19
    74ba:	14 f4       	brge	.+4      	; 0x74c0 <vfprintf+0x288>
    74bc:	58 1a       	sub	r5, r24
    74be:	01 c0       	rjmp	.+2      	; 0x74c2 <vfprintf+0x28a>
    74c0:	51 2c       	mov	r5, r1
    74c2:	89 2d       	mov	r24, r9
    74c4:	89 70       	andi	r24, 0x09	; 9
    74c6:	49 f4       	brne	.+18     	; 0x74da <vfprintf+0x2a2>
    74c8:	55 20       	and	r5, r5
    74ca:	39 f0       	breq	.+14     	; 0x74da <vfprintf+0x2a2>
    74cc:	b7 01       	movw	r22, r14
    74ce:	80 e2       	ldi	r24, 0x20	; 32
    74d0:	90 e0       	ldi	r25, 0x00	; 0
    74d2:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <fputc>
    74d6:	5a 94       	dec	r5
    74d8:	f7 cf       	rjmp	.-18     	; 0x74c8 <vfprintf+0x290>
    74da:	00 23       	and	r16, r16
    74dc:	29 f0       	breq	.+10     	; 0x74e8 <vfprintf+0x2b0>
    74de:	b7 01       	movw	r22, r14
    74e0:	80 2f       	mov	r24, r16
    74e2:	90 e0       	ldi	r25, 0x00	; 0
    74e4:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <fputc>
    74e8:	93 fc       	sbrc	r9, 3
    74ea:	09 c0       	rjmp	.+18     	; 0x74fe <vfprintf+0x2c6>
    74ec:	55 20       	and	r5, r5
    74ee:	39 f0       	breq	.+14     	; 0x74fe <vfprintf+0x2c6>
    74f0:	b7 01       	movw	r22, r14
    74f2:	80 e3       	ldi	r24, 0x30	; 48
    74f4:	90 e0       	ldi	r25, 0x00	; 0
    74f6:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <fputc>
    74fa:	5a 94       	dec	r5
    74fc:	f7 cf       	rjmp	.-18     	; 0x74ec <vfprintf+0x2b4>
    74fe:	97 fe       	sbrs	r9, 7
    7500:	4c c0       	rjmp	.+152    	; 0x759a <vfprintf+0x362>
    7502:	46 01       	movw	r8, r12
    7504:	d7 fe       	sbrs	r13, 7
    7506:	02 c0       	rjmp	.+4      	; 0x750c <vfprintf+0x2d4>
    7508:	81 2c       	mov	r8, r1
    750a:	91 2c       	mov	r9, r1
    750c:	c6 01       	movw	r24, r12
    750e:	88 19       	sub	r24, r8
    7510:	99 09       	sbc	r25, r9
    7512:	f3 01       	movw	r30, r6
    7514:	e8 0f       	add	r30, r24
    7516:	f9 1f       	adc	r31, r25
    7518:	ed 87       	std	Y+13, r30	; 0x0d
    751a:	fe 87       	std	Y+14, r31	; 0x0e
    751c:	96 01       	movw	r18, r12
    751e:	24 19       	sub	r18, r4
    7520:	31 09       	sbc	r19, r1
    7522:	2f 87       	std	Y+15, r18	; 0x0f
    7524:	38 8b       	std	Y+16, r19	; 0x10
    7526:	01 2f       	mov	r16, r17
    7528:	10 e0       	ldi	r17, 0x00	; 0
    752a:	11 95       	neg	r17
    752c:	01 95       	neg	r16
    752e:	11 09       	sbc	r17, r1
    7530:	3f ef       	ldi	r19, 0xFF	; 255
    7532:	83 16       	cp	r8, r19
    7534:	93 06       	cpc	r9, r19
    7536:	29 f4       	brne	.+10     	; 0x7542 <vfprintf+0x30a>
    7538:	b7 01       	movw	r22, r14
    753a:	8e e2       	ldi	r24, 0x2E	; 46
    753c:	90 e0       	ldi	r25, 0x00	; 0
    753e:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <fputc>
    7542:	c8 14       	cp	r12, r8
    7544:	d9 04       	cpc	r13, r9
    7546:	4c f0       	brlt	.+18     	; 0x755a <vfprintf+0x322>
    7548:	8f 85       	ldd	r24, Y+15	; 0x0f
    754a:	98 89       	ldd	r25, Y+16	; 0x10
    754c:	88 15       	cp	r24, r8
    754e:	99 05       	cpc	r25, r9
    7550:	24 f4       	brge	.+8      	; 0x755a <vfprintf+0x322>
    7552:	ed 85       	ldd	r30, Y+13	; 0x0d
    7554:	fe 85       	ldd	r31, Y+14	; 0x0e
    7556:	81 81       	ldd	r24, Z+1	; 0x01
    7558:	01 c0       	rjmp	.+2      	; 0x755c <vfprintf+0x324>
    755a:	80 e3       	ldi	r24, 0x30	; 48
    755c:	f1 e0       	ldi	r31, 0x01	; 1
    755e:	8f 1a       	sub	r8, r31
    7560:	91 08       	sbc	r9, r1
    7562:	2d 85       	ldd	r18, Y+13	; 0x0d
    7564:	3e 85       	ldd	r19, Y+14	; 0x0e
    7566:	2f 5f       	subi	r18, 0xFF	; 255
    7568:	3f 4f       	sbci	r19, 0xFF	; 255
    756a:	2d 87       	std	Y+13, r18	; 0x0d
    756c:	3e 87       	std	Y+14, r19	; 0x0e
    756e:	80 16       	cp	r8, r16
    7570:	91 06       	cpc	r9, r17
    7572:	2c f0       	brlt	.+10     	; 0x757e <vfprintf+0x346>
    7574:	b7 01       	movw	r22, r14
    7576:	90 e0       	ldi	r25, 0x00	; 0
    7578:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <fputc>
    757c:	d9 cf       	rjmp	.-78     	; 0x7530 <vfprintf+0x2f8>
    757e:	c8 14       	cp	r12, r8
    7580:	d9 04       	cpc	r13, r9
    7582:	41 f4       	brne	.+16     	; 0x7594 <vfprintf+0x35c>
    7584:	9a 81       	ldd	r25, Y+2	; 0x02
    7586:	96 33       	cpi	r25, 0x36	; 54
    7588:	20 f4       	brcc	.+8      	; 0x7592 <vfprintf+0x35a>
    758a:	95 33       	cpi	r25, 0x35	; 53
    758c:	19 f4       	brne	.+6      	; 0x7594 <vfprintf+0x35c>
    758e:	3c 85       	ldd	r19, Y+12	; 0x0c
    7590:	34 ff       	sbrs	r19, 4
    7592:	81 e3       	ldi	r24, 0x31	; 49
    7594:	b7 01       	movw	r22, r14
    7596:	90 e0       	ldi	r25, 0x00	; 0
    7598:	4e c0       	rjmp	.+156    	; 0x7636 <vfprintf+0x3fe>
    759a:	8a 81       	ldd	r24, Y+2	; 0x02
    759c:	81 33       	cpi	r24, 0x31	; 49
    759e:	19 f0       	breq	.+6      	; 0x75a6 <vfprintf+0x36e>
    75a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    75a2:	9f 7e       	andi	r25, 0xEF	; 239
    75a4:	9c 87       	std	Y+12, r25	; 0x0c
    75a6:	b7 01       	movw	r22, r14
    75a8:	90 e0       	ldi	r25, 0x00	; 0
    75aa:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <fputc>
    75ae:	11 11       	cpse	r17, r1
    75b0:	05 c0       	rjmp	.+10     	; 0x75bc <vfprintf+0x384>
    75b2:	94 fc       	sbrc	r9, 4
    75b4:	18 c0       	rjmp	.+48     	; 0x75e6 <vfprintf+0x3ae>
    75b6:	85 e6       	ldi	r24, 0x65	; 101
    75b8:	90 e0       	ldi	r25, 0x00	; 0
    75ba:	17 c0       	rjmp	.+46     	; 0x75ea <vfprintf+0x3b2>
    75bc:	b7 01       	movw	r22, r14
    75be:	8e e2       	ldi	r24, 0x2E	; 46
    75c0:	90 e0       	ldi	r25, 0x00	; 0
    75c2:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <fputc>
    75c6:	1e 5f       	subi	r17, 0xFE	; 254
    75c8:	82 e0       	ldi	r24, 0x02	; 2
    75ca:	01 e0       	ldi	r16, 0x01	; 1
    75cc:	08 0f       	add	r16, r24
    75ce:	f3 01       	movw	r30, r6
    75d0:	e8 0f       	add	r30, r24
    75d2:	f1 1d       	adc	r31, r1
    75d4:	80 81       	ld	r24, Z
    75d6:	b7 01       	movw	r22, r14
    75d8:	90 e0       	ldi	r25, 0x00	; 0
    75da:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <fputc>
    75de:	80 2f       	mov	r24, r16
    75e0:	01 13       	cpse	r16, r17
    75e2:	f3 cf       	rjmp	.-26     	; 0x75ca <vfprintf+0x392>
    75e4:	e6 cf       	rjmp	.-52     	; 0x75b2 <vfprintf+0x37a>
    75e6:	85 e4       	ldi	r24, 0x45	; 69
    75e8:	90 e0       	ldi	r25, 0x00	; 0
    75ea:	b7 01       	movw	r22, r14
    75ec:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <fputc>
    75f0:	d7 fc       	sbrc	r13, 7
    75f2:	06 c0       	rjmp	.+12     	; 0x7600 <vfprintf+0x3c8>
    75f4:	c1 14       	cp	r12, r1
    75f6:	d1 04       	cpc	r13, r1
    75f8:	41 f4       	brne	.+16     	; 0x760a <vfprintf+0x3d2>
    75fa:	ec 85       	ldd	r30, Y+12	; 0x0c
    75fc:	e4 ff       	sbrs	r30, 4
    75fe:	05 c0       	rjmp	.+10     	; 0x760a <vfprintf+0x3d2>
    7600:	d1 94       	neg	r13
    7602:	c1 94       	neg	r12
    7604:	d1 08       	sbc	r13, r1
    7606:	8d e2       	ldi	r24, 0x2D	; 45
    7608:	01 c0       	rjmp	.+2      	; 0x760c <vfprintf+0x3d4>
    760a:	8b e2       	ldi	r24, 0x2B	; 43
    760c:	b7 01       	movw	r22, r14
    760e:	90 e0       	ldi	r25, 0x00	; 0
    7610:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <fputc>
    7614:	80 e3       	ldi	r24, 0x30	; 48
    7616:	2a e0       	ldi	r18, 0x0A	; 10
    7618:	c2 16       	cp	r12, r18
    761a:	d1 04       	cpc	r13, r1
    761c:	2c f0       	brlt	.+10     	; 0x7628 <vfprintf+0x3f0>
    761e:	8f 5f       	subi	r24, 0xFF	; 255
    7620:	fa e0       	ldi	r31, 0x0A	; 10
    7622:	cf 1a       	sub	r12, r31
    7624:	d1 08       	sbc	r13, r1
    7626:	f7 cf       	rjmp	.-18     	; 0x7616 <vfprintf+0x3de>
    7628:	b7 01       	movw	r22, r14
    762a:	90 e0       	ldi	r25, 0x00	; 0
    762c:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <fputc>
    7630:	b7 01       	movw	r22, r14
    7632:	c6 01       	movw	r24, r12
    7634:	c0 96       	adiw	r24, 0x30	; 48
    7636:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <fputc>
    763a:	54 c1       	rjmp	.+680    	; 0x78e4 <vfprintf+0x6ac>
    763c:	83 36       	cpi	r24, 0x63	; 99
    763e:	31 f0       	breq	.+12     	; 0x764c <vfprintf+0x414>
    7640:	83 37       	cpi	r24, 0x73	; 115
    7642:	79 f0       	breq	.+30     	; 0x7662 <vfprintf+0x42a>
    7644:	83 35       	cpi	r24, 0x53	; 83
    7646:	09 f0       	breq	.+2      	; 0x764a <vfprintf+0x412>
    7648:	56 c0       	rjmp	.+172    	; 0x76f6 <vfprintf+0x4be>
    764a:	20 c0       	rjmp	.+64     	; 0x768c <vfprintf+0x454>
    764c:	56 01       	movw	r10, r12
    764e:	32 e0       	ldi	r19, 0x02	; 2
    7650:	a3 0e       	add	r10, r19
    7652:	b1 1c       	adc	r11, r1
    7654:	f6 01       	movw	r30, r12
    7656:	80 81       	ld	r24, Z
    7658:	89 83       	std	Y+1, r24	; 0x01
    765a:	01 e0       	ldi	r16, 0x01	; 1
    765c:	10 e0       	ldi	r17, 0x00	; 0
    765e:	63 01       	movw	r12, r6
    7660:	12 c0       	rjmp	.+36     	; 0x7686 <vfprintf+0x44e>
    7662:	56 01       	movw	r10, r12
    7664:	f2 e0       	ldi	r31, 0x02	; 2
    7666:	af 0e       	add	r10, r31
    7668:	b1 1c       	adc	r11, r1
    766a:	f6 01       	movw	r30, r12
    766c:	c0 80       	ld	r12, Z
    766e:	d1 80       	ldd	r13, Z+1	; 0x01
    7670:	96 fe       	sbrs	r9, 6
    7672:	03 c0       	rjmp	.+6      	; 0x767a <vfprintf+0x442>
    7674:	61 2f       	mov	r22, r17
    7676:	70 e0       	ldi	r23, 0x00	; 0
    7678:	02 c0       	rjmp	.+4      	; 0x767e <vfprintf+0x446>
    767a:	6f ef       	ldi	r22, 0xFF	; 255
    767c:	7f ef       	ldi	r23, 0xFF	; 255
    767e:	c6 01       	movw	r24, r12
    7680:	0e 94 ea 3d 	call	0x7bd4	; 0x7bd4 <strnlen>
    7684:	8c 01       	movw	r16, r24
    7686:	f9 2d       	mov	r31, r9
    7688:	ff 77       	andi	r31, 0x7F	; 127
    768a:	14 c0       	rjmp	.+40     	; 0x76b4 <vfprintf+0x47c>
    768c:	56 01       	movw	r10, r12
    768e:	22 e0       	ldi	r18, 0x02	; 2
    7690:	a2 0e       	add	r10, r18
    7692:	b1 1c       	adc	r11, r1
    7694:	f6 01       	movw	r30, r12
    7696:	c0 80       	ld	r12, Z
    7698:	d1 80       	ldd	r13, Z+1	; 0x01
    769a:	96 fe       	sbrs	r9, 6
    769c:	03 c0       	rjmp	.+6      	; 0x76a4 <vfprintf+0x46c>
    769e:	61 2f       	mov	r22, r17
    76a0:	70 e0       	ldi	r23, 0x00	; 0
    76a2:	02 c0       	rjmp	.+4      	; 0x76a8 <vfprintf+0x470>
    76a4:	6f ef       	ldi	r22, 0xFF	; 255
    76a6:	7f ef       	ldi	r23, 0xFF	; 255
    76a8:	c6 01       	movw	r24, r12
    76aa:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <strnlen_P>
    76ae:	8c 01       	movw	r16, r24
    76b0:	f9 2d       	mov	r31, r9
    76b2:	f0 68       	ori	r31, 0x80	; 128
    76b4:	9f 2e       	mov	r9, r31
    76b6:	f3 fd       	sbrc	r31, 3
    76b8:	1a c0       	rjmp	.+52     	; 0x76ee <vfprintf+0x4b6>
    76ba:	85 2d       	mov	r24, r5
    76bc:	90 e0       	ldi	r25, 0x00	; 0
    76be:	08 17       	cp	r16, r24
    76c0:	19 07       	cpc	r17, r25
    76c2:	a8 f4       	brcc	.+42     	; 0x76ee <vfprintf+0x4b6>
    76c4:	b7 01       	movw	r22, r14
    76c6:	80 e2       	ldi	r24, 0x20	; 32
    76c8:	90 e0       	ldi	r25, 0x00	; 0
    76ca:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <fputc>
    76ce:	5a 94       	dec	r5
    76d0:	f4 cf       	rjmp	.-24     	; 0x76ba <vfprintf+0x482>
    76d2:	f6 01       	movw	r30, r12
    76d4:	97 fc       	sbrc	r9, 7
    76d6:	85 91       	lpm	r24, Z+
    76d8:	97 fe       	sbrs	r9, 7
    76da:	81 91       	ld	r24, Z+
    76dc:	6f 01       	movw	r12, r30
    76de:	b7 01       	movw	r22, r14
    76e0:	90 e0       	ldi	r25, 0x00	; 0
    76e2:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <fputc>
    76e6:	51 10       	cpse	r5, r1
    76e8:	5a 94       	dec	r5
    76ea:	01 50       	subi	r16, 0x01	; 1
    76ec:	11 09       	sbc	r17, r1
    76ee:	01 15       	cp	r16, r1
    76f0:	11 05       	cpc	r17, r1
    76f2:	79 f7       	brne	.-34     	; 0x76d2 <vfprintf+0x49a>
    76f4:	f7 c0       	rjmp	.+494    	; 0x78e4 <vfprintf+0x6ac>
    76f6:	84 36       	cpi	r24, 0x64	; 100
    76f8:	11 f0       	breq	.+4      	; 0x76fe <vfprintf+0x4c6>
    76fa:	89 36       	cpi	r24, 0x69	; 105
    76fc:	61 f5       	brne	.+88     	; 0x7756 <vfprintf+0x51e>
    76fe:	56 01       	movw	r10, r12
    7700:	97 fe       	sbrs	r9, 7
    7702:	09 c0       	rjmp	.+18     	; 0x7716 <vfprintf+0x4de>
    7704:	24 e0       	ldi	r18, 0x04	; 4
    7706:	a2 0e       	add	r10, r18
    7708:	b1 1c       	adc	r11, r1
    770a:	f6 01       	movw	r30, r12
    770c:	60 81       	ld	r22, Z
    770e:	71 81       	ldd	r23, Z+1	; 0x01
    7710:	82 81       	ldd	r24, Z+2	; 0x02
    7712:	93 81       	ldd	r25, Z+3	; 0x03
    7714:	0a c0       	rjmp	.+20     	; 0x772a <vfprintf+0x4f2>
    7716:	f2 e0       	ldi	r31, 0x02	; 2
    7718:	af 0e       	add	r10, r31
    771a:	b1 1c       	adc	r11, r1
    771c:	f6 01       	movw	r30, r12
    771e:	60 81       	ld	r22, Z
    7720:	71 81       	ldd	r23, Z+1	; 0x01
    7722:	07 2e       	mov	r0, r23
    7724:	00 0c       	add	r0, r0
    7726:	88 0b       	sbc	r24, r24
    7728:	99 0b       	sbc	r25, r25
    772a:	f9 2d       	mov	r31, r9
    772c:	ff 76       	andi	r31, 0x6F	; 111
    772e:	9f 2e       	mov	r9, r31
    7730:	97 ff       	sbrs	r25, 7
    7732:	09 c0       	rjmp	.+18     	; 0x7746 <vfprintf+0x50e>
    7734:	90 95       	com	r25
    7736:	80 95       	com	r24
    7738:	70 95       	com	r23
    773a:	61 95       	neg	r22
    773c:	7f 4f       	sbci	r23, 0xFF	; 255
    773e:	8f 4f       	sbci	r24, 0xFF	; 255
    7740:	9f 4f       	sbci	r25, 0xFF	; 255
    7742:	f0 68       	ori	r31, 0x80	; 128
    7744:	9f 2e       	mov	r9, r31
    7746:	2a e0       	ldi	r18, 0x0A	; 10
    7748:	30 e0       	ldi	r19, 0x00	; 0
    774a:	a3 01       	movw	r20, r6
    774c:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__ultoa_invert>
    7750:	c8 2e       	mov	r12, r24
    7752:	c6 18       	sub	r12, r6
    7754:	3f c0       	rjmp	.+126    	; 0x77d4 <vfprintf+0x59c>
    7756:	09 2d       	mov	r16, r9
    7758:	85 37       	cpi	r24, 0x75	; 117
    775a:	21 f4       	brne	.+8      	; 0x7764 <vfprintf+0x52c>
    775c:	0f 7e       	andi	r16, 0xEF	; 239
    775e:	2a e0       	ldi	r18, 0x0A	; 10
    7760:	30 e0       	ldi	r19, 0x00	; 0
    7762:	1d c0       	rjmp	.+58     	; 0x779e <vfprintf+0x566>
    7764:	09 7f       	andi	r16, 0xF9	; 249
    7766:	8f 36       	cpi	r24, 0x6F	; 111
    7768:	91 f0       	breq	.+36     	; 0x778e <vfprintf+0x556>
    776a:	18 f4       	brcc	.+6      	; 0x7772 <vfprintf+0x53a>
    776c:	88 35       	cpi	r24, 0x58	; 88
    776e:	59 f0       	breq	.+22     	; 0x7786 <vfprintf+0x54e>
    7770:	c3 c0       	rjmp	.+390    	; 0x78f8 <vfprintf+0x6c0>
    7772:	80 37       	cpi	r24, 0x70	; 112
    7774:	19 f0       	breq	.+6      	; 0x777c <vfprintf+0x544>
    7776:	88 37       	cpi	r24, 0x78	; 120
    7778:	11 f0       	breq	.+4      	; 0x777e <vfprintf+0x546>
    777a:	be c0       	rjmp	.+380    	; 0x78f8 <vfprintf+0x6c0>
    777c:	00 61       	ori	r16, 0x10	; 16
    777e:	04 ff       	sbrs	r16, 4
    7780:	09 c0       	rjmp	.+18     	; 0x7794 <vfprintf+0x55c>
    7782:	04 60       	ori	r16, 0x04	; 4
    7784:	07 c0       	rjmp	.+14     	; 0x7794 <vfprintf+0x55c>
    7786:	94 fe       	sbrs	r9, 4
    7788:	08 c0       	rjmp	.+16     	; 0x779a <vfprintf+0x562>
    778a:	06 60       	ori	r16, 0x06	; 6
    778c:	06 c0       	rjmp	.+12     	; 0x779a <vfprintf+0x562>
    778e:	28 e0       	ldi	r18, 0x08	; 8
    7790:	30 e0       	ldi	r19, 0x00	; 0
    7792:	05 c0       	rjmp	.+10     	; 0x779e <vfprintf+0x566>
    7794:	20 e1       	ldi	r18, 0x10	; 16
    7796:	30 e0       	ldi	r19, 0x00	; 0
    7798:	02 c0       	rjmp	.+4      	; 0x779e <vfprintf+0x566>
    779a:	20 e1       	ldi	r18, 0x10	; 16
    779c:	32 e0       	ldi	r19, 0x02	; 2
    779e:	56 01       	movw	r10, r12
    77a0:	07 ff       	sbrs	r16, 7
    77a2:	09 c0       	rjmp	.+18     	; 0x77b6 <vfprintf+0x57e>
    77a4:	84 e0       	ldi	r24, 0x04	; 4
    77a6:	a8 0e       	add	r10, r24
    77a8:	b1 1c       	adc	r11, r1
    77aa:	f6 01       	movw	r30, r12
    77ac:	60 81       	ld	r22, Z
    77ae:	71 81       	ldd	r23, Z+1	; 0x01
    77b0:	82 81       	ldd	r24, Z+2	; 0x02
    77b2:	93 81       	ldd	r25, Z+3	; 0x03
    77b4:	08 c0       	rjmp	.+16     	; 0x77c6 <vfprintf+0x58e>
    77b6:	f2 e0       	ldi	r31, 0x02	; 2
    77b8:	af 0e       	add	r10, r31
    77ba:	b1 1c       	adc	r11, r1
    77bc:	f6 01       	movw	r30, r12
    77be:	60 81       	ld	r22, Z
    77c0:	71 81       	ldd	r23, Z+1	; 0x01
    77c2:	80 e0       	ldi	r24, 0x00	; 0
    77c4:	90 e0       	ldi	r25, 0x00	; 0
    77c6:	a3 01       	movw	r20, r6
    77c8:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <__ultoa_invert>
    77cc:	c8 2e       	mov	r12, r24
    77ce:	c6 18       	sub	r12, r6
    77d0:	0f 77       	andi	r16, 0x7F	; 127
    77d2:	90 2e       	mov	r9, r16
    77d4:	96 fe       	sbrs	r9, 6
    77d6:	0b c0       	rjmp	.+22     	; 0x77ee <vfprintf+0x5b6>
    77d8:	09 2d       	mov	r16, r9
    77da:	0e 7f       	andi	r16, 0xFE	; 254
    77dc:	c1 16       	cp	r12, r17
    77de:	50 f4       	brcc	.+20     	; 0x77f4 <vfprintf+0x5bc>
    77e0:	94 fe       	sbrs	r9, 4
    77e2:	0a c0       	rjmp	.+20     	; 0x77f8 <vfprintf+0x5c0>
    77e4:	92 fc       	sbrc	r9, 2
    77e6:	08 c0       	rjmp	.+16     	; 0x77f8 <vfprintf+0x5c0>
    77e8:	09 2d       	mov	r16, r9
    77ea:	0e 7e       	andi	r16, 0xEE	; 238
    77ec:	05 c0       	rjmp	.+10     	; 0x77f8 <vfprintf+0x5c0>
    77ee:	dc 2c       	mov	r13, r12
    77f0:	09 2d       	mov	r16, r9
    77f2:	03 c0       	rjmp	.+6      	; 0x77fa <vfprintf+0x5c2>
    77f4:	dc 2c       	mov	r13, r12
    77f6:	01 c0       	rjmp	.+2      	; 0x77fa <vfprintf+0x5c2>
    77f8:	d1 2e       	mov	r13, r17
    77fa:	04 ff       	sbrs	r16, 4
    77fc:	0d c0       	rjmp	.+26     	; 0x7818 <vfprintf+0x5e0>
    77fe:	fe 01       	movw	r30, r28
    7800:	ec 0d       	add	r30, r12
    7802:	f1 1d       	adc	r31, r1
    7804:	80 81       	ld	r24, Z
    7806:	80 33       	cpi	r24, 0x30	; 48
    7808:	11 f4       	brne	.+4      	; 0x780e <vfprintf+0x5d6>
    780a:	09 7e       	andi	r16, 0xE9	; 233
    780c:	09 c0       	rjmp	.+18     	; 0x7820 <vfprintf+0x5e8>
    780e:	02 ff       	sbrs	r16, 2
    7810:	06 c0       	rjmp	.+12     	; 0x781e <vfprintf+0x5e6>
    7812:	d3 94       	inc	r13
    7814:	d3 94       	inc	r13
    7816:	04 c0       	rjmp	.+8      	; 0x7820 <vfprintf+0x5e8>
    7818:	80 2f       	mov	r24, r16
    781a:	86 78       	andi	r24, 0x86	; 134
    781c:	09 f0       	breq	.+2      	; 0x7820 <vfprintf+0x5e8>
    781e:	d3 94       	inc	r13
    7820:	03 fd       	sbrc	r16, 3
    7822:	11 c0       	rjmp	.+34     	; 0x7846 <vfprintf+0x60e>
    7824:	00 ff       	sbrs	r16, 0
    7826:	06 c0       	rjmp	.+12     	; 0x7834 <vfprintf+0x5fc>
    7828:	1c 2d       	mov	r17, r12
    782a:	d5 14       	cp	r13, r5
    782c:	80 f4       	brcc	.+32     	; 0x784e <vfprintf+0x616>
    782e:	15 0d       	add	r17, r5
    7830:	1d 19       	sub	r17, r13
    7832:	0d c0       	rjmp	.+26     	; 0x784e <vfprintf+0x616>
    7834:	d5 14       	cp	r13, r5
    7836:	58 f4       	brcc	.+22     	; 0x784e <vfprintf+0x616>
    7838:	b7 01       	movw	r22, r14
    783a:	80 e2       	ldi	r24, 0x20	; 32
    783c:	90 e0       	ldi	r25, 0x00	; 0
    783e:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <fputc>
    7842:	d3 94       	inc	r13
    7844:	f7 cf       	rjmp	.-18     	; 0x7834 <vfprintf+0x5fc>
    7846:	d5 14       	cp	r13, r5
    7848:	10 f4       	brcc	.+4      	; 0x784e <vfprintf+0x616>
    784a:	5d 18       	sub	r5, r13
    784c:	01 c0       	rjmp	.+2      	; 0x7850 <vfprintf+0x618>
    784e:	51 2c       	mov	r5, r1
    7850:	04 ff       	sbrs	r16, 4
    7852:	10 c0       	rjmp	.+32     	; 0x7874 <vfprintf+0x63c>
    7854:	b7 01       	movw	r22, r14
    7856:	80 e3       	ldi	r24, 0x30	; 48
    7858:	90 e0       	ldi	r25, 0x00	; 0
    785a:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <fputc>
    785e:	02 ff       	sbrs	r16, 2
    7860:	17 c0       	rjmp	.+46     	; 0x7890 <vfprintf+0x658>
    7862:	01 fd       	sbrc	r16, 1
    7864:	03 c0       	rjmp	.+6      	; 0x786c <vfprintf+0x634>
    7866:	88 e7       	ldi	r24, 0x78	; 120
    7868:	90 e0       	ldi	r25, 0x00	; 0
    786a:	02 c0       	rjmp	.+4      	; 0x7870 <vfprintf+0x638>
    786c:	88 e5       	ldi	r24, 0x58	; 88
    786e:	90 e0       	ldi	r25, 0x00	; 0
    7870:	b7 01       	movw	r22, r14
    7872:	0c c0       	rjmp	.+24     	; 0x788c <vfprintf+0x654>
    7874:	80 2f       	mov	r24, r16
    7876:	86 78       	andi	r24, 0x86	; 134
    7878:	59 f0       	breq	.+22     	; 0x7890 <vfprintf+0x658>
    787a:	01 ff       	sbrs	r16, 1
    787c:	02 c0       	rjmp	.+4      	; 0x7882 <vfprintf+0x64a>
    787e:	8b e2       	ldi	r24, 0x2B	; 43
    7880:	01 c0       	rjmp	.+2      	; 0x7884 <vfprintf+0x64c>
    7882:	80 e2       	ldi	r24, 0x20	; 32
    7884:	07 fd       	sbrc	r16, 7
    7886:	8d e2       	ldi	r24, 0x2D	; 45
    7888:	b7 01       	movw	r22, r14
    788a:	90 e0       	ldi	r25, 0x00	; 0
    788c:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <fputc>
    7890:	c1 16       	cp	r12, r17
    7892:	38 f4       	brcc	.+14     	; 0x78a2 <vfprintf+0x66a>
    7894:	b7 01       	movw	r22, r14
    7896:	80 e3       	ldi	r24, 0x30	; 48
    7898:	90 e0       	ldi	r25, 0x00	; 0
    789a:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <fputc>
    789e:	11 50       	subi	r17, 0x01	; 1
    78a0:	f7 cf       	rjmp	.-18     	; 0x7890 <vfprintf+0x658>
    78a2:	ca 94       	dec	r12
    78a4:	f3 01       	movw	r30, r6
    78a6:	ec 0d       	add	r30, r12
    78a8:	f1 1d       	adc	r31, r1
    78aa:	80 81       	ld	r24, Z
    78ac:	b7 01       	movw	r22, r14
    78ae:	90 e0       	ldi	r25, 0x00	; 0
    78b0:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <fputc>
    78b4:	c1 10       	cpse	r12, r1
    78b6:	f5 cf       	rjmp	.-22     	; 0x78a2 <vfprintf+0x66a>
    78b8:	15 c0       	rjmp	.+42     	; 0x78e4 <vfprintf+0x6ac>
    78ba:	f4 e0       	ldi	r31, 0x04	; 4
    78bc:	f5 15       	cp	r31, r5
    78be:	60 f5       	brcc	.+88     	; 0x7918 <vfprintf+0x6e0>
    78c0:	84 e0       	ldi	r24, 0x04	; 4
    78c2:	58 1a       	sub	r5, r24
    78c4:	93 fe       	sbrs	r9, 3
    78c6:	1f c0       	rjmp	.+62     	; 0x7906 <vfprintf+0x6ce>
    78c8:	01 11       	cpse	r16, r1
    78ca:	27 c0       	rjmp	.+78     	; 0x791a <vfprintf+0x6e2>
    78cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    78ce:	23 ff       	sbrs	r18, 3
    78d0:	2a c0       	rjmp	.+84     	; 0x7926 <vfprintf+0x6ee>
    78d2:	00 e4       	ldi	r16, 0x40	; 64
    78d4:	12 e0       	ldi	r17, 0x02	; 2
    78d6:	39 2d       	mov	r19, r9
    78d8:	30 71       	andi	r19, 0x10	; 16
    78da:	93 2e       	mov	r9, r19
    78dc:	f8 01       	movw	r30, r16
    78de:	84 91       	lpm	r24, Z
    78e0:	81 11       	cpse	r24, r1
    78e2:	24 c0       	rjmp	.+72     	; 0x792c <vfprintf+0x6f4>
    78e4:	55 20       	and	r5, r5
    78e6:	09 f4       	brne	.+2      	; 0x78ea <vfprintf+0x6b2>
    78e8:	e4 cc       	rjmp	.-1592   	; 0x72b2 <vfprintf+0x7a>
    78ea:	b7 01       	movw	r22, r14
    78ec:	80 e2       	ldi	r24, 0x20	; 32
    78ee:	90 e0       	ldi	r25, 0x00	; 0
    78f0:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <fputc>
    78f4:	5a 94       	dec	r5
    78f6:	f6 cf       	rjmp	.-20     	; 0x78e4 <vfprintf+0x6ac>
    78f8:	f7 01       	movw	r30, r14
    78fa:	86 81       	ldd	r24, Z+6	; 0x06
    78fc:	97 81       	ldd	r25, Z+7	; 0x07
    78fe:	26 c0       	rjmp	.+76     	; 0x794c <vfprintf+0x714>
    7900:	8f ef       	ldi	r24, 0xFF	; 255
    7902:	9f ef       	ldi	r25, 0xFF	; 255
    7904:	23 c0       	rjmp	.+70     	; 0x794c <vfprintf+0x714>
    7906:	b7 01       	movw	r22, r14
    7908:	80 e2       	ldi	r24, 0x20	; 32
    790a:	90 e0       	ldi	r25, 0x00	; 0
    790c:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <fputc>
    7910:	5a 94       	dec	r5
    7912:	51 10       	cpse	r5, r1
    7914:	f8 cf       	rjmp	.-16     	; 0x7906 <vfprintf+0x6ce>
    7916:	d8 cf       	rjmp	.-80     	; 0x78c8 <vfprintf+0x690>
    7918:	51 2c       	mov	r5, r1
    791a:	b7 01       	movw	r22, r14
    791c:	80 2f       	mov	r24, r16
    791e:	90 e0       	ldi	r25, 0x00	; 0
    7920:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <fputc>
    7924:	d3 cf       	rjmp	.-90     	; 0x78cc <vfprintf+0x694>
    7926:	04 e4       	ldi	r16, 0x44	; 68
    7928:	12 e0       	ldi	r17, 0x02	; 2
    792a:	d5 cf       	rjmp	.-86     	; 0x78d6 <vfprintf+0x69e>
    792c:	91 10       	cpse	r9, r1
    792e:	80 52       	subi	r24, 0x20	; 32
    7930:	b7 01       	movw	r22, r14
    7932:	90 e0       	ldi	r25, 0x00	; 0
    7934:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <fputc>
    7938:	0f 5f       	subi	r16, 0xFF	; 255
    793a:	1f 4f       	sbci	r17, 0xFF	; 255
    793c:	cf cf       	rjmp	.-98     	; 0x78dc <vfprintf+0x6a4>
    793e:	23 e0       	ldi	r18, 0x03	; 3
    7940:	25 15       	cp	r18, r5
    7942:	10 f4       	brcc	.+4      	; 0x7948 <vfprintf+0x710>
    7944:	83 e0       	ldi	r24, 0x03	; 3
    7946:	bd cf       	rjmp	.-134    	; 0x78c2 <vfprintf+0x68a>
    7948:	51 2c       	mov	r5, r1
    794a:	c0 cf       	rjmp	.-128    	; 0x78cc <vfprintf+0x694>
    794c:	60 96       	adiw	r28, 0x10	; 16
    794e:	cd bf       	out	0x3d, r28	; 61
    7950:	de bf       	out	0x3e, r29	; 62
    7952:	df 91       	pop	r29
    7954:	cf 91       	pop	r28
    7956:	1f 91       	pop	r17
    7958:	0f 91       	pop	r16
    795a:	ff 90       	pop	r15
    795c:	ef 90       	pop	r14
    795e:	df 90       	pop	r13
    7960:	cf 90       	pop	r12
    7962:	bf 90       	pop	r11
    7964:	af 90       	pop	r10
    7966:	9f 90       	pop	r9
    7968:	8f 90       	pop	r8
    796a:	7f 90       	pop	r7
    796c:	6f 90       	pop	r6
    796e:	5f 90       	pop	r5
    7970:	4f 90       	pop	r4
    7972:	3f 90       	pop	r3
    7974:	2f 90       	pop	r2
    7976:	08 95       	ret

00007978 <__mulsi3>:
    7978:	db 01       	movw	r26, r22
    797a:	8f 93       	push	r24
    797c:	9f 93       	push	r25
    797e:	0e 94 d4 3c 	call	0x79a8	; 0x79a8 <__muluhisi3>
    7982:	bf 91       	pop	r27
    7984:	af 91       	pop	r26
    7986:	a2 9f       	mul	r26, r18
    7988:	80 0d       	add	r24, r0
    798a:	91 1d       	adc	r25, r1
    798c:	a3 9f       	mul	r26, r19
    798e:	90 0d       	add	r25, r0
    7990:	b2 9f       	mul	r27, r18
    7992:	90 0d       	add	r25, r0
    7994:	11 24       	eor	r1, r1
    7996:	08 95       	ret

00007998 <__tablejump2__>:
    7998:	ee 0f       	add	r30, r30
    799a:	ff 1f       	adc	r31, r31
    799c:	88 1f       	adc	r24, r24
    799e:	8b bf       	out	0x3b, r24	; 59
    79a0:	07 90       	elpm	r0, Z+
    79a2:	f6 91       	elpm	r31, Z
    79a4:	e0 2d       	mov	r30, r0
    79a6:	19 94       	eijmp

000079a8 <__muluhisi3>:
    79a8:	0e 94 df 3c 	call	0x79be	; 0x79be <__umulhisi3>
    79ac:	a5 9f       	mul	r26, r21
    79ae:	90 0d       	add	r25, r0
    79b0:	b4 9f       	mul	r27, r20
    79b2:	90 0d       	add	r25, r0
    79b4:	a4 9f       	mul	r26, r20
    79b6:	80 0d       	add	r24, r0
    79b8:	91 1d       	adc	r25, r1
    79ba:	11 24       	eor	r1, r1
    79bc:	08 95       	ret

000079be <__umulhisi3>:
    79be:	a2 9f       	mul	r26, r18
    79c0:	b0 01       	movw	r22, r0
    79c2:	b3 9f       	mul	r27, r19
    79c4:	c0 01       	movw	r24, r0
    79c6:	a3 9f       	mul	r26, r19
    79c8:	70 0d       	add	r23, r0
    79ca:	81 1d       	adc	r24, r1
    79cc:	11 24       	eor	r1, r1
    79ce:	91 1d       	adc	r25, r1
    79d0:	b2 9f       	mul	r27, r18
    79d2:	70 0d       	add	r23, r0
    79d4:	81 1d       	adc	r24, r1
    79d6:	11 24       	eor	r1, r1
    79d8:	91 1d       	adc	r25, r1
    79da:	08 95       	ret

000079dc <__ftoa_engine>:
    79dc:	28 30       	cpi	r18, 0x08	; 8
    79de:	08 f0       	brcs	.+2      	; 0x79e2 <__ftoa_engine+0x6>
    79e0:	27 e0       	ldi	r18, 0x07	; 7
    79e2:	33 27       	eor	r19, r19
    79e4:	da 01       	movw	r26, r20
    79e6:	99 0f       	add	r25, r25
    79e8:	31 1d       	adc	r19, r1
    79ea:	87 fd       	sbrc	r24, 7
    79ec:	91 60       	ori	r25, 0x01	; 1
    79ee:	00 96       	adiw	r24, 0x00	; 0
    79f0:	61 05       	cpc	r22, r1
    79f2:	71 05       	cpc	r23, r1
    79f4:	39 f4       	brne	.+14     	; 0x7a04 <__ftoa_engine+0x28>
    79f6:	32 60       	ori	r19, 0x02	; 2
    79f8:	2e 5f       	subi	r18, 0xFE	; 254
    79fa:	3d 93       	st	X+, r19
    79fc:	30 e3       	ldi	r19, 0x30	; 48
    79fe:	2a 95       	dec	r18
    7a00:	e1 f7       	brne	.-8      	; 0x79fa <__ftoa_engine+0x1e>
    7a02:	08 95       	ret
    7a04:	9f 3f       	cpi	r25, 0xFF	; 255
    7a06:	30 f0       	brcs	.+12     	; 0x7a14 <__ftoa_engine+0x38>
    7a08:	80 38       	cpi	r24, 0x80	; 128
    7a0a:	71 05       	cpc	r23, r1
    7a0c:	61 05       	cpc	r22, r1
    7a0e:	09 f0       	breq	.+2      	; 0x7a12 <__ftoa_engine+0x36>
    7a10:	3c 5f       	subi	r19, 0xFC	; 252
    7a12:	3c 5f       	subi	r19, 0xFC	; 252
    7a14:	3d 93       	st	X+, r19
    7a16:	91 30       	cpi	r25, 0x01	; 1
    7a18:	08 f0       	brcs	.+2      	; 0x7a1c <__ftoa_engine+0x40>
    7a1a:	80 68       	ori	r24, 0x80	; 128
    7a1c:	91 1d       	adc	r25, r1
    7a1e:	df 93       	push	r29
    7a20:	cf 93       	push	r28
    7a22:	1f 93       	push	r17
    7a24:	0f 93       	push	r16
    7a26:	ff 92       	push	r15
    7a28:	ef 92       	push	r14
    7a2a:	19 2f       	mov	r17, r25
    7a2c:	98 7f       	andi	r25, 0xF8	; 248
    7a2e:	96 95       	lsr	r25
    7a30:	e9 2f       	mov	r30, r25
    7a32:	96 95       	lsr	r25
    7a34:	96 95       	lsr	r25
    7a36:	e9 0f       	add	r30, r25
    7a38:	ff 27       	eor	r31, r31
    7a3a:	ee 55       	subi	r30, 0x5E	; 94
    7a3c:	fd 4f       	sbci	r31, 0xFD	; 253
    7a3e:	99 27       	eor	r25, r25
    7a40:	33 27       	eor	r19, r19
    7a42:	ee 24       	eor	r14, r14
    7a44:	ff 24       	eor	r15, r15
    7a46:	a7 01       	movw	r20, r14
    7a48:	e7 01       	movw	r28, r14
    7a4a:	05 90       	lpm	r0, Z+
    7a4c:	08 94       	sec
    7a4e:	07 94       	ror	r0
    7a50:	28 f4       	brcc	.+10     	; 0x7a5c <__ftoa_engine+0x80>
    7a52:	36 0f       	add	r19, r22
    7a54:	e7 1e       	adc	r14, r23
    7a56:	f8 1e       	adc	r15, r24
    7a58:	49 1f       	adc	r20, r25
    7a5a:	51 1d       	adc	r21, r1
    7a5c:	66 0f       	add	r22, r22
    7a5e:	77 1f       	adc	r23, r23
    7a60:	88 1f       	adc	r24, r24
    7a62:	99 1f       	adc	r25, r25
    7a64:	06 94       	lsr	r0
    7a66:	a1 f7       	brne	.-24     	; 0x7a50 <__ftoa_engine+0x74>
    7a68:	05 90       	lpm	r0, Z+
    7a6a:	07 94       	ror	r0
    7a6c:	28 f4       	brcc	.+10     	; 0x7a78 <__ftoa_engine+0x9c>
    7a6e:	e7 0e       	add	r14, r23
    7a70:	f8 1e       	adc	r15, r24
    7a72:	49 1f       	adc	r20, r25
    7a74:	56 1f       	adc	r21, r22
    7a76:	c1 1d       	adc	r28, r1
    7a78:	77 0f       	add	r23, r23
    7a7a:	88 1f       	adc	r24, r24
    7a7c:	99 1f       	adc	r25, r25
    7a7e:	66 1f       	adc	r22, r22
    7a80:	06 94       	lsr	r0
    7a82:	a1 f7       	brne	.-24     	; 0x7a6c <__ftoa_engine+0x90>
    7a84:	05 90       	lpm	r0, Z+
    7a86:	07 94       	ror	r0
    7a88:	28 f4       	brcc	.+10     	; 0x7a94 <__ftoa_engine+0xb8>
    7a8a:	f8 0e       	add	r15, r24
    7a8c:	49 1f       	adc	r20, r25
    7a8e:	56 1f       	adc	r21, r22
    7a90:	c7 1f       	adc	r28, r23
    7a92:	d1 1d       	adc	r29, r1
    7a94:	88 0f       	add	r24, r24
    7a96:	99 1f       	adc	r25, r25
    7a98:	66 1f       	adc	r22, r22
    7a9a:	77 1f       	adc	r23, r23
    7a9c:	06 94       	lsr	r0
    7a9e:	a1 f7       	brne	.-24     	; 0x7a88 <__ftoa_engine+0xac>
    7aa0:	05 90       	lpm	r0, Z+
    7aa2:	07 94       	ror	r0
    7aa4:	20 f4       	brcc	.+8      	; 0x7aae <__ftoa_engine+0xd2>
    7aa6:	49 0f       	add	r20, r25
    7aa8:	56 1f       	adc	r21, r22
    7aaa:	c7 1f       	adc	r28, r23
    7aac:	d8 1f       	adc	r29, r24
    7aae:	99 0f       	add	r25, r25
    7ab0:	66 1f       	adc	r22, r22
    7ab2:	77 1f       	adc	r23, r23
    7ab4:	88 1f       	adc	r24, r24
    7ab6:	06 94       	lsr	r0
    7ab8:	a9 f7       	brne	.-22     	; 0x7aa4 <__ftoa_engine+0xc8>
    7aba:	84 91       	lpm	r24, Z
    7abc:	10 95       	com	r17
    7abe:	17 70       	andi	r17, 0x07	; 7
    7ac0:	41 f0       	breq	.+16     	; 0x7ad2 <__ftoa_engine+0xf6>
    7ac2:	d6 95       	lsr	r29
    7ac4:	c7 95       	ror	r28
    7ac6:	57 95       	ror	r21
    7ac8:	47 95       	ror	r20
    7aca:	f7 94       	ror	r15
    7acc:	e7 94       	ror	r14
    7ace:	1a 95       	dec	r17
    7ad0:	c1 f7       	brne	.-16     	; 0x7ac2 <__ftoa_engine+0xe6>
    7ad2:	e8 e4       	ldi	r30, 0x48	; 72
    7ad4:	f2 e0       	ldi	r31, 0x02	; 2
    7ad6:	68 94       	set
    7ad8:	15 90       	lpm	r1, Z+
    7ada:	15 91       	lpm	r17, Z+
    7adc:	35 91       	lpm	r19, Z+
    7ade:	65 91       	lpm	r22, Z+
    7ae0:	95 91       	lpm	r25, Z+
    7ae2:	05 90       	lpm	r0, Z+
    7ae4:	7f e2       	ldi	r23, 0x2F	; 47
    7ae6:	73 95       	inc	r23
    7ae8:	e1 18       	sub	r14, r1
    7aea:	f1 0a       	sbc	r15, r17
    7aec:	43 0b       	sbc	r20, r19
    7aee:	56 0b       	sbc	r21, r22
    7af0:	c9 0b       	sbc	r28, r25
    7af2:	d0 09       	sbc	r29, r0
    7af4:	c0 f7       	brcc	.-16     	; 0x7ae6 <__ftoa_engine+0x10a>
    7af6:	e1 0c       	add	r14, r1
    7af8:	f1 1e       	adc	r15, r17
    7afa:	43 1f       	adc	r20, r19
    7afc:	56 1f       	adc	r21, r22
    7afe:	c9 1f       	adc	r28, r25
    7b00:	d0 1d       	adc	r29, r0
    7b02:	7e f4       	brtc	.+30     	; 0x7b22 <__ftoa_engine+0x146>
    7b04:	70 33       	cpi	r23, 0x30	; 48
    7b06:	11 f4       	brne	.+4      	; 0x7b0c <__ftoa_engine+0x130>
    7b08:	8a 95       	dec	r24
    7b0a:	e6 cf       	rjmp	.-52     	; 0x7ad8 <__ftoa_engine+0xfc>
    7b0c:	e8 94       	clt
    7b0e:	01 50       	subi	r16, 0x01	; 1
    7b10:	30 f0       	brcs	.+12     	; 0x7b1e <__ftoa_engine+0x142>
    7b12:	08 0f       	add	r16, r24
    7b14:	0a f4       	brpl	.+2      	; 0x7b18 <__ftoa_engine+0x13c>
    7b16:	00 27       	eor	r16, r16
    7b18:	02 17       	cp	r16, r18
    7b1a:	08 f4       	brcc	.+2      	; 0x7b1e <__ftoa_engine+0x142>
    7b1c:	20 2f       	mov	r18, r16
    7b1e:	23 95       	inc	r18
    7b20:	02 2f       	mov	r16, r18
    7b22:	7a 33       	cpi	r23, 0x3A	; 58
    7b24:	28 f0       	brcs	.+10     	; 0x7b30 <__ftoa_engine+0x154>
    7b26:	79 e3       	ldi	r23, 0x39	; 57
    7b28:	7d 93       	st	X+, r23
    7b2a:	2a 95       	dec	r18
    7b2c:	e9 f7       	brne	.-6      	; 0x7b28 <__ftoa_engine+0x14c>
    7b2e:	10 c0       	rjmp	.+32     	; 0x7b50 <__ftoa_engine+0x174>
    7b30:	7d 93       	st	X+, r23
    7b32:	2a 95       	dec	r18
    7b34:	89 f6       	brne	.-94     	; 0x7ad8 <__ftoa_engine+0xfc>
    7b36:	06 94       	lsr	r0
    7b38:	97 95       	ror	r25
    7b3a:	67 95       	ror	r22
    7b3c:	37 95       	ror	r19
    7b3e:	17 95       	ror	r17
    7b40:	17 94       	ror	r1
    7b42:	e1 18       	sub	r14, r1
    7b44:	f1 0a       	sbc	r15, r17
    7b46:	43 0b       	sbc	r20, r19
    7b48:	56 0b       	sbc	r21, r22
    7b4a:	c9 0b       	sbc	r28, r25
    7b4c:	d0 09       	sbc	r29, r0
    7b4e:	98 f0       	brcs	.+38     	; 0x7b76 <__ftoa_engine+0x19a>
    7b50:	23 95       	inc	r18
    7b52:	7e 91       	ld	r23, -X
    7b54:	73 95       	inc	r23
    7b56:	7a 33       	cpi	r23, 0x3A	; 58
    7b58:	08 f0       	brcs	.+2      	; 0x7b5c <__ftoa_engine+0x180>
    7b5a:	70 e3       	ldi	r23, 0x30	; 48
    7b5c:	7c 93       	st	X, r23
    7b5e:	20 13       	cpse	r18, r16
    7b60:	b8 f7       	brcc	.-18     	; 0x7b50 <__ftoa_engine+0x174>
    7b62:	7e 91       	ld	r23, -X
    7b64:	70 61       	ori	r23, 0x10	; 16
    7b66:	7d 93       	st	X+, r23
    7b68:	30 f0       	brcs	.+12     	; 0x7b76 <__ftoa_engine+0x19a>
    7b6a:	83 95       	inc	r24
    7b6c:	71 e3       	ldi	r23, 0x31	; 49
    7b6e:	7d 93       	st	X+, r23
    7b70:	70 e3       	ldi	r23, 0x30	; 48
    7b72:	2a 95       	dec	r18
    7b74:	e1 f7       	brne	.-8      	; 0x7b6e <__ftoa_engine+0x192>
    7b76:	11 24       	eor	r1, r1
    7b78:	ef 90       	pop	r14
    7b7a:	ff 90       	pop	r15
    7b7c:	0f 91       	pop	r16
    7b7e:	1f 91       	pop	r17
    7b80:	cf 91       	pop	r28
    7b82:	df 91       	pop	r29
    7b84:	99 27       	eor	r25, r25
    7b86:	87 fd       	sbrc	r24, 7
    7b88:	90 95       	com	r25
    7b8a:	08 95       	ret

00007b8c <strnlen_P>:
    7b8c:	fc 01       	movw	r30, r24
    7b8e:	05 90       	lpm	r0, Z+
    7b90:	61 50       	subi	r22, 0x01	; 1
    7b92:	70 40       	sbci	r23, 0x00	; 0
    7b94:	01 10       	cpse	r0, r1
    7b96:	d8 f7       	brcc	.-10     	; 0x7b8e <strnlen_P+0x2>
    7b98:	80 95       	com	r24
    7b9a:	90 95       	com	r25
    7b9c:	8e 0f       	add	r24, r30
    7b9e:	9f 1f       	adc	r25, r31
    7ba0:	08 95       	ret

00007ba2 <memcpy>:
    7ba2:	fb 01       	movw	r30, r22
    7ba4:	dc 01       	movw	r26, r24
    7ba6:	02 c0       	rjmp	.+4      	; 0x7bac <memcpy+0xa>
    7ba8:	01 90       	ld	r0, Z+
    7baa:	0d 92       	st	X+, r0
    7bac:	41 50       	subi	r20, 0x01	; 1
    7bae:	50 40       	sbci	r21, 0x00	; 0
    7bb0:	d8 f7       	brcc	.-10     	; 0x7ba8 <memcpy+0x6>
    7bb2:	08 95       	ret

00007bb4 <memset>:
    7bb4:	dc 01       	movw	r26, r24
    7bb6:	01 c0       	rjmp	.+2      	; 0x7bba <memset+0x6>
    7bb8:	6d 93       	st	X+, r22
    7bba:	41 50       	subi	r20, 0x01	; 1
    7bbc:	50 40       	sbci	r21, 0x00	; 0
    7bbe:	e0 f7       	brcc	.-8      	; 0x7bb8 <memset+0x4>
    7bc0:	08 95       	ret

00007bc2 <strlen>:
    7bc2:	fc 01       	movw	r30, r24
    7bc4:	01 90       	ld	r0, Z+
    7bc6:	00 20       	and	r0, r0
    7bc8:	e9 f7       	brne	.-6      	; 0x7bc4 <strlen+0x2>
    7bca:	80 95       	com	r24
    7bcc:	90 95       	com	r25
    7bce:	8e 0f       	add	r24, r30
    7bd0:	9f 1f       	adc	r25, r31
    7bd2:	08 95       	ret

00007bd4 <strnlen>:
    7bd4:	fc 01       	movw	r30, r24
    7bd6:	61 50       	subi	r22, 0x01	; 1
    7bd8:	70 40       	sbci	r23, 0x00	; 0
    7bda:	01 90       	ld	r0, Z+
    7bdc:	01 10       	cpse	r0, r1
    7bde:	d8 f7       	brcc	.-10     	; 0x7bd6 <strnlen+0x2>
    7be0:	80 95       	com	r24
    7be2:	90 95       	com	r25
    7be4:	8e 0f       	add	r24, r30
    7be6:	9f 1f       	adc	r25, r31
    7be8:	08 95       	ret

00007bea <itoa>:
    7bea:	45 32       	cpi	r20, 0x25	; 37
    7bec:	51 05       	cpc	r21, r1
    7bee:	20 f4       	brcc	.+8      	; 0x7bf8 <itoa+0xe>
    7bf0:	42 30       	cpi	r20, 0x02	; 2
    7bf2:	10 f0       	brcs	.+4      	; 0x7bf8 <itoa+0xe>
    7bf4:	0c 94 00 3e 	jmp	0x7c00	; 0x7c00 <__itoa_ncheck>
    7bf8:	fb 01       	movw	r30, r22
    7bfa:	10 82       	st	Z, r1
    7bfc:	cb 01       	movw	r24, r22
    7bfe:	08 95       	ret

00007c00 <__itoa_ncheck>:
    7c00:	bb 27       	eor	r27, r27
    7c02:	4a 30       	cpi	r20, 0x0A	; 10
    7c04:	31 f4       	brne	.+12     	; 0x7c12 <__itoa_ncheck+0x12>
    7c06:	99 23       	and	r25, r25
    7c08:	22 f4       	brpl	.+8      	; 0x7c12 <__itoa_ncheck+0x12>
    7c0a:	bd e2       	ldi	r27, 0x2D	; 45
    7c0c:	90 95       	com	r25
    7c0e:	81 95       	neg	r24
    7c10:	9f 4f       	sbci	r25, 0xFF	; 255
    7c12:	0c 94 0c 3e 	jmp	0x7c18	; 0x7c18 <__utoa_common>

00007c16 <__utoa_ncheck>:
    7c16:	bb 27       	eor	r27, r27

00007c18 <__utoa_common>:
    7c18:	fb 01       	movw	r30, r22
    7c1a:	55 27       	eor	r21, r21
    7c1c:	aa 27       	eor	r26, r26
    7c1e:	88 0f       	add	r24, r24
    7c20:	99 1f       	adc	r25, r25
    7c22:	aa 1f       	adc	r26, r26
    7c24:	a4 17       	cp	r26, r20
    7c26:	10 f0       	brcs	.+4      	; 0x7c2c <__utoa_common+0x14>
    7c28:	a4 1b       	sub	r26, r20
    7c2a:	83 95       	inc	r24
    7c2c:	50 51       	subi	r21, 0x10	; 16
    7c2e:	b9 f7       	brne	.-18     	; 0x7c1e <__utoa_common+0x6>
    7c30:	a0 5d       	subi	r26, 0xD0	; 208
    7c32:	aa 33       	cpi	r26, 0x3A	; 58
    7c34:	08 f0       	brcs	.+2      	; 0x7c38 <__utoa_common+0x20>
    7c36:	a9 5d       	subi	r26, 0xD9	; 217
    7c38:	a1 93       	st	Z+, r26
    7c3a:	00 97       	sbiw	r24, 0x00	; 0
    7c3c:	79 f7       	brne	.-34     	; 0x7c1c <__utoa_common+0x4>
    7c3e:	b1 11       	cpse	r27, r1
    7c40:	b1 93       	st	Z+, r27
    7c42:	11 92       	st	Z+, r1
    7c44:	cb 01       	movw	r24, r22
    7c46:	0c 94 e8 3e 	jmp	0x7dd0	; 0x7dd0 <strrev>

00007c4a <fputc>:
    7c4a:	0f 93       	push	r16
    7c4c:	1f 93       	push	r17
    7c4e:	cf 93       	push	r28
    7c50:	df 93       	push	r29
    7c52:	fb 01       	movw	r30, r22
    7c54:	23 81       	ldd	r18, Z+3	; 0x03
    7c56:	21 fd       	sbrc	r18, 1
    7c58:	03 c0       	rjmp	.+6      	; 0x7c60 <fputc+0x16>
    7c5a:	8f ef       	ldi	r24, 0xFF	; 255
    7c5c:	9f ef       	ldi	r25, 0xFF	; 255
    7c5e:	2c c0       	rjmp	.+88     	; 0x7cb8 <fputc+0x6e>
    7c60:	22 ff       	sbrs	r18, 2
    7c62:	16 c0       	rjmp	.+44     	; 0x7c90 <fputc+0x46>
    7c64:	46 81       	ldd	r20, Z+6	; 0x06
    7c66:	57 81       	ldd	r21, Z+7	; 0x07
    7c68:	24 81       	ldd	r18, Z+4	; 0x04
    7c6a:	35 81       	ldd	r19, Z+5	; 0x05
    7c6c:	42 17       	cp	r20, r18
    7c6e:	53 07       	cpc	r21, r19
    7c70:	44 f4       	brge	.+16     	; 0x7c82 <fputc+0x38>
    7c72:	a0 81       	ld	r26, Z
    7c74:	b1 81       	ldd	r27, Z+1	; 0x01
    7c76:	9d 01       	movw	r18, r26
    7c78:	2f 5f       	subi	r18, 0xFF	; 255
    7c7a:	3f 4f       	sbci	r19, 0xFF	; 255
    7c7c:	20 83       	st	Z, r18
    7c7e:	31 83       	std	Z+1, r19	; 0x01
    7c80:	8c 93       	st	X, r24
    7c82:	26 81       	ldd	r18, Z+6	; 0x06
    7c84:	37 81       	ldd	r19, Z+7	; 0x07
    7c86:	2f 5f       	subi	r18, 0xFF	; 255
    7c88:	3f 4f       	sbci	r19, 0xFF	; 255
    7c8a:	26 83       	std	Z+6, r18	; 0x06
    7c8c:	37 83       	std	Z+7, r19	; 0x07
    7c8e:	14 c0       	rjmp	.+40     	; 0x7cb8 <fputc+0x6e>
    7c90:	8b 01       	movw	r16, r22
    7c92:	ec 01       	movw	r28, r24
    7c94:	fb 01       	movw	r30, r22
    7c96:	00 84       	ldd	r0, Z+8	; 0x08
    7c98:	f1 85       	ldd	r31, Z+9	; 0x09
    7c9a:	e0 2d       	mov	r30, r0
    7c9c:	19 95       	eicall
    7c9e:	89 2b       	or	r24, r25
    7ca0:	e1 f6       	brne	.-72     	; 0x7c5a <fputc+0x10>
    7ca2:	d8 01       	movw	r26, r16
    7ca4:	16 96       	adiw	r26, 0x06	; 6
    7ca6:	8d 91       	ld	r24, X+
    7ca8:	9c 91       	ld	r25, X
    7caa:	17 97       	sbiw	r26, 0x07	; 7
    7cac:	01 96       	adiw	r24, 0x01	; 1
    7cae:	16 96       	adiw	r26, 0x06	; 6
    7cb0:	8d 93       	st	X+, r24
    7cb2:	9c 93       	st	X, r25
    7cb4:	17 97       	sbiw	r26, 0x07	; 7
    7cb6:	ce 01       	movw	r24, r28
    7cb8:	df 91       	pop	r29
    7cba:	cf 91       	pop	r28
    7cbc:	1f 91       	pop	r17
    7cbe:	0f 91       	pop	r16
    7cc0:	08 95       	ret

00007cc2 <sprintf>:
    7cc2:	0f 93       	push	r16
    7cc4:	1f 93       	push	r17
    7cc6:	cf 93       	push	r28
    7cc8:	df 93       	push	r29
    7cca:	cd b7       	in	r28, 0x3d	; 61
    7ccc:	de b7       	in	r29, 0x3e	; 62
    7cce:	2e 97       	sbiw	r28, 0x0e	; 14
    7cd0:	cd bf       	out	0x3d, r28	; 61
    7cd2:	de bf       	out	0x3e, r29	; 62
    7cd4:	0e 89       	ldd	r16, Y+22	; 0x16
    7cd6:	1f 89       	ldd	r17, Y+23	; 0x17
    7cd8:	86 e0       	ldi	r24, 0x06	; 6
    7cda:	8c 83       	std	Y+4, r24	; 0x04
    7cdc:	09 83       	std	Y+1, r16	; 0x01
    7cde:	1a 83       	std	Y+2, r17	; 0x02
    7ce0:	8f ef       	ldi	r24, 0xFF	; 255
    7ce2:	9f e7       	ldi	r25, 0x7F	; 127
    7ce4:	8d 83       	std	Y+5, r24	; 0x05
    7ce6:	9e 83       	std	Y+6, r25	; 0x06
    7ce8:	ae 01       	movw	r20, r28
    7cea:	46 5e       	subi	r20, 0xE6	; 230
    7cec:	5f 4f       	sbci	r21, 0xFF	; 255
    7cee:	68 8d       	ldd	r22, Y+24	; 0x18
    7cf0:	79 8d       	ldd	r23, Y+25	; 0x19
    7cf2:	ce 01       	movw	r24, r28
    7cf4:	01 96       	adiw	r24, 0x01	; 1
    7cf6:	0e 94 1c 39 	call	0x7238	; 0x7238 <vfprintf>
    7cfa:	ef 81       	ldd	r30, Y+7	; 0x07
    7cfc:	f8 85       	ldd	r31, Y+8	; 0x08
    7cfe:	e0 0f       	add	r30, r16
    7d00:	f1 1f       	adc	r31, r17
    7d02:	10 82       	st	Z, r1
    7d04:	2e 96       	adiw	r28, 0x0e	; 14
    7d06:	cd bf       	out	0x3d, r28	; 61
    7d08:	de bf       	out	0x3e, r29	; 62
    7d0a:	df 91       	pop	r29
    7d0c:	cf 91       	pop	r28
    7d0e:	1f 91       	pop	r17
    7d10:	0f 91       	pop	r16
    7d12:	08 95       	ret

00007d14 <__ultoa_invert>:
    7d14:	fa 01       	movw	r30, r20
    7d16:	aa 27       	eor	r26, r26
    7d18:	28 30       	cpi	r18, 0x08	; 8
    7d1a:	51 f1       	breq	.+84     	; 0x7d70 <__ultoa_invert+0x5c>
    7d1c:	20 31       	cpi	r18, 0x10	; 16
    7d1e:	81 f1       	breq	.+96     	; 0x7d80 <__ultoa_invert+0x6c>
    7d20:	e8 94       	clt
    7d22:	6f 93       	push	r22
    7d24:	6e 7f       	andi	r22, 0xFE	; 254
    7d26:	6e 5f       	subi	r22, 0xFE	; 254
    7d28:	7f 4f       	sbci	r23, 0xFF	; 255
    7d2a:	8f 4f       	sbci	r24, 0xFF	; 255
    7d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    7d2e:	af 4f       	sbci	r26, 0xFF	; 255
    7d30:	b1 e0       	ldi	r27, 0x01	; 1
    7d32:	3e d0       	rcall	.+124    	; 0x7db0 <__ultoa_invert+0x9c>
    7d34:	b4 e0       	ldi	r27, 0x04	; 4
    7d36:	3c d0       	rcall	.+120    	; 0x7db0 <__ultoa_invert+0x9c>
    7d38:	67 0f       	add	r22, r23
    7d3a:	78 1f       	adc	r23, r24
    7d3c:	89 1f       	adc	r24, r25
    7d3e:	9a 1f       	adc	r25, r26
    7d40:	a1 1d       	adc	r26, r1
    7d42:	68 0f       	add	r22, r24
    7d44:	79 1f       	adc	r23, r25
    7d46:	8a 1f       	adc	r24, r26
    7d48:	91 1d       	adc	r25, r1
    7d4a:	a1 1d       	adc	r26, r1
    7d4c:	6a 0f       	add	r22, r26
    7d4e:	71 1d       	adc	r23, r1
    7d50:	81 1d       	adc	r24, r1
    7d52:	91 1d       	adc	r25, r1
    7d54:	a1 1d       	adc	r26, r1
    7d56:	20 d0       	rcall	.+64     	; 0x7d98 <__ultoa_invert+0x84>
    7d58:	09 f4       	brne	.+2      	; 0x7d5c <__ultoa_invert+0x48>
    7d5a:	68 94       	set
    7d5c:	3f 91       	pop	r19
    7d5e:	2a e0       	ldi	r18, 0x0A	; 10
    7d60:	26 9f       	mul	r18, r22
    7d62:	11 24       	eor	r1, r1
    7d64:	30 19       	sub	r19, r0
    7d66:	30 5d       	subi	r19, 0xD0	; 208
    7d68:	31 93       	st	Z+, r19
    7d6a:	de f6       	brtc	.-74     	; 0x7d22 <__ultoa_invert+0xe>
    7d6c:	cf 01       	movw	r24, r30
    7d6e:	08 95       	ret
    7d70:	46 2f       	mov	r20, r22
    7d72:	47 70       	andi	r20, 0x07	; 7
    7d74:	40 5d       	subi	r20, 0xD0	; 208
    7d76:	41 93       	st	Z+, r20
    7d78:	b3 e0       	ldi	r27, 0x03	; 3
    7d7a:	0f d0       	rcall	.+30     	; 0x7d9a <__ultoa_invert+0x86>
    7d7c:	c9 f7       	brne	.-14     	; 0x7d70 <__ultoa_invert+0x5c>
    7d7e:	f6 cf       	rjmp	.-20     	; 0x7d6c <__ultoa_invert+0x58>
    7d80:	46 2f       	mov	r20, r22
    7d82:	4f 70       	andi	r20, 0x0F	; 15
    7d84:	40 5d       	subi	r20, 0xD0	; 208
    7d86:	4a 33       	cpi	r20, 0x3A	; 58
    7d88:	18 f0       	brcs	.+6      	; 0x7d90 <__ultoa_invert+0x7c>
    7d8a:	49 5d       	subi	r20, 0xD9	; 217
    7d8c:	31 fd       	sbrc	r19, 1
    7d8e:	40 52       	subi	r20, 0x20	; 32
    7d90:	41 93       	st	Z+, r20
    7d92:	02 d0       	rcall	.+4      	; 0x7d98 <__ultoa_invert+0x84>
    7d94:	a9 f7       	brne	.-22     	; 0x7d80 <__ultoa_invert+0x6c>
    7d96:	ea cf       	rjmp	.-44     	; 0x7d6c <__ultoa_invert+0x58>
    7d98:	b4 e0       	ldi	r27, 0x04	; 4
    7d9a:	a6 95       	lsr	r26
    7d9c:	97 95       	ror	r25
    7d9e:	87 95       	ror	r24
    7da0:	77 95       	ror	r23
    7da2:	67 95       	ror	r22
    7da4:	ba 95       	dec	r27
    7da6:	c9 f7       	brne	.-14     	; 0x7d9a <__ultoa_invert+0x86>
    7da8:	00 97       	sbiw	r24, 0x00	; 0
    7daa:	61 05       	cpc	r22, r1
    7dac:	71 05       	cpc	r23, r1
    7dae:	08 95       	ret
    7db0:	9b 01       	movw	r18, r22
    7db2:	ac 01       	movw	r20, r24
    7db4:	0a 2e       	mov	r0, r26
    7db6:	06 94       	lsr	r0
    7db8:	57 95       	ror	r21
    7dba:	47 95       	ror	r20
    7dbc:	37 95       	ror	r19
    7dbe:	27 95       	ror	r18
    7dc0:	ba 95       	dec	r27
    7dc2:	c9 f7       	brne	.-14     	; 0x7db6 <__ultoa_invert+0xa2>
    7dc4:	62 0f       	add	r22, r18
    7dc6:	73 1f       	adc	r23, r19
    7dc8:	84 1f       	adc	r24, r20
    7dca:	95 1f       	adc	r25, r21
    7dcc:	a0 1d       	adc	r26, r0
    7dce:	08 95       	ret

00007dd0 <strrev>:
    7dd0:	dc 01       	movw	r26, r24
    7dd2:	fc 01       	movw	r30, r24
    7dd4:	67 2f       	mov	r22, r23
    7dd6:	71 91       	ld	r23, Z+
    7dd8:	77 23       	and	r23, r23
    7dda:	e1 f7       	brne	.-8      	; 0x7dd4 <strrev+0x4>
    7ddc:	32 97       	sbiw	r30, 0x02	; 2
    7dde:	04 c0       	rjmp	.+8      	; 0x7de8 <strrev+0x18>
    7de0:	7c 91       	ld	r23, X
    7de2:	6d 93       	st	X+, r22
    7de4:	70 83       	st	Z, r23
    7de6:	62 91       	ld	r22, -Z
    7de8:	ae 17       	cp	r26, r30
    7dea:	bf 07       	cpc	r27, r31
    7dec:	c8 f3       	brcs	.-14     	; 0x7de0 <strrev+0x10>
    7dee:	08 95       	ret

00007df0 <_exit>:
    7df0:	f8 94       	cli

00007df2 <__stop_program>:
    7df2:	ff cf       	rjmp	.-2      	; 0x7df2 <__stop_program>
